<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>运维</title>
    <url>/2020/05/%E8%BF%90%E7%BB%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  作为在运维领域工作了10多年的我来说。经历了中国互联网的高速发展，也经历了运维工作的从小到大的规模变化。<br>从基础的网线水晶头做起。一直到现在云计算、大数据、DevOps、容器云等层出不穷的技术。<br>俗话说万变不离其宗。这个宗旨应该是对运维资源成本的考量。<br>当运维粒度为服务器时存在大量计算资源被浪费。每个企业各自为政，自己建IDC。有大量的计算资源被闲置，IT成本居高不下。因此催生了虚拟化技术。<br>当以虚拟机为颗粒度，云计算的概念被提出。云计算对资源进行了整合提出了按量计费模式。不过虚拟化中也存在大量主机负载不足的问题。还有就是虚拟化过程中存在性能损耗。<br>很快容器(资源隔离进程)的概念被提出。容器减少了负载不足的问题，也解决了虚拟化的性能损耗，同时也增加运维复杂度。<br>随着容器的普及。serverless、云原生的概念又兴起。提出以应用为中心，以云函数、云存储的方式对外提供服务。<br>运维颗粒度在运维的发展中不断变细。使得运维的效率不断的提升。同时也深化了运维的技术深度。<br>以资源利用为轴线持续的细化下去，可以理解运维为什么是这样的发展过程。</p>
<p>总结起来运维工作需要从以下几个维度来看。<br>首先是运维规模，运维规模大小决定运维工作的侧重点不同。运维规模小侧重业务服务运维层级不清晰。运维规模大侧重于精细运维层级清晰。目前的业内的水平大概是百台/人配置。<br>其次是运维粒度，运维颗粒度越细运维工作量越大。从简单的服务器上下架到SRE。运维所需技术和精力也越来越多。人力成本也随之上升，业内提出了AIops。<br>再者是运维成本，当设备资源的投入远大于业务规模时，运维工作也会变得简单些。发生不稳定的可能性越低。比如银行、政府的运维工作相对来说要轻松的多。<br>还有就是业务系统迭代速度，现在都流行敏捷开发，对运维的要求也越来越高。为了适应敏捷开发 devops 的概念也逐渐兴起。</p>
<p>衡量运维系统的好坏，可以通过以下指标来衡量。<br>  稳定性  (系统数/总系统数 x 总发生故障时间 /总服务时间) 在实际应用中几个9的服务保障往往有些严苛。有些服务不需要那么高的保障。否则会存在大量人力、资源浪费。<br>  伸缩性 （资源增量/资源总量 x 所需时间/总服务时间）) 资源扩展的速度越快，系统伸缩性越高。<br>  可维护性 (设备总量/总维护人数) </p>
<h2 id><a href="#" class="headerlink" title></a><a href="/2020/06/%E4%B8%80%E7%AB%99%E5%BC%8F%E8%BF%90%E7%BB%B4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" title="一站式运维环境搭建">一站式运维环境搭建</a></h2><ul>
<li><a href="/2020/05/%E7%BD%91%E7%BB%9C%E7%BB%B4%E6%8A%A4/" title="网络维护">网络维护</a>
</li>
<li><a href="/2020/05/%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/" title="系统维护">系统维护</a>
</li>
<li><a href="/2020/05/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7/" title="运维监控">运维监控</a>
</li>
<li><a href="/2020/05/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/" title="运维自动化">运维自动化</a>
</li>
<li><a href="/2020/05/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/" title="运维开发">运维开发</a>
</li>
<li><a href="/2020/05/DevOps/" title="DevOps">DevOps</a>
</li>
<li><a href="/2020/05/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/" title="容器技术">容器技术</a>
</li>
<li><a href="/2020/05/%E4%BA%91%E8%AE%A1%E7%AE%97/" title="云计算">云计算</a>
</li>
<li>
</li>
<li><a href="/2020/05/AIops/" title="AIops">AIops</a>
</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>AwesomeNavigation</title>
    <url>/2020/05/AwesomeNavigation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="运维站点"><a href="#运维站点" class="headerlink" title="运维站点"></a>运维站点</h2><ul>
<li><a href="https://www.infoq.cn/topic/operation" target="_blank" rel="noopener">InfoQ</a></li>
<li><a href="http://www.178linux.com/" target="_blank" rel="noopener">Linux 运维部落</a></li>
<li><a href="https://linuxtools-rst.readthedocs.io/" target="_blank" rel="noopener">Linux 工具快速教程</a></li>
<li><a href="https://jimmysong.io/kubernetes-handbook/" target="_blank" rel="noopener">云原生部落</a></li>
<li><a href="https://www.processon.com/" target="_blank" rel="noopener">ProcessOn</a></li>
</ul>
<h2 id="网站资源"><a href="#网站资源" class="headerlink" title="网站资源"></a>网站资源</h2><ul>
<li><a href="https://access.redhat.com/documentation/en-us/" target="_blank" rel="noopener"> Red Hat Container Development  </a></li>
<li><a href="https://edu.aliyun.com/developer" target="_blank" rel="noopener">ali online courses</a></li>
<li><a href="https://e.huawei.com/cn/material/MaterialList" target="_blank" rel="noopener">HUAWEI</a></li>
<li><a href="https://mirror.tuna.tsinghua.edu.cn/help/alpine/" target="_blank" rel="noopener">清华大学开源软件镜像站</a></li>
</ul>
<h2 id="Awesome"><a href="#Awesome" class="headerlink" title="Awesome"></a>Awesome</h2><ul>
<li><a href="https://www.kcsou.com/s_kubesphere/" target="_blank" rel="noopener">课程搜</a></li>
<li><a href="https://github.com/prakhar1989/awesome-courses#algorithms" target="_blank" rel="noopener">CS Courses</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="noopener">architect</a></li>
<li><a href="https://github.com/awesome-selfhosted/awesome-selfhosted" target="_blank" rel="noopener">selfhosted</a></li>
</ul>
<h2 id="各种语言项目"><a href="#各种语言项目" class="headerlink" title="各种语言项目"></a>各种语言项目</h2><ul>
<li><a href="https://github.com/fffaraz/awesome-cpp" target="_blank" rel="noopener">cpp</a></li>
<li><a href="https://github.com/akullpp/awesome-java" target="_blank" rel="noopener">java</a></li>
<li><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">python </a></li>
<li><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="noopener">python-cn</a></li>
<li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">go</a></li>
<li><a href="https://github.com/sindresorhus/awesome-nodejs" target="_blank" rel="noopener">nodejs</a></li>
<li><a href="https://github.com/sorrycc/awesome-javascript" target="_blank" rel="noopener">javascript</a></li>
<li><a href="https://github.com/alebcay/awesome-shell" target="_blank" rel="noopener">shell</a></li>
<li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">vue</a></li>
<li><a href="http://c.biancheng.net/c/" target="_blank" rel="noopener">C语言入门</a></li>
</ul>
<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><ul>
<li><a href="https://github.com/josephmisiti/awesome-machine-learning" target="_blank" rel="noopener">machine-learning</a></li>
<li><a href="https://github.com/MaximAbramchuck/awesome-interview-questions" target="_blank" rel="noopener">interview-questions</a></li>
</ul>
<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul>
<li><a href="https://github.com/Hack-with-Github/Awesome-Hacking" target="_blank" rel="noopener">Hacking</a></li>
<li><a href="https://github.com/kahun/awesome-sysadmin" target="_blank" rel="noopener">sysadmin</a></li>
<li><a href="https://github.com/veggiemonk/awesome-docker" target="_blank" rel="noopener">docker</a></li>
<li><a href="https://man.linuxde.net/" target="_blank" rel="noopener">Linux 命令大全</a></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://github.com/jaywcjlove/awesome-mac" target="_blank" rel="noopener">mac</a></li>
<li><a href="https://github.com/herrbischoff/awesome-macos-command-line" target="_blank" rel="noopener">macos-command-line</a></li>
<li><a href="https://github.com/viatsko/awesome-vscode" target="_blank" rel="noopener">vscode</a></li>
<li><a href="https://github.com/fighting41love/funNLP" target="_blank" rel="noopener">funNLP</a></li>
</ul>
<h2 id="软件排行榜"><a href="#软件排行榜" class="headerlink" title="软件排行榜"></a>软件排行榜</h2><ul>
<li><a href="http://xiazai.zol.com.cn/download_order/soft_order.html" target="_blank" rel="noopener">windows 软件排行榜</a></li>
<li><a href="https://www.qimai.cn/rank" target="_blank" rel="noopener">android软件排行榜-国内</a></li>
<li><a href="https://play.google.com/store/apps/top?hl=zh" target="_blank" rel="noopener">android软件排行榜-国外</a></li>
<li><a href="https://www.applehunt.com/top/ios-apps" target="_blank" rel="noopener">ios 软件排行榜</a></li>
<li><a href="https://www.chandashi.com/ranking/index.html" target="_blank" rel="noopener">ios 软件排行榜</a></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>awesome</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo安装配置</title>
    <url>/2020/05/hexo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo-安装使用"><a href="#hexo-安装使用" class="headerlink" title="hexo 安装使用"></a>hexo 安装使用</h1><blockquote>
<p>hexo 功能很多很完善。样式比自己写的好的多。为了快速构建，还是选用了 hexo。<br>话不多说，直接上干货。</p>
</blockquote>
<h2 id="nodejs-安装"><a href="#nodejs-安装" class="headerlink" title="nodejs 安装"></a>nodejs 安装</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs 下载</a></p>
<p><a href="https://hexo.io/" target="_blank" rel="noopener">hexo 官网</a></p>
<p><a href="https://guides.github.com/features/pages/" target="_blank" rel="noopener">github pages</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用阿里云镜像下载比较快，xz 压缩率高。</span></span><br><span class="line"><span class="comment"># 在 mac 上安装直接选择 pkg 包安装</span></span><br><span class="line">https://cdn.npm.taobao.org/dist/node/v14.2.0/node-v14.2.0.pkg</span><br></pre></td></tr></table></figure>
<h2 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h2><blockquote>
<p>hexo 使用 nodejs 编写，使用 npm 包管理工具进行安装。</p>
<p>安装前要设置好国内镜像。否则会很慢。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm 帮助</span></span><br><span class="line">npm --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># npm command 帮助</span></span><br><span class="line">npm config -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出配置</span></span><br><span class="line">npm config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样就配置好镜像了，阿里云是国内镜像大户</span></span><br><span class="line">npm config <span class="built_in">set</span> metrics-registry <span class="string">"https://registry.npm.taobao.org"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>hexo 使用 nodejs 编写，使用 npm 包管理工具进行安装。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nodejs 分全局模块库和项目模块库 </span></span><br><span class="line"><span class="comment"># 全局模块库位于 nodejs 安装目录下 /usr/local/lib/node_modules</span></span><br><span class="line"><span class="comment"># 项目模块库位于项目目录下 node_modules/</span></span><br><span class="line"><span class="comment"># 列出模块</span></span><br><span class="line">npm list</span><br></pre></td></tr></table></figure>
<blockquote>
<p>全局模块安装一些通用的模块，比如: cnpm、@vue、bower</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装到全局模块（重复安装加 --force）</span></span><br><span class="line">npm install hexo-cli -g --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建个目录</span></span><br><span class="line">mkdir blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">hexo init</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm 包管理文件 package.json</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务，在 http://localhost:4000 查看</span></span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持简写。简写有好处，也有坏处。好处是输入少，坏处是不利于记忆。</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h3 id="hexo-目录结构"><a href="#hexo-目录结构" class="headerlink" title="hexo 目录结构"></a>hexo 目录结构</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tree -L 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">├──</span> <span class="string">_config.yml</span>         <span class="comment"># 站点配置文件</span></span><br><span class="line"><span class="string">├──</span> <span class="string">db.json</span></span><br><span class="line"><span class="string">├──</span> <span class="string">node_modules</span>        <span class="comment"># nodejs 模块库</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package-lock.json</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package.json</span>        <span class="comment"># npm 包管理文件</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scaffolds</span>           <span class="comment"># hexo 模板</span></span><br><span class="line"><span class="string">├──</span> <span class="string">source</span>              <span class="comment"># 文章目录</span></span><br><span class="line"><span class="string">└──</span> <span class="string">themes</span>              <span class="comment"># 主题目录</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-blog"><a href="#配置-blog" class="headerlink" title="配置 blog"></a>配置 blog</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">grep -v <span class="string">"#"</span> _config.yml |grep -v <span class="string">"^$"</span></span><br><span class="line">cp _config.yml _config.yml.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标题、描述、关键字</span></span><br><span class="line">title: blyanqi@163.com</span><br><span class="line">subtitle: <span class="string">''</span></span><br><span class="line">description: <span class="string">'君子学以聚之，问以辩之，宽以居之，仁以行之。'</span></span><br><span class="line">keywords: 运维、自动化、devops、容器架构</span><br><span class="line">author: yan qi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语言、时区、站点 url</span></span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: <span class="string">'Asia/Shanghai'</span></span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章按日期分类</span></span><br><span class="line">new_post_name: :year/:month/:title/</span><br><span class="line">permalink: :year/:month/:title.md</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录配置</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line">default_layout: post</span><br><span class="line">external_link:</span><br><span class="line">  exclude: <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件名大小写</span></span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成文章资源文件夹</span></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码框配置</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace: <span class="string">''</span></span><br><span class="line">  wrap: <span class="literal">true</span></span><br><span class="line">  hljs: <span class="literal">false</span></span><br><span class="line">index_generator:</span><br><span class="line">  path: <span class="string">''</span></span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line">meta_generator: <span class="literal">true</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">use_date_for_updated: <span class="literal">false</span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line">theme: next</span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">''</span></span><br></pre></td></tr></table></figure>
<h3 id="写文章、配置文章本地图片"><a href="#写文章、配置文章本地图片" class="headerlink" title="写文章、配置文章本地图片"></a>写文章、配置文章本地图片</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 markdown 文件(source/_post 下)</span></span><br><span class="line">hexo n first</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置站点配置 _config.yml:</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span>改为post_asset_folder: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">npm install hexo-asset-image -- save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文章(同时生成和文章相同的目录)</span></span><br><span class="line">hexo n firstimg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 markdown 添加图片</span></span><br><span class="line">在想添加的位置写入![](图片名字.图片格式),例如![](1.png)。</span><br></pre></td></tr></table></figure>
<h2 id="下载-next-主题"><a href="#下载-next-主题" class="headerlink" title="下载 next 主题"></a>下载 next 主题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置加速，否则很慢</span></span><br><span class="line"><span class="comment"># 使用之前配置一下 github 进行加速。使用 https://www.ipaddress.com/ 进行地址查询</span></span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;/etc/hosts</span><br><span class="line">140.82.113.3 github.com</span><br><span class="line">185.199.109.153 assets-cdn.github.com</span><br><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 下载主题</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<h3 id="next-主题目录"><a href="#next-主题目录" class="headerlink" title="next 主题目录"></a>next 主题目录</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">├──</span> <span class="string">LICENSE.md</span></span><br><span class="line"><span class="string">├──</span> <span class="string">README.md</span></span><br><span class="line"><span class="string">├──</span> <span class="string">_config.yml</span>     <span class="comment"># 主题配置文件</span></span><br><span class="line"><span class="string">├──</span> <span class="string">crowdin.yml</span></span><br><span class="line"><span class="string">├──</span> <span class="string">docs</span>            <span class="comment"># 帮助信息</span></span><br><span class="line"><span class="string">├──</span> <span class="string">gulpfile.js</span></span><br><span class="line"><span class="string">├──</span> <span class="string">languages</span>       <span class="comment">#语言包</span></span><br><span class="line"><span class="string">├──</span> <span class="string">layout</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package.json</span>    <span class="comment"># npm 依赖</span></span><br><span class="line"><span class="string">├──</span> <span class="string">renovate.json</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scripts</span>         <span class="comment"># js 文件</span></span><br><span class="line"><span class="string">└──</span> <span class="string">source</span>          <span class="comment"># 资源文件：css、字体、svg</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-next-主题"><a href="#配置-next-主题" class="headerlink" title="配置 next 主题"></a>配置 next 主题</h3><blockquote>
<p>主题配置内容比较多 <a href="https://hexo-theme-next.netlify.app/docs/" target="_blank" rel="noopener">next 主题配置</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此处纪录常用配置</span></span><br><span class="line"><span class="comment"># 使用主题 themes/next/_config.yml 查找 theme</span></span><br><span class="line"><span class="comment"># sed -i '/^theme/s/landscape/next/' _config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一下配置文件</span></span><br><span class="line">grep -v <span class="string">"#"</span> themes/next/_config.yml |grep -v <span class="string">"^$"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改一下 scheme (hexo 主题有4种样式)，选用 Gemini</span></span><br><span class="line">scheme: Gemini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码高亮 codeblock</span></span><br><span class="line">codeblock:</span><br><span class="line">  theme:</span><br><span class="line">    light: vs</span><br><span class="line">    dark: tomorrow-night</span><br><span class="line"></span><br><span class="line"><span class="comment"># footer 修改</span></span><br><span class="line">since: 2017</span><br><span class="line">animated: <span class="literal">true</span></span><br><span class="line">powered: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 post 模板</span></span><br><span class="line">vim scaffolds/post.md</span><br><span class="line"><span class="comment"># 添加：</span></span><br><span class="line">categories:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加字数统计 （新创建 post 才会有数据）</span></span><br><span class="line">npm install hexo-symbols-count-time</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo config</span></span><br><span class="line"><span class="comment"># Post Wordcount</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  symbols: <span class="literal">true</span></span><br><span class="line">  time: <span class="literal">true</span></span><br><span class="line">  total_symbols: <span class="literal">true</span></span><br><span class="line">  total_time: <span class="literal">true</span></span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo/theme/next/_config.yml</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  item_text_post: <span class="literal">true</span></span><br><span class="line">  item_text_total: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SEO 配置 next/_config.yml</span></span><br><span class="line">disable_baidu_transformation: <span class="literal">true</span></span><br><span class="line">index_with_subtitle: <span class="literal">true</span></span><br><span class="line">exturl: <span class="literal">true</span></span><br><span class="line">google_site_verification: XXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">bing_site_verification: XXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">baidu_site_verification: XXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">baidu_push: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># web Analytics</span></span><br><span class="line">google_analytics:</span><br><span class="line">  tracking_id: UA-XXXXXXXX-X</span><br><span class="line">  only_pageview: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search 配置</span></span><br><span class="line">npm install hexo-generator-searchdb</span><br><span class="line"><span class="comment"># hexo/_config.yml</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># next/_config.yml</span></span><br><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="设置文章分类"><a href="#设置文章分类" class="headerlink" title="设置文章分类"></a>设置文章分类</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 page</span></span><br><span class="line">hexo new page categories</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取日期</span></span><br><span class="line">date <span class="string">"+%F %T"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 page</span></span><br><span class="line">cat &lt;&lt;<span class="string">"EOF"</span> &gt;<span class="built_in">source</span>/categories/index.md</span><br><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2020-05-13 16:22:16 </span><br><span class="line"><span class="built_in">type</span>: <span class="string">"categories"</span></span><br><span class="line">---</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给文章添加“categories”属性</span></span><br><span class="line">categories: </span><br><span class="line">- develop</span><br></pre></td></tr></table></figure>
<h2 id="设置文章标签"><a href="#设置文章标签" class="headerlink" title="设置文章标签"></a>设置文章标签</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 page</span></span><br><span class="line">hexo new page tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 page</span></span><br><span class="line">cat &lt;&lt;<span class="string">"EOF"</span> &gt;<span class="built_in">source</span>/tags/index.md</span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-05-13 16:22:16 </span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br><span class="line">---</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给文章添加“tags”属性</span></span><br><span class="line">tags:</span><br><span class="line">- jQuery</span><br><span class="line">- 表格</span><br></pre></td></tr></table></figure>
<h2 id="设置文章置顶"><a href="#设置文章置顶" class="headerlink" title="设置文章置顶"></a>设置文章置顶</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在post中添加标签</span></span><br><span class="line">top: 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以修改模板添加标识，不添加也不影响</span></span><br><span class="line">vim /themes/*/layout/_macro/post.ejs</span><br><span class="line">&lt;% <span class="keyword">if</span> (page.top) &#123; %&gt;</span><br><span class="line">  &lt;i class=<span class="string">"fa fa-thumb-tack"</span>&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=<span class="string">"post-meta-divider"</span>&gt;|&lt;/span&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<h2 id="使用数学公式"><a href="#使用数学公式" class="headerlink" title="使用数学公式"></a>使用数学公式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br><span class="line"></span><br><span class="line">vim themes/*/_config.yml</span><br><span class="line">mathjax:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mhchem: <span class="literal">false</span> <span class="comment">#化学公式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文章中加</span></span><br><span class="line">mathjax: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="使用音视频"><a href="#使用音视频" class="headerlink" title="使用音视频"></a>使用音视频</h2><ul>
<li><a href="https://github.com/grzhan/hexo-tag-aplayer" target="_blank" rel="noopener">音频</a></li>
<li><a href="https://github.com/NextMoe/hexo-tag-dplayer" target="_blank" rel="noopener">视频</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 音频插件</span></span><br><span class="line">npm install hexo-tag-aplayer</span><br><span class="line"><span class="comment"># 视频插件</span></span><br><span class="line">npm install hexo-tag-dplayer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在markdown里添加音频</span></span><br><span class="line">&#123;% aplayer <span class="string">"她的睫毛"</span> <span class="string">"周杰伦"</span> <span class="string">"http://home.ustc.edu.cn/~mmmwhy/%d6%dc%bd%dc%c2%d7%20-%20%cb%fd%b5%c4%bd%de%c3%ab.mp3"</span>  <span class="string">"http://home.ustc.edu.cn/~mmmwhy/jay.jpg"</span> <span class="string">"autoplay=false"</span> %&#125;</span><br><span class="line"><span class="comment"># 在markdown里添加视频</span></span><br><span class="line">&#123;% dplayer <span class="string">"url=http://home.ustc.edu.cn/~mmmwhy/GEM.mp4"</span>  <span class="string">"pic=http://home.ustc.edu.cn/~mmmwhy/GEM.jpg"</span> <span class="string">"loop=yes"</span> <span class="string">"theme=#FADFA3"</span> <span class="string">"autoplay=false"</span> <span class="string">"token=tokendemo"</span> %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="站内文章引用"><a href="#站内文章引用" class="headerlink" title="站内文章引用"></a>站内文章引用</h2><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 路径/文件名(不要后缀) 文章别名(可选) %&#125;</span><br><span class="line">&#123;% post_link dir/hexo安装配置 %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置字体大小"><a href="#设置字体大小" class="headerlink" title="设置字体大小"></a>设置字体大小</h2><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">vim themes/next/<span class="keyword">source</span>/css/_variables/base.styl</span><br><span class="line">/font-<span class="keyword">size</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// Font size</span></span><br><span class="line">  <span class="number">91</span> $font-<span class="keyword">size</span>-base           = (hexo-config(<span class="string">'font.enable'</span>) and hexo-config(<span class="string">'font.global.size'</span>) is a <span class="string">'unit'</span>) ? <span class="keyword">unit</span>(hexo-config(<span class="string">'font.global.size'</span>), em) : <span class="number">.8</span>em;</span><br><span class="line">  <span class="number">92</span> $font-<span class="keyword">size</span>-smallest       = <span class="number">.5</span>em;</span><br><span class="line">  <span class="number">93</span> $font-<span class="keyword">size</span>-smaller        = <span class="number">.55</span>m;</span><br><span class="line">  <span class="number">94</span> $font-<span class="keyword">size</span>-small          = <span class="number">1.18</span>em;</span><br><span class="line">  <span class="number">95</span> $font-<span class="keyword">size</span>-medium         = <span class="number">.8</span>em;</span><br><span class="line">  <span class="number">96</span> $font-<span class="keyword">size</span>-large          = <span class="number">.85</span>em;</span><br><span class="line">  <span class="number">97</span> $font-<span class="keyword">size</span>-larger         = <span class="number">.9</span>em;</span><br><span class="line">  <span class="number">98</span> $font-<span class="keyword">size</span>-largest        = <span class="number">1.38</span>em;</span><br></pre></td></tr></table></figure>
<h2 id="加密文章"><a href="#加密文章" class="headerlink" title="加密文章"></a>加密文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/MikeCoder/hexo-blog-encrypt</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://npm.taobao.org/mirrors/npm/</span><br><span class="line">npm install --save hexo-blog-encrypt</span><br><span class="line"><span class="comment"># 到官网安装</span></span><br><span class="line">npm config <span class="built_in">set</span> registry <span class="string">""</span></span><br><span class="line">npm install --save ~/Downloads/hexo-blog-encrypt-master</span><br></pre></td></tr></table></figure>
<h2 id="生成部署-hexo"><a href="#生成部署-hexo" class="headerlink" title="生成部署 hexo"></a>生成部署 hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成静态文件 (用于githup page 部署)</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 githup repository</span></span><br><span class="line">name: blog.githup.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 githup 库地址 _config.yaml</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/blyanqi/blog.githup.io.git</span><br><span class="line">  branch: master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为github设置SSH Keys</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"blyanqi@163.com"</span></span><br><span class="line"><span class="comment"># 测试 ssh key</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到 githup page</span></span><br><span class="line">npm install --save hexo-deployer-git</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键部署</span></span><br><span class="line"><span class="comment"># 编辑 package.json</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"hexo generate"</span>,</span><br><span class="line">    <span class="string">"clean"</span>: <span class="string">"hexo clean"</span>,</span><br><span class="line">    <span class="string">"deploy"</span>: <span class="string">"hexo deploy"</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"hexo server"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># build</span></span><br><span class="line">npm run deploy</span><br></pre></td></tr></table></figure>
<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Copying files from public folder...</span><br><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">TypeError [ERR_INVALID_ARG_TYPE]: The "mode" argument must be integer. Received an instance of Object</span></span><br><span class="line"><span class="string">    at copyFile (fs.js:1890:10)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 是因为 nodejs 版本问题，选用稳定版本 v12.16.3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">remote: Invalid username or password.</span></span><br><span class="line"><span class="string">fatal: Authentication failed for '</span>https://github.com/blyanqi/blog.githup.io.git/<span class="string">'</span></span><br><span class="line"><span class="string">FATAL Something'</span>s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line"></span><br><span class="line"><span class="comment"># git 验证失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index.html 里面空白没有内容 (重新生成一遍，可能是node换版本导致)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件请求不到，修改 _config,yaml 里 root: / 改成  root: /blog.githup.io/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OTHER</category>
      </categories>
      <tags>
        <tag>github page</tag>
        <tag>hexo</tag>
        <tag>nodejs</tag>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>npm管理</title>
    <url>/2020/07/npm%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>nodejs 包管理器</p>
<h2 id="使用淘宝镜像源"><a href="#使用淘宝镜像源" class="headerlink" title="使用淘宝镜像源"></a>使用淘宝镜像源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置淘宝镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry <span class="string">"http://registry.npm.taobao.org/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换回默认的源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry <span class="string">"https://registry.npmjs.org"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取镜像源</span></span><br><span class="line">npm get registry</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">or</span><br><span class="line"><span class="built_in">alias</span> cnpm=<span class="string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="string">--cache=<span class="variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="string">--userconfig=<span class="variable">$HOME</span>/.cnpmrc"</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>NodeJS</category>
      </categories>
  </entry>
  <entry>
    <title>mysqlforMAC</title>
    <url>/2020/07/mysqlforMAC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h2><p> 8.0.16<br>brew info mysql<br>brew services list</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启进程</span></span><br><span class="line">ps -ef |grep mysql</span><br><span class="line">sudo <span class="built_in">kill</span> pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line">flush privileges;</span><br><span class="line">alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'123456xxx'</span>;</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>java多平台打包软件</title>
    <url>/2020/07/java%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%89%93%E5%8C%85%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://www.revenera.com/install/products/installanywhere.html" target="_blank" rel="noopener">install anywhere</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>单点登录</title>
    <url>/2020/07/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>javaJVM</title>
    <url>/2020/07/javaJVM/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://docs.oracle.com/javase/specs/index.html" target="_blank" rel="noopener">java JVM Docs</a></li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>java8虚拟机变化<br>OOM: OutOfMemory<br>StackOverFlowError</p>
<p>JVM的位置<br>JVM的体系结构<br>类加载器<br>双全委派机制<br>沙箱安全机制<br>Native<br>PC寄存器<br>方法区<br>栈<br>三种JVM<br>堆<br>新生区，老年区<br>永久区<br>堆内存调优<br>GC常用算法<br>JMM</p>
<h2 id><a href="#" class="headerlink" title=" "></a> </h2><p>JVM的位置：<br>  JRE<br>  JDK<br>JVM的体系结构<br>  .java<br>  .class<br>  类加载器<br>    加载<br>      new Cart() -&gt; getClass() -&gt; getClassLoader() -&gt; getParent() -&gt; getParent()</p>
<pre><code>  native加载器
  根加载器
  扩展类加载器
  应用程序加载器
  rt.jar runtime
  lib/ext

连接
初始化
</code></pre><p>  运行时<br>    java栈<br>    本地方法栈<br>    程序计数器<br>    方法区 -&gt; gc<br>    堆 -&gt; gc</p>
<pre><code>本地方法接口 JNI
本地方法库 native method library
执行引擎
  解释器
  JIT编译器
    中间代码生成器
    代码优化器
    目标代码生成器
    探测器
    垃圾回收器
</code></pre><p>双全委派机制<br>  首先将类加载请求委托给父类加载器去完成，一直向上委托，直到顶层加载器。</p>
<p>沙箱安全机制(限制程序运行的环境)<br>  本地代码受信任，远程代码不受信任。<br>  代码签名<br>  域<br>  字节码校验器<br>Native<br>  native JNI java 调用 C,C++<br>  socket 通过 socket 调用其他程序<br>PC寄存器<br>  每个线程都有一个程序计数器。<br>方法区<br>  被所有线程共享，所有字段和方法字节码。<br>  static<br>  final<br>  Class<br>  常量池<br>栈<br>  运行时栈，栈空程序结束。<br>  栈帧<br>  每一个方法是一个栈帧<br>  引用：指向特定变量的指针，不可更改。<br>堆<br>  堆内存大小是可以调节的<br>  新生区，幸存区，老年区，永久区<br>  堆内存调优<br>  重量级full gc，轻量级<br>  永久区：加载了大量的三方包，创建了大量的代理类<br>  Runtime.getRuntime().maxMemory()<br>  -Xms1024m -Xmx1024m -X:+PrintGCDetails<br>  jprofiler<br>  -XX:+HeapDumpOnOutOfMemoryError<br>三种JVM<br>  Sun HotSpot<br>  Oracle JRockit 最快的jvm<br>  IBM j9vm</p>
<p>GC常用算法<br>  引用计数器(成本高)<br>  标记清除法<br>    gc多少次清除 TenuringThreshold = 3<br>  标记压缩<br>  复制算法（年轻代）</p>
<p>JMM：Java Memory Model<br>  voliatile<br>  synchronized</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>内网渗透安全防护</title>
    <url>/2020/07/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="监听未加密的数据包"><a href="#监听未加密的数据包" class="headerlink" title="监听未加密的数据包"></a>监听未加密的数据包</h2><p>nohup tcpdump port 80 -vvnn &gt;a.log 2&gt;&amp;1 &amp;</p>
<h2 id="过滤表单关键字"><a href="#过滤表单关键字" class="headerlink" title="过滤表单关键字"></a>过滤表单关键字</h2><p>grep -i password a.log</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>javaJDBC</title>
    <url>/2020/07/javaJDBC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2020/07/Spring/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spring</p>
<ul>
<li><a href="https://spring.io/guides" target="_blank" rel="noopener">spring start guide</a></li>
</ul>
<h2 id="Spring-概念"><a href="#Spring-概念" class="headerlink" title="Spring 概念"></a>Spring 概念</h2><p>核心技术: 依赖注入, 事件管理, 资源管理, 国际化, 验证, 数据绑定, 类型转换, SpEL, 面向切面.<br>测试: mock objects, TestContext framework, Spring MVC Test, WebTestClient.<br>数据访问: transactions, DAO support, JDBC, ORM, Marshalling XML.<br>web框架支持：Spring MVC 和 Spring WebFlux .<br>集成: remoting, JMS, JCA, JMX, email, tasks, scheduling, cache.<br>多语言支持: Kotlin, Groovy, dynamic languages.</p>
<p>非入侵式：对源项目不造成影响<br>控制反转 IOC<br>面向切面 AOP<br>支持事务的处理<br>对框架整合的支持</p>
<p>7大模块<br>  AOP<br>  DAO<br>  ORM<br>  WEB<br>  Context<br>  MVC<br>  Core</p>
<p>构建一切 springboot<br>协调一切 springcloud<br>连接一些 springcloud data flow</p>
<p>UserDao 接口<br>UserDaoImpl 实现类<br>UserService 业务接口<br>UserServiceImpl 业务接口</p>
<p>通过 Spring 来创建对象。无需手动创建。所有对象由Spring统一管理<br>bean 必须有set方法</p>
<p>由spring来管理程序，其实是通过配置文件来配置类</p>
<p>使用无参构造创建对象<br>通过有参构造函数创建对象</p>
<p>在配置文件加载时就会把对象创建出来</p>
<p>Spring 配置<br>1、别名 alias<br>2、bean name 属性也可以取别名<br>3、import 导入多个配置文件</p>
<p>构造器注入<br>set 注入</p>
<p>第三方约束<br>c 命名空间 Constructs<br>p 命名空间 properties</p>
<p>Bean 的作用域</p>
<p>scopes:<br>  singleton<br>  prototype</p>
<p>自动装配<br>  byName:<br>  byType:</p>
<p>注解实现自动装配</p>
<p>@Autowired<br>@Nullable<br>@Qualifiter(value=””) 指定装配</p>
<p>@Resource java注解</p>
<p>使用注解开发<br>指定扫描包 @component</p>
<p>@Value(“”)</p>
<p>@component MVC分层架构<br>dao<br>  @Repository<br>service<br>  @Service<br>controller<br>  @Controller</p>
<p>四个注解功能一样，把类装配到spring中</p>
<p>@Scope(“”)</p>
<p>xml 更加万能，适用于任何场合！维护简单方便<br>注解不是自己类使用不了，维护相对复杂</p>
<p>配置类<br>@Configuration<br>@Bean</p>
<p>springboot = spring config配置类 + 注解</p>
<p>所有的类都必须装配到spring bean里<br>所有的 bean 都需要通过spring取<br>容器里的 bean 拿出来就是一个对象</p>
<p>AOP 面向切面<br>代理：<br>  需求：接口<br>  被代理： 类<br>  代理： 类实现接口<br>  客户(调用)： 类</p>
<p>  静态代理模式</p>
<p>  动态代理模式（使用反射）<br>    基于接口的动态搭理<br>    基于类的动态代理 cglib<br>    java字节码 javasist</p>
<pre><code>Proxy 类
InvocationHandler 接口
invoke

获取被代理的接口
生成的带代理类，传参为
  代理类加载器
  被代理类接口
  InvocationHandler
处理代理实例，并返回结果
</code></pre><p>AOP 实现 aspectj包<br>  横切关注点<br>  切面<br>  通知：前置方法，后置方法，环绕方法<br>  目标<br>  代理<br>  切入点<br>  连接点</p>
<p>使用<br>自定义类切入</p>
<p>注解实现 AOP<br>@Aspect<br>@Before</p>
<p>整合 Mybatis</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2020/07/SpringBoot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2020/07/SpringCloud/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>分析开源项目</title>
    <url>/2020/07/%E5%88%86%E6%9E%90%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>SSM整合</title>
    <url>/2020/07/SSM%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2020/07/MyBatis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2020/07/SpringMVC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://spring.io/guides" target="_blank" rel="noopener">Spring Guide</a></li>
</ul>
<p>实体类<br>vo 视图层<br>pojo 实体类<br>dto 数据传输<br>controller 调度</p>
<p>新建父工程</p>
<p>添加框架支持</p>
<p>获取前端参数<br>调用业务层<br>视图转发或者重定向</p>
<p>dispatchServlet<br>  mapper<br>  adapter -&gt; Controller 类<br>ModelAndView<br>  View</p>
<p>web.xml<br>resources<br>  springmvc-servlet.xml<br>    映射器<br>    处理适配器<br>    视图解析器</p>
<h2 id="注解实现"><a href="#注解实现" class="headerlink" title="注解实现"></a>注解实现</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 自动扫描</span></span><br><span class="line"><span class="meta"># 处理静态资源</span></span><br><span class="line"><span class="meta"># 注解驱动</span></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping</span><br></pre></td></tr></table></figure>
<h2 id="Springhello"><a href="#Springhello" class="headerlink" title="Springhello"></a>Springhello</h2><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>Jackson<br>Fastson<br>@ResponseBody #不走视图<br>@RestController</p>
<p>CIUD</p>
<p>pojo 实体类<br>  @Data<br>  @AllArgsContructor<br>  @NoArgsContructor<br>dao<br>  CIUD<br>  Mapper.xml<br>    sqls<br>service<br>  interface<br>    CIUD<br>  impl<br>    组合DAO<br>controller</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>javaWEB</title>
    <url>/2020/07/javaWEB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>web开发：<br>  静态web<br>    静态生成<br>  动态web<br>    模板</p>
<p>浏览器<br>web 应用程序<br>标记语言 HTML<br>web协议 HTTP<br>HTTPserver</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>java网络编程</title>
    <url>/2020/07/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>java多线程</title>
    <url>/2020/07/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>java注解和反射和泛型</title>
    <url>/2020/07/java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>javaGUI</title>
    <url>/2020/07/javaGUI/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>电商项目</title>
    <url>/2020/07/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>登录<br>注册<br>邮箱激活</p>
<p>用户中心<br>分页</p>
<p>列表页<br>详情页</p>
<p>购物车</p>
<p>支付方式</p>
<p>后台</p>
<p>项目立项<br>-&gt; 需求分析<br>  用户模块<br>  商品相关<br>  购物车相关<br>  订单相关<br>  后台模块<br>-&gt; 原型设计<br>-&gt; 架构设计<br> -&gt; 数据库设计<br> -&gt; 模块代码实现和单元测试<br>-&gt; UI设计<br> -&gt; 前端设计<br>-: 代码整合<br>-&gt; 集成测试<br>-&gt; 网站发布</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>GoAndQT</title>
    <url>/2020/07/GoAndQT/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="qt-for-mac"><a href="#qt-for-mac" class="headerlink" title="qt for mac"></a>qt for mac</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew search qt</span><br><span class="line">brew install qt</span><br><span class="line">brew cask install qt-creator</span><br><span class="line">brew cask install qt-design</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>Go-gtk3</title>
    <url>/2020/07/Go-gtk3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://github.com/gotk3/gotk3" target="_blank" rel="noopener">gotk3</a></li>
<li><a href="https://developer.gnome.org/gtk3/stable/" target="_blank" rel="noopener">docs </a></li>
<li><a href="https://gitlab.gnome.org/GNOME/gtk-osx/-/blob/master/gtk-osx-setup.sh" target="_blank" rel="noopener">install.sh </a></li>
<li><a href="https://github.com/gotk3/gotk3-examples/tree/master/gtk-examples" target="_blank" rel="noopener">GTK3 example</a></li>
</ul>
<h2 id="install-gtk-for-mac"><a href="#install-gtk-for-mac" class="headerlink" title="install gtk for mac"></a>install gtk for mac</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># download</span></span><br><span class="line">curl https://gitlab.gnome.org/GNOME/gtk-osx/-/raw/master/gtk-osx-setup.sh?inline=<span class="literal">false</span> -o gtk-osx-setup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">sh gtk-osx-setup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">brew install gtk+3</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/gtk+3/3.24.18_1: 714 files, 53.2MB</span><br></pre></td></tr></table></figure>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>mkdir mygo-gtk<br>touch main.go<br><figure class="highlight go"><figcaption><span>使用的是 mattn/go-gtk</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/mattn/go-gtk/gtk"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始化</span></span><br><span class="line">	gtk.Init(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 应用代码</span></span><br><span class="line">	window := gtk.NewWindow(gtk.WINDOW_TOPLEVEL)</span><br><span class="line">	window.SetTitle(<span class="string">"first windows"</span>)</span><br><span class="line">	window.SetSizeRequest(<span class="number">800</span>, <span class="number">500</span>)</span><br><span class="line">	window.Show()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 事件循环</span></span><br><span class="line">	gtk.Main()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>go mod init<br>go mod tidy</p>
<p>go run main.go</p>
<h2 id="官方推荐-go-binding"><a href="#官方推荐-go-binding" class="headerlink" title="官方推荐 go binding"></a>官方推荐 go binding</h2><figure class="highlight go"><figcaption><span>使用的是 gotk3/gotk3</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/gotk3/gotk3/gtk"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Initialize GTK without parsing any command line arguments.</span></span><br><span class="line">	gtk.Init(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a new toplevel window, set its title, and connect it to the</span></span><br><span class="line">	<span class="comment">// "destroy" signal to exit the GTK main loop when it is destroyed.</span></span><br><span class="line">	win, err := gtk.WindowNew(gtk.WINDOW_TOPLEVEL)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">"Unable to create window:"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	win.SetTitle(<span class="string">"Simple Example"</span>)</span><br><span class="line">	win.Connect(<span class="string">"destroy"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		gtk.MainQuit()</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a new label widget to show in the window.</span></span><br><span class="line">	l, err := gtk.LabelNew(<span class="string">"Hello, gotk3!"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">"Unable to create label:"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Add the label to the window.</span></span><br><span class="line">	win.Add(l)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set the default window size.</span></span><br><span class="line">	win.SetDefaultSize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Recursively show all widgets contained in this window.</span></span><br><span class="line">	win.ShowAll()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Begin executing the GTK main loop.  This blocks until</span></span><br><span class="line">	<span class="comment">// gtk.MainQuit() is run.</span></span><br><span class="line">	gtk.Main()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="集成开发工具-glade"><a href="#集成开发工具-glade" class="headerlink" title="集成开发工具 glade"></a>集成开发工具 glade</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install glade</span><br><span class="line"></span><br><span class="line">If you need to have libxml2 first <span class="keyword">in</span> your PATH run:</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/libxml2/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line">For compilers to find libxml2 you may need to <span class="built_in">set</span>:</span><br><span class="line">  <span class="built_in">export</span> LDFLAGS=<span class="string">"-L/usr/local/opt/libxml2/lib"</span></span><br><span class="line">  <span class="built_in">export</span> CPPFLAGS=<span class="string">"-I/usr/local/opt/libxml2/include"</span></span><br><span class="line"></span><br><span class="line">For pkg-config to find libxml2 you may need to <span class="built_in">set</span>:</span><br><span class="line">  <span class="built_in">export</span> PKG_CONFIG_PATH=<span class="string">"/usr/local/opt/libxml2/lib/pkgconfig"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>Fyne使用</title>
    <url>/2020/07/Fyne%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Fyne使用OpenGL实现立即模式跨平台GUI。</p>
<ul>
<li><a href="https://github.com/fyne-io/fyne" target="_blank" rel="noopener">fyne github</a></li>
<li><a href="https://developer.fyne.io/started/firstapp" target="_blank" rel="noopener">started</a></li>
<li><a href="https://fyne.io/develop/" target="_blank" rel="noopener">docs</a></li>
<li><a href="https://github.com/fyne-io/examples" target="_blank" rel="noopener">examples</a></li>
</ul>
<h1 id="创建一个APP"><a href="#创建一个APP" class="headerlink" title="创建一个APP"></a>创建一个APP</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir gui</span><br><span class="line">go mod init</span><br><span class="line">go tidy</span><br></pre></td></tr></table></figure>
<h2 id="First-app"><a href="#First-app" class="headerlink" title="First app"></a>First app</h2><figure class="highlight go"><figcaption><span>First gui</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fyne.io/fyne/app"</span></span><br><span class="line">	<span class="string">"fyne.io/fyne/widget"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := app.New()            <span class="comment">// 新建了一个app</span></span><br><span class="line">	w := a.NewWindow(<span class="string">"Hello"</span>) <span class="comment">// 为app新建了一个窗口</span></span><br><span class="line"></span><br><span class="line">	hello := widget.NewLabel(<span class="string">"Hello Fyne!"</span>) <span class="comment">// 新建了一个标签</span></span><br><span class="line">	w.SetContent(widget.NewVBox(            <span class="comment">// 在窗口中设置内容</span></span><br><span class="line">		hello, <span class="comment">// 放入了hello 标签</span></span><br><span class="line">		widget.NewButton(<span class="string">"Hi!"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// 创建了一个button，设置了事件函数</span></span><br><span class="line">			hello.SetText(<span class="string">"Welcome :)"</span>)</span><br><span class="line">		&#125;),</span><br><span class="line">	))</span><br><span class="line"></span><br><span class="line">	w.ShowAndRun() <span class="comment">// 进入循环事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">go get fyne.io/fyne/cmd/fyne_demo/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">fyne_demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所在位置</span></span><br><span class="line">ls ../../pkg/mod/fyne.io/fyne\@v1.3.0/</span><br></pre></td></tr></table></figure>
<p><a href="https://www.gtk.org/" target="_blank" rel="noopener">https://www.gtk.org/</a></p>
<p><a href="https://glade.gnome.org/" target="_blank" rel="noopener">https://glade.gnome.org/</a></p>
<p><a href="https://www.gtk.org/docs/language-bindings/" target="_blank" rel="noopener">https://www.gtk.org/docs/language-bindings/</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>gotags</title>
    <url>/2020/07/gotags/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://fyne.io/develop/cross-compiling" target="_blank" rel="noopener">fyne</a><br><a href="https://www.vugu.org/doc/start" target="_blank" rel="noopener">https://www.vugu.org/doc/start</a><br><a href="https://github.com/andlabs/ui" target="_blank" rel="noopener">https://github.com/andlabs/ui</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>PCIDSS合规nginx配置</title>
    <url>/2020/07/PCIDSS%E5%90%88%E8%A7%84nginx%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://infinisign.com/tools/sslcheck/" target="_blank" rel="noopener">证书检测</a></li>
<li><a href="https://baike.baidu.com/item/PCI%20DSS/10470398?fr=aladdin" target="_blank" rel="noopener">PCI DSS</a></li>
</ul>
<p><strong>证书链</strong>：DigiCert Global Root CA<br><strong>传输协议</strong>：TLSv1.1 TLSv1.2 TLSv1.3<br><strong>加密套件</strong>：AES128+EECDH:AES128+EDH<br><strong>设备兼容性</strong>：Android，Chrome，Firefox，IE</p>
<p><strong>Let’s Encrypt</strong>是由ISRG（Internet Security Research Group）提供的免费SSL项目，现由Linux基金会托管。<br><figure class="highlight bash"><figcaption><span>免费SSL证书</span></figcaption><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/letsencrypt/letsencrypt</span><br><span class="line"></span><br><span class="line"><span class="comment"># cert.pem 服务器证书</span></span><br><span class="line"><span class="comment"># privkey.pem 是证书私钥</span></span><br><span class="line"><span class="comment"># 换成自己的域名即可</span></span><br></pre></td></tr></table></figure><br><strong>OpenSSL</strong> 是用 C 写的一套 SSL 和 TLS 开源实现。<br><strong>SSL</strong>协议，是一种安全传输协议。<br><strong>TLS</strong>是SSL v3.0的升级版。<br><strong>HTTPS</strong>:通过 SSL（Secure Socket Layer，安全套接层）建立安全的通信线路，再进行 HTTP 通信。<br><strong>OCSP</strong>（OCSP，Online Certificate Status Protocol）:协议规定了服务器和客户端应用程序的通讯语法。在线证书状态协议给了用户的到期的证书一个宽限期，这样他们就可以在更新以前的一段时间内继续访问服务器。</p>
<figure class="highlight nginx"><figcaption><span>NGINX ssl配置</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> infinisign.com;</span><br><span class="line">    <span class="attribute">root</span>   /home/static;</span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全站HTTPS(SSL)重定向</span></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$scheme</span> = http ) &#123; </span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 配置证书路径</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /opt/ssl/infinisign.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /opt/ssl/infinisign.key;</span><br><span class="line">    <span class="comment"># 配置加密套件</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span> <span class="string">'AES128+EECDH:AES128+EDH:!aNULL'</span>;</span><br><span class="line">    <span class="comment"># 配置SSLv2和SSLv3安全漏洞</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="comment"># 配置OCSP装订</span></span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">8.8.4.4</span> <span class="number">8.8.8.8</span> valid=<span class="number">300s</span>;</span><br><span class="line">    <span class="attribute">resolver_timeout</span> <span class="number">10s</span>;</span><br><span class="line">    <span class="comment"># 使用服务器端的首选算法</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># DHE 密钥交换</span></span><br><span class="line">    <span class="attribute">ssl_dhparam</span> /etc/ssl/certs/dhparam.pem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 生成密钥</span></span><br><span class="line"><span class="attribute">cd</span> /etc/ssl/certs</span><br><span class="line">openssl dhparam -out dhparam.pem <span class="number">4096</span></span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><figcaption><span>ApacheSSL 配置</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *:443&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /home/wwwroot/www.vpser.net   //网站目录</span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> www.vpser.net:443   //域名</span><br><span class="line">    <span class="attribute">ServerAdmin</span> licess@vpser.net      //邮箱</span><br><span class="line">    <span class="attribute">ErrorLog</span> <span class="string">"/home/wwwlogs/www.vpser.net-error_log"</span>   //错误日志</span><br><span class="line">    <span class="attribute">CustomLog</span> <span class="string">"/home/wwwlogs/www.vpser.net-access_log"</span> common    //访问日志</span><br><span class="line">    <span class="attribute">SSLEngine</span> <span class="literal">on</span></span><br><span class="line">    <span class="attribute">SSLCertificateFile</span> /etc/letsencrypt/live/www.test.net/fullchain.pem   //改一下里面的域名就行，不建议更换路径</span><br><span class="line">    <span class="attribute">SSLCertificateKeyFile</span> /etc/letsencrypt/live/www.test.net/privkey.pem    //改一下里面的域名就行，不建议更换路径</span><br><span class="line">    &lt;Directory "/home/wwwroot/www.vpser.net"&gt;   //网站目录</span><br><span class="line">        <span class="attribute">SetOutputFilter</span> DEFLATE</span><br><span class="line">        <span class="attribute"><span class="nomarkup">Options</span></span> FollowSymLinks</span><br><span class="line">        <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">Order</span></span> allow,deny</span><br><span class="line">        <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></span><br><span class="line">        <span class="attribute">DirectoryIndex</span> index.html index.php</span><br><span class="line">     <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># intermediate configuration, tweak to your needs</span></span><br><span class="line"><span class="attribute">SSLProtocol</span>             <span class="literal">all</span> -SSLv3</span><br><span class="line"><span class="attribute">SSLCipherSuite</span>          ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS</span><br><span class="line"><span class="attribute">SSLHonorCipherOrder</span>     <span class="literal">on</span></span><br><span class="line"><span class="attribute">SSLCompression</span>          <span class="literal">off</span></span><br><span class="line"><span class="attribute">SSLSessionTickets</span>       <span class="literal">off</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># OCSP Stapling, only in httpd 2.3.3 and later</span></span><br><span class="line"><span class="attribute">SSLUseStapling</span>          <span class="literal">on</span></span><br><span class="line"><span class="attribute">SSLStaplingResponderTimeout</span> 5</span><br><span class="line"><span class="attribute">SSLStaplingReturnResponderErrors</span> <span class="literal">off</span></span><br><span class="line"><span class="attribute">SSLStaplingCache</span>        shmcb:/var/run/ocsp(128000)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>计算机科学</title>
    <url>/2020/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>*<a href="https://www.bilibili.com/video/BV1EW411u7th?from=search&amp;seid=11013015744420288055" target="_blank" rel="noopener">计算机科普</a></p>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>计算工具<br>绳结：<br>算盘：记住计算过程的状态<br>步进计算器<br>差分机<br>分析机<br>打孔卡片制表机<br>计算表<br>电子计算机<br>开关继电器<br>电子管<br>二极管<br>晶体管</p>
<p>层层抽象<br>进位</p>
<h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><p>布尔代数<br>逻辑的数学分析<br>NOT<br>AND 串连<br>OR 并连<br>XOR and + not + and 并连 or</p>
<p>二进制<br>bit<br>byte<br>数据块 32bit，64bit</p>
<p>32位色<br>负数 二进制第一位 1<br>非整数  32bit 第一位表示正负，2-9位表示指数。剩余23存整数<br>浮点数存储方式<br>字符 ASCII 128 A 65 a 95<br>UNICODE<br>分块</p>
<p>算术逻辑单元 ALU<br>  算术单元<br>  逻辑单元<br>XOR 作为加法器<br>半累加器 XOR + AND 完成进位<br>全累加器 1+1 需要一个全累加器。否则 1+1 会等于0,进位没了<br>两个半累加器相连+ OR门检查进位<br>8位累加器，需要一个半累加器，7个全累加器，第9位溢出<br>溢出<br>进位会造成延迟，使用超前加法器</p>
<p>进一步抽象成8位ALU<br>8位输入1，8位输入2，操作码为4位，标志位为3位（溢出，zero，negative）<br>输出8位</p>
<p>RAM<br>锁存器： OR + AND + NOT<br>锁存器需要把一端回环，用 NOT做复位器。<br>输入1则存1，输入0则存0</p>
<p>8位的锁存器叫寄存器 SRAM<br>多路复用器<br>256位内存需要8位地址，前四位表示列，后四位表示行。<br>一个数据位，一个写入线，一个读取线</p>
<p>DRAM<br>NVRAM</p>
<p>中央处理器<br>微系统<br>opcode<br>地址寄存器<br>指令寄存器<br>decode<br>时钟速度<br>超频-即更改时钟频率<br>降频-减低时钟频率使cpu运转的慢些。节能<br>自动调整时钟频率</p>
<p>指令和程序<br>HALT 停止<br>指令长度<br>可变长执行</p>
<p>高级CPU设计<br>减少晶体管切换时间<br>使用缓存<br>  CACHE HIT<br>  CACHE MISS<br>  DIRTY BIT<br>指令流水线<br>  FETCH<br>  DECODE<br>  EXECUTE<br>  数据依赖停止流水线<br>乱序执行<br>推测执行<br>分支预测<br>多核处理<br>多CPU架构<br>总体上为了一个时钟周期内处理更多的指令</p>
<p>编程<br>打孔带<br>伪代码<br>操作码表<br>汇编器<br>A-0<br>FORTRAN<br>COBOL 通用语言<br>程序员<br>60年代:ALGOL,LISP,BASIC<br>70年代:Pascal,C,Smalltalk<br>80年代:C++,Objective-C,Perl<br>90年代:Python,Ruby,Java<br>2000:Swift,C#,Go</p>
<p>语法<br>变量<br>控制语句<br>函数<br>库</p>
<p>算法：解决问题的步骤<br>排序<br>  冒泡<br>  选择<br>  归并<br>图<br>  所有组合的可能性是N!<br>  Dijkstra算法<br>数据结构<br>  数组<br>  字符串以O结尾<br>  结构体<br>  队列<br>  栈<br>  Tree<br>图灵机<br>  可判定性问题<br>  状态：运行的状态<br>  规则：描述机器做什么<br>  读写头：<br>  左移：<br>  右移：<br>  图灵完整<br>  停机问题<br>  图灵测试<br>软件工程<br>  代码库<br>集成电路&amp;摩尔定律<br>  VLSI软件<br>操作系统<br>  特权指令<br>  多任务处理<br>  虚拟内存<br>    内存映射<br>  动态内存分配<br>  分时操作系统Multics<br>  Unix</p>
<p>内存&amp;存储介质<br>  纸卡 80*12<br>  磁带<br>  磁鼓<br>  磁盘<br>  软磁盘<br>  光盘<br>  U盘<br>  SSD盘</p>
<p>文件系统<br>  文件格式<br>  元数据<br>  文件头<br>  音频<br>    WAV<br>  图像<br>    BMP<br>  文件系统<br>    文件格式<br>    文件状态</p>
<p>压缩<br>  无损压缩<br>    文本<br>    软件<br>    霍夫曼树<br>  有损压缩<br>    音频<br>    图像<br>    视频</p>
<p>命令行界面<br>  电传打字机<br>屏幕&amp;2D图像显示<br>  80 * 25 2000个字符<br>  CREAN BUFFER<br>  矢量绘图：占用内存小<br>  VRAM：帧缓存区</p>
<p>个人计算机革命<br>  创新降低学习成本<br>  GUI 事件驱动编程</p>
<p>3D 图像用户界面<br>  正交投影<br>  透视投影<br>  三角形平面<br>  fillrate<br>  羽化<br>  画家算法<br>  阴暗处理<br>  纹理映射</p>
<p>计算机网路<br>  交换<br>  路由<br>互联网<br>  IP<br>  UDP<br>  TCP<br>  CHECKSUM<br>  域名<br>万维网<br>  webpage<br>  HTML<br>  CSS<br>  JavaScript<br>  超链接<br>  URL<br>  HTTP<br>  searchEngine<br>    spider<br>    index<br>    fulltextsearch<br>  网络目录<br>  网络中立<br>计算机安全<br>  不规矩<br>  原力<br>  保证数据的保密性，完整性，可用性。<br>  保密性：只有有权限的人才能读取计算机系统和数据<br>  完整性：只有有权限的人才能使用修改的系统数据<br>  可用性：有权限的人，任何时候可以访问自己的系统和数据<br>  威胁模型分析<br>  身份认证<br>  暴力攻击<br>  双认证<br>  机密级别<br>  隔离沙盒<br>黑客&amp;攻击<br>  安全评估，白帽子<br>  欺骗别人<br>    钓鱼网站<br>    假托<br>    邮件木马<br>  加长验证间隔<br>  缓冲区一处<br>  边界检查<br>  代码注入，sql注入<br>  利用漏洞<br>加密<br>  编码<br>  解码<br>  统计数据字母出现频率<br>  DES<br>  AES<br>  RSA</p>
<p>机器学习&amp;人工智能<br>  特征，增加特征就是增加新维度<br>  分类<br>  训练数据<br>  标记数据<br>  决策树<br>  超平面<br>  人工神经网络<br>    输入层，一个维度一个输入节点<br>    隐含层<br>      （权重 * 输入值）累加 - 偏差值<br>      权重和偏差值随机设定<br>      标记数据训练这两个值<br>      激活函数，把值限制再-1，1之间<br>    输出层，一个分类一个输出节点<br>计算机视觉<br>  边缘色差<br>  核过滤器<br>  核，卷积（累加求和）<br>    -1 0 1<br>    -1 0 1<br>    -1 0 1<br>  不同的核用来匹配不同特征<br>  卷积神经网络<br>    用核进行多层卷积<br>    最终识别出物体的局部：人脸识别<br>    根据识别的图像确定表情<br>自然语言处理<br>  计算机语言，词汇少，结构化<br>  自然语言，大量的词汇，一词多义，多种口音，模糊语义<br>  对话系统<br>  理解系统<br>  语音识别<br>    音素识别<br>  语音合成技术</p>
<p>机器人<br>  机械时钟<br>  CNC机械<br>  控制回路 负反馈回路<br>    传感器<br>    Error<br>    动作<br>  PID 控制器<br>    比例控制<br>    误差<br>    目标值</p>
<p>计算机心理学<br>  易用度：达到目的的效率有多高<br>  直观功能<br>  专业知识<br>  情感计算<br>  增强凝视</p>
<p>教育<br>  主动学习<br>  个性化学习<br>  贝叶斯只是追踪<br>  失误概率<br>未来<br>  复杂度刹车<br>  生产力的提升和人口就业</p>
<p>总结：<br>整体视频内容都是点到为止，但绝对不影响对计算机整个领域的贯通。阐述的基本原理，收益匪浅！<br>有兴趣一定要学习一下。<br>目前的AI虽然是弱AI,人脑处理的过程是综合处理的过程。<br>语言识别和图像识别结合起来能把文字和图像对应上。这样就能完成联想。<br>故联想的过程是不是大脑在分类做排序的过程。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
  </entry>
  <entry>
    <title>JNI</title>
    <url>/2020/06/JNI/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id><a href="#" class="headerlink" title=" "></a> </h2><p>Java Native Interface<br>java 调用 非java 代码</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>1、创建一个Java类 touch HelloJni.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'EOF'</span>&gt;HelloJni.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJni</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.loadLibrary(<span class="string">"HelloJni"</span>);	 <span class="comment">// 此处是加载 lib 库，名称要与库名一致</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		HelloJni helloJni = <span class="keyword">new</span> HelloJni();</span><br><span class="line">		helloJni.sayHello();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译</span></span><br><span class="line">javac HelloJni.java</span><br></pre></td></tr></table></figure></p>
<p>2、创建 jni 头文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 jni 头文件</span></span><br><span class="line">javah -o ./HelloJni.h -classpath ./ -jni HelloJni</span><br><span class="line">or</span><br><span class="line">javah -d ./jni -classpath ./ -jni HelloJni</span><br></pre></td></tr></table></figure></p>
<p>3、创建 c 代码<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;'EOF'&gt;HelloJni.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HelloJni.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*该方法在HelloJni.h中声明</span></span><br><span class="line"><span class="comment">  JNIEXPORT和JNICALL都是JNI中的关键字</span></span><br><span class="line"><span class="comment">  JNIEnv对应java线程中调用的JNI环境，通过这个参数可以调用一些JNI函数</span></span><br><span class="line"><span class="comment">  jobject对应当前java线程中调用本地方法的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_HelloJni_sayHello</span><br><span class="line">  (JNIEnv * env, jobject obj)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"HelloJni! This is my first jni call.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p>
<p>4、 编译成 dll<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -I"/root/data/jenkins/jdk/java8/include/" 头文件搜索路径</span></span><br><span class="line"><span class="comment"># windows中使用 xxx.dll linux中使用 .so</span></span><br><span class="line">gcc -fPIC -I<span class="string">"/root/data/jenkins/jdk/java8/include/"</span> -I<span class="string">"/root/data/jenkins/jdk/java8/include/linux"</span>  -shared -o HelloJni.so HelloJni.c</span><br></pre></td></tr></table></figure></p>
<p>5、复制dll 到 lib(必须以 libXXX开头)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp HelloJni.so /root/data/jenkins/jdk/java8/jre/lib/amd64/libHelloJni.so</span><br></pre></td></tr></table></figure></p>
<p>6、执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行</span></span><br><span class="line">java HelloJni</span><br><span class="line">---</span><br><span class="line">HelloJni! This is my first jni call.</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>Javatags</title>
    <url>/2020/06/Javatags/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="/2020/05/Java%E7%BC%96%E7%A8%8B/" title="java编程">java编程</a></li>
<li><a href="/2020/06/Java%E9%AB%98%E7%BA%A7%E7%AF%87/" title="Java高级篇">Java高级篇</a></li>
<li></li>
<li><a href="/2020/06/SpringMVC/" title="SpringMVC">SpringMVC</a></li>
<li><a href="/2020/06/Springboot/" title="Springboot">Springboot</a></li>
<li><a href="https://spring.io" target="_blank" rel="noopener">spring</a></li>
<li><a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">java help</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="noopener">IBM cn community</a></li>
<li><a href="https://www.javatpoint.com/servlet-tutorial" target="_blank" rel="noopener">Servlet Docs</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/14/docs/api/index.html" target="_blank" rel="noopener">Java API</a></li>
</ul>
<p>Java 基础</p>
<ul>
<li>常量</li>
<li>变量</li>
<li>数据类型<ul>
<li>类型转换</li>
</ul>
</li>
<li>控制流程<ul>
<li>分支</li>
<li>循环<ul>
<li>foreach 期间不能修改数组的值</li>
</ul>
</li>
</ul>
</li>
<li>数组</li>
</ul>
<p>Java 面向对象</p>
<ul>
<li>类<ul>
<li>方法</li>
<li>属性</li>
<li>构造方法</li>
<li>析构方法</li>
</ul>
</li>
<li>继承和多态 polymorphic<ul>
<li>super()</li>
<li>向上转型 子转父-信息完整</li>
<li>向下转型 父转子-信息空缺</li>
<li>instanceof</li>
<li>is 关系 继承</li>
<li>has 关系 组合</li>
<li>方法覆写 @Overwride 多态：子类覆写父类的方法（继承，重写，父类引用执行子类对象）</li>
<li>Object toString equals hashCode</li>
</ul>
</li>
<li>抽象类和接口<ul>
<li>abstruct<ul>
<li>abstruct method</li>
</ul>
</li>
<li>interface<ul>
<li>default return 0;</li>
</ul>
</li>
</ul>
</li>
<li>包和Classpath</li>
<li><p>JAVA 核心类</p>
<ul>
<li>StringBuilder类</li>
<li>StringBuffer类</li>
<li>JavaBean</li>
<li>枚举类（enum）<br>Java高级<br>Java 异常处理<br>Java 反射<br>Java 注解<br>Java 泛型<br>Java 集合<br>处理一组数据<br>java.util 包<br>接口和实现分离<br>Collection<br>List<pre><code>ArrayList
Vector
LinkedList
</code></pre>Set<pre><code>HashSet
LinkedHashSet
TreeSet
</code></pre>Map<pre><code>Hashtable
LinkedHashMap
HashMap
TreeMap
</code></pre>Queue<pre><code>PriorityQueue
Deque
</code></pre>Stack</li>
</ul>
<p>List , Set, Map都是接口，前两个继承至Collection接口，Map为独立接口<br>Set下有HashSet，LinkedHashSet，TreeSet<br>List下有ArrayList，Vector，LinkedList<br>Map下有Hashtable，LinkedHashMap，HashMap，TreeMap<br>Collection接口下还有个Queue接口，有PriorityQueue类</p>
</li>
</ul>
<p>Java IO<br>    java.io 包<br>    二进制 byte 为单位<br>    字符数据  char 为单位<br>    InputSteam/OutputSteam<br>    reader/writer<br>    File<br>        绝对路径 getPath<br>        相对路径<br>        规范路径 getCanonicalPath<br>        read()</p>
<p>Java 日期处理<br>    Date<br>Java Junit 单元测试<br>    assert<br>Java 正则表达式</p>
<p>Java 加密和安全</p>
<ul>
<li>编码算法</li>
<li>摘要算法</li>
<li>加密算法</li>
<li>签名算法</li>
<li>数字证书</li>
<li>代码混淆</li>
</ul>
<p>Java 线程</p>
<ul>
<li>线程</li>
<li>守护线程 setDaemon</li>
<li>高级concurrent包 </li>
<li>ThreadLocal</li>
<li>线程池</li>
<li>Callable 线程返回值处理</li>
<li>Fork/Join</li>
<li>TreadLocal</li>
</ul>
<p>Java 网络编程</p>
<ul>
<li>Java socket<ul>
<li>TCP</li>
<li>UDP</li>
</ul>
</li>
<li>网络编程之 Mail</li>
<li>HTTP</li>
<li>RMI</li>
<li>RPC</li>
</ul>
<p>Java XML<br>    描述复杂的数据结构，适合表示结构化数据<br>    DTD，XSD 验证数据是否有效<br>    Namespace XML节点和属性的名称空间<br>    XSLT 把xml转化成其他文本<br>    XPath 一种xml节点查询语言<br>    解析<br>    DOM 在内存中表示树形结构<br>        Document 文档<br>        Element 元素<br>        Attribute 属性<br>    SAX 以流的形式读取xml，以事件回调<br>    三方库 Jackson<br>    XML -&gt; 对象</p>
<p>Java Json<br>    只允许使用 UTF-8 编码<br>    必须使用双引号<br>    特殊字符用转义字符<br>    浏览器端<br>        Json.parse #json解析成对象<br>        Json.stringify #对象解析成json<br>    三方库 Jackson gson fastjson</p>
<p>Java 函数式编程</p>
<ul>
<li>lambda</li>
<li>stream</li>
</ul>
<p>JDBC<br>    JavaAPP -&gt; JDBC Interface -&gt; JDBC Driver(数据库提供) -&gt; Database<br>    JDBC_URL JDBC_USER JDBC_PASSWORD<br>    jdbc:mysql://localhost:3306/dbname<br>    getConnection()<br>    executeQuery()<br>        rs.next()<br>    executeUpdate()<br>    prepareStatement()<br>        ps.setObject()</p>
<pre><code># init.sql 初始化 meta-table
事务 ACID特性
事务 隔离级别
    脏读  read commit 避免脏读
    非重复读 repeatable read 避免非重复读
    幻读 serializable 避免幻读
setAutoCommit(false)
commit()
rollback()
setAutoCommit(true)
连接池
    hikariCP
    C3P0
    BoneCP
    Druid
</code></pre><p>JavaSwing<br>Maven<br>关系数据库</p>
<p>数据结构</p>
<ul>
<li>链式结构</li>
<li>树和图</li>
<li>存储结构</li>
</ul>
<p>设计模式</p>
<ul>
<li>设计模式原则<ul>
<li>开闭原则 对扩展开放，对修改关闭</li>
<li>依赖倒置原则 通过接口与实现类通信</li>
<li>迪米特法则 与好朋友通信，减少陌生人通信</li>
</ul>
</li>
<li>通过接口实现</li>
<li>单例模式<ul>
<li>懒汉模式</li>
<li>饿汉模式</li>
<li>内部静态类</li>
<li>枚举类</li>
</ul>
</li>
<li>工厂模式<ul>
<li>简单工厂模式</li>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
</ul>
</li>
<li>代理模式</li>
<li>装饰器模式</li>
<li>单例模式</li>
</ul>
<p>DAO</p>
<ul>
<li>分层模型</li>
<li>数据层</li>
<li>业务层</li>
</ul>
<p>依赖管理</p>
<ul>
<li>Maven</li>
<li>Gradle</li>
</ul>
<p>关系数据库<br>  SQL入门<br>对象关系映射 mybatis hibernate<br>权限管理 shiro<br>各种库 POI Http Client Jackson<br>Java web<br>  前端框架 bootstrap vue.js<br>  servlet</p>
<p>Spring<br>SpringMVC<br>Springboot<br>Springcloud</p>
<p>微服务<br>服务治理 spring cloud，dubbo<br>服务注册发现 eureka，zookeeper<br>API Gateway kong<br>Docker<br>Kubernetes</p>
<p>云服务</p>
<ul>
<li>IAAS</li>
<li>PAAS</li>
<li>SAAS</li>
<li>BAAS</li>
</ul>
<p>分布式系统项目实战<br>代码规范<br>UML starUML 亿图 visor</p>
<p>数据访问</p>
<ul>
<li>连接池</li>
<li>高可用</li>
<li>日志分析</li>
</ul>
<p>缓存与负载均衡</p>
<ul>
<li>Redis</li>
<li>CDN</li>
<li>Nginx</li>
</ul>
<p>消息队列</p>
<ul>
<li>ZeroMQ</li>
<li>RabbitMQ</li>
<li>Kafka</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Java面向对象</title>
    <url>/2020/06/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="/2020/05/Java%E7%BC%96%E7%A8%8B/" title="java编程">java编程</a></li>
<li><a href="/2020/06/Java%E9%AB%98%E7%BA%A7%E7%AF%87/" title="Java高级篇">Java高级篇</a></li>
<li></li>
<li><a href="/2020/06/SpringMVC/" title="SpringMVC">SpringMVC</a></li>
<li><a href="/2020/06/Springboot/" title="Springboot">Springboot</a></li>
<li><a href="https://spring.io" target="_blank" rel="noopener">spring</a></li>
<li><a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">java help</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="noopener">IBM cn community</a></li>
<li><a href="https://www.javatpoint.com/servlet-tutorial" target="_blank" rel="noopener">Servlet Docs</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/14/docs/api/index.html" target="_blank" rel="noopener">Java API</a></li>
</ul>
<h2 id="java-面向对象"><a href="#java-面向对象" class="headerlink" title="java 面向对象"></a>java 面向对象</h2><ul>
<li>类<ul>
<li>属性</li>
<li>方法</li>
</ul>
</li>
<li><p>对象</p>
<ul>
<li>实例变量</li>
</ul>
</li>
<li><p>Java 变量</p>
<ul>
<li>局部变量,在方法、构造方法或者语句块中定义的变量被称为局部变量。</li>
<li>成员变量（非静态变量）,成员变量是定义在类中，方法体之外的变量。局部变量是在栈上分配的。</li>
<li>类变量（静态变量）,类变量也声明在类中，方法体之外，但必须声明为static类型。静态变量储存在静态存储区</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> allClicks=<span class="number">0</span>;    <span class="comment">// 类变量 </span></span><br><span class="line">    String str=<span class="string">"hello world"</span>;  <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;  <span class="comment">// 局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Java 数组</li>
<li>Java 枚举</li>
</ul>
<blockquote>
<p>面向对象语言，优点是面向大型程序，缺点是封装过度。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># interface</span></span><br><span class="line"><span class="comment"># Class</span></span><br><span class="line"><span class="comment"># 封装 Encapsulation</span></span><br><span class="line"><span class="comment"># 抽象 Abstraction</span></span><br><span class="line"><span class="comment"># 继承 Inheritance</span></span><br><span class="line"><span class="comment"># 多态 Polymorphism</span></span><br><span class="line"><span class="comment"># UML</span></span><br><span class="line"><span class="comment"># Object</span></span><br><span class="line"><span class="comment"># new</span></span><br><span class="line"><span class="comment"># 方法 Methods</span></span><br><span class="line"><span class="comment"># 属性 Fields</span></span><br></pre></td></tr></table></figure>
<h3 id="构造方法-初始化对象用"><a href="#构造方法-初始化对象用" class="headerlink" title="构造方法(初始化对象用)"></a>构造方法(初始化对象用)</h3><p>构造方法的名称必须与类同名，一个类可以有多个构造方法。</p>
<h3 id="创建对象-这样写起来java也很简洁"><a href="#创建对象-这样写起来java也很简洁" class="headerlink" title="创建对象 (这样写起来java也很简洁)"></a>创建对象 (这样写起来java也很简洁)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 实例化对象 */</span></span><br><span class="line">Object rV = <span class="keyword">new</span> C();</span><br><span class="line"><span class="comment">/* 访问类中的变量 */</span></span><br><span class="line">rV.<span class="keyword">var</span>;</span><br><span class="line"><span class="comment">/* 访问类中的方法 */</span></span><br><span class="line">rV.method();</span><br></pre></td></tr></table></figure>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yanqi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yanqi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(); <span class="comment">// 父类</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student(); <span class="comment">// 子类</span></span><br><span class="line">        Person person1 = <span class="keyword">new</span> Student(); <span class="comment">// 父类引用指向子类对象</span></span><br><span class="line"></span><br><span class="line">        ((Student)person1).shout(); <span class="comment">// 父类引用调用子类的方法，需要把父类引用强转成子类引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不能把父类对象引用强制指向子类，编译时不报错，运行时报 java.lang.ClassCastException</span></span><br><span class="line"><span class="comment">//        ((Student)person).shout();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Person.run(); // 类直接调用静态方法</span></span><br><span class="line"><span class="comment">//        Student.run(); // 类直接调用静态方法</span></span><br><span class="line"></span><br><span class="line">        person.run(); <span class="comment">// 对象调用，运行的是各自的静态方法</span></span><br><span class="line">        student.run(); <span class="comment">// 对象调用，运行的是各自的静态方法</span></span><br><span class="line"></span><br><span class="line">        person1.shout(); <span class="comment">//虽然是person的引用，却调用了子类的方法，实现多态</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1、子类继承父类</span></span><br><span class="line"><span class="comment">         * 2、重写了父类的成员方法</span></span><br><span class="line"><span class="comment">         * 3、父类引用调用了子类的成员方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (student <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            System.out.println(<span class="string">"student is Person 的子类"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断 person 引用是否是父类的实例</span></span><br><span class="line">        System.out.println( person <span class="keyword">instanceof</span>  Student);</span><br><span class="line">        System.out.println( person1 <span class="keyword">instanceof</span>  Student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用抽象类的成员方法</span></span><br><span class="line">        person.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员方法 run</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员方法 shout</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person shout"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static void run()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println("student run");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员方法 run</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"student run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员方法 shout</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"student shout"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span>  <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Human"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Java高级篇</title>
    <url>/2020/06/Java%E9%AB%98%E7%BA%A7%E7%AF%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="/2020/05/Java%E7%BC%96%E7%A8%8B/" title="java编程">java编程</a></li>
<li><a href="/2020/06/Java%E9%AB%98%E7%BA%A7%E7%AF%87/" title="Java高级篇">Java高级篇</a></li>
<li></li>
<li><a href="/2020/06/SpringMVC/" title="SpringMVC">SpringMVC</a></li>
<li><a href="/2020/06/Springboot/" title="Springboot">Springboot</a></li>
<li><a href="https://spring.io" target="_blank" rel="noopener">spring</a></li>
<li><a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">java help</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="noopener">IBM cn community</a></li>
<li><a href="https://www.javatpoint.com/servlet-tutorial" target="_blank" rel="noopener">Servlet Docs</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/14/docs/api/index.html" target="_blank" rel="noopener">Java API</a></li>
</ul>
<h2 id="枚举类（enum）"><a href="#枚举类（enum）" class="headerlink" title="枚举类（enum）"></a>枚举类（enum）</h2><p>无法被继承<br>无法通过new操作符创建enum的实例<br>每个实例都是引用类型的唯一实例<br>可以将enum类型用于switch语句<br>因为enum是一个class，每个枚举的值都是class实例</p>
<h2 id="Java-异常处理"><a href="#Java-异常处理" class="headerlink" title="Java 异常处理"></a>Java 异常处理</h2><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>java 除了基本数据类型外，其余的都是class类型。<br>JVM 启动 -&gt; Class -&gt; class -&gt; class instance<br>JVM 为每个class 类创建了 Class 实例，并保存所有 class 的信息。<br>通过 Class实例获取class 信息的方法叫反射。</p>
<p>获取 Class 实例<br>String.class;<br>s.getClass();<br>Class.forName(“java.lang.String”)</p>
<p>实例比较 ==<br>instanceof 判断数据类型</p>
<p>通过Class实例获取的信息有哪些？<br>cls.getPackage()<br>cls.getName();<br>cls.getSimpleName();<br>cls.getSuperclass();<br>cls.getMethods();<br>cls.getConstructors();<br>cls.getFields();<br>cls.getAnnotations();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Class cls = String.class</span></span><br><span class="line">Class cls = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">Method[]  m = cls.getMethods();</span><br><span class="line"><span class="keyword">for</span> (Method mm:m</span><br><span class="line">      ) &#123;</span><br><span class="line">    System.out.println(mm.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>断言<br>cls.isArray()<br>cls.isAnnotation();<br>cls.isInstance()</p>
<p>创建实例<br>cls.newInstance()</p>
<blockquote>
<p>通过 SecurityManager 来反射阻止对 private 访问。</p>
</blockquote>
<h2 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解 Annotation"></a>注解 Annotation</h2><p>元注解<br>  @Target 可以应用于源码的位置，约束。<br>  @Retention 定义注解的生命周期，默认是 class。<br>    编译期<br>    class 期<br>    运行期<br>  @Repeatable<br>  @Inherited 定义注解是否能被继承</p>
<p>定义注解（使用元注解配置注解）<br>@interface</p>
<p>处理注解(使用反射处理注解)</p>
<blockquote>
<p>可以在运行期读取 RUNTIME 类型的注解</p>
<p>注解本身对程序逻辑没有任何影响</p>
<p>Annotation 也是类</p>
</blockquote>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>定义泛型 <T><br>使用泛型 <String></String></T></p>
<blockquote>
<p>不必对泛型进行强制转换，编译器会检查泛型类型。</p>
</blockquote>
<p>编译器推断泛型类型</p>
<h2 id="转型-Cast"><a href="#转型-Cast" class="headerlink" title="转型 Cast"></a>转型 Cast</h2><p>向上转型<br>向下转型</p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul>
<li><a href="/2020/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" title="设计模式">设计模式</a>
</li>
</ul>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ul>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_for_real_time/8/html/reference_guide/index" target="_blank" rel="noopener">Linux Process and Thread Reference</a></li>
</ul>
<p>Java 线程</p>
<blockquote>
<p>一个java程序是一个JVM进程<br>main() 负责启动多个线程<br>new Thread() 一个线程对象，实现 run() 访问<br>当一个类已经从另一个类派生，无法继承 Thread 类,可以使用Runable接口，实现一个run方法</p>
</blockquote>
<p>线程状态<br>    new<br>    runnable<br>    blocked<br>    waiting<br>    time waiting<br>    termiated</p>
<p>线程优先级</p>
<p>线程终止<br>    return 返回<br>    异常终止<br>    stop防止强制终止</p>
<p>主线程等待子线程结束 join()<br>线程阻塞 Thread.sleep(),this.wait()<br>中断线程 interrupt(),设置开关 while(switch)<br>共享变量设置 volatile 关键字，实现两个功能，获取主内存的最新值，解除乱序执行。<br>    主内存变量<br>    线程副本变量</p>
<ul>
<li>守护线程 setDaemon<pre><code>  守护线程不能持有任何资源
  守护线程用来处理定时任务
</code></pre>  线程同步 synchronized 语句块<pre><code>  原子操作：一个或一系列不可中断的操作
      基本类型赋值是原子操作，long和double除外
      引用类型赋值是原子操作
      局部变量不需要同步
  同步方法 synchronized void method(){}
  类同步   synchronized static
</code></pre>  线程安全<pre><code>  不变的类 String Integer LocalDate
  没有成员变量的类 Math
  正确使用 synchronized 类 StringBuffer
</code></pre>  死锁<pre><code>  不同线程获取不同对象的锁会形成死锁
  解决死锁
      获取锁顺序一致   
</code></pre>  线程等待 this.wait() 需要唤醒，会释放锁<br>  唤醒线程 this.notify()，this.notifyAll()<br>  线程超时</li>
</ul>
<ul>
<li>高级concurrent包<br>concurrent 包 1.5&gt;<pre><code>java.util.concurrent.locks.ReentrantLock 包
ReentrantLock 替换 synchronized try{}finally{}
    lock()
    tryLock(10)
临界区代码：任何时候只有一个线程执行
ReadWriteLock
Condition
    await 释放锁，等待
    signal 唤醒某个等待线程
    signalAll 唤醒所有等待线程
BlockingQueue
java.util.Collections 包
Collection 提供把非线程安全的集合转换成线程安全的
java.util.concurrent.ConcurrentHashMap 包
java.util.concurrent.atomic 包 无锁的线程安全
    计数器
    累加器
</code></pre></li>
<li><p>线程池<br>  ExecutorService<br>  NewFixedThreadPool(); 固定线程<br>  CacheTreadPool(); 动态调整<br>  SigleTreadExecutor(); 单线程<br>  ScheduledThreadExcutor(); </p>
<pre><code>  FixRate
  FixDelay
</code></pre><p>  submit() 提交任务<br>  shutdown() 关闭线程池</p>
</li>
<li><p>Callable 线程返回值处理<br>  Callable</p>
<pre><code>  call()
  get() 任务没结束，阻塞
</code></pre><p>  Future 获取线程将返回的值<br>  CompletableFature</p>
<pre><code>  thenAccept 正确执行异步回调方法
  exceptionally 异常执行异步回调方法
</code></pre><p>  可以串行执行</p>
<pre><code>  thenApplyAsync
</code></pre><p>  可以并行执行</p>
<pre><code>  Anyof
  Allof
</code></pre></li>
<li><p>Fork/Join 并行计算<br>  Fork/Join<br>  RecursiveTask 类</p>
<pre><code>  invokeAll 并行运行
</code></pre><p>  ForkJoinPool</p>
</li>
<li><p>ThreadLocal应用 线程数据绑定 MAP结构<br>  线程数据绑定 MAP结构<br>  TreadLocal<br>  get<br>  remove</p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2020/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>UML<br>OMG<br>OOD</p>
<p>UML 的分类<br>结构型图<br>  类图<br>  对象图<br>  构件图<br>  部署图<br>  包图<br>行为图<br>  活动图<br>  状态机图<br>  顺序图<br>  通信图<br>  用例图<br>  时序图</p>
<h2 id="UML-使用工具"><a href="#UML-使用工具" class="headerlink" title="UML 使用工具"></a>UML 使用工具</h2><p>starUML</p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>耦合<br>解耦合</p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h4><figure class="highlight java"><figcaption><span>简单工厂模式</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.samplefactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 产品接口</span></span><br><span class="line"><span class="comment"> * 工厂类创建产品方法</span></span><br><span class="line"><span class="comment"> * 产品实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 客户端调用，通过 工厂类创建方法获取产品。不需要关注具体实现。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IAirport airport = <span class="keyword">new</span> AirportFactory().getNanAirport();</span><br><span class="line">        airport.shoping();</span><br><span class="line">        airport.booking();</span><br><span class="line">        <span class="comment">// 扩展</span></span><br><span class="line">        IAirport airport1 = <span class="keyword">new</span> AirportFactory().getGuoAirport();</span><br><span class="line">        airport1.shoping();</span><br><span class="line">        airport1.booking();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IAirport</span></span>&#123;</span><br><span class="line">    <span class="function">IAirport <span class="title">shoping</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">IAirport <span class="title">booking</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现工厂类(需要需改工厂方法，扩展新产品)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirportFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">getNanAirport</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NanAirport();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 扩展</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">getGuoAirport</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GuoAirport();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NanAirport</span> <span class="keyword">implements</span> <span class="title">IAirport</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">shoping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"nan shopping"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">booking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"nan booking"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuoAirport</span> <span class="keyword">implements</span> <span class="title">IAirport</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">shoping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"guo shopping"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">booking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"guo booking"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h4><figure class="highlight java"><figcaption><span>工厂方法模式</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂方法模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 工厂接口</span></span><br><span class="line"><span class="comment"> * 产品接口</span></span><br><span class="line"><span class="comment"> * 工厂实现类</span></span><br><span class="line"><span class="comment"> * 产品实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 客户端调用</span></span><br><span class="line"><span class="comment"> * 需要知道工厂实现类，产品接口，不关注实现细节。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 航司</span></span><br><span class="line"><span class="comment"> * 查询</span></span><br><span class="line"><span class="comment"> * 生单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IAirport airport = <span class="keyword">new</span> NanAirport();</span><br><span class="line">        airport.shopping();</span><br><span class="line">        airport.booking();</span><br><span class="line">        <span class="comment">// 扩展</span></span><br><span class="line">        IAirport airport1 = <span class="keyword">new</span> GuoAirport();</span><br><span class="line">        airport1.shopping();</span><br><span class="line">        airport1.booking();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IAirportFactory</span></span>&#123;</span><br><span class="line">    <span class="function">IAirport <span class="title">getIAirport</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IAirport</span></span>&#123;</span><br><span class="line">    <span class="function">IAirport <span class="title">shopping</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">IAirport <span class="title">booking</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirportFactory</span> <span class="keyword">implements</span> <span class="title">IAirportFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">getIAirport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NanAirport();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NanAirport</span> <span class="keyword">implements</span> <span class="title">IAirport</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">shopping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"nan shopping"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">booking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"nan booking"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuoAirportFactory</span> <span class="keyword">implements</span> <span class="title">IAirportFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">getIAirport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GuoAirport();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuoAirport</span> <span class="keyword">implements</span> <span class="title">IAirport</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">shopping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"guo shopping"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAirport <span class="title">booking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"guo booking"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h4><figure class="highlight java"><figcaption><span>抽象工厂模式</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.abstructfactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂模式</span></span><br><span class="line"><span class="comment"> * 可以扩展多个产品大类，工厂模式只能扩展一个产品大类</span></span><br><span class="line"><span class="comment"> * 产品族：一个工厂生产不同等级的一组产品</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 抽象工厂类</span></span><br><span class="line"><span class="comment"> * 具体工厂类</span></span><br><span class="line"><span class="comment"> * 抽象产品类</span></span><br><span class="line"><span class="comment"> * 具体产品类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 数据库 mysql，oracle，db2</span></span><br><span class="line"><span class="comment"> * 数据库共同方法 connection command</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IDatabaseUtils iDatabaseUtils = <span class="keyword">new</span> MysqlDatabaseUtil();</span><br><span class="line">        <span class="comment">// 获取数据库连接</span></span><br><span class="line">        IConnection iConnection = iDatabaseUtils.getConnected();</span><br><span class="line">        iConnection.connected();</span><br><span class="line">        <span class="comment">// 执行数据库命令</span></span><br><span class="line">        ICommand icommand = iDatabaseUtils.getCommand();</span><br><span class="line">        icommand.command();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扩展数据库</span></span><br><span class="line">        IDatabaseUtils iDatabaseUtils1 = <span class="keyword">new</span> OracleDatabaseUtil();</span><br><span class="line">        <span class="comment">// 获取数据库连接</span></span><br><span class="line">        IConnection iConnection1 = iDatabaseUtils1.getConnected();</span><br><span class="line">        iConnection1.connected();</span><br><span class="line">        <span class="comment">// 执行数据库命令</span></span><br><span class="line">        ICommand icommand1 = iDatabaseUtils1.getCommand();</span><br><span class="line">        icommand1.command();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IConnection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connected</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICommand</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">command</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加方法（需要修改此接口）</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IDatabaseUtils</span></span>&#123;</span><br><span class="line">    <span class="function">IConnection <span class="title">getConnected</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ICommand <span class="title">getCommand</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mysql 实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlConnection</span> <span class="keyword">implements</span> <span class="title">IConnection</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql database connected"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql database command execute"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlDatabaseUtil</span> <span class="keyword">implements</span> <span class="title">IDatabaseUtils</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IConnection <span class="title">getConnected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MysqlConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICommand <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MysqlCommand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展 oracle数据库（不需要修改类，满足开闭原则）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleConnection</span> <span class="keyword">implements</span> <span class="title">IConnection</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"orcle connected"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"oracle command exec"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleDatabaseUtil</span> <span class="keyword">implements</span> <span class="title">IDatabaseUtils</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IConnection <span class="title">getConnected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OracleConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICommand <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OracleCommand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>DAO设计模式</title>
    <url>/2020/06/DAO%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="DAO-设计模式"><a href="#DAO-设计模式" class="headerlink" title="DAO 设计模式"></a>DAO 设计模式</h2><p>程序中分层<br>  显示层<br>  控制层<br>  业务层 BO Service -&gt; 总业务层 -&gt; 子业务层<br>  数据层 DAO -&gt; 原子性操作<br>  数据库</p>
<p>对应的类实现</p>
<h2 id="数据层"><a href="#数据层" class="headerlink" title="  数据层"></a>  数据层</h2><p>  VO(emp) 类的实现<br>  DatabaseConnection 数据库的连接类<br>  IDAO 泛型顶层接口<br>  IEmpDAO 子接口<br>  EmpDAOImpl 接口实现类<br>  DAOFactory DAO工厂类</p>
<h2 id="业务层"><a href="#业务层" class="headerlink" title="  业务层"></a>  业务层</h2><p>  IEmpService Emp 服务接口<br>  EmpServiceImpl 接口实现类<br>  ServiceFactory Service工厂</p>
<p>数据库的连接类<br>ValueObject 简单java 类<br>  必须提供 Serializable 接口<br>  必须与表名保持一致<br>  必须使用基本数据类型的包装类<br>  封装后提供 setter，getter方法<br>  必须保留一个无参构造方法</p>
<p>两个层之间要想通信，必须实现一个标准接口</p>
<p>开发数据层操作命名规范<br>  新建数据 doxxx<br>  查询数据 findxxx<br>  统计数据 getxxx</p>
<p>包的命名规范<br>  vo 包<br>  dao 包<br>  Impl 包<br>  factory 包<br>  test 包</p>
<p>不同层之间调用接口类需要实现工厂设计模式<br>定义数据层工厂类</p>
<p>控制层开发完成，后端核心就完成了<br>需要编写测试<br>  调用测试<br>  junit 测试</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2020/06/javaServlet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="/2020/05/Java%E7%BC%96%E7%A8%8B/" title="java编程">java编程</a></li>
<li><a href="/2020/06/Java%E9%AB%98%E7%BA%A7%E7%AF%87/" title="Java高级篇">Java高级篇</a></li>
<li></li>
<li><a href="/2020/06/SpringMVC/" title="SpringMVC">SpringMVC</a></li>
<li><a href="/2020/06/Springboot/" title="Springboot">Springboot</a></li>
<li><a href="https://spring.io" target="_blank" rel="noopener">spring</a></li>
<li><a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">java help</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="noopener">IBM cn community</a></li>
<li><a href="https://www.javatpoint.com/servlet-tutorial" target="_blank" rel="noopener">Servlet</a></li>
</ul>
<h2 id="intellj-create-WEB-Project"><a href="#intellj-create-WEB-Project" class="headerlink" title="intellj create WEB Project"></a>intellj create WEB Project</h2><p>create WEB application</p>
<h2 id="WEB-访问流程"><a href="#WEB-访问流程" class="headerlink" title="WEB 访问流程"></a>WEB 访问流程</h2><p>tomcatserver -&gt; servlet-mapping(web.xml) -&gt; myjava 类 -&gt; extends HttpServlet</p>
<h2 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h2><p>init<br>service<br>doGet<br>doPost<br>destory</p>
<p>xml配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!-- 别名  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定servlet类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1表示容器启动时就初始化servlet --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置对应servlet 拦截url与应用中contrller的url的映射规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>index<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--  激活tomcat中 defaultServlet 来拦截静态资源的请求，直接使用defaultServlet 来处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/swagger-ui.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>使用注解来替代xml配置<br>@WebServlet(name=mySerlet,urlPatterns=”/index”)</p>
</blockquote>
<h2 id="使用-JDBC"><a href="#使用-JDBC" class="headerlink" title="使用 JDBC"></a>使用 JDBC</h2><h2 id="使用-postman-工具"><a href="#使用-postman-工具" class="headerlink" title="使用 postman 工具"></a>使用 postman 工具</h2><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>application<br>session<br>request<br>response<br>config<br>exception<br>page<br>out<br>pageContext</p>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>context   web 应用（从tomcat启动到关闭）<br>session   会话中（浏览器开启到关闭）<br>request   一个请求中<br>page      当前页</p>
<p>getAttribute<br>setAttribute<br>getStatus</p>
<h2 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器 Filter"></a>过滤器 Filter</h2><p>init<br>doFilter<br>destory</p>
<h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><h2 id="JSP-标签"><a href="#JSP-标签" class="headerlink" title="JSP 标签"></a>JSP 标签</h2>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2020/06/SpringMVC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="/2020/05/Java%E7%BC%96%E7%A8%8B/" title="java编程">java编程</a></li>
<li><a href="/2020/06/Java%E9%AB%98%E7%BA%A7%E7%AF%87/" title="Java高级篇">Java高级篇</a></li>
<li></li>
<li><a href="/2020/06/SpringMVC/" title="SpringMVC">SpringMVC</a></li>
<li><a href="/2020/06/Springboot/" title="Springboot">Springboot</a></li>
<li><a href="https://spring.io" target="_blank" rel="noopener">spring</a></li>
<li><a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">java help</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="noopener">IBM cn community</a></li>
<li><a href="https://www.javatpoint.com/servlet-tutorial" target="_blank" rel="noopener">Servlet</a></li>
</ul>
<p>org.springframework<br>serlet</p>
]]></content>
  </entry>
  <entry>
    <title>Springboot</title>
    <url>/2020/06/Springboot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="/2020/05/Java%E7%BC%96%E7%A8%8B/" title="java编程">java编程</a></li>
<li><a href="/2020/06/Java%E9%AB%98%E7%BA%A7%E7%AF%87/" title="Java高级篇">Java高级篇</a></li>
<li></li>
<li><a href="/2020/06/SpringMVC/" title="SpringMVC">SpringMVC</a></li>
<li><a href="/2020/06/Springboot/" title="Springboot">Springboot</a></li>
<li><a href="https://spring.io" target="_blank" rel="noopener">spring</a></li>
<li><a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">java help</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="noopener">IBM cn community</a></li>
<li><a href="https://www.javatpoint.com/servlet-tutorial" target="_blank" rel="noopener">Servlet</a></li>
</ul>
<h2 id="springboot-hello"><a href="#springboot-hello" class="headerlink" title="springboot hello"></a>springboot hello</h2><ul>
<li><a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">springboot hello</a></li>
</ul>
<h3 id="创建一个maven项目"><a href="#创建一个maven项目" class="headerlink" title="创建一个maven项目"></a>创建一个maven项目</h3><p>file -&gt; new -&gt; maven</p>
<h3 id="修改-pom-xml-文件-父"><a href="#修改-pom-xml-文件-父" class="headerlink" title="修改 pom.xml 文件(父)"></a>修改 pom.xml 文件(父)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加父项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yanqi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 修改为pom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加子模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springboot-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springboot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springboot-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="添加子模块-springboot01"><a href="#添加子模块-springboot01" class="headerlink" title="添加子模块 springboot01"></a>添加子模块 springboot01</h3><p>file -&gt; new -&gt; module</p>
<h3 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;version&gt;2.3.1.RELEASE&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yanqi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="新建-controller-类"><a href="#新建-controller-类" class="headerlink" title="新建 controller 类"></a>新建 controller 类</h3><p>springboot01 -&gt; new -&gt; package -&gt;controller -&gt; HelloController.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Greetings from Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>Springboot01Application.java -&gt; run</p>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>curl <a href="http://127.0.0.1:8080/hello" target="_blank" rel="noopener">http://127.0.0.1:8080/hello</a></p>
<h2 id="前端控制器"><a href="#前端控制器" class="headerlink" title="前端控制器"></a>前端控制器</h2><p>DispatcherServlet</p>
<h2 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h2><p>client -&gt; DispatcherServlet -&gt; mappingHandler -&gt; HandlerAdapter -&gt; Hanlder -&gt; ViewResolver -&gt; View</p>
<h2 id="create-SpringMVC-project"><a href="#create-SpringMVC-project" class="headerlink" title="create SpringMVC project"></a>create SpringMVC project</h2><p>创建web项目<br>导入jar包<br>创建配置文件 springmvc.xml<br>加入约束<br>加入扫描控制层包<br>web.xml 配置控制器<br>创建 ModelAndView 把数据库的数据渲染到页面<br>创建 Controller 类</p>
<p>springboot<br>xml -&gt; 注解 -&gt; java配置</p>
<p>整合配置<br>  JPA<br>  MyBatis<br>  Redis<br>  Junit<br>  DAO</p>
<p>Maven</p>
<p>创建项目<br>  父工程</p>
<p>idea -&gt; Spring Initializr<br>  配置如何编写 yaml<br>  自动装配<br>  集成web开发<br>  数据库 Druid<br>  分布式开发 Dubbo+ zookeeper<br>  swagger 接口文档<br>  任务调度<br>  SpringSecrity：shiro</p>
<p>springcloud<br>  Restful<br>  Eureka<br>  Ribbon<br>  Feign<br>  HyStrix<br>  Zuul 路由网关<br>  SpringCloud config： git</p>
<p>JVM： 2天</p>
<p>POJO 轻量级bean 实体类<br>IOC 依赖注入<br>AOP 面向切面<br>  通过切面模板减少代码</p>
<p>MVC MVVM 微服务架构</p>
<p>http/rpc</p>
<p><strong>pom.xml</strong></p>
<p><strong>自动装配</strong><br>  启动器 -&gt; 寻找相关依赖</p>
<p><strong>主程序</strong><br>自动配置</p>
<p>启动器 pom.xml dependency</p>
<h1 id="idea-Maven-repository-配置"><a href="#idea-Maven-repository-配置" class="headerlink" title="idea Maven repository 配置"></a>idea Maven repository 配置</h1><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">cp /Applications/IntelliJ\ IDEA.app/Contents/plugins/maven/<span class="class"><span class="keyword">lib</span>/<span class="title">maven3</span>/<span class="title">conf</span>/<span class="title">settings</span>.<span class="title">xml</span> /<span class="title">Users</span>/<span class="title">alert</span>/.<span class="title">m2</span>/</span></span><br><span class="line">vim /Users/alert/.m2/settings.xml</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;aliyunmaven&lt;<span class="regexp">/id&gt;</span></span><br><span class="line"><span class="regexp">    &lt;mirrorOf&gt;*&lt;/mirror</span>Of&gt;</span><br><span class="line">    &lt;name&gt;阿里云公共仓库&lt;<span class="regexp">/name&gt;</span></span><br><span class="line"><span class="regexp">    &lt;url&gt;https:/</span><span class="regexp">/maven.aliyun.com/repository</span><span class="regexp">/public&lt;/url</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/mirror&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">IntelliJ IDEA中Maven pom.xml依赖不生效</span></span><br><span class="line"><span class="regexp">右击pom.xml文件——&gt;Maven --&gt; reloadproject</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ShellTrap</title>
    <url>/2020/06/ShellTrap/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
  </entry>
  <entry>
    <title>ShellSocket</title>
    <url>/2020/06/ShellSocket/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>网络 socket<br>nc socket 工具<br>exec 描述符工具</p>
<p>shell的FD通常为10个，即 0～9<br>常用FD有3个，为0（stdin，标准输入）、1（stdout，标准输出）、2（stderr，标准错误输出）<br>管道“|”(pipe line):上一个命令的 stdout 接到下一个命令的 stdin</p>
<p>1&gt;&amp;- 关闭标准输出<br>n&gt;&amp;- 表示将 n 号输出关闭<br>exec 0&gt;&amp;- 退出终端，关闭 0 标准输入</p>
<p>w 查看谁在登录，都在执行什么<br>tty 查看当前的 tty中断<br>pts 远程终端<br>echo “abc” &gt;/dev/ttys003 向 tty s003 用户输出</p>
<p>当前进程打开描述符<br>/proc/self/fd<br>其他进程打开描述符<br>/proc/pid/fd</p>
<p>建立socket的两种方式<br>udp:/dev/udp/host/port<br>tcp:/dev/tcp/host/port</p>
<h2 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -l 1234</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">-l, --listen</span><br></pre></td></tr></table></figure>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc 127.0.0.1 1234</span><br></pre></td></tr></table></figure>
<h2 id="把字符串解释成命令"><a href="#把字符串解释成命令" class="headerlink" title="把字符串解释成命令"></a>把字符串解释成命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># eval 把字符串解释成命令</span></span><br><span class="line">nc -l 1234|<span class="keyword">while</span> <span class="built_in">read</span> i;<span class="keyword">do</span> <span class="built_in">eval</span> <span class="variable">$i</span>;<span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h2 id="连接-127-0-0-1-11211-端口"><a href="#连接-127-0-0-1-11211-端口" class="headerlink" title="连接 127.0.0.1 11211 端口"></a>连接 127.0.0.1 11211 端口</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绑定 socket 到描述符</span></span><br><span class="line"><span class="built_in">exec</span> 8&lt;&gt;/dev/tcp/127.0.0.1/11211</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件描述符(linux)</span></span><br><span class="line">ls -l /proc/self/fd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向描述符写 stats </span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"stats"</span> &gt;&amp;8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从描述符读数据</span></span><br><span class="line">cat &lt;&amp;8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭描述符</span></span><br><span class="line"><span class="built_in">exec</span> 8&lt;&amp;-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 socket</span></span><br><span class="line"><span class="built_in">exec</span> 8&gt;&amp;-</span><br></pre></td></tr></table></figure>
<h2 id="shell-远程socket连接-linux"><a href="#shell-远程socket连接-linux" class="headerlink" title="shell 远程socket连接(linux)"></a>shell 远程socket连接(linux)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># client 打开 5354 监听</span></span><br><span class="line">nc -l 5354</span><br><span class="line"></span><br><span class="line"><span class="comment"># server 打开 bash</span></span><br><span class="line">nc -t -e /bin/bash 127.0.0.1 5354</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">-e, --<span class="built_in">exec</span> &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">-t, --telnet</span><br></pre></td></tr></table></figure>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -v -w 2 192.168.2.34 -z 21-24</span><br></pre></td></tr></table></figure>
<h2 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在192.168.2.10上： nc -l 1234 &gt; test.txt</span><br><span class="line">在192.168.2.11上： nc 192.168.2.34 &lt; test.txt</span><br></pre></td></tr></table></figure>
<h2 id="远程克隆硬盘或分区"><a href="#远程克隆硬盘或分区" class="headerlink" title="远程克隆硬盘或分区"></a>远程克隆硬盘或分区</h2><p>nc -l -p 1234 | dd of=/dev/sda<br>dd if=/dev/sda | nc 192.168.10.10 1234</p>
<h2 id="获取网页源代码和返回头部信息"><a href="#获取网页源代码和返回头部信息" class="headerlink" title="获取网页源代码和返回头部信息"></a>获取网页源代码和返回头部信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc www.baidu.com 80 &gt;index.html</span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: my-browser</span><br><span class="line"></span><br><span class="line"><span class="comment"># the other way</span></span><br><span class="line"><span class="built_in">exec</span> 3&lt;&gt;/dev/tcp/www.google.com/80</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"GET / HTTP/1.1\r\nhost: http://www.google.com\r\nConnection: close\r\n\r\n"</span> &gt;&amp;3</span><br><span class="line">cat &lt;&amp;3 </span><br><span class="line"></span><br><span class="line"><span class="comment"># three way</span></span><br><span class="line"><span class="comment"># 发送command</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> i ;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>"</span> | nc 127.0.0.1 22222 ;<span class="keyword">done</span></span><br><span class="line"><span class="comment"># 接受 command</span></span><br><span class="line">nc -l 22222  -k|(<span class="keyword">while</span> <span class="built_in">read</span> i ;<span class="keyword">do</span> <span class="built_in">eval</span> <span class="string">"<span class="variable">$i</span>"</span>;<span class="keyword">done</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">-k, --keep-open 接受多次连接</span><br></pre></td></tr></table></figure>
<h2 id="传输目录"><a href="#传输目录" class="headerlink" title="传输目录"></a>传输目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听</span></span><br><span class="line">nc -l 1234 |tar xvf -</span><br><span class="line"><span class="comment"># 传输</span></span><br><span class="line">tar cvf - ./linux-amd64|nc 127.0.0.1 1234</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩传输</span></span><br><span class="line">nc -l 1234 |tar zxvf -</span><br><span class="line">tar zcvf - ./linux-amd64|nc 127.0.0.1 1234</span><br></pre></td></tr></table></figure>
<h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">"ls"</span>|nc 127.0.0.1 1234</span><br><span class="line"></span><br><span class="line">nc -p 1234 -w 5 host.example.com 80</span><br><span class="line">nc -u host.example.com 53</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">-w, --<span class="built_in">wait</span> &lt;time&gt;</span><br><span class="line">-p, --<span class="built_in">source</span>-port port</span><br><span class="line">-U, --unixsock</span><br><span class="line">-u, --udp</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>buildkit</title>
    <url>/2020/06/buildkit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>[buildkit github]{<a href="https://github.com/moby/buildkit}" target="_blank" rel="noopener">https://github.com/moby/buildkit}</a></li>
</ul>
<h2 id="install-for-mac"><a href="#install-for-mac" class="headerlink" title="install for mac"></a>install for mac</h2><p>brew install buildkit</p>
<p><strong>To show local build cache</strong> (/var/lib/buildkit):</p>
<p>buildctl du -v<br>To prune local build cache:</p>
<p>buildctl prune</p>
<p><strong>To run daemon in a container</strong>:<br>docker run -d —name buildkitd —privileged moby/buildkit:latest<br>export BUILDKIT_HOST=docker-container://buildkitd<br>buildctl build —help</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Yapi</title>
    <url>/2020/06/Yapi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://hellosean1025.github.io/yapi/index.html" target="_blank" rel="noopener">Yapi</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>goVendor</title>
    <url>/2020/06/goVendor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>go get -u github.com/kardianos/govendor</p>
<p>export PATH=”$GOPATH/bin:$PATH”</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在项目根目录下执行以下命令进行 vendor 初始化：<br>govendor init</p>
<p>govendor list</p>
<p>govendor list -v fmt</p>
<p>govendor fetch golang.org/x/net/context</p>
<p>只格式化项目自身代码<br>govendor fmt +local</p>
<p>只构建编译项目内部的包<br>govendor install +local</p>
<p>只测试项目内部的测试案例<br>govendor test +local</p>
<p>拉取所有依赖的包到 vendor 目录<br>govendor fetch +out</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>子命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>init</td>
<td>创建 vendor 目录和 vendor.json 文件</td>
</tr>
<tr>
<td>list</td>
<td>列出&amp;过滤依赖包及其状态</td>
</tr>
<tr>
<td>add</td>
<td>从 $GOPATH 复制包到项目 vendor 目录</td>
</tr>
<tr>
<td>update</td>
<td>从 $GOPATH 更新依赖包到项目 vendor 目录</td>
</tr>
<tr>
<td>remove</td>
<td>从 vendor 目录移除依赖的包</td>
</tr>
<tr>
<td>status</td>
<td>列出所有缺失、过期和修改过的包</td>
</tr>
<tr>
<td>fetch</td>
<td>从远程仓库添加或更新包到项目 vendor 目录(不会存储到 $GOPATH)</td>
</tr>
<tr>
<td>sync</td>
<td>根据 vendor.json 拉取相匹配的包到 vendor 目录</td>
</tr>
<tr>
<td>migrate</td>
<td>从其他基于 vendor 实现的包管理工具中一键迁移</td>
</tr>
<tr>
<td>get</td>
<td>与 go get 类似，将包下载到 $GOPATH，再将依赖包复制到 vendor 目录</td>
</tr>
<tr>
<td>license</td>
<td>列出所有依赖包的 LICENSE</td>
</tr>
<tr>
<td>shell</td>
<td>可一次性运行多个 govendor 命令</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>状态</th>
<th>缩写</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>+local</td>
<td>l</td>
<td>本地包，即项目内部编写的包</td>
</tr>
<tr>
<td>+external</td>
<td>e</td>
<td>外部包，即在 GOPATH 中、却不在项目 vendor 目录</td>
</tr>
<tr>
<td>+vendor</td>
<td>v</td>
<td>已在 vendor 目录下的包</td>
</tr>
<tr>
<td>+std</td>
<td>s</td>
<td>标准库里的包</td>
</tr>
<tr>
<td>+excluded</td>
<td>x</td>
<td>明确被排除的外部包</td>
</tr>
<tr>
<td>+unused</td>
<td>u</td>
<td>未使用的包，即在 vendor 目录下，但项目中并未引用到</td>
</tr>
<tr>
<td>+missing</td>
<td>m</td>
<td>被引用了但却找不到的包</td>
</tr>
<tr>
<td>+program</td>
<td>p</td>
<td>主程序包，即可被编译为执行文件的包</td>
</tr>
<tr>
<td>+outside</td>
<td></td>
<td>相当于状态为 +external +missing</td>
</tr>
<tr>
<td>+all</td>
<td></td>
<td>所有包</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>编程</category>
        <category>GO</category>
      </categories>
  </entry>
  <entry>
    <title>Logrus</title>
    <url>/2020/06/Logrus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>swagger</title>
    <url>/2020/06/swagger/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://swagger.io/" target="_blank" rel="noopener">开源的 API 框架 swagger</a></li>
<li><a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">swagger-ui</a></li>
<li><a href="https://swagger.io/tools/open-source/open-source-integrations/" target="_blank" rel="noopener">swagger tools</a></li>
<li><a href="https://swagger.io/docs/open-source-tools/swagger-codegen/" target="_blank" rel="noopener">swagger-codegen</a></li>
</ul>
<h2 id="swagger-根据-yaml-生成代码"><a href="#swagger-根据-yaml-生成代码" class="headerlink" title="swagger 根据 yaml 生成代码"></a>swagger 根据 yaml 生成代码</h2><p>java -jar swagger-codegen-cli.jar generate -i swagger.yaml -o client -l java -c config.json</p>
<h2 id="mac-install"><a href="#mac-install" class="headerlink" title="mac install"></a>mac install</h2><p>brew install swagger-codegen<br>or<br>wget <a href="https://oss.sonatype.org/content/repositories/releases/io/swagger/swagger-codegen-cli/2.2.1/swagger-codegen-cli-2.2.1.jar" target="_blank" rel="noopener">https://oss.sonatype.org/content/repositories/releases/io/swagger/swagger-codegen-cli/2.2.1/swagger-codegen-cli-2.2.1.jar</a></p>
<p>swagger-codegen version<br>swagger-codegen -h<br>swagger-codegen help generate<br>swagger-codegen config-help -l php<br>swagger-codegen generate -i <a href="http://petstore.swagger.io/v2/swagger.json" target="_blank" rel="noopener">http://petstore.swagger.io/v2/swagger.json</a> -l csharp<br>swagger-codegen generate -i ./swagger.yaml -l go-server</p>
<h3 id="swagger-示例"><a href="#swagger-示例" class="headerlink" title="swagger 示例"></a>swagger 示例</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#必要字段！Swagger规范版本，必须填2.0，否则该YAML将不能用于Swagger其他组件</span></span><br><span class="line"><span class="attr">swagger:</span> <span class="string">'2.0'</span></span><br><span class="line"><span class="comment">#必要字段！描述API接口信息的元数据</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="comment">#接口标题</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">swagger说明文档</span>　</span><br><span class="line">  <span class="comment">#接口文档的描述</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">学习Swagger</span></span><br><span class="line">  <span class="comment">#版本号</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#Swagger会提供测试用例，host指定测试时的主机名，如果没有指定就是当前主机,可以指定端口．</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">#定义的api的前缀，必须已/开头,测试用例的主机则为:host＋bashPath</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">/api</span></span><br><span class="line"><span class="comment">#指定调用接口的协议，必须是:"http", "https", "ws", "wss"．默认是http.-表示是个数组元素，即schemes接受一个数组参数</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">http</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https</span></span><br><span class="line"><span class="comment">#对应与http协议头request的Accept，调用者可接受类型,默认是*/*,定义的类型必须是http协议定义的 Mime Types,RestfulAPI一般定义成application/json</span></span><br><span class="line"><span class="comment">#这两个是对所有接口的全局设置，在细化的接口中是还可以对应这两个属性来覆盖全局属性</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">application/json</span></span><br><span class="line"><span class="comment">#必要字段!定义可有可操作的API</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users:</span></span><br><span class="line">    <span class="comment">#必要字段!定义HTTP操作方法，必须是http协议定义的方法</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="comment">#接口概要</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">查询所有用户信息</span></span><br><span class="line">      <span class="comment">#接口描述</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">查询出所有用户的所有信息，用户名，别名</span></span><br><span class="line">      <span class="comment">#标签，方便快速过滤出User相关的接口</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">User</span></span><br><span class="line">      <span class="comment">#返回值描述，必要自动</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="comment">#返回的http状态码</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">所有用户信息或者用户的集合信息</span></span><br><span class="line">          <span class="comment">#描述返回值</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="comment">#返回值格式，可选的有array,integer,string,boolean</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">            <span class="comment">#针对array,每个条目的格式,type定义为array．必要填写items</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="comment">#引用在definitions下定义的Users</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">'#/definitions/User'</span></span><br><span class="line">        <span class="comment">#执行出错的处理</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="comment">#值类型</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">            <span class="comment">#定义属性</span></span><br><span class="line">            <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">              <span class="attr">message:</span></span><br><span class="line">                <span class="comment">#类型</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 api</span></span><br><span class="line">swagger-codegen generate -i ./swagger.yaml -l go-server</span><br><span class="line">go mod init</span><br><span class="line">go mod why</span><br><span class="line">go mod download</span><br><span class="line">go get</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改包引用</span></span><br><span class="line">sw <span class="string">"./go"</span> -&gt; sw <span class="string">"goapi/go"</span></span><br><span class="line"></span><br><span class="line">go build main.go</span><br><span class="line">./main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">curl http://127.0.0.1:8080/api/</span><br></pre></td></tr></table></figure>
<h2 id="swagger-yaml-说明"><a href="#swagger-yaml-说明" class="headerlink" title="swagger.yaml 说明"></a>swagger.yaml 说明</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#必要字段！Swagger规范版本，必须填2.0，否则该YAML将不能用于Swagger其他组件</span></span><br><span class="line"><span class="attr">swagger:</span> <span class="string">'2.0'</span></span><br><span class="line"><span class="comment">#必要字段！描述API接口信息的元数据</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="comment">#接口标题</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">swagger说明文档</span>　</span><br><span class="line">  <span class="comment">#接口文档的描述</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">学习Swagger</span></span><br><span class="line">  <span class="comment">#版本号</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#Swagger会提供测试用例，host指定测试时的主机名，如果没有指定就是当前主机,可以指定端口．</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">#定义的api的前缀，必须已/开头,测试用例的主机则为:host＋bashPath</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">/api</span></span><br><span class="line"><span class="comment">#指定调用接口的协议，必须是:"http", "https", "ws", "wss"．默认是http.-表示是个数组元素，即schemes接受一个数组参数</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">http</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https</span></span><br><span class="line"><span class="comment">#对应与http协议头request的Accept，调用者可接受类型,默认是*/*,定义的类型必须是http协议定义的 Mime Types,RestfulAPI一般定义成application/json</span></span><br><span class="line"><span class="comment">#这两个是对所有接口的全局设置，在细化的接口中是还可以对应这两个属性来覆盖全局属性</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">application/json</span></span><br><span class="line"><span class="comment">#必要字段!定义可有可操作的API</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users:</span></span><br><span class="line">   <span class="comment">#必要字段!定义HTTP操作方法，必须是http协议定义的方法</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="comment">#接口概要</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">查询所有用户信息</span></span><br><span class="line">      <span class="comment">#接口描述</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">查询出所有用户的所有信息，用户名，别名</span></span><br><span class="line">      <span class="comment">#标签，方便快速过滤出User相关的接口</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">User</span></span><br><span class="line">      <span class="comment">#返回值描述，必要自动</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="comment">#返回的http状态码</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">所有用户信息或者用户的集合信息</span></span><br><span class="line">          <span class="comment">#描述返回值</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="comment">#返回值格式，可选的有array,integer,string,boolean</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">            <span class="comment">#针对array,每个条目的格式,type定义为array．必要填写items</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="comment">#引用在definitions下定义的Users</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">'#/definitions/User'</span></span><br><span class="line">        <span class="comment">#执行出错的处理</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="comment">#值类型</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">            <span class="comment">#定义属性</span></span><br><span class="line">            <span class="attr">properties:</span></span><br><span class="line">            <span class="comment">#属性名</span></span><br><span class="line">              <span class="attr">message:</span></span><br><span class="line">                <span class="comment">#类型</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="comment">#即对于同一个url定义两个不同的方法，表示两个接口</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">注册一个用户</span></span><br><span class="line">      <span class="comment">#请求参数</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">          <span class="comment">#参数key</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">username</span></span><br><span class="line">          <span class="comment">#传递方法，formData表示表单传输，还有query表示url拼接传输，path表示作为url的一部分</span></span><br><span class="line">          <span class="comment">#body表示http头承载参数(body只能有一个,有body不能在有其他的)</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">formData</span></span><br><span class="line">          <span class="comment">#参数描述</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">用户名，不能使用已经被注册过的</span></span><br><span class="line">          <span class="comment">#参数是否必要，默认false</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment">#参数类型，可选的包括array,integer,boolean,string.使用array必须使用items</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">password</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">formData</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">用户登陆密码，加密传输，加密存储</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alias</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">formData</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">用户别名</span></span><br><span class="line">          <span class="comment">#非必要字段</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="comment">#返回的http状态码</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">通过返回值来标示执行结果</span>　<span class="string">返回true表示执行成功</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">             <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">status:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">                  <span class="comment">#描述</span></span><br><span class="line">                  <span class="attr">description:</span> <span class="string">是否成功</span></span><br><span class="line">        <span class="comment">#执行出错的处理</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="comment">#值类型</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">            <span class="comment">#定义属性</span></span><br><span class="line">            <span class="attr">properties:</span></span><br><span class="line">            <span class="comment">#属性名</span></span><br><span class="line">              <span class="attr">message:</span></span><br><span class="line">                <span class="comment">#类型</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">  <span class="string">/users/&#123;id&#125;:</span></span><br><span class="line">    <span class="comment">#&#123;id&#125;表示id为请求参数，例如/users/1,/users/2都是对该API的请求，此时id即为１和2</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">根据用户名id查询该用户的所有信息</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">查询出某个用户的所有信息，用户名，别名等</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">User</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="comment">#上面接口中定义了&#123;id&#125;，则参数列表中必须包含参数id,并且请求类型为path</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">id</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">要查询的用户的用户名,它是唯一标识</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">所有用户信息或者用户的集合信息</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">'#/definitions/User'</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">              <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">message:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="comment">#http定义的delete方法,删除一个资源</span></span><br><span class="line">    <span class="attr">delete:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">删除用户</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">删除某个用户的信息，被删除的用户将无法登陆</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">id</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">用户的唯一标示符</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">User</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">通过返回值来标示执行结果</span>　<span class="string">返回true表示执行成功</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">             <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">status:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">                  <span class="comment">#描述</span></span><br><span class="line">                  <span class="attr">description:</span> <span class="string">是否成功</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">              <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">message:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="comment">#描述错误信息</span></span><br><span class="line">    <span class="comment">#http定义的patch方法，表示修改一个资源</span></span><br><span class="line">    <span class="attr">patch:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">用户信息修改</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">修改用户信息(用户名别名)</span></span><br><span class="line">      <span class="attr">parameters:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">id</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">用户名,要修改的数据的唯一标识符</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alias</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">formData</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">新的用户别名</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">User</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">通过返回值来标示执行结果</span>　<span class="string">返回true表示执行成功</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">status:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">                  <span class="comment">#描述</span></span><br><span class="line">                  <span class="attr">description:</span> <span class="string">是否成功</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">              <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">message:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="comment">#描述错误信息</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">User:</span></span><br><span class="line">    <span class="comment">#值类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="comment">#定义属性</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">    <span class="comment">#属性名</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="comment">#类型</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="comment">#描述</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">用户的唯一id</span></span><br><span class="line">      <span class="attr">username:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">用户名</span></span><br><span class="line">      <span class="attr">alias:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">别名</span></span><br></pre></td></tr></table></figure>
<h2 id="springboot中集成swagger"><a href="#springboot中集成swagger" class="headerlink" title="springboot中集成swagger"></a>springboot中集成swagger</h2><p>前端：<br>  伪数据<br>后端</p>
<p>前后端集成：<br>  schema 计划提纲<br>  前端测试api接口 postman<br>  后端提供接口，需要实时更新最新的消息及改动<br>  文档和API定义同步更新</p>
<ul>
<li><a href="https://search.maven.org/search?q=springboot%20swagger" target="_blank" rel="noopener">springboot + swagger</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Makefile</title>
    <url>/2020/06/Makefile/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Make-命令教程"><a href="#Make-命令教程" class="headerlink" title="Make 命令教程"></a>Make 命令教程</h2><p>makefile （默认makefile文件）<br>make -f makefile （指定）</p>
<h3 id="Makefile文件的格式"><a href="#Makefile文件的格式" class="headerlink" title="Makefile文件的格式"></a>Makefile文件的格式</h3><p>语法</p>
<p><target> : <prerequisites><br>[tab]  <commands><br>必须是tab</commands></prerequisites></target></p>
<p>目标（target）<br>作用是声明clean是”伪目标”之后，make就不会去检查是否存在一个叫做clean的文件<br>.PHONY: clean<br>clean:<br>        rm *.o temp</p>
<p>前置条件（prerequisites）<br>result.txt: source.txt b.txt #前置条件，当文件发生变化时重新编译<br>    cp source.txt result.txt</p>
<h3 id="命令（commands）"><a href="#命令（commands）" class="headerlink" title="命令（commands）"></a>命令（commands）</h3><p>.RECIPEPREFIX = &gt; #定义命令前导符<br>每行命令在一个单独的shell中执行。这些Shell之间没有继承关系。<br>变量保持：$$var<br>多行命令：<br>1、写一行<br>2、加反斜杠<br>3、.ONESHELL:</p>
<p>var-kept:<br>    export foo=bar; \<br>    echo “foo=[$$foo]”</p>
<h3 id="Makefile文件的语法"><a href="#Makefile文件的语法" class="headerlink" title="Makefile文件的语法"></a>Makefile文件的语法</h3><p>注释 #<br>回声（echoing）@关闭回声<br>正常情况下，make会打印每条命令，然后再执行，这就叫做回声（echoing）。</p>
<p>通配符<br>Makefile 的通配符与 Bash 一致，主要有星号（*）、问号（？）和 […] 。</p>
<ul>
<li>所有<br>？单字符<br>[] 字符范围</li>
</ul>
<p>模式匹配<br>使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。<br>%.c 所有.c结尾的文件</p>
<p>变量和赋值符<br>txt = Hello World<br>test:<br>    @echo $(txt) #使用 $()</p>
<p>test:<br>    @echo <script type="math/tex">HOME #使用</script></p>
<h3 id="Makefile一共提供了四个赋值运算符-（-、-、？-、-）"><a href="#Makefile一共提供了四个赋值运算符-（-、-、？-、-）" class="headerlink" title="Makefile一共提供了四个赋值运算符 （=、:=、？=、+=）"></a>Makefile一共提供了四个赋值运算符 （=、:=、？=、+=）</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">VARIABLE = value</span><br><span class="line"><span class="comment"># 在执行时扩展，允许递归扩展。</span></span><br><span class="line"></span><br><span class="line">VARIABLE <span class="symbol">:</span>= value</span><br><span class="line"><span class="comment"># 在定义时扩展。</span></span><br><span class="line"></span><br><span class="line">VARIABLE ?= value</span><br><span class="line"><span class="comment"># 只有在该变量为空时才设置值。</span></span><br><span class="line"></span><br><span class="line">VARIABLE += value</span><br><span class="line"><span class="comment"># 将值追加到变量的尾端。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">内置变量（Implicit Variables）</span><br><span class="line">内置变量</span><br><span class="line"></span><br><span class="line">自动变量（Automatic Variables）</span><br><span class="line">内置自动变量</span><br><span class="line"></span><br><span class="line">$@指代当前目标。</span><br><span class="line">$&lt; 指代第一个前置条件。</span><br><span class="line">$? 指代比目标更新的所有前置条件，之间以空格分隔。</span><br><span class="line">$^ 指代所有前置条件，之间以空格分隔。</span><br><span class="line">$* 指代匹配符 % 匹配的部分。</span><br><span class="line">$(@D) 和 $(@F) 分别指向 $@ 的目录名和文件名。</span><br><span class="line">$(&lt;D) 和 $(&lt;F) 分别指向 $&lt; 的目录名和文件名。</span><br><span class="line"></span><br><span class="line">判断和循环</span><br><span class="line">判断</span><br><span class="line">ifeq ($(CC),gcc)</span><br><span class="line">  libs=$(libs_for_gcc)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  libs=$(normal_libs)</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">循环</span><br><span class="line">LIST = one two three</span><br><span class="line"><span class="symbol">all:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> $(LIST); <span class="keyword">do</span> \</span><br><span class="line">        echo $$i; \</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">all:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> one two three; <span class="keyword">do</span> \</span><br><span class="line">        echo $i; \</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">函数</span><br><span class="line">内置函数 </span><br><span class="line">$(function arguments)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$&#123;function arguments&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Makefile-的实例"><a href="#Makefile-的实例" class="headerlink" title="Makefile 的实例"></a>Makefile 的实例</h2><h3 id="java-环境配置"><a href="#java-环境配置" class="headerlink" title="java 环境配置"></a>java 环境配置</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接受命令行变量</span></span><br><span class="line">JPACK = JPACK</span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">INSTALLDIR = /opt</span><br><span class="line">DOWNLOADDIR = <span class="variable">$(INSTALLDIR)</span>/software</span><br><span class="line">BASEURL = http://39.106.6.97:88/svn/deploy/</span><br><span class="line">JAVAPACKURL = <span class="variable">$(BASEURL)</span>jdk-8u201-linux-x64.tar.gz</span><br><span class="line">JAVAPACK = jdk-8u201-linux-x64.tar.gz</span><br><span class="line">JAVAZIP = jdk1.8.0_201</span><br><span class="line">JAVADIR = <span class="variable">$(INSTALLDIR)</span>/jdk</span><br><span class="line">SVNUSER = yanqi</span><br><span class="line">SVNPWD = <span class="string">"fesf_\#8888"</span></span><br><span class="line">JAVADEPENDIC = zip openssl-devel</span><br><span class="line"><span class="comment"># 定义前导符</span></span><br><span class="line"><span class="comment">#.RECIPEPREFIX =</span></span><br><span class="line"><span class="comment"># 定义是否每行在独立shell中执行</span></span><br><span class="line"><span class="comment">#.ONESHELL:</span></span><br><span class="line"><span class="comment"># 命令</span></span><br><span class="line"><span class="section">java: <span class="variable">$(DOWNLOADDIR)</span>/<span class="variable">$(JAVAPACK)</span></span></span><br><span class="line">        @echo <span class="string">"<span class="variable">$(JAVAZIP)</span> install ..."</span></span><br><span class="line">        <span class="comment"># 创建相关目录</span></span><br><span class="line">        mkdir -p <span class="variable">$(JAVADIR)</span></span><br><span class="line">        mkdir -p <span class="variable">$(DOWNLOADDIR)</span></span><br><span class="line">        <span class="comment"># 下载软件</span></span><br><span class="line">        [ -f <span class="string">"<span class="variable">$(DOWNLOADDIR)</span>/<span class="variable">$(JAVAPACK)</span> "</span> ]||wget -c --http-user=<span class="variable">$(SVNUSER)</span> --http-passwd=<span class="variable">$(SVNPWD)</span> <span class="variable">$(JAVAPACKURL)</span> -P <span class="variable">$(DOWNLOADDIR)</span></span><br><span class="line">        <span class="comment"># 安装依赖</span></span><br><span class="line">        yum -y install <span class="variable">$(JAVADEPENDIC)</span></span><br><span class="line">        <span class="comment"># 安装</span></span><br><span class="line">        @echo <span class="string">"<span class="variable">$(JAVAZIP)</span> deploy ..."</span></span><br><span class="line">        [ -d <span class="string">"<span class="variable">$(DOWNLOADDIR)</span>/<span class="variable">$(JAVAZIP)</span>/bin"</span> ]||(cd <span class="variable">$(DOWNLOADDIR)</span>&amp;&amp;tar -zxf <span class="variable">$(JAVAPACK)</span>)</span><br><span class="line">        [ -f <span class="string">"<span class="variable">$(JAVADIR)</span>/bin/java"</span> ]||(cd <span class="variable">$(DOWNLOADDIR)</span>/<span class="variable">$(JAVAZIP)</span>&amp;&amp;mv ./* <span class="variable">$(JAVADIR)</span>)</span><br><span class="line">        <span class="comment"># 配置</span></span><br><span class="line">        grep <span class="string">"export JAVA_HOME"</span> /etc/profile||echo <span class="string">"export JAVA_HOME="</span>/opt/jdk<span class="string">""</span>&gt;&gt;/etc/profile</span><br><span class="line">        grep <span class="string">"export CLASSPATH"</span> /etc/profile||echo '<span class="keyword">export</span> CLASSPATH=$$JAVA_HOME/lib/dt.jar:$$JAVA_HOME/lib/tools.jar'&gt;&gt;/etc/profile</span><br><span class="line">        grep <span class="string">"^export PATH"</span> /etc/profile||echo '<span class="keyword">export</span> PATH=$$PATH:$$JAVA_HOME/bin'&gt;&gt;/etc/profile</span><br><span class="line">        <span class="comment"># 创建环境</span></span><br><span class="line">        ln -sf <span class="variable">$(JAVADIR)</span>/bin/java /bin/java</span><br><span class="line">        . /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="section">unjava:</span></span><br><span class="line">        sed -i '/^<span class="keyword">export</span> JAVA_HOME/d' /etc/profile</span><br><span class="line">        sed -i '/^<span class="keyword">export</span> CLASSPATH/d' /etc/profile</span><br><span class="line">        sed -i '/^<span class="keyword">export</span> PATH/d' /etc/profile</span><br><span class="line">        rm -f /bin/java</span><br><span class="line">        rm -rf <span class="variable">$(JAVADIR)</span></span><br><span class="line">        rm -rf <span class="variable">$(DOWNLOADDIR)</span>/jdk1.8.0_201</span><br></pre></td></tr></table></figure>
<h3 id="python-3-环境配置"><a href="#python-3-环境配置" class="headerlink" title="python 3 环境配置"></a>python 3 环境配置</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python3:</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"python install ..."</span></span><br><span class="line">   <span class="comment"># 创建相关目录</span></span><br><span class="line">   mkdir -p <span class="string">/opt/python3</span></span><br><span class="line">   mkdir -p <span class="string">/opt/software</span></span><br><span class="line">   <span class="comment"># 下载软件</span></span><br><span class="line">   [ -f <span class="string">"/opt/software/Python-3.6.8.tgz"</span> ]||wget -c <span class="params">--http-user=</span>'yanqi' <span class="params">--http-passwd=</span>'fesf_<span class="comment">#8888' http://39.106.6.97:88/svn/deploy/Python-3.6.8.tgz -P /opt/software/</span></span><br><span class="line">   <span class="comment"># 安装依赖</span></span><br><span class="line">   yum -y install zip openssl-devel</span><br><span class="line">   <span class="comment"># 安装</span></span><br><span class="line">   [ -d <span class="string">"/opt/software/Python-3.6.8"</span> ]||<span class="params">(cd /opt/software/&amp;&amp;tar -zxf Python-3.6.8.tgz;)</span></span><br><span class="line">   [ -f <span class="string">"/opt/python3/bin/python3"</span> ]||<span class="params">(cd /opt/software/Python-3.6.8/&amp;&amp;./configure <span class="attr">--prefix</span>=/opt/python3;cd /opt/software/Python-3.6.8/&amp;&amp;make -j 2&amp;&amp;make install;)</span></span><br><span class="line">   <span class="comment"># 创建环境</span></span><br><span class="line">   ln -sf <span class="string">/opt/python3/bin/python3</span> <span class="string">/bin/python3</span></span><br><span class="line">   ln -sf <span class="string">/opt/python3/bin/pip3</span> <span class="string">/bin/pip3</span></span><br><span class="line">   ln -sf <span class="string">/opt/python3/bin/pyvenv-3.6</span> <span class="string">/bin/pyvenv-3.6</span></span><br><span class="line">   [ -d <span class="string">"/opt/venv3"</span> ]||pyvenv-3.6 <span class="string">/opt/venv3</span></span><br><span class="line"></span><br><span class="line">unpython3:</span><br><span class="line">   rm -rf <span class="string">/opt/python3</span></span><br><span class="line">   rm -rf <span class="string">/opt/software/Python-3.6.8</span></span><br><span class="line">   rm -rf <span class="string">/opt/venv3</span></span><br><span class="line">   rm -f <span class="string">/bin/python3</span></span><br><span class="line">   rm -f <span class="string">/bin/pip3</span></span><br><span class="line">   rm -f <span class="string">/bin/pyvenv-3.6</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>LinuxKit</title>
    <url>/2020/06/LinuxKit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://github.com/linuxkit/linuxkit/tree/master/examples" target="_blank" rel="noopener">LinuxKit samples</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice/opensource/linuxkit" target="_blank" rel="noopener">LinuxKit docs</a></li>
</ul>
<p>LinuxKit，用于构建自定义的最小、不可更改的Linux分发版的工具。其内核和系统服务全部采用容器技术实现，基于ContainerD和RunC，支持OCI(开放容器规范)。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>go get -u github.com/linuxkit/linuxkit/src/cmd/linuxkit</p>
<p>brew tap linuxkit/linuxkit<br>brew install —HEAD linuxkit</p>
<h2 id="Building-images"><a href="#Building-images" class="headerlink" title="Building images"></a>Building images</h2><p>linuxkit build linuxkit.yml</p>
<h2 id="启动和测试"><a href="#启动和测试" class="headerlink" title="启动和测试"></a>启动和测试</h2><p>linuxkit run <name></name></p>
<h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>rtf ，安装使用 make bin/rtf &amp;&amp; make install</p>
<h2 id="Yaml-参考"><a href="#Yaml-参考" class="headerlink" title="Yaml 参考"></a>Yaml 参考</h2><p>kernel 指定的内核容器镜像，包含kernel 和filesystem的tarball, 一起其他容器化模块。示例 kernels 从 kernel/ 构建。<br>init 是基础的 init 进程容器镜像，展开为 base system, 包含 init, containerd, runc 少部分其他工具。从 pkg/init/ 构建。<br>onboot 是系统 containers, 按顺序执行。完成后快速终止。<br>services 系统服务，通常在系统整个运行期运行。<br>files 额外的文件，将被添加到镜像中。</p>
]]></content>
  </entry>
  <entry>
    <title>moby</title>
    <url>/2020/06/moby/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Moby是由Docker创建的一个开源框架，用于组装专门的容器系统，而无需重新设计轮子。它提供了几十个标准组件，并将它们组装成定制平台的框架。</p>
]]></content>
  </entry>
  <entry>
    <title>Kubernetes源码分析</title>
    <url>/2020/06/Kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>git clone <a href="https://github.com/kubernetes/kubernetes.git" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes.git</a></p>
]]></content>
  </entry>
  <entry>
    <title>Docker源码分析</title>
    <url>/2020/06/Docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="http://www.sel.zju.edu.cn/wp-content/uploads/2014/12/docker-1-1-1.jpg" target="_blank" rel="noopener">DOCKER 架构图</a></li>
<li><a href="https://github.com/docker/docker-ce" target="_blank" rel="noopener">docker-ce</a></li>
</ul>
<p>Moby:Moby是由Docker创建的一个开源框架，用于组装专门的容器系统.</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>Docker Client（客户端）</li>
<li>Docker Daemon (服务)<ul>
<li>Docker Server<ul>
<li>http server</li>
<li>router</li>
<li>Handler</li>
</ul>
</li>
<li>Docker Engine<ul>
<li>Job</li>
</ul>
</li>
</ul>
</li>
<li>Docker Driver（驱动）<ul>
<li>graph Driver<ul>
<li>graph DB</li>
<li>Repository</li>
</ul>
</li>
<li>network Driver<ul>
<li>bridge</li>
<li>IP</li>
<li>PORT</li>
<li>NETWORK interface<ul>
<li>netlink</li>
</ul>
</li>
</ul>
</li>
<li>exec Driver<ul>
<li>native<ul>
<li>namespace</li>
<li>cgroups</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Docker Container</li>
<li>Docker Registry</li>
</ul>
<p>把代码 clone 到本地<br>git clone <a href="https://github.com/docker/docker-ce.git" target="_blank" rel="noopener">https://github.com/docker/docker-ce.git</a></p>
<p>分析路径</p>
<ul>
<li>Docker Client（客户端）</li>
<li>Docker Daemon (服务)<ul>
<li>api</li>
<li>cli</li>
</ul>
</li>
<li>Docker Container</li>
<li>Docker Registry</li>
</ul>
<h2 id="引用工具"><a href="#引用工具" class="headerlink" title="引用工具"></a>引用工具</h2><p>Swagger 生成API<br>cobra   生成的docker客户端命令行解析器.<br>logrus  日志管理<br>pprof   性能分析<br>Codecov 计算代码覆盖率</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── cli</span><br><span class="line">│   ├── cli</span><br><span class="line">│   ├── cli-plugins</span><br><span class="line">│   ├── cmd</span><br><span class="line">│   ├── contrib</span><br><span class="line">│   ├── dockerfiles</span><br><span class="line">│   ├── docs</span><br><span class="line">│   ├── e2e</span><br><span class="line">│   ├── experimental</span><br><span class="line">│   ├── internal</span><br><span class="line">│   ├── kubernetes</span><br><span class="line">│   ├── man</span><br><span class="line">│   ├── opts</span><br><span class="line">│   ├── scripts</span><br><span class="line">│   ├── service</span><br><span class="line">│   ├── templates</span><br><span class="line">│   └── vendor</span><br><span class="line">├── engine <span class="comment">#Docker Daemon</span></span><br><span class="line">│   ├── api <span class="comment"># api</span></span><br><span class="line">│   ├── builder</span><br><span class="line">│   ├── cli</span><br><span class="line">│   ├── client</span><br><span class="line">│   ├── cmd  <span class="comment"># 命令行的入口</span></span><br><span class="line">│   ├── container <span class="comment"># 容器的抽象</span></span><br><span class="line">│   ├── contrib</span><br><span class="line">│   ├── daemon</span><br><span class="line">│   ├── distribution</span><br><span class="line">│   ├── dockerversion</span><br><span class="line">│   ├── docs</span><br><span class="line">│   ├── errdefs</span><br><span class="line">│   ├── hack</span><br><span class="line">│   ├── image <span class="comment"># 镜像的抽象概念</span></span><br><span class="line">│   ├── integration</span><br><span class="line">│   ├── integration-cli</span><br><span class="line">│   ├── internal</span><br><span class="line">│   ├── layer</span><br><span class="line">│   ├── libcontainerd</span><br><span class="line">│   ├── oci</span><br><span class="line">│   ├── opts</span><br><span class="line">│   ├── patches</span><br><span class="line">│   ├── pkg</span><br><span class="line">│   ├── plugin</span><br><span class="line">│   ├── profiles</span><br><span class="line">│   ├── project</span><br><span class="line">│   ├── reference</span><br><span class="line">│   ├── registry</span><br><span class="line">│   ├── reports</span><br><span class="line">│   ├── restartmanager</span><br><span class="line">│   ├── rootless</span><br><span class="line">│   ├── runconfig</span><br><span class="line">│   ├── testutil</span><br><span class="line">│   ├── vendor</span><br><span class="line">│   └── volume</span><br><span class="line">└── packaging</span><br><span class="line">    ├── deb</span><br><span class="line">    ├── plugins</span><br><span class="line">    ├── rpm</span><br><span class="line">    ├── static</span><br><span class="line">    └── systemd</span><br></pre></td></tr></table></figure>
<h2 id="make-static"><a href="#make-static" class="headerlink" title="make static"></a>make static</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Developer/usr/bin/make VERSION=18.10.0-ce-dev CLI_DIR=/Users/alert/go/src/docker-ce/components/cli ENGINE_DIR=/Users/alert/go/src/docker-ce/components/engine -C /Users/alert/go/src/docker-ce/components/packaging static</span><br><span class="line">mkdir -p <span class="string">"src/github.com/docker"</span></span><br><span class="line">cp -r <span class="string">"/Users/alert/go/src/docker-ce/components/cli"</span> src/github.com/docker/cli</span><br><span class="line">mkdir -p <span class="string">"src/github.com/docker"</span></span><br><span class="line">cp -r <span class="string">"/Users/alert/go/src/docker-ce/components/engine"</span> src/github.com/docker/docker</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> static-linux cross-mac cross-win cross-arm; <span class="keyword">do</span> \</span><br><span class="line">                /Applications/Xcode.app/Contents/Developer/usr/bin/make -C static VERSION=18.10.0-ce-dev GO_VERSION=1.13.10 <span class="variable">$&#123;p&#125;</span>; \</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">/Applications/Xcode.app/Contents/Developer/usr/bin/make -C /Users/alert/go/src/docker-ce/components/cli -f docker.Makefile VERSION=0.0.0-20200622092827-43f7665885 build</span><br><span class="line"><span class="comment"># build dockerfile from stdin so that we don't send the build-context; source is bind-mounted in the development environment</span></span><br><span class="line">cat ./dockerfiles/Dockerfile.binary-native | docker build --build-arg=GO_VERSION -t docker-cli-native -</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/6 : ARG GO_VERSION=1.13.12</span><br><span class="line">Step 2/6 : FROM    golang:<span class="variable">$&#123;GO_VERSION&#125;</span>-alpine</span><br><span class="line">1.13.10-alpine: Pulling from library/golang</span><br></pre></td></tr></table></figure>
<h2 id="从架构映射到代码"><a href="#从架构映射到代码" class="headerlink" title="从架构映射到代码"></a>从架构映射到代码</h2><p>设计好项目框架后，开始编码。<br>使用命名空间来进行架构封闭。<br>└── components<br>    ├── cli<br>    ├── engine<br>    └── packaging</p>
<h2 id="从单个模块分析"><a href="#从单个模块分析" class="headerlink" title="从单个模块分析"></a>从单个模块分析</h2><h3 id="api-模块分析"><a href="#api-模块分析" class="headerlink" title="api 模块分析"></a>api 模块分析</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 规范 package 后面带上 import路径，方便引用</span></span><br><span class="line">package server // import <span class="string">"github.com/docker/docker/api/server"</span></span><br><span class="line"></span><br><span class="line">httpServer -&gt; web路由 -&gt; 后端</span><br><span class="line"><span class="comment"># /Users/alert/go/src/docker-ce/components/engine/api/server/server.go</span></span><br><span class="line"></span><br><span class="line">1、首先对 HTTPServer 系统库进行封装</span><br></pre></td></tr></table></figure>
<p>type HTTPServer struct {<br>    srv *http.Server<br>    l   net.Listener<br>}<br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">2、通过 Swagger 生成路由</span><br><span class="line">3、定义配置类，Config 类</span><br><span class="line">4、定义一个<span class="built_in"> Server </span>类</span><br><span class="line">5、定义 Router 接口</span><br><span class="line">6、定义中间件接口</span><br><span class="line">7、定义一个后端接口</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>AndroidNDK</title>
    <url>/2020/06/AndroidNDK/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://developer.android.google.cn/" target="_blank" rel="noopener">Android cn</a></li>
<li><a href="https://developer.android.google.cn/studio/intro" target="_blank" rel="noopener">Android Studio</a></li>
<li><a href="https://www.android-x86.org/" target="_blank" rel="noopener">android-x86</a></li>
</ul>
<p>android 架构：<br>———————————-System Apps———————————-<br>——————————Java API Framework—————————-<br>————Native C/C++ libraries——- —-Android Runtime—-<br>————————-Hardware Abstraction Layer———————<br>————————————Linux kernel——————————-</p>
<p>Android 设备</p>
<pre><code>* Wear OS
* Android TV
* Android Auto
* Android Things
* Chrome 操作系统设备
</code></pre><p>Google Play<br>应用商店</p>
<p>Android Studio（包含 SDK）<br>Android 集成开发环境</p>
<p>Kotlin<br>Kotlin 是一种新型的静态类型编程语言。</p>
<p>Jetpack<br>Jetpack 库可帮助您以简单且一致的方式针对 90% 的 Android 设备开发相机应用。</p>
<p>Android NDK 原生代码库</p>
<h2 id="主要组件"><a href="#主要组件" class="headerlink" title="主要组件"></a>主要组件</h2><p><strong>原生共享库</strong>：NDK 从 C/C++ 源代码编译这些库或 .so 文件。<br><strong>原生静态库</strong>：NDK 也可编译静态库或 .a 文件，而您可将静态库关联到其他库。<br><strong>Java 原生接口 (JNI)</strong>：JNI 是 Java 和 C++ 组件用以互相通信的接口。<br><strong>应用二进制接口 (ABI)</strong>：ABI 可以非常精确地定义应用的机器代码在运行时应该如何与系统交互。<br><strong>清单</strong>：如果您编写的应用不包含 Java 组件，则必须在清单中声明 NativeActivity 类。</p>
<h3 id="Android-开发原生应用的一般流程"><a href="#Android-开发原生应用的一般流程" class="headerlink" title="Android 开发原生应用的一般流程:"></a>Android 开发原生应用的一般流程:</h3><pre><code>1、设计应用，确定要以 Java 实现的部分，以及要以原生代码形式实现的部分。
2、像创建任何其他 Android 项目一样创建一个 Android 应用项目。
3、如果要编写纯原生应用，请在 AndroidManifest.xml 中声明 NativeActivity 类。
4、在“JNI”目录中创建一个描述原生库的 Android.mk 文件，包括名称、标记、关联库和要编译的源文件。
5、或者，也可以创建一个配置目标 ABI、工具链、发布/调试模式和 STL 的 Application.mk 文件。
6、将原生源代码放在项目的 jni 目录下。
7、使用 ndk-build 编译原生（.so、.a）库。
8、编译 Java 组件，生成可执行 .dex 文件。
9、将所有内容封装到一个 APK 文件中，包括 .so、.dex 以及应用运行所需的其他文件。
</code></pre><h3 id="Android-NDK-为实现原生-Activity"><a href="#Android-NDK-为实现原生-Activity" class="headerlink" title="Android NDK 为实现原生 Activity"></a>Android NDK 为实现原生 Activity</h3><p>native_activity.h<br>android_native_app_glue.h</p>
<h4 id="使用-native-activity-h-接口"><a href="#使用-native-activity-h-接口" class="headerlink" title="使用 native_activity.h 接口"></a>使用 native_activity.h 接口</h4><pre><code>1、在项目的根目录中创建一个 jni/ 目录。此目录用于存储所有原生代码。
2、在 AndroidManifest.xml 文件中声明原生 Activity。
3、创建用于原生 Activity 的文件，并实现 ANativeActivity_onCreate 变量中指定的函数。应用在原生 Activity 启动时会调用此函数。此函数类似于 C/C++ 中的 main，会接收 ANativeActivity 结构的指针，其中包含您需要编写的各个回调实现的函数指针。
4、将 ANativeActivity-&gt;instance 字段设置为您要使用的特定数据的任何实例地址。
5、实现您希望 Activity 在启动时执行的任何其他操作。
6、开发应用的其余部分。
7、在项目的 jni/ 目录中创建 Android.mk file，向构建系统描述您的原生模块。
8、创建 Android.mk 文件后，使用 ndk-build 命令编译原生代码。
9、像平常一样编译和安装 Android 项目。如果原生代码在 jni/ 目录中，构建脚本会自动将从其中构建的 .so 文件封装到 APK 中。
</code></pre><p><strong>Dalvik</strong>： Android特有的虚拟机,和JVM不同,Dalvik虚拟机非常适合在移动终端上使用!<br><strong>AVD</strong>： (android virtual machine):安卓虚拟设备,就是安卓的模拟器<br><strong>ADT</strong>： (android development tools)安卓开发工具<br><strong>SDK</strong>：(software development kit)软件开发工具包,就是安卓系统,平台架构等的工具集合,如adb.exe<br><strong>DDMS</strong>：(dalvik debug monitor service)安卓调试工具<br><strong>adb</strong>：安卓调试桥,在sdk的platform-tools目录下,功能很多,命令行必备<br><strong>DX工具</strong>：将.class转换成.dex文件<br><strong>AAPT</strong>：(android asset packing tool),安卓资源打包工具<br><strong>R.java文件</strong>：由aapt工具根据App中的资源文件自动生成,可以理解为资源字典<br><strong>AndroidManifest.xml</strong>：app包名 + 组件声明 + 程序兼容的最低版本 + 所需权限等程序的配置文件</p>
<p>adb 相关指令</p>
<p>APP程序打包与安装的流程</p>
<p>APP的安装过程</p>
<p>Android Studio</p>
<p>res资源文件夹</p>
<p>drawable：存放各种位图文件<br>layout：该目录下存放的就是我们的布局文件<br>menu：在以前有物理菜单按钮<br>values目录<br>demens.xml：定义尺寸资源<br>string.xml：定义字符串资源<br>styles.xml：定义样式资源<br>colors.xml：定义颜色资源<br>arrays.xml：定义数组资源<br>attrs.xml：自定义控件时用的较多，自定义控件的属性！<br>theme主题文件，和styles很相似<br>animator：存放属性动画的XML文件<br>anim：存放补间动画的XML文件<br>所有的资源文件都会在R.java文件下生成一个资源id</p>
<p>三个工具反编译<br>apktool：获取资源文件，提取图片文件，布局文件，还有一些XML的资源文件<br>dex2jar：将APK反编译成Java源码(将classes.dex转化为jar文件)<br>jd-gui：查看2中转换后的jar文件，即查看Java文件 为了方便各位读者，这里将三个打包到一起放到云盘中，又需要的可以进行下载： 反编译相关的三个工具.zip</p>
<p>Android的四大组件：<br>Activity：提供一个界面让用户点击和各种滑动操作。Activity之间通过Intent进行通信。<br>Service：可以在后台执行长时间运行操作而没有用户界面的应用组件。<br>    started<br>    bound<br>BroadcastReceiver：广播接收器没有用户界面。<br>    静态注册<br>    动态注册<br>ContentProvider：通讯录数据被多个应用程序使用，且必须存储在一个内容提供者中。它的好处是统一数据访问方式。</p>
<p>4大基本组件都需要注册才能使用，每个Activity、service、Content Provider都需要在AndroidManifest文件中进行配置。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>WebEnder</title>
    <url>/2020/06/WebEnder/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>WebFronter</title>
    <url>/2020/06/WebFronter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>WebServices</title>
    <url>/2020/06/WebServices/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>C++语言</title>
    <url>/2020/06/C-%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>编译器<br>g++ -v</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, world!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>对象 - 对象具有状态和行为。<br>类 - 类可以定义为描述对象行为/状态的模板/蓝图。<br>方法 - 从基本上说，一个方法表示一种行为。<br>即时变量 - 每个对象都有其独特的即时变量。<br>命名空间是 C++ 中一个相对新的概念。</p>
<h3 id="基本的内置类型"><a href="#基本的内置类型" class="headerlink" title="基本的内置类型"></a>基本的内置类型</h3><p>宽字符型 wchar_t</p>
<p>类型限定符<br>const    const 类型的对象在程序执行期间不能被修改改变。<br>volatile    修饰符 volatile 告诉编译器不需要优化volatile声明的变量，让程序可以直接从内存中读取变量。对于一般的变量编译器会对变量进行优化，将内存中的变量值放在寄存器中以加快读写效率。<br>restrict    由 restrict 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。</p>
<p>存储类<br>mutable<br>thread_local (C++11)<br>使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。</p>
<blockquote>
<p>从 C++ 17 开始，auto 关键字不再是 C++ 存储类说明符，且 register 关键字被弃用。</p>
</blockquote>
<h2 id="杂项运算符"><a href="#杂项运算符" class="headerlink" title="杂项运算符"></a>杂项运算符</h2><p>sizeof    sizeof 运算符返回变量的大小。例如，sizeof(a) 将返回 4，其中 a 是整数。<br>Condition ? X : Y    条件运算符。如果 Condition 为真 ? 则值为 X : 否则值为 Y。<br>,    逗号运算符会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。<br>.（点）和 -&gt;（箭头）    成员运算符用于引用类、结构和共用体的成员。<br>Cast    强制转换运算符把一种数据类型转换为另一种数据类型。例如，int(2.2000) 将返回 2。<br>&amp;    指针运算符 &amp; 返回变量的地址。例如 &a; 将给出变量的实际地址。</p>
<ul>
<li>指针运算符 <em> 指向一个变量。例如，</em>var; 将指向变量 var。</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> <span class="comment">// 声明引用类型 &amp;x</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> temp;</span><br><span class="line">   temp = x; <span class="comment">/* 保存地址 x 的值 */</span></span><br><span class="line">   x = y;    <span class="comment">/* 把 y 赋值给 x */</span></span><br><span class="line">   y = temp; <span class="comment">/* 把 x 赋值给 y  */</span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">swap(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> <span class="comment">//此处的 *x 是定义</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> temp;</span><br><span class="line">   temp = *x;    <span class="comment">// 此处的 *x 是取值 ，上面是定义。这也是指针最容易搞混的地方</span></span><br><span class="line">   *x = *y;        <span class="comment">/* 把 y 赋值给 x */</span></span><br><span class="line">   *y = temp;    <span class="comment">/* 把 x 赋值给 y */</span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">swap(&amp;a, &amp;b);</span><br></pre></td></tr></table></figure>
<p>参数的默认值<br>int sum(int a, int b=20)</p>
<p>Lambda 函数与表达式</p>
<blockquote>
<p>C++11 提供了对匿名函数的支持,称为 Lambda 函数(也叫 Lambda 表达式)。<br><a href="int x, int y"></a> -&gt; int { int z = x + y; return z + x; }<br>传递方式   参数      返回值    函数体</p>
</blockquote>
<p>[]   // 沒有定义任何变量。使用未定义变量会引发错误。<br>[&amp;]  // 引用传递<br>[=]  // 值传递</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>C++ 引入的 string 类类型<br>string str1 = “Hello”;<br>string str2 = “World”;<br>str1 = str2 //复制<br>str3 = str1 + str2; //连接<br>len = str2.size(); //求长度</p>
<p>strcpy( str3, str1); //复制<br>strcat( str1, str2); //连接<br>len = strlen(str1); //求长度</p>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。<br>指针的算术运算</p>
<p><strong>引用 vs 指针</strong><br>不存在空引用。引用必须连接到一块合法的内存。<br>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。<br>引用必须在创建时被初始化。指针可以在任何时间被初始化。<br>int&amp;  r = i; // r 指向 i</p>
<p><strong>指针 vs 数组</strong></p>
<blockquote>
<p>数组名就是数组首地址</p>
</blockquote>
<p>int  var[MAX] = {10, 100, 200};<br>int  *ptr;<br>// 指针中的数组地址<br>ptr = var;</p>
<p><strong>指针数组</strong><br>const char *names[MAX] = {<br>                   “Zara Ali”,<br>                   “Hina Ali”,<br>                   “Nuha Ali”,<br>                   “Sara Ali”,<br>   };</p>
<p><strong>指向指针的指针</strong></p>
<p><strong>传递指针给函数</strong></p>
<p><strong>从函数返回指针</strong></p>
<h2 id="日期-amp-时间"><a href="#日期-amp-时间" class="headerlink" title="日期 &amp; 时间"></a>日期 &amp; 时间</h2><p>ctime<br>// 基于当前系统的当前日期/时间<br>time_t now = time(0);</p>
<p>// 把 now 转换为字符串形式<br>char* dt = ctime(&amp;now);</p>
<p> // 把 now 转换为 tm 结构<br>tm *gmtm = gmtime(&amp;now);<br>dt = asctime(gmtm);</p>
<h2 id="基本的输入输出"><a href="#基本的输入输出" class="headerlink" title="基本的输入输出"></a>基本的输入输出</h2><p>iostream<br>iomanip<br>fstream</p>
<p>cout &lt;&lt; “请输入您的名称： “;<br>cin &gt;&gt; name;<br>cerr &lt;&lt;<br>clog &lt;&lt;</p>
<h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="keyword">double</span> length;   <span class="comment">// 盒子的长度</span></span><br><span class="line">      <span class="keyword">double</span> breadth;  <span class="comment">// 盒子的宽度</span></span><br><span class="line">      <span class="keyword">double</span> <span class="built_in">height</span>;   <span class="comment">// 盒子的高度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>类成员函数(方法)</strong><br>double Box::getVolume(void)<br>myBox.getVolume();<br><strong>类访问修饰符</strong><br>public everywhere<br>private class<br>protectd subclass</p>
<p><strong>构造函数 &amp; 析构函数</strong><br>class Line<br>{<br>   public:<br>      void setLength( double len );<br>      double getLength( void );<br>      Line();  // 这是构造函数</p>
<p>   private:<br>      double length;<br>};</p>
<p>// 构造函数,与类同名<br>Line::Line(void)</p>
<p>// 析构函数,与类同名前加波浪号<br>Line::~Line(void)<br>{<br>    cout &lt;&lt; “Object is being deleted” &lt;&lt; endl;<br>}</p>
<p><strong>拷贝构造函数</strong><br>如果在类中没有定义拷贝构造函数，编译器会自行定义一个。<br>Line( int len );             // 简单的构造函数<br>Line( const Line &amp;obj);      // 拷贝构造函数<br>~Line();                     // 析构函数</p>
<p>以下情况都会调用拷贝构造函数：<br>（1）一个对象以值传递的方式传入函数体（传参）<br>（2）一个对象以值传递的方式从函数返回（返回）<br>（3）一个对象需要通过另外一个对象进行初始化。（注入：把一个对象传递到另一个对象内部）</p>
<p><strong>友元函数</strong><br>类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员。<br>友元函数并不是成员函数。<br>// 在类中声明<br>friend void printWidth( Box box );<br>// 友元类（ClassTwo 的所有成员函数作为类 ClassOne 的友元）<br>friend class ClassTwo;</p>
<p><strong>内联函数</strong><br>inline int Max(int x, int y)<br>编译器会把该函数的代码副本放置在每个调用该函数的地方。<br>引入内联函数的目的是为了解决程序中函数调用的效率问题。<br>而对于其他的函数，都是在运行时候才被替代。这其实就是个空间代价换时间的i节省。</p>
<p><strong>this 指针</strong><br>每一个对象都能通过 this 指针来访问自己的地址。this 指针是所有成员函数的隐含参数。<br>在类中<br>this-&gt;Volume()</p>
<p><strong>指向类的指针</strong><br>Box Box2(8.5, 6.0, 2.0);    // Declare box2<br>Box *ptrBox;                // Declare pointer to a class.</p>
<p>// 保存第一个对象的地址<br>ptrBox = &Box1;<br>ptrBox-&gt;Volume()</p>
<p><strong>类的静态成员</strong><br>作为类的计数器很方便<br>静态属性<br>static int objectCount;<br>当我们声明类的成员为静态时，这意味着无论创建多少个类的对象，静态成员都只有一个副本。</p>
<p>静态方法<br>static int getCount()<br>{<br> return objectCount;<br>}</p>
<p><strong>继承</strong><br>// 单继承<br>class Rectangle: public Shape<br>// 多继承<br>class Rectangle: public Shape, public PaintCost<br>public 是继承基类成员后采用修饰符<br>派生类（子类）<br>基类(父类)<br>下列情况不能被继承：<br>    基类的构造函数、析构函数和拷贝构造函数。<br>    基类的重载运算符。<br>    基类的友元函数。</p>
<p><strong>函数重载和运算符重载</strong><br>//函数重载<br>void print(int i)<br>void print(double  f)<br>void print(char c[])<br>//运算符重载(自定义一些运算，使用内置的运算符)<br>Box operator+(const Box&amp; b)<br>Box3 = Box1 + Box2;</p>
<p>不可重载的运算符列表<br>    .：成员访问运算符<br>    .<em>, -&gt;</em>：成员指针访问运算符<br>    ::：域运算符<br>    sizeof：长度运算符<br>    ?:：条件运算符</p>
<pre><code>#： 预处理符号
</code></pre><p><strong>多态</strong><br>多态按字面的意思就是多种形态。<br>当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p>
<p>虚函数<br>告诉编译器不要静态链接到该函数。<br>纯虚函数（只定义不实现）<br>virtual int area() = 0;</p>
<p><strong>数据抽象</strong><br>只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。<br>数据抽象是一种依赖于接口和实现分离的编程（设计）技术。</p>
<p><strong>数据封装</strong><br>把数据和操作数据的函数捆绑在一起的机制。<br>通常情况下，我们都会设置类成员状态为私有（private），除非我们真的需要将其暴露，这样才能保证良好的封装性。<br>这通常应用于数据成员，但它同样适用于所有成员，包括虚函数。</p>
<p><strong>接口（抽象类）</strong><br>如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。</p>
<p><strong>文件和流</strong><br>ofstream outfile; //写<br>    outfile &lt;&lt; data &lt;&lt; endl;<br>ifstream infile;  //读<br>    infile &gt;&gt; data;</p>
<p>fstream<br>open()</p>
<p>cin.getline(data, 100);<br>close()</p>
<p>open参数<br>ios::app //追加<br>ios::ate //定位到文件尾<br>ios::in  //读取<br>ios::out //写入<br>ios::trunc //从头开始重写</p>
<p><strong>异常处理</strong><br>throw // 抛出一个异常<br>catch // 捕获异常<br>try   // follow 异常</p>
<p>标准的异常<br>std::exception</p>
<p>定义新的异常<br>struct MyException : public exception<br>what() //异常类提供的一个公共方法，它已被所有子异常类重载</p>
<p><strong>动态内存</strong><br>栈：在函数内部声明的所有变量都将占用栈内存。<br>堆：这是程序中未使用的内存，在程序运行时可用于动态分配内存。</p>
<p>new 和 delete 运算符<br>pvalue  = new double;   // 为变量请求内存,放到堆里<br>pvalue  = new char[20]; // 为变量请求内存<br>Box* myBoxArray = new Box[4]; //对象<br>delete pvalue;        // 释放 pvalue 所指向的内存</p>
<p>new 与 malloc() 函数相比，其主要的优点是，new 不只是分配了内存，它还创建了对象。</p>
<p><strong>命名空间</strong></p>
<blockquote>
<p>命名空间可以嵌套</p>
</blockquote>
<p>// 声明命名空间<br>namespace first_space{<br>   void func(){<br>      cout &lt;&lt; “Inside first_space” &lt;&lt; endl;<br>   }<br>}</p>
<p>// 调用命名空间中的函数<br>first_space::func();</p>
<p>// using namespace<br>using namespace first_space;<br>func();</p>
<p><strong>模板</strong><br>函数模板<br>template <typename t><br>类模板<br>template <class t></class></typename></p>
<p>// 定义<br>template <class t><br>class Stack {<br>  private:<br>    vector<T> elems;     // 元素 </T></class></p>
<p>  public:<br>    void push(T const&amp;);  // 入栈<br>    void pop();               // 出栈<br>    T top() const;            // 返回栈顶元素<br>    bool empty() const{       // 如果为空则返回真。<br>        return elems.empty();<br>    }<br>}; </p>
<p>// 使用<br>Stack<int>         intStack;  // int 类型的栈<br>Stack<string> stringStack;    // string 类型的栈 </string></int></p>
<p><strong>预处理器指令</strong><br>预定义宏<br><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">__LINE__	这会在程序编译时包含当前行号。</span><br><span class="line">__FILE__	这会在程序编译时包含当前文件名。</span><br><span class="line">__DATE__	这会包含一个形式为 <span class="built_in">month</span>/<span class="built_in">day</span>/<span class="built_in">year</span> 的字符串，它表示把源文件转换为目标代码的日期。</span><br><span class="line">__TIME__	这会包含一个形式为 <span class="built_in">hour</span>:<span class="built_in">minute</span>:<span class="built_in">second</span> 的字符串，它表示程序被编译的时间。</span><br></pre></td></tr></table></figure></p>
<p><strong>信号处理</strong><br>csiganl<br>signal 函数，用来捕获突发事件。<br>第一个参数是一个整数，代表了信号的编号；第二个参数是一个指向信号处理函数的指针。</p>
<p>raise() 函数，生成信号</p>
<p>// 定义信号处理<br>void signalHandler( int signum )<br>// 注册信号 SIGINT 和信号处理程序<br>signal(SIGINT, signalHandler);</p>
<p>常见的信号<br>SIGABRT    程序的异常终止，如调用 abort。<br>SIGFPE    错误的算术运算，比如除以零或导致溢出的操作。<br>SIGILL    检测非法指令。<br>SIGINT    程序终止(interrupt)信号。<br>SIGSEGV    非法访问内存。<br>SIGTERM    发送到程序的终止请求。</p>
<p><strong>多线程</strong></p>
<h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <pthread.h></pthread.h></h1><p>pthread_create() 创建线程<br>//参数依次是：创建的线程id，线程参数，调用的函数，传入的函数参数<br>int ret = pthread_create(&amp;tids[i], NULL, say_hello, NULL);</p>
<p>pthread_exit(status) 终止线程<br>pthread_exit(NULL);</p>
<p>连接和分离线程</p>
<blockquote>
<p>当创建一个线程时，它的某个属性会定义它是否是可连接的（joinable）或可分离的（detached）。只有创建时定义为可连接的线程才可以被连接。如果线程创建时被定义为可分离的，则它永远也不能被连接。</p>
</blockquote>
<p>// 站主线程角度<br>pthread_join() // 连接<br>pthread_detach() // 分离</p>
<p>pthread_attr_t attr;<br>pthread_attr_init(&amp;attr);<br>pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);<br>pthread_attr_destroy(&amp;attr);</p>
<h2 id="Web-编程"><a href="#Web-编程" class="headerlink" title="Web 编程"></a>Web 编程</h2><p><strong>CGI</strong><br>CGI 规范目前是由 NCSA 维护的。<br>是一种用于外部网关程序与信息服务器（如 HTTP 服务器）对接的接口标准。<br>能够与 Web 服务器以及客户端进行交互的标准协议。</p>
<p><strong>HTTP 头信息</strong></p>
<p><strong>CGI 环境变量</strong></p>
<p><strong>C++ CGI 库</strong></p>
<p><strong>Get 方法</strong></p>
<p><strong>POST 方法</strong></p>
<p><strong>表单</strong></p>
<p><strong>cookie</strong></p>
<p><strong>文件上传</strong></p>
<p>httpd.conf<br><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">Directory</span> <span class="string">"/var/www/cgi-bin"</span>&gt;</span><br><span class="line">   AllowOverride <span class="keyword">None</span></span><br><span class="line">   <span class="keyword">Options</span> ExecCGI</span><br><span class="line">   <span class="keyword">Order</span> allow,deny</span><br><span class="line">   Allow from all</span><br><span class="line">&lt;/<span class="keyword">Directory</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;<span class="keyword">Directory</span> <span class="string">"/var/www/cgi-bin"</span>&gt;</span><br><span class="line"><span class="keyword">Options</span> <span class="keyword">All</span></span><br><span class="line">&lt;/<span class="keyword">Directory</span>&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Content-type:text/html\r\n\r\n"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;html&gt;\n"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;head&gt;\n"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;title&gt;Hello World - 第一个 CGI 程序&lt;/title&gt;\n"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;/head&gt;\n"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;body&gt;\n"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;h2&gt;Hello World! 这是我的第一个 CGI 程序&lt;/h2&gt;\n"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;/body&gt;\n"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;/html&gt;\n"</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><p>C++ STL（标准模板库）是一套功能强大的 C++ 模板类<br>提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。</p>
<p>容器（Containers）<br>算法（Algorithms）<br>迭代器（iterators）</p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="http://www.hal9k.com/cug/" target="_blank" rel="noopener">Free Country</a><br><a href="https://www.thefreecountry.com/sourcecode/cpp.shtml" target="_blank" rel="noopener">C and C++ Users Group</a><br><a href="https://www.boost.org/" target="_blank" rel="noopener">Boost</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>C语言</title>
    <url>/2020/06/C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="http://www.mingw.org/" target="_blank" rel="noopener">mingw</a></li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>C11<br>C11（也被称为C1X）指ISO标准ISO/IEC 9899:2011，是当前最新的C语言标准。在它之前的C语言标准为C99。<br>多线程（Multithreading）支持</p>
<p>gcc 编译器<br>gcc -v</p>
<p>C 程序主要包括以下部分：<br>  预处理器指令 #开头<br>  函数<br>  变量<br>  语句 &amp; 表达式<br>  注释</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 我的第一个 C 程序 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World! \n"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>整数类型和浮点类型<br>枚举类型<br>void 类型<br>派生类型<br>  指针类型<br>  数组类型<br>  结构类型<br>  共用体类型<br>  函数类型</p>
<p>char,short,int,long(signed，unsigned)<br>float,long,double</p>
<p>sizeof(int)</p>
<p>void类型<br>函数返回为空<br>函数参数为空<br>指针指向 void<br>类型为 void <em> 的指针代表对象的地址，而不是类型。返回指向 void 的指针，可以转换为任何数据类型。内存分配函数 void </em>malloc( size_t size )。</p>
<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>extern关键字声明变量名而不定义它。<br>如果需要在一个源文件中引用另外一个源文件中定义的变量，如果需要在一个源文件中引用另外一个源文件中定义的变量。</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做字面量。<br>定义常量<br>  使用 #define 预处理器。<br>  使用 const 关键字。</p>
<h3 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a>存储类</h3><p>auto（所有局部变量默认的存储类）<br>register（定义存储在寄存器中而不是 RAM 中的局部变量，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。）<br>static<br>static 存储类指示编译器在程序的生命周期内保持局部变量的存在。<br>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。<br>extern<br>extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>b=++a 先加加再赋值<br>b=a++ 先赋值再加加</p>
<p>杂项运算符<br>sizeof() 返回变量的大小<br>&amp; 取变量的地址<br>* 指向一个变量<br>? : 条件表达式</p>
<p>运算符优先级<br>括号 &gt; 算术运算 &gt; 逻辑运算 &gt; 赋值运算</p>
<h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p>while<br>for<br>do…while</p>
<p>break<br>continue<br>goto</p>
<p>switch(){case var:break;default:}</p>
<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>enum color { red=1, green, blue };<br>enum  color favorite_color;<br>printf(“请输入你喜欢的颜色: (1. red, 2. green, 3. blue): “);<br>scanf(“%d”, &amp;favorite_color);</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>声明<br>return_type function_name( parameter list );<br>定义<br>return_type function_name( parameter list )<br>{<br>   body of the function<br>}<br>使用<br>function_name( parameter list )</p>
<p>作用域规则<br>局部变量<br>全局变量<br>形式参数</p>
<p>变量初始化<br>int    0<br>char    ‘\0’<br>float    0<br>double    0<br>pointer    NULL</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>type arrayName [ arraySize ];<br>初始化数组<br>double balance[5] = {1000.0, 2.0, 3.4, 7.0, 50.0};<br>访问数组元素<br>double salary = balance[9];</p>
<p>多维数组<br>type name[size1][size2]…[sizeN];</p>
<p>初始化二维数组<br>int a[3][4] = {<br> {0, 1, 2, 3} ,   /<em>  初始化索引号为 0 的行 </em>/<br> {4, 5, 6, 7} ,   /<em>  初始化索引号为 1 的行 </em>/<br> {8, 9, 10, 11}   /<em>  初始化索引号为 2 的行 </em>/<br>};</p>
<p>从函数返回数组<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 要生成和返回随机数的函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">getRandom</span><span class="params">( )</span> <span class="comment">// 此处返回定义为 * </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span>  r[<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="comment">/* 设置种子 */</span></span><br><span class="line">  srand( (<span class="keyword">unsigned</span>)time( <span class="literal">NULL</span> ) );</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">     r[i] = rand();</span><br><span class="line">     <span class="built_in">printf</span>( <span class="string">"r[%d] = %d\n"</span>, i, r[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r; <span class="comment">//数组返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>指向数组的指针<br>double *p;<br>double balance[10];<br>p = balance;</p>
<p>传递数组给函数<br>void myFunction(int *param)<br>void myFunction(int param[10])<br>void myFunction(int param[])</p>
<h3 id="enum-枚举"><a href="#enum-枚举" class="headerlink" title="enum(枚举)"></a>enum(枚举)</h3><p>enum　枚举名　{枚举元素1,枚举元素2,……};<br>enum DAY<br>{<br>      MON=1, TUE, WED, THU, FRI, SAT, SUN<br>};</p>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>&amp; 取地址<br>%p 打印<br>指针是一个变量，其值为另一个变量的地址。<br>int    <em>ip;    /</em> 一个整型的指针 <em>/<br>double </em>dp;    /<em> 一个 double 型的指针 </em>/<br>float  <em>fp;    /</em> 一个浮点型的指针 <em>/<br>char   </em>ch;     /<em> 一个字符型的指针 </em>/</p>
<p>NULL 指针<br>int  *ptr = NULL;<br>printf(“ptr 的地址是 %p\n”, ptr  );<br>ptr 的地址是 0x0</p>
<p>判断<br>if(ptr)     /<em> 如果 p 非空，则完成 </em>/<br>if(!ptr)    /<em> 如果 p 为空，则完成 </em>/</p>
<p>指针的算术运算<br>可以对指针进行四种算术运算：++、—、+、-。<br>指针的比较 ==、&lt; 和 &gt;</p>
<p>指针数组<br>int <em>ptr[MAX];<br>使用
</em>ptr[i];</p>
<p>指向指针的指针(多级指针)<br>int <strong>var; // 两级指针<br>int *</strong>var; // 三级指针</p>
<p>传递指针给函数<br>声明<br>void getSeconds(unsigned long *par);<br>使用<br>getSeconds( &amp;sec );</p>
<p>/<em> 函数声明 </em>/<br>double getAverage(int <em>arr, int size);<br>/</em> 带有 5 个元素的整型数组  <em>/<br>int balance[5] = {1000, 2, 3, 17, 50};<br>/</em> 传递一个指向数组的指针作为参数 */<br>avg = getAverage( balance, 5 ) ; // 数组名本身就是指针</p>
<p>从函数返回指针<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 要生成和返回随机数的函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">getRandom</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">int</span>  r[<span class="number">10</span>];</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="comment">/* 设置种子 */</span></span><br><span class="line">   srand( (<span class="keyword">unsigned</span>)time( <span class="literal">NULL</span> ) );</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">   &#123;</span><br><span class="line">      r[i] = rand();</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, r[i] );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="函数指针-重中之重"><a href="#函数指针-重中之重" class="headerlink" title="函数指针(重中之重)"></a>函数指针(重中之重)</h3><p>函数指针是指向函数的指针变量。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数指针变量的声明</span></span><br><span class="line"><span class="comment">// 声明一个指向同样参数、返回值的函数指针类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*fun_ptr)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>; </span><br><span class="line"><span class="comment">// 声明一个fun_ptr变量指向一个函数，这个函数有两个整型参数，返回值为整型</span></span><br></pre></td></tr></table></figure></p>
<p>回调函数<br>函数指针作为某个函数的参数.<br>函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">populate_array</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">size_t</span> arraySize, <span class="keyword">int</span> (*getNextValue)(<span class="keyword">void</span>))</span> <span class="comment">//此处定义了个函数指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;arraySize; i++)</span><br><span class="line">        <span class="built_in">array</span>[i] = getNextValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把函数指针定义拿出来，单独定义。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*getNextValue)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">populate_array</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">size_t</span> arraySize,getNextValue)</span> <span class="comment">//使用函数指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;arraySize; i++)</span><br><span class="line">        <span class="built_in">array</span>[i] = getNextValue(); <span class="comment">//使用函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现面向对象的C<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*say)</span><span class="params">(<span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span>* name,</span><br><span class="line">  <span class="keyword">int</span> age,</span><br><span class="line">  say,</span><br><span class="line">&#125; person;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayimpl</span><span class="params">(<span class="keyword">char</span>* content)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"say: %s"</span>,content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">person p1=person&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法绑定</span></span><br><span class="line">p1.say = sayimpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法调用</span></span><br><span class="line">p1.say(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><p>字符串实际上是使用 null 字符 ‘\0’ 终止的一维字符数组。<br>char greeting[6] = {‘H’, ‘e’, ‘l’, ‘l’, ‘o’, ‘\0’};<br>char greeting[] = “Hello”;</p>
<p>操作字符串的函数<br>strcpy(s1, s2);<br>strcat(s1, s2);<br>strlen(s1);<br>strcmp(s1, s2);<br>// index<br>strchr(s1, ch);<br>strstr(s1, s2);</p>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>struct tag {<br>    member-list<br>    member-list<br>    member-list<br>    …<br>} variable-list ;</p>
<p>tag 是结构体标签<br>member-list 是标准的变量定义<br>variable-list 结构变量</p>
<p>访问结构成员：我们使用成员访问运算符（.）<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">Book1</span>;</span>        <span class="comment">/* 声明 Book1，类型为 Books */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">Book2</span>;</span>        <span class="comment">/* 声明 Book2，类型为 Books */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;Book1,Book2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Book1 详述 */</span></span><br><span class="line"><span class="built_in">strcpy</span>( Book1.title, <span class="string">"C Programming"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>( Book1.author, <span class="string">"Nuha Ali"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>( Book1.subject, <span class="string">"C Programming Tutorial"</span>);</span><br><span class="line">Book1.book_id = <span class="number">6495407</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出 Book1 信息 */</span></span><br><span class="line"><span class="built_in">printf</span>( <span class="string">"Book 1 title : %s\n"</span>, Book1.title);</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">"Book 1 author : %s\n"</span>, Book1.author);</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">"Book 1 subject : %s\n"</span>, Book1.subject);</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">"Book 1 book_id : %d\n"</span>, Book1.book_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构作为函数参数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books book )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指向结构的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books *book )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过传 Book1 的地址来输出 Book1 信息 */</span></span><br><span class="line">printBook( &amp;Book1 );</span><br></pre></td></tr></table></figure></p>
<h3 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bs</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a:<span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> b:<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c:<span class="number">6</span>;</span><br><span class="line">&#125;data,*pdata;</span><br><span class="line"><span class="comment">// 说明 data 为 bs 变量，共占两个字节。其中位域 a 占 8 位，位域 b 占 2 位，位域 c 占 6 位。</span></span><br><span class="line"><span class="comment">// data.a 结构体变量访问结构体元素</span></span><br><span class="line"><span class="comment">// pdata-&gt;a 结构体指针访问结构体元素</span></span><br></pre></td></tr></table></figure>
<h3 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h3><p>共用体是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> Data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">float</span> f;</span><br><span class="line">   <span class="keyword">char</span>  str[<span class="number">20</span>];</span><br><span class="line">&#125; data;</span><br><span class="line"><span class="comment">// 现在，Data 类型的变量可以存储一个整数、一个浮点数，或者一个字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问共用体成员</span></span><br><span class="line"><span class="comment">// 我们使用成员访问运算符（.）</span></span><br><span class="line"><span class="built_in">printf</span>( <span class="string">"data.str : %s\n"</span>, data.str);</span><br></pre></td></tr></table></figure></p>
<h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> BYTE;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125; Book;</span><br><span class="line"></span><br><span class="line"><span class="comment">// typedef vs #define</span></span><br><span class="line"><span class="comment">// typedef 仅限于为类型定义符号名称，#define 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。</span></span><br><span class="line"><span class="comment">// typedef 是由编译器执行解释的，#define 语句是由预编译器进行处理的。</span></span><br></pre></td></tr></table></figure>
<h3 id="输入-amp-输出"><a href="#输入-amp-输出" class="headerlink" title="输入 &amp; 输出"></a>输入 &amp; 输出</h3><p>getchar() &amp; putchar() 函数<br>  函数从屏幕读取下一个可用的字符，并把它返回为一个整数。</p>
<p>gets() &amp; puts() 函数<br>  函数从 stdin 读取一行到 s 所指向的缓冲区<br>  函数把字符串 s 和一个尾随的换行符写入到 stdout</p>
<p>scanf() 和 printf() 函数<br>  函数从标准输入流 stdin 读取输入</p>
<h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><p>FILE <em>fopen( const char </em> filename, const char <em> mode );<br>int fclose( FILE </em>fp );</p>
<p>int fputc( int c, FILE <em>fp );<br>int fputs( const char </em>s, FILE *fp );</p>
<p>int fgetc( FILE <em> fp );<br>char </em>fgets( char <em>buf, int n, FILE </em>fp );</p>
<p>二进制 I/O 函数<br>size_t fread(void <em>ptr, size_t size_of_elements, size_t number_of_elements, FILE </em>a_file);<br>size_t fwrite(const void <em>ptr, size_t size_of_elements, size_t number_of_elements, FILE </em>a_file);</p>
<h3 id="宏处理"><a href="#宏处理" class="headerlink" title="宏处理"></a>宏处理</h3><h1 id="define-定义宏"><a href="#define-定义宏" class="headerlink" title="define    定义宏"></a>define    定义宏</h1><h1 id="include-包含一个源代码文件"><a href="#include-包含一个源代码文件" class="headerlink" title="include    包含一个源代码文件"></a>include    包含一个源代码文件</h1><h1 id="undef-取消已定义的宏"><a href="#undef-取消已定义的宏" class="headerlink" title="undef    取消已定义的宏"></a>undef    取消已定义的宏</h1><h1 id="ifdef-如果宏已经定义，则返回真"><a href="#ifdef-如果宏已经定义，则返回真" class="headerlink" title="ifdef    如果宏已经定义，则返回真"></a>ifdef    如果宏已经定义，则返回真</h1><h1 id="ifndef-如果宏没有定义，则返回真"><a href="#ifndef-如果宏没有定义，则返回真" class="headerlink" title="ifndef    如果宏没有定义，则返回真"></a>ifndef    如果宏没有定义，则返回真</h1><h1 id="if-如果给定条件为真，则编译下面代码"><a href="#if-如果给定条件为真，则编译下面代码" class="headerlink" title="if    如果给定条件为真，则编译下面代码"></a>if    如果给定条件为真，则编译下面代码</h1><h1 id="else-if-的替代方案"><a href="#else-if-的替代方案" class="headerlink" title="else    #if 的替代方案"></a>else    #if 的替代方案</h1><h1 id="elif-如果前面的-if-给定条件不为真，当前条件为真，则编译下面代码"><a href="#elif-如果前面的-if-给定条件不为真，当前条件为真，则编译下面代码" class="headerlink" title="elif    如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码"></a>elif    如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</h1><h1 id="endif-结束一个-if……-else-条件编译块"><a href="#endif-结束一个-if……-else-条件编译块" class="headerlink" title="endif    结束一个 #if……#else 条件编译块"></a>endif    结束一个 #if……#else 条件编译块</h1><h1 id="error-当遇到标准错误时，输出错误消息"><a href="#error-当遇到标准错误时，输出错误消息" class="headerlink" title="error    当遇到标准错误时，输出错误消息"></a>error    当遇到标准错误时，输出错误消息</h1><h1 id="pragma-使用标准化方法，向编译器发布特殊的命令到编译器中"><a href="#pragma-使用标准化方法，向编译器发布特殊的命令到编译器中" class="headerlink" title="pragma    使用标准化方法，向编译器发布特殊的命令到编译器中"></a>pragma    使用标准化方法，向编译器发布特殊的命令到编译器中</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ARRAY_LENGTH 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span>  FILE_SIZE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_SIZE 42</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MESSAGE</span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> MESSAGE <span class="meta-string">"You wish!"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">   <span class="comment">/* Your debugging statements here */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 预定义宏</span></span><br><span class="line">__DATE__	当前日期，一个以 <span class="string">"MMM DD YYYY"</span> 格式表示的字符常量。</span><br><span class="line">__TIME__	当前时间，一个以 <span class="string">"HH:MM:SS"</span> 格式表示的字符常量。</span><br><span class="line">__FILE__	这会包含当前文件名，一个字符串常量。</span><br><span class="line">__LINE__	这会包含当前行号，一个十进制常量。</span><br><span class="line">__STDC__	当编译器以 ANSI 标准编译时，则定义为 <span class="number">1</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预处理器运算符</span></span><br><span class="line"><span class="comment">// 宏延续运算符（\）</span></span><br><span class="line"><span class="comment">// 字符串常量化运算符（#）</span></span><br><span class="line"><span class="comment">// 当需要把一个宏的参数转换为字符串常量时，则使用字符串常量化运算符（#）。</span></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  message_for(a, b)  \</span></span><br><span class="line">    <span class="built_in">printf</span>(#a <span class="string">" and "</span> #b <span class="string">": We love you!\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line">message_for(Carole, Debra);</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Carole <span class="keyword">and</span> Debra: We love you!</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记粘贴运算符（##）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tokenpaster(n) printf (<span class="meta-string">"token"</span> #n <span class="meta-string">" = %d"</span>, token##n)</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">tokenpaster(<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="built_in">printf</span> (<span class="string">"token34 = %d"</span>, token34);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined (MESSAGE)</span></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">define</span> MESSAGE <span class="meta-string">"You wish!"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数化的宏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(x,y) ((x) &gt; (y) ? (x) : (y))</span></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Max between 20 and 10 is %d\n"</span>, MAX(<span class="number">10</span>, <span class="number">20</span>));  </span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Max between <span class="number">20</span> <span class="keyword">and</span> <span class="number">10</span> is <span class="number">20</span></span><br><span class="line"><span class="comment">// 预处理完结果，其实本质是进行了替换</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Max between 20 and 10 is %d\n"</span>, ((<span class="number">10</span>) &gt; (<span class="number">20</span>) ? (<span class="number">10</span>) : (<span class="number">20</span>)));</span><br></pre></td></tr></table></figure>
<h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在系统目录的标准列表中搜索名为 file 的文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;file&gt;</span></span></span><br><span class="line"><span class="comment">// 包含当前文件的目录中搜索名为 file 的文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"file"</span></span></span><br><span class="line"><span class="comment">// 只引用一次头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HEADER_FILE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEADER_FILE</span></span><br><span class="line"></span><br><span class="line">the entire header file file</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有条件引用</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_1</span></span><br><span class="line">   <span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"system_1.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SYSTEM_2</span></span><br><span class="line">   <span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"system_2.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SYSTEM_3</span></span><br><span class="line">   ...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏名称代替</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> SYSTEM_H <span class="meta-string">"system_1.h"</span></span></span><br><span class="line"> ...</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> SYSTEM_H</span></span><br></pre></td></tr></table></figure>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>(type_name) expression</p>
<p>整数提升</p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>errno.h<br>errno //错误号<br>perror() //函数显示您传给它的字符串<br>strerror() //返回一个指针，指针指向当前 errno 值的文本表示形式。<br>extern int errno ;<br>fprintf(stderr, “错误号: %d\n”, errno);<br>程序退出状态<br>EXIT_SUCCESS<br>EXIT_FAILURE</p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归用来处理规模越来越小的问题<br>递归三要素<br>  递归入口<br>  退出条件</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>stdarg.h<br>// 定义<br>int func(int, … )<br>// 处理<br>va_list valist; // 定义一个参数列表<br>va_start(valist, num); // 对valist 赋值<br>va_arg(valist, int); // 处理列表元素<br>va_end(valist); // 清理 valist</p>
<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>stdlib.h<br>void <em>calloc(int num, int size); //在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。<br>void free(void </em>address); //释放 address 所指向的内存块,释放的是动态分配的内存空间。</p>
<p>void <em>malloc(int num); //在堆区分配一块指定大小的内存空间，用来存放数据。(不会被初始化)<br>void </em>realloc(void *address, int newsize); // 该函数重新分配内存，把内存扩展到 newsize。</p>
<p>/<em> 动态分配内存 </em>/<br>description = (char <em>)malloc( 200 </em> sizeof(char) );</p>
<p>// 扩展动态分配<br>description = (char <em>)malloc( 30 </em> sizeof(char) );<br>description = (char <em>) realloc( description, 100 </em> sizeof(char) );<br>free(description);</p>
<h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>int main( int argc, char *argv[] )</p>
<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p>冒泡排序<br>选择排序<br>插入排序<br>希尔排序<br>归并排序<br>快速排序</p>
<ul>
<li><a href="https://www.runoob.com/cprogramming/c-examples.html" target="_blank" rel="noopener">C 语言实例</a></li>
<li><a href="https://www.runoob.com/cprogramming/c-100-examples.html" target="_blank" rel="noopener">C 语言经典100例</a></li>
</ul>
<h3 id="C-标准库介绍"><a href="#C-标准库介绍" class="headerlink" title="C 标准库介绍"></a>C 标准库介绍</h3><div class="table-container">
<table>
<thead>
<tr>
<th>头文件</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>assert.h</td>
<td></td>
</tr>
<tr>
<td>ctype.h</td>
<td>字符处理</td>
</tr>
<tr>
<td>errno.h</td>
<td>错误处理</td>
</tr>
<tr>
<td>float.h</td>
<td>浮点数处理</td>
</tr>
<tr>
<td>limits.h</td>
<td>宏限制了各种变量类型（比如 char、int 和 long）的值。</td>
</tr>
<tr>
<td>locale.h</td>
<td>日期格式和货币符号</td>
</tr>
<tr>
<td>math.h</td>
<td>各种数学函数</td>
</tr>
<tr>
<td>setjmp.h</td>
<td>环境变量</td>
</tr>
<tr>
<td>signal.h</td>
<td>信号处理</td>
</tr>
<tr>
<td>stdarg.h</td>
<td>可变函数处理</td>
</tr>
<tr>
<td>stddef.h</td>
<td>宏定义</td>
</tr>
<tr>
<td>stdio.h</td>
<td>输入输出</td>
</tr>
<tr>
<td>stdlib.h</td>
<td>工具函数</td>
</tr>
<tr>
<td>string.h</td>
<td>字符串处理</td>
</tr>
<tr>
<td>time.h</td>
<td>时间处理函数</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>平台分析</title>
    <url>/2020/06/%E5%B9%B3%E5%8F%B0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>OTA -&gt;cid -&gt;平台 -&gt;ipcc</p>
<p>白名单<br>  -&gt; bmd数据库表<br>  加载白名单的cid<br>  售卖的时间段（依照出发日期配置）<br>  每秒最大并发数<br>  配置文件路径<br>  超时时间<br>    连接超时<br>    读取超时<br>  日志处理</p>
<p>查询<br>  熔断时间<br>  engine的url配置<br>  航段费缓存<br>  航线过滤<br>  数据压缩<br>  机型过滤<br>  儿童价转换成人价<br>  生单失败缓存<br>  额外调价缓存<br>  匹配政策地址<br>  特殊运价缓存<br>  退改费用设置</p>
<p>engine<br>  缓存配置<br>  压缩配置<br>  黑名单拦截<br>  预跑配置<br>  流控处理<br>  数据异常拦截</p>
<p>policy<br>  缓存配置<br>  汇率刷新</p>
<p>订单<br>  密钥串<br>  加减价配置<br>  航段费配置<br>  手续费配置<br>  渠道标识<br>  价格校验重查<br>  ipcc配置<br>  政策服务配置<br>  生单跳价阈值<br>  儿童转成人<br>  中转配置<br>  价格校验生单失败清楚有效缓存<br>  渠道cid配置<br>  生单失败处理<br>  行李额处理<br>  wex 卡请求地址<br>  报警地址配置</p>
<p>配置中心<br>权限管理</p>
<p>运营调控<br>政策管理<br>供应商管理<br>汇率管理<br>订单管理<br>清Q系统<br>供应商出票系统<br>官网数据爬取管理</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>metricbeats</title>
    <url>/2020/06/Metricbeats/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>metribeats:<br><a href="https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-6.6.0-linux-x86_64.tar.gz" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-6.6.0-linux-x86_64.tar.gz</a></p>
<p>vim metricbeat.yml<br>output.elasticsearch:<br>  hosts: [“<es_url>“]<br>  username: “elastic”<br>  password: “<password>“<br>setup.kibana:<br>  host: “<kibana_url>“</kibana_url></password></es_url></p>
<p>./metricbeat modules enable system<br>./metricbeat setup<br>./metricbeat -e</p>
<p>./metricbeat -e -c metricbeat.yml</p>
]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/2020/06/Elasticsearch/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>elasticsearch<br>ES概念<br>cluster：<br>集群中有多个节点，其中有一个为主节点，这个主节点是可以通过选举产生的，主从节点是对于集群内部来说的。es的一个概念就是去中心化，字面上理解就是无中心节点。<br>在逻辑上是个整体，你与任何一个节点的通信和与整个es集群通信是等价的。</p>
<p>shards：<br>分片的数量只能在索引创建前指定，并且索引创建后不能更改。<br>分片索引</p>
<p>replicas：<br>代表索引副本，es可以设置多个索引的副本，副本的作用一是提高系统的容错性，当某个节点某个分片损坏或丢失时可以从副本中恢复。二是提高es的查询效率，es会自动对搜索请求进行负载均衡。</p>
<p>gateway：<br>索引保存，当这个es集群关闭再重新启动时就会从gateway中读取索引备份数据。</p>
<p>discovery.zen：<br>节点自动发现，多播，广播方式。它先通过广播寻找存在的节点，再通过多播协议来进行节点之间的通信，同时也支持点对点的交互。</p>
<p>recovery：<br>数据源，通过读取river中的数据并把它索引到es中，官方的river有couchDB的，RabbitMQ的，Twitter的，Wikipedia的。</p>
<p>Transport：<br>代表es内部节点或集群与客户端的交互方式，默认内部是使用tcp协议进行交互，同时它支持http协议（json格式）、thrift、servlet、memcached、zeroMQ等的传输协议（通过插件方式集成）。</p>
<p>基本概念<br>2.1 Node 与 Cluster<br>Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。<br>单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p>
<p>2.2 Index<br>Elastic 会索引所有字段，经过处理后写入一个反向索引（Inverted Index）。查找数据的时候，直接查找该索引。</p>
<p>所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</p>
<p>下面的命令可以查看当前节点的所有 Index。<br>$ curl -X GET ‘<a href="http://localhost:9200/_cat/indices?v" target="_blank" rel="noopener">http://localhost:9200/_cat/indices?v</a>‘</p>
<p>2.3 Document<br>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。</p>
<p>Document 使用 JSON 格式表示，下面是一个例子。<br>{<br>  “user”: “张三”,<br>  “title”: “工程师”,<br>  “desc”: “数据库管理”<br>}<br>同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率。</p>
<p>2.4 Type<br>Document 可以分组，比如weather这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。</p>
<p>不同的 Type 应该有相似的结构（schema），举例来说，id字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如products和logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p>
<p>下面的命令可以列出每个 Index 所包含的 Type。</p>
<p>$ curl ‘localhost:9200/_mapping?pretty=true’<br>根据规划，Elastic 6.x 版只允许每个 Index 包含一个 Type，7.x 版将会彻底移除 Type。</p>
<p>elasticsearch</p>
<p>Node 多节点<br>Cluster 集群<br>Document 文档<br>Index 索引<br>Type 类型<br>Field 字段<br>Shards 分片<br>Replicas  复制集</p>
<p>非结构化的数据</p>
<p>结构化数据</p>
<p>elasticsearch 架构</p>
<p>广播方式寻找节点<br>http 传输</p>
<p>插件<br>中文分词<br>状态监控<br>Solr 知识搜索<br>Elasticsearch 只支持json</p>
<p>XML(SOAP),占带宽，解析慢<br>JSON，短小精悍，解析快</p>
<p>表现层状态转化<br>资源—URI<br>API操作<br>GET：获取<br>POST：新建<br>PUT:更新<br>DELETE：删除</p>
<p>curl -i<br>curl -v<br>curl -o output<br>curl -X POST<br>curl —trace</p>
<p>单模式<br>多模式</p>
<p>安装<br>系统准备<br>JDK—&gt; Elasticsearch 对应关系<br>./elasticsearch -d</p>
<p>插件<br>Head web 管理 elasticsearch<br>Bigdesk 集群监控工具<br>Mavel 插件<br>plugin-install elasticsearch/marvel/latest<br><a href="http://locathost:9200/_plugin/marvel" target="_blank" rel="noopener">http://locathost:9200/_plugin/marvel</a></p>
<p>分词插件</p>
<p>同步插件</p>
<p>倒排索引<br>关键词-》文档 （文档id，位置，频次）</p>
<p>创建索引<br>名称 分片数 副本</p>
<p>创建文档</p>
<p>获取文档</p>
<p>获取指定字段<br>/1?_source=title</p>
<p>更新<br>/1/_update</p>
<p>删除</p>
<p>内置字段以及类型<br>_uid<br>_id<br>_type<br>_source<br>_all<br>_analyzer<br>_boost<br>_parent<br>_routing<br>_index<br>_size<br>_timestamp<br>_ttl</p>
<p>字段类型<br>String<br>Integer/long<br>Float/double<br>Boolean<br>Null<br>Date</p>
<p>多模式<br>获取<br>_mget</p>
<p>获取指定字段</p>
<p>批量操作bulk（\n分隔符）<br>CIUD<br>_bulk<br>metadata<br>body</p>
<p>ram设置对bulk处理有性能影响</p>
<p>版本控制<br>悲观锁，乐观锁<br>内部版本控制  _version<br>外部版本控制  version=5&amp;version_type=external</p>
<p>Mapping 映射<br>一旦建立映射，就不能修改现有映射（修改方法，现有映射建立别名，再创建一个新映射，将别名指向映射）<br>静态映射<br>动态映射<br>没见过的字段时，动态映射可以决定该字段类型</p>
<p>store 是否存储<br>index 是否索引<br>null_value 设置空值<br>boost 设置字段权重<br>index_analyer 索引时用分析器<br>search_analyzer 搜索时用的分析器<br>analyzer 索引搜索时使用分析器<br>include_in_all 排除某个字段<br>index_name 字段名称<br>norms 计算权值</p>
<p>“settings”:{},<br>“mappings”:{}<br>_all/_mapping</p>
<p>查询<br>基本查询<br>/_search?q=title:keyword<br>可以跨索引名搜索<br>_score: 打分<br>“terms”{<br>“preview”:[“”,””],<br>“minimum_match”:1 #1 or #2 and<br>}<br>“from”:10 #从第几行<br>“size”: 20 #返回条数</p>
<p>“slop”:2 #间隔单词<br>“fields”:<br>支持通配符<br>“sort”:[]<br>“prefix”:<br>“range”:<br>“wildcard”:<br>“fuzzy”: #模糊查询-可以相识查询<br>“fuzzy_like_this”:<br>“fuzzy_like_this_field”:<br>“more_like_this”:<br>“more_like_this_field”:<br>“match_all”: #查询所有</p>
<p>过滤<br>filter （相当于where）</p>
<p>“bool”: # and or<br>must<br>should<br>must_not</p>
<p>嵌套查询<br>“or”:[]<br>“not”:[]</p>
<p>gt<br>lt<br>gte<br>lte</p>
<p>过滤空和非空<br>exists<br>missing</p>
<p>cache 缓存<br>segment<br>bigset<br>“_cache”:true</p>
<p>组合查询<br>bool<br>coordination #关键词计分<br>boosting<br>positive<br>negative<br>negative_boost</p>
<p>constant_score</p>
<p>indices #多索引查询</p>
<p>logstash<br>插件<br>导入yum 源<br>yum install logstash<br>日志格式<br>时间 主机名 message<br>配置<br>处理输入input<br>处理filter<br>处理output</p>
<p>区域<br>数据类型<br>布尔<br>字节<br>字符串<br>数值<br>数组<br>哈希<br>编码解码<br>密码型<br>路径<br>注释</p>
<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>字段引用<br>%{[][]}</p>
<p>插件<br>inputs<br>codecs<br>filters<br>outputs<br>Gemfile #记录插件<br>plugin install pluginname</p>
<p>gem source -l<br><a href="https://ruby.taobao.org" target="_blank" rel="noopener">https://ruby.taobao.org</a></p>
<p>kibana</p>
<p>集群 &gt; 节点 &gt; 类型 &gt; 文档 &gt; 属性<br>cluster &gt; node &gt; type &gt; documents &gt; attibute</p>
<p>index &gt; documents<br>       type<br>index :表<br>documents ：纪录<br>type ：按维度分类</p>
<p>shards : 分片<br>replicas : 副本<br>一个 index 可以有 3个分片（跟node 节点相同） 2个副本集。这样任一节点失败都不会导致数据丢失。</p>
<p>mapping ：映射，是指把documents field 映射成 对应的类型<br>gateway : 路由，控制数据存储的分片<br>_id: routeid </p>
]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
  </entry>
  <entry>
    <title>Elasticsearch管理</title>
    <url>/2020/06/Elasticsearch%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Elasticsearch使用<br><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a><br><a href="https://es.xiaoleilu.com/" target="_blank" rel="noopener">https://es.xiaoleilu.com/</a></p>
<p>三、新建和删除 Index<br>新建 Index，可以直接向 Elastic 服务器发出 PUT 请求。下面的例子是新建一个名叫weather的 Index。</p>
<p>$ curl -X PUT ‘localhost:9200/weather’<br>服务器返回一个 JSON 对象，里面的acknowledged字段表示操作成功。</p>
<p>{<br>  “acknowledged”:true,<br>  “shards_acknowledged”:true<br>}<br>然后，我们发出 DELETE 请求，删除这个 Index。</p>
<p>$ curl -X DELETE ‘localhost:9200/weather’<br>四、中文分词设置<br>首先，安装中文分词插件。这里使用的是 ik，也可以考虑其他插件（比如 smartcn）。</p>
<p>$ ./bin/elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.5.1/elasticsearch-analysis-ik-5.5.1.zip" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.5.1/elasticsearch-analysis-ik-5.5.1.zip</a><br>上面代码安装的是5.5.1版的插件，与 Elastic 5.5.1 配合使用。</p>
<p>接着，重新启动 Elastic，就会自动加载这个新安装的插件。</p>
<p>然后，新建一个 Index，指定需要分词的字段。这一步根据数据结构而异，下面的命令只针对本文。基本上，凡是需要搜索的中文字段，都要单独设置一下。</p>
<p>$ curl -X PUT ‘localhost:9200/accounts’ -d ‘<br>{<br>  “mappings”: {<br>    “person”: {<br>      “properties”: {<br>        “user”: {<br>          “type”: “text”,<br>          “analyzer”: “ik_max_word”,<br>          “search_analyzer”: “ik_max_word”<br>        },<br>        “title”: {<br>          “type”: “text”,<br>          “analyzer”: “ik_max_word”,<br>          “search_analyzer”: “ik_max_word”<br>        },<br>        “desc”: {<br>          “type”: “text”,<br>          “analyzer”: “ik_max_word”,<br>          “search_analyzer”: “ik_max_word”<br>        }<br>      }<br>    }<br>  }<br>}’<br>上面代码中，首先新建一个名称为accounts的 Index，里面有一个名称为person的 Type。person有三个字段。</p>
<p>user<br>title<br>desc<br>这三个字段都是中文，而且类型都是文本（text），所以需要指定中文分词器，不能使用默认的英文分词器。</p>
<p>Elastic 的分词器称为 analyzer。我们对每个字段指定分词器。</p>
<p>“user”: {<br>  “type”: “text”,<br>  “analyzer”: “ik_max_word”,<br>  “search_analyzer”: “ik_max_word”<br>}<br>上面代码中，analyzer是字段文本的分词器，search_analyzer是搜索词的分词器。ik_max_word分词器是插件ik提供的，可以对文本进行最大数量的分词。</p>
<p>五、数据操作<br>5.1 新增记录<br>向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录。比如，向/accounts/person发送请求，就可以新增一条人员记录。</p>
<p>$ curl -X PUT ‘localhost:9200/accounts/person/1’ -d ‘<br>{<br>  “user”: “张三”,<br>  “title”: “工程师”,<br>  “desc”: “数据库管理”<br>}’<br>服务器返回的 JSON 对象，会给出 Index、Type、Id、Version 等信息。</p>
<p>{<br>  “_index”:”accounts”,<br>  “_type”:”person”,<br>  “_id”:”1”,<br>  “_version”:1,<br>  “result”:”created”,<br>  “_shards”:{“total”:2,”successful”:1,”failed”:0},<br>  “created”:true<br>}<br>如果你仔细看，会发现请求路径是/accounts/person/1，最后的1是该条记录的 Id。它不一定是数字，任意字符串（比如abc）都可以。</p>
<p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求。</p>
<p>$ curl -X POST ‘localhost:9200/accounts/person’ -d ‘<br>{<br>  “user”: “李四”,<br>  “title”: “工程师”,<br>  “desc”: “系统管理”<br>}’<br>上面代码中，向/accounts/person发出一个 POST 请求，添加一个记录。这时，服务器返回的 JSON 对象里面，_id字段就是一个随机字符串。</p>
<p>{<br>  “_index”:”accounts”,<br>  “_type”:”person”,<br>  “_id”:”AV3qGfrC6jMbsbXb6k1p”,<br>  “_version”:1,<br>  “result”:”created”,<br>  “_shards”:{“total”:2,”successful”:1,”failed”:0},<br>  “created”:true<br>}<br>注意，如果没有先创建 Index（这个例子是accounts），直接执行上面的命令，Elastic 也不会报错，而是直接生成指定的 Index。所以，打字的时候要小心，不要写错 Index 的名称。</p>
<p>5.2 查看记录<br>向/Index/Type/Id发出 GET 请求，就可以查看这条记录。</p>
<p>$ curl ‘localhost:9200/accounts/person/1?pretty=true’<br>上面代码请求查看/accounts/person/1这条记录，URL 的参数pretty=true表示以易读的格式返回。</p>
<p>返回的数据中，found字段表示查询成功，_source字段返回原始记录。</p>
<p>{<br>  “_index” : “accounts”,<br>  “_type” : “person”,<br>  “_id” : “1”,<br>  “_version” : 1,<br>  “found” : true,<br>  “_source” : {<br>    “user” : “张三”,<br>    “title” : “工程师”,<br>    “desc” : “数据库管理”<br>  }<br>}<br>如果 Id 不正确，就查不到数据，found字段就是false。</p>
<p>$ curl ‘localhost:9200/weather/beijing/abc?pretty=true’</p>
<p>{<br>  “_index” : “accounts”,<br>  “_type” : “person”,<br>  “_id” : “abc”,<br>  “found” : false<br>}<br>5.3 删除记录<br>删除记录就是发出 DELETE 请求。</p>
<p>$ curl -X DELETE ‘localhost:9200/accounts/person/1’<br>这里先不要删除这条记录，后面还要用到。</p>
<p>5.4 更新记录<br>更新记录就是使用 PUT 请求，重新发送一次数据。</p>
<p>$ curl -X PUT ‘localhost:9200/accounts/person/1’ -d ‘<br>{<br>    “user” : “张三”,<br>    “title” : “工程师”,<br>    “desc” : “数据库管理，软件开发”<br>}’ </p>
<p>{<br>  “_index”:”accounts”,<br>  “_type”:”person”,<br>  “_id”:”1”,<br>  “_version”:2,<br>  “result”:”updated”,<br>  “_shards”:{“total”:2,”successful”:1,”failed”:0},<br>  “created”:false<br>}<br>上面代码中，我们将原始数据从”数据库管理”改成”数据库管理，软件开发”。 返回结果里面，有几个字段发生了变化。</p>
<p>“_version” : 2,<br>“result” : “updated”,<br>“created” : false<br>可以看到，记录的 Id 没变，但是版本（version）从1变成2，操作类型（result）从created变成updated，created字段变成false，因为这次不是新建记录。</p>
<p>六、数据查询<br>6.1 返回所有记录<br>使用 GET 方法，直接请求/Index/Type/_search，就会返回所有记录。</p>
<p>$ curl ‘localhost:9200/accounts/person/_search’</p>
<p>{<br>  “took”:2,<br>  “timed_out”:false,<br>  “_shards”:{“total”:5,”successful”:5,”failed”:0},<br>  “hits”:{<br>    “total”:2,<br>    “max_score”:1.0,<br>    “hits”:[<br>      {<br>        “_index”:”accounts”,<br>        “_type”:”person”,<br>        “_id”:”AV3qGfrC6jMbsbXb6k1p”,<br>        “_score”:1.0,<br>        “_source”: {<br>          “user”: “李四”,<br>          “title”: “工程师”,<br>          “desc”: “系统管理”<br>        }<br>      },<br>      {<br>        “_index”:”accounts”,<br>        “_type”:”person”,<br>        “_id”:”1”,<br>        “_score”:1.0,<br>        “_source”: {<br>          “user” : “张三”,<br>          “title” : “工程师”,<br>          “desc” : “数据库管理，软件开发”<br>        }<br>      }<br>    ]<br>  }<br>}<br>上面代码中，返回结果的 took字段表示该操作的耗时（单位为毫秒），timed_out字段表示是否超时，hits字段表示命中的记录，里面子字段的含义如下。</p>
<p>total：返回记录数，本例是2条。<br>max_score：最高的匹配程度，本例是1.0。<br>hits：返回的记录组成的数组。<br>返回的记录中，每条记录都有一个_score字段，表示匹配的程序，默认是按照这个字段降序排列。</p>
<p>6.2 全文搜索<br>Elastic 的查询非常特别，使用自己的查询语法，要求 GET 请求带有数据体。</p>
<p>$ curl ‘localhost:9200/accounts/person/_search’  -d ‘<br>{<br>  “query” : { “match” : { “desc” : “软件” }}<br>}’<br>上面代码使用 Match 查询，指定的匹配条件是desc字段里面包含”软件”这个词。返回结果如下。</p>
<p>{<br>  “took”:3,<br>  “timed_out”:false,<br>  “_shards”:{“total”:5,”successful”:5,”failed”:0},<br>  “hits”:{<br>    “total”:1,<br>    “max_score”:0.28582606,<br>    “hits”:[<br>      {<br>        “_index”:”accounts”,<br>        “_type”:”person”,<br>        “_id”:”1”,<br>        “_score”:0.28582606,<br>        “_source”: {<br>          “user” : “张三”,<br>          “title” : “工程师”,<br>          “desc” : “数据库管理，软件开发”<br>        }<br>      }<br>    ]<br>  }<br>}<br>Elastic 默认一次返回10条结果，可以通过size字段改变这个设置。</p>
<p>$ curl ‘localhost:9200/accounts/person/_search’  -d ‘<br>{<br>  “query” : { “match” : { “desc” : “管理” }},<br>  “size”: 1<br>}’<br>上面代码指定，每次只返回一条结果。</p>
<p>还可以通过from字段，指定位移。</p>
<p>$ curl ‘localhost:9200/accounts/person/_search’  -d ‘<br>{<br>  “query” : { “match” : { “desc” : “管理” }},<br>  “from”: 1,<br>  “size”: 1<br>}’<br>上面代码指定，从位置1开始（默认是从位置0开始），只返回一条结果。</p>
<p>6.3 逻辑运算<br>如果有多个搜索关键字， Elastic 认为它们是or关系。</p>
<p>$ curl ‘localhost:9200/accounts/person/_search’  -d ‘<br>{<br>  “query” : { “match” : { “desc” : “软件 系统” }}<br>}’<br>上面代码搜索的是软件 or 系统。</p>
<p>如果要执行多个关键词的and搜索，必须使用布尔查询。</p>
<p>$ curl ‘localhost:9200/accounts/person/_search’  -d ‘<br>{<br>  “query”: {<br>    “bool”: {<br>      “must”: [<br>        { “match”: { “desc”: “软件” } },<br>        { “match”: { “desc”: “系统” } }<br>      ]<br>    }<br>  }<br>}’</p>
<h2 id="一旦在存储超过95％的磁盘中的节点上分配了一个或多个分片的任何索引，该索引将被强制进入只读模式"><a href="#一旦在存储超过95％的磁盘中的节点上分配了一个或多个分片的任何索引，该索引将被强制进入只读模式" class="headerlink" title="一旦在存储超过95％的磁盘中的节点上分配了一个或多个分片的任何索引，该索引将被强制进入只读模式"></a>一旦在存储超过95％的磁盘中的节点上分配了一个或多个分片的任何索引，该索引将被强制进入只读模式</h2><p>PUT _settings<br>    {<br>    “index”: {<br>    “blocks”: {<br>    “read_only_allow_delete”: “false”<br>    }<br>    }<br>    }</p>
<p>curl -XPUT -H “Content-Type: application/json” <a href="http://localhost:9200/_all/_settings" target="_blank" rel="noopener">http://localhost:9200/_all/_settings</a> -d ‘{“index.blocks.read_only_allow_delete”: null}’</p>
<p>建立索引</p>
<p>PUT twitter/_doc/1<br>{<br>    “user” : “kimchy”,<br>    “post_date” : “2009-11-15T14:12:12”,<br>    “message” : “trying out Elasticsearch”<br>}</p>
<p>curl -XPUT 127.0.0.1:9200/lcc_redis_xx -d “”</p>
<h1 id="获取redis-数据"><a href="#获取redis-数据" class="headerlink" title="获取redis 数据"></a>获取redis 数据</h1><p>redis</p>
<p>lcc<em>redis_bx  count(min)<br>lcc_redis</em>*</p>
<p>100G</p>
<p>1、创建索引：curl -XPUT <a href="http://localhost:9200/test1/es/1" target="_blank" rel="noopener">http://localhost:9200/test1/es/1</a> -d “{\”first_name\”:\”test1\”}”<br>通过文件导入：curl -XPOST 127.0.0.1:9200/bank/account/_bulk?pretty —data-binary @accounts.json</p>
<p>curl -H ‘Content-Type: application/json’ -XPUT 119.84.8.44:60116/lcc_redis_lcfr_f/_doc/1 -d “{}”</p>
<p>2、查询索引：curl -XPOST 127.0.0.1:9200/aaa/_search?pretty -d “{\”query\”: { \”match_all\”: {} }}”<br>　　　　　　curl -XGET 127.0.0.1:9200/aaa/_search?pretty -d “{\”query\”: { \”match_all\”: {} }}”<br>　　　　　　curl -XGET 127.0.0.1:9200/aaa/bbb/222<br>3、修改索引：curl -XPUT “<a href="http://localhost:9200/fendo/account/222" target="_blank" rel="noopener">http://localhost:9200/fendo/account/222</a>“ -d “{\”first_name\”:\”fk\”}<br>4、删除索引：curl -XDELETE <a href="http://127.0.0.1:9200/fendo/account/222" target="_blank" rel="noopener">http://127.0.0.1:9200/fendo/account/222</a><br>5、查看所有索引：curl localhost:9200/_cat/indices?v</p>
<p>curl -H “Content-Type: application/json” -XPOST 192.168.14.173:32000/test_index_1221/test_type/5 -d ‘{‘user_name’:”xiaoming”}’</p>
<p>分片管理</p>
<p>GET _ilm/policy/engine-result</p>
<p>PUT _ilm/policy/engine-result<br>{<br>  “policy”: {<br>    “phases”: {<br>      “hot”: {<br>        “actions”: {<br>          “rollover”: {<br>            “max_age”: “14d”,<br>            “max_size”: “90G”<br>          },<br>          “set_priority”: {<br>            “priority”: 100<br>          }<br>        }<br>      },<br>      “warm”: {<br>        “min_age”: “14d”,<br>        “actions”: {<br>          “forcemerge”: {<br>            “max_num_segments”: 1<br>          },<br>          “allocate”: {<br>            “number_of_replicas”: 0<br>          },<br>          “set_priority”: {<br>            “priority”: 50<br>          }<br>        }<br>      },<br>      “cold”: {<br>        “min_age”: “30d”,<br>        “actions”: {<br>          “freeze”: {}<br>        }<br>      },<br>      “delete”: {<br>        “min_age”: “210d”,<br>        “actions”: {<br>          “delete”: {}<br>        }<br>      }<br>    }<br>  }<br>}</p>
<p>POST /engine-result/_flush</p>
<h1 id="bin-bash"><a href="#bin-bash" class="headerlink" title="!/bin/bash"></a>!/bin/bash</h1><p>time=$(date -d ‘-3days’ +’%Y.%m.%d’)<br>curl -XDELETE -u elastic:56781234 <a href="http://localhost:9200/engine-result-${time}*" target="_blank" rel="noopener">http://localhost:9200/engine-result-${time}*</a><br>curl -XDELETE -u elastic:56781234 <a href="http://localhost:9200/ota-query-${time}*" target="_blank" rel="noopener">http://localhost:9200/ota-query-${time}*</a></p>
<p>GET /_cat/indices/?v</p>
<p>GET .kibana/_search<br>{<br>  “_source”: [“index-pattern.title”],<br>  “query”: {<br>    “term”: {<br>      “type”: “index-pattern”<br>    }<br>  }<br>}</p>
<p>POST /engine-result-2019.09.09-000001/_close</p>
<p>DELETE /engine-result-2019.09.09-000001</p>
<p>POST /engine-result/_flush</p>
<p>GET /engine-result/_mapping?pretty</p>
<p>GET _ilm/policy/engine-result</p>
<p>PUT _ilm/policy/engine-result<br>{<br>  “policy” : {<br>      “phases” : {<br>        “hot” : {<br>          “min_age” : “0ms”,<br>          “actions” : {<br>            “rollover” : {<br>              “max_size” : “10gb”,<br>              “max_age” : “1d”<br>            },<br>            “set_priority” : {<br>              “priority” : 100<br>            }<br>          }<br>        },<br>        “cold”: {<br>        “min_age”: “1d”,<br>        “actions”: {<br>          “freeze”: {}<br>        }<br>        },<br>        “delete”: {<br>        “min_age”: “1d”,<br>        “actions”: {<br>          “delete”: {}<br>        }<br>      }<br>      }<br>    }<br>}</p>
]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
  </entry>
  <entry>
    <title>elasticsearch安装</title>
    <url>/2020/06/Elasticsearch%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>base configuration<br>easticsearch<br>logstash<br>filebeat</p>
<p>base configuration<br>/etc/hosts<br>192.168.0.130 elastic1<br>192.168.0.131 elastic2<br>192.168.0.132 elastic3</p>
<p>ssh-keygen -t rsa<br>ssh-copy-id 192.168.0.130<br>ssh-copy-id 192.168.0.131<br>ssh-copy-id 192.168.0.133</p>
<p>192.168.0.130 master<br>192.168.0.131 node1<br>192.168.0.132 node2</p>
<p>yum -y install rsync&amp;&amp;/usr/bin/rsync -avzuP —delete —port=873 monitor@106.15.137.193::autosh /opt/autosh/</p>
<p>设置资源限制<br>echo “* soft nofile 65536</p>
<ul>
<li>hard nofile 65536</li>
<li>soft nproc 32000</li>
<li>hard nproc 32000</li>
<li>hard memlock unlimited</li>
<li>soft memlock unlimited”&gt;&gt;/etc/security/limits.conf</li>
</ul>
<p>echo “DefaultLimitNOFILE=65536<br>DefaultLimitNPROC=32000<br>DefaultLimitMEMLOCK=infinity”&gt;&gt; /etc/systemd/system.conf</p>
<p>easticsearch</p>
<p>导入repo</p>
<h1 id="ssh-192-168-0-130-rpm-—import-https-artifacts-elastic-co-GPG-KEY-elasticsearch"><a href="#ssh-192-168-0-130-rpm-—import-https-artifacts-elastic-co-GPG-KEY-elasticsearch" class="headerlink" title="ssh 192.168.0.130 rpm —import https://artifacts.elastic.co/GPG-KEY-elasticsearch"></a>ssh 192.168.0.130 rpm —import <a href="https://artifacts.elastic.co/GPG-KEY-elasticsearch" target="_blank" rel="noopener">https://artifacts.elastic.co/GPG-KEY-elasticsearch</a></h1><p>vim /etc/yum.repos.d/easticsearch-7.repo<br>[elasticsearch-7.x]<br>name=Elasticsearch repository for 7.x packages<br>baseurl=<a href="https://artifacts.elastic.co/packages/7.x/yum" target="_blank" rel="noopener">https://artifacts.elastic.co/packages/7.x/yum</a><br>gpgcheck=1<br>gpgkey=<a href="https://artifacts.elastic.co/GPG-KEY-elasticsearch" target="_blank" rel="noopener">https://artifacts.elastic.co/GPG-KEY-elasticsearch</a><br>enabled=1<br>autorefresh=1<br>type=rpm-md</p>
<p>scp ./easticsearch-7.repo 192.168.0.130:/etc/yum.repos.d/</p>
<p>ssh 192.168.0.130 yum -y install elasticsearch</p>
<p>wget <a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-x86_64.rpm" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-x86_64.rpm</a><br>wget <a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-x86_64.rpm.sha512" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-x86_64.rpm.sha512</a><br>shasum -a 512 -c elasticsearch-7.2.0-x86_64.rpm.sha512<br>rpm -ivh elasticsearch-7.2.0-x86_64.rpm</p>
<h2 id="单机配置"><a href="#单机配置" class="headerlink" title="单机配置"></a>单机配置</h2><p>path.data: /data/lib/elasticsearch<br>path.logs: /data/log/elasticsearch</p>
<hr>
<p>mkdir /data/lib/elasticsearch -p<br>mkdir  /data/log/elasticsearch -p</p>
<h2 id="vim-etc-elasticsearch-elasticsearch-yml"><a href="#vim-etc-elasticsearch-elasticsearch-yml" class="headerlink" title="vim /etc/elasticsearch/elasticsearch.yml"></a>vim /etc/elasticsearch/elasticsearch.yml</h2><h1 id="集群的名称"><a href="#集群的名称" class="headerlink" title="集群的名称"></a>集群的名称</h1><p>cluster.name: yanqi-clusters</p>
<h1 id="节点的名称"><a href="#节点的名称" class="headerlink" title="节点的名称"></a>节点的名称</h1><p>node.name: es-node-1</p>
<h1 id="是否有资格成为主节点"><a href="#是否有资格成为主节点" class="headerlink" title="是否有资格成为主节点"></a>是否有资格成为主节点</h1><p>node.master: true</p>
<h1 id="是否是数据节点"><a href="#是否是数据节点" class="headerlink" title="是否是数据节点"></a>是否是数据节点</h1><p>node.data: true</p>
<h1 id="数据和日志路径"><a href="#数据和日志路径" class="headerlink" title="数据和日志路径"></a>数据和日志路径</h1><p>path.data: /var/lib/elasticsearch<br>path.logs: /var/log/elasticsearch</p>
<h1 id="设置访问的地址和端口"><a href="#设置访问的地址和端口" class="headerlink" title="设置访问的地址和端口"></a>设置访问的地址和端口</h1><p>network.host: 0.0.0.0<br>http.port: 9200</p>
<h1 id="设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。"><a href="#设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。" class="headerlink" title="设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。"></a>设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。</h1><p>discovery.zen.ping.timeout: 3s</p>
<h1 id="设置是否打开多播发现节点，默认是true。"><a href="#设置是否打开多播发现节点，默认是true。" class="headerlink" title="设置是否打开多播发现节点，默认是true。"></a>设置是否打开多播发现节点，默认是true。</h1><p>discovery.zen.ping.multicast.enabled: false</p>
<h1 id="集群地址设置"><a href="#集群地址设置" class="headerlink" title="集群地址设置"></a>集群地址设置</h1><p>discovery.zen.ping.unicast.hosts: [“192.168.0.130”,”192.168.0.131”,”192.168.0.132”]</p>
<h1 id="设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）"><a href="#设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）" class="headerlink" title="设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）"></a>设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）</h1><p>discovery.zen.minimum_master_nodes: 2</p>
<h1 id="设置集群中N个节点启动时进行数据恢复"><a href="#设置集群中N个节点启动时进行数据恢复" class="headerlink" title="设置集群中N个节点启动时进行数据恢复"></a>设置集群中N个节点启动时进行数据恢复</h1><p>gateway.recover_after_nodes: 3</p>
<h1 id="设置初始化数据恢复进程的超时时间，默认是5分钟。"><a href="#设置初始化数据恢复进程的超时时间，默认是5分钟。" class="headerlink" title="设置初始化数据恢复进程的超时时间，默认是5分钟。"></a>设置初始化数据恢复进程的超时时间，默认是5分钟。</h1><p>gateway.recover_after_time: 5m</p>
<h1 id="初始化数据恢复时，并发恢复线程的个数，默认为4。"><a href="#初始化数据恢复时，并发恢复线程的个数，默认为4。" class="headerlink" title="初始化数据恢复时，并发恢复线程的个数，默认为4。"></a>初始化数据恢复时，并发恢复线程的个数，默认为4。</h1><p>cluster.routing.allocation.node_initial_primaries_recoveries: 4</p>
<h1 id="进行内存交换"><a href="#进行内存交换" class="headerlink" title="进行内存交换"></a>进行内存交换</h1><p>bootstrap.memory_lock: true</p>
<h1 id="索引分片个数，默认为5片。"><a href="#索引分片个数，默认为5片。" class="headerlink" title="索引分片个数，默认为5片。"></a>索引分片个数，默认为5片。</h1><p>index.number_of_shards: 5</p>
<h1 id="索引副本个数，默认为1个副本。"><a href="#索引副本个数，默认为1个副本。" class="headerlink" title="索引副本个数，默认为1个副本。"></a>索引副本个数，默认为1个副本。</h1><p>index.number_of_replicas: 1</p>
<p>下面是一些查询时的慢日志参数设置<br>index.search.slowlog.level: TRACE<br>index.search.slowlog.threshold.query.warn: 10s<br>index.search.slowlog.threshold.query.info: 5s<br>index.search.slowlog.threshold.query.debug: 2s<br>index.search.slowlog.threshold.query.trace: 500ms<br>index.search.slowlog.threshold.fetch.warn: 1s<br>index.search.slowlog.threshold.fetch.info: 800ms<br>index.search.slowlog.threshold.fetch.debug:500ms<br>index.search.slowlog.threshold.fetch.trace: 200ms</p>
<hr>
<p>cluster.name: my-application<br>node.name: node-1<br>path.data: /var/lib/elasticsearch<br>path.logs: /var/log/elasticsearch<br>network.host: 0.0.0.0<br>http.port: 9200<br>discovery.seed_hosts: [“host1”, “host2”, “host3”]</p>
<h2 id="cluster-initial-master-nodes-“node-1”-“node-2”-”node-3”"><a href="#cluster-initial-master-nodes-“node-1”-“node-2”-”node-3”" class="headerlink" title="cluster.initial_master_nodes: [“node-1”, “node-2”,”node-3”]"></a>cluster.initial_master_nodes: [“node-1”, “node-2”,”node-3”]</h2><p>cluster.name: my-application<br>node.name: node-2<br>path.data: /var/lib/elasticsearch<br>path.logs: /var/log/elasticsearch<br>network.host: 0.0.0.0<br>http.port: 9200<br>discovery.seed_hosts: [“host1”, “host2”, “host3”]</p>
<h2 id="cluster-initial-master-nodes-“node-1”-“node-2”-”node-3”-1"><a href="#cluster-initial-master-nodes-“node-1”-“node-2”-”node-3”-1" class="headerlink" title="cluster.initial_master_nodes: [“node-1”, “node-2”,”node-3”]"></a>cluster.initial_master_nodes: [“node-1”, “node-2”,”node-3”]</h2><p>cluster.name: my-application<br>node.name: node-3<br>path.data: /var/lib/elasticsearch<br>path.logs: /var/log/elasticsearch<br>network.host: 0.0.0.0<br>http.port: 9200<br>discovery.seed_hosts: [“host1”, “host2”, “host3”]</p>
<h2 id="cluster-initial-master-nodes-“node-1”-“node-2”-”node-3”-2"><a href="#cluster-initial-master-nodes-“node-1”-“node-2”-”node-3”-2" class="headerlink" title="cluster.initial_master_nodes: [“node-1”, “node-2”,”node-3”]"></a>cluster.initial_master_nodes: [“node-1”, “node-2”,”node-3”]</h2><p>开启 Auth 认证功能<br>xpack.security.enabled: true</p>
<p>sudo systemctl daemon-reload<br>sudo systemctl enable elasticsearch.service<br>systemctl start elasticsearch.service</p>
<p>/usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive</p>
<p>sudo systemctl restart elasticsearch.service<br>sudo systemctl restart kibana.service</p>
<h1 id="curl-XGET-‘http-localhost-9200-cluster-state-pretty‘"><a href="#curl-XGET-‘http-localhost-9200-cluster-state-pretty‘" class="headerlink" title="curl -XGET ‘http://localhost:9200/_cluster/state?pretty‘"></a>curl -XGET ‘<a href="http://localhost:9200/_cluster/state?pretty" target="_blank" rel="noopener">http://localhost:9200/_cluster/state?pretty</a>‘</h1><p>curl -XGET ‘localhost:9200/_cluster/health?pretty’<br>curl -XGET “127.0.0.1:9200”</p>
<p>elasticsearch-head<br>git clone git://github.com/mobz/elasticsearch-head.git<br>cd elasticsearch-head<br>npm install<br>npm run start<br>curl <a href="http://localhost:9100/" target="_blank" rel="noopener">http://localhost:9100/</a></p>
<p>yum -y install kibana<br>/etc/kibana/kibana.yml<br>server.port: 5601<br>server.host: “0.0.0.0”<br>elasticsearch.hosts: [“<a href="http://127.0.0.1:9200" target="_blank" rel="noopener">http://127.0.0.1:9200</a>“]<br>sudo systemctl daemon-reload<br>sudo systemctl enable kibana.service<br>sudo systemctl start kibana.service</p>
<p>安装分词插件<br>/usr/share/elasticsearch/bin/elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.3.2/elasticsearch-analysis-ik-6.3.2.zip" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.3.2/elasticsearch-analysis-ik-6.3.2.zip</a></p>
<p>日志查看<br>tail -200f /var/log/elasticsearch/yanqi-clusters.log</p>
<p>logstash<br><a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/downloads/logstash</a><br>yum install logstash</p>
<p>bin/logstash -f logstash-simple.conf</p>
<p>input { stdin { } }<br>output {<br>  elasticsearch { hosts =&gt; [“localhost:9200”] }<br>  stdout { codec =&gt; rubydebug }<br>}</p>
<p>bin/logstash -e ‘input { stdin { } } output { stdout {} }’</p>
<h2 id="stdout-codec-gt-rubydebug-的意思是输出到控制台"><a href="#stdout-codec-gt-rubydebug-的意思是输出到控制台" class="headerlink" title="stdout { codec =&gt; rubydebug }的意思是输出到控制台"></a>stdout { codec =&gt; rubydebug }的意思是输出到控制台</h2><p>input {<br>    beats {<br>        port =&gt; “5044”<br>    }<br>}<br>filter {<br>    grok {<br>        match =&gt; { “message” =&gt; “%{COMBINEDAPACHELOG}”}<br>    }<br>}<br>output {</p>
<pre><code>stdout { codec =&gt; rubydebug }
</code></pre><h2 id><a href="#" class="headerlink" title="}"></a>}</h2><p> elasticsearch {<br>        hosts =&gt; [ “localhost:9200” ]<br>    }<br>geoip {<br>        source =&gt; “clientip”<br>    }</p>
<p>bin/logstash -f logstash.conf</p>
<p>filebeat<br>filebeat -&gt; logstash<br>              -&gt; elasticsearch<br><a href="https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-x86_64.rpm" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-x86_64.rpm</a><br>rpm -ivh <a href="https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-x86_64.rpm" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-x86_64.rpm</a></p>
<p>rpm -ivh filebeat-7.2.0-x86_64.rpm</p>
<h2 id="vim-filebeat-yml"><a href="#vim-filebeat-yml" class="headerlink" title="vim filebeat.yml"></a>vim filebeat.yml</h2><p>filebeat.inputs:</p>
<ul>
<li>type: log<br>enabled: false<br>paths:<ul>
<li>/data/log/java_web/ota-whitelist-service/ota-whitelist-service.2019-07-05.log<br>filebeat.config.modules:<br>path: ${path.config}/modules.d/*.yml<br>reload.enabled: false<br>setup.template.settings:<br>index.number_of_shards: 1<br>setup.kibana:<br>host: “119.84.8.44:60117”<br>output.elasticsearch:<br>hosts: [“119.84.8.44:60116”]<br>output.logstash:<br>hosts: [“119.84.8.44:60118”]<h1 id="processors"><a href="#processors" class="headerlink" title="processors:"></a>processors:</h1><h1 id="add-host-metadata"><a href="#add-host-metadata" class="headerlink" title="- add_host_metadata: ~"></a>- add_host_metadata: ~</h1><h1 id="add-cloud-metadata"><a href="#add-cloud-metadata" class="headerlink" title="- add_cloud_metadata: ~"></a>- add_cloud_metadata: ~</h1></li>
</ul>
</li>
</ul>
<p>systemctl  start filebeat</p>
<p>filebeat -e 直接输出到控制台</p>
<h2 id="filebeat-e-c-filebeat-yml-d-“publish”"><a href="#filebeat-e-c-filebeat-yml-d-“publish”" class="headerlink" title="./filebeat -e -c filebeat.yml -d “publish”"></a>./filebeat -e -c filebeat.yml -d “publish”</h2><p>filebeat setup -e \<br>  -E output.logstash.enabled=false \<br>  -E output.elasticsearch.hosts=[“119.84.8.44:60116”] \<br>  -E setup.kibana.host=119.84.8.44:60117</p>
<p>./filebeat setup —template -E output.logstash.enabled=false \<br>-E ‘output.elasticsearch.hosts=[“119.84.8.44:60116”]’</p>
<p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a><br>git clone git://github.com/mobz/elasticsearch-head.git<br>cd elasticsearch-head<br>npm install<br>npm run start</p>
<p>grunt server</p>
<p>http.cors.enabled: true<br>http.cors.allow-origin: “*”<br>http.cors.allow-credentials: true</p>
<p><a href="http://192.168.0.130:9200" target="_blank" rel="noopener">http://192.168.0.130:9200</a> 点击连接</p>
<p>2019-07-05 00:23:32.965 INFO  - status:1,time:1947ms,request:KUL-SGN|20190815/|ctripDirect2016331|ABUS_F@IU3D|162257411018198086|1785362763|1</p>
<p>“%{DATA:date} %{DATA:time} %{DATA:level} %{DATA:-} %{DATA:status},%{DATA:delay},%{DATA:airline}”|%{DATA:startdt}|%{DATA:cid}|%{DATA:ipcc}”</p>
<p>DATA是logstash定义好的正则</p>
<p>overwrite =&gt; [“message”]<br>remove_field  =&gt; “message”<br>add_field =&gt; { “shortHostname” =&gt; “%{hostname[0]}” }<br>rename =&gt; [“shortHostname”, “hostname” ]</p>
<p><a href="https://doc.yonyoucloud.com/doc/logstash-best-practice-cn/filter/grok.html" target="_blank" rel="noopener">https://doc.yonyoucloud.com/doc/logstash-best-practice-cn/filter/grok.html</a><br><a href="http://grokdebug.herokuapp.com/" target="_blank" rel="noopener">http://grokdebug.herokuapp.com/</a></p>
<p>match =&gt; [<br>    “message”, “(?<request_time>\d+(?:.\d+)?)”,<br>    “message”, “%{SYSLOGBASE} %{DATA:message}”,<br>    “message”, “(?m)%{WORD}”<br>]</request_time></p>
<p>{<br>    “input” =&gt; {<br>        “type” =&gt; “log”<br>    },<br>     “date” =&gt; “2019-07-05”,<br>     “time” =&gt; “00:24:32.708”,<br>     “tags” =&gt; [<br>        [0] “beats_input_codec_plain_applied”<br>    ],<br>     “host” =&gt; {<br>        “name” =&gt; “xc1-1”<br>    },<br>      “log” =&gt; {<br>        “offset” =&gt; 27560723,<br>          “file” =&gt; {<br>            “path” =&gt; “/data/log/java_web/ota-whitelist-service/ota-whitelist-service.2019-07-05.log”<br>        }<br>    },<br>      “ecs” =&gt; {<br>        “version” =&gt; “1.0.0”<br>    }<br>}</p>
<hr>
<p>input {<br>    beats {<br>        port =&gt; “5044”<br>    }<br>}<br>filter {<br>    grok{<br>        remove_field =&gt;”@timestamp”<br>        remove_field =&gt;”log”<br>        remove_field =&gt;”input”<br>        remove_field =&gt;”tag”<br>        remove_field =&gt;”ecs”<br>        remove_field =&gt;”tags”<br>        remove_field =&gt; “agent”<br>        remove_field =&gt;”@version”<br>        match =&gt; {<br>            “message” =&gt; “”<br>        }<br>    }<br>}<br>output {<br>    elasticsearch {<br>        index =&gt; “whitelog”<br>        hosts =&gt; [ “119.84.8.44:60116” ]<br>    }</p>
<h2 id="-1"><a href="#-1" class="headerlink" title="}"></a>}</h2><p>119.84.8.44:60116 elasticsearch<br>119.84.8.44:60117 kibana</p>
<h2 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h2><p>curl -L -O <a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-linux-x86_64.tar.gz" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-linux-x86_64.tar.gz</a><br>tar -xvf elasticsearch-7.2.0-linux-x86_64.tar.gz<br>cd elasticsearch-7.2.0/bin<br>./elasticsearch</p>
<hr>
<p>“patterns”: [“%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}”],</p>
<h2 id="ingest-对数据分字段"><a href="#ingest-对数据分字段" class="headerlink" title="ingest 对数据分字段"></a>ingest 对数据分字段</h2><h2 id="curl-H-‘Content-Type-application-json’-XPUT-‘http-119-84-8-44-60116-ingest-pipeline-test-pipeline‘-d-pipeline-json"><a href="#curl-H-‘Content-Type-application-json’-XPUT-‘http-119-84-8-44-60116-ingest-pipeline-test-pipeline‘-d-pipeline-json" class="headerlink" title="curl -H ‘Content-Type: application/json’ -XPUT ‘http://119.84.8.44:60116/_ingest/pipeline/test-pipeline‘ -d@pipeline.json"></a>curl -H ‘Content-Type: application/json’ -XPUT ‘<a href="http://119.84.8.44:60116/_ingest/pipeline/test-pipeline" target="_blank" rel="noopener">http://119.84.8.44:60116/_ingest/pipeline/test-pipeline</a>‘ -d@pipeline.json</h2><p>{<br>  “description” : “test desc”,<br>  “processors”: [<br>    {<br>      “grok”: {<br>“field”: “message”,<br>        “patterns”: [“au<em>:%{NUMBER:au</em>}  9c<em>:%{NUMBER:9c</em>}  lcbx<em>f:%{NUMBER:lcbx_f}  lcjc_f:%{NUMBER:lcjc_f}  lcmm_f:%{NUMBER:lcmm_f}  lc6e_f:%{NUMBER:lc6e_f}  lcae_f:%{NUMBER:lcae_f}  lcub_f:%{NUMBER:lcub_f}  lc5j_f:%{NUMBER:lc5j_f}  lcij_f:%{NUMBER:lcij_f}  lcsg_f:%{NUMBER:lcsg_f}  lcfr_f:%{NUMBER:lcfr_f}  lcsl_f:%{NUMBER:lcsl_f}  lcbs_f:%{NUMBER:lcbs_f}  lcvj_f:%{NUMBER:lcvj_f}  vtae:%{NUMBER:vtae}  lcjt_f:%{NUMBER:lcjt_f} “]<br>      }<br>    },<br>    {<br>        “remove”: {<br>        “field”: [“agent”, “log”,”message”,”ecs”,”host”,”input”]<br>        }<br>    },<br>    {<br>    “convert” : {<br>        “field” : “au</em>“,<br>        “type”: “integer”<br>    }<br>    }<br>  ]<br>}</p>
]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
  </entry>
  <entry>
    <title>kibana管理</title>
    <url>/2020/06/kibana%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>roles:<br>集群权限<br>监控<br>管理<br>安全管理<br>index管理<br>pipline 管理</p>
<p>运行权限</p>
<p>索引权限<br>管理<br>监控<br>读<br>索引<br>创建<br>删除<br>kibana 项目权限<br>对每个用户赋予不同的项目</p>
<p>user：<br>用户名<br>密码<br>全名<br>电子邮件地址<br>角色</p>
<p>h</p>
]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
  </entry>
  <entry>
    <title>featbeat安装配置</title>
    <url>/2020/06/Featbeat%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>filebeat 配置</p>
<p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-module-nginx.html#_compatibility_20" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-module-nginx.html#_compatibility_20</a></p>
<p>input</p>
<h1 id="日志类型"><a href="#日志类型" class="headerlink" title="日志类型"></a>日志类型</h1><ul>
<li><p>input_type: log</p>
<h1 id="日志路径-可以写多个-，支持通配符"><a href="#日志路径-可以写多个-，支持通配符" class="headerlink" title="日志路径 可以写多个 ，支持通配符"></a>日志路径 可以写多个 ，支持通配符</h1><p>paths:</p>
<ul>
<li>/home/logs/shiqc_log/*access.log<h1 id="设置字符编码"><a href="#设置字符编码" class="headerlink" title="设置字符编码"></a>设置字符编码</h1>encoding: utf-8<h1 id="添加字段信息"><a href="#添加字段信息" class="headerlink" title="添加字段信息"></a>添加字段信息</h1>fields:<br>logsource: nginx_access_log<br>logtype: nginx_dev<h1 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h1>document_type: shiqc_dev_123_nginxlog<h1 id="每-10-秒钟扫描一次"><a href="#每-10-秒钟扫描一次" class="headerlink" title="每 10 秒钟扫描一次"></a>每 10 秒钟扫描一次</h1>scan_frequency: 10s<h1 id="实际读取文件时，每次读取-16384-字节"><a href="#实际读取文件时，每次读取-16384-字节" class="headerlink" title="实际读取文件时，每次读取 16384 字节"></a>实际读取文件时，每次读取 16384 字节</h1>harvester_buffer_size: 16384<h1 id="是否从文件末尾开始读取"><a href="#是否从文件末尾开始读取" class="headerlink" title="是否从文件末尾开始读取"></a>是否从文件末尾开始读取</h1>tail_files: true<h1 id="多行日志合并"><a href="#多行日志合并" class="headerlink" title="多行日志合并"></a>多行日志合并</h1>multiline.pattern: ‘^((\d+).(\d+).(\d+).(\d+)\s){2}[‘<br>multiline.negate: true<br>multiline.match: after</li>
</ul>
</li>
</ul>
<p>filter<br>5.0 版本后，beats 新增了简单的 filter 功能，用来完成事件过滤和字段删减：<br>如：<br>filters:</p>
<pre><code>- drop_event:
    regexp:
        message: &quot;^DBG:&quot;
- drop_fields:
    contains:
        source: &quot;test&quot;
    fields: [&quot;message&quot;]
- include_fields:
    fields: [&quot;http.code&quot;, &quot;http.host&quot;]
    equals:
        http.code: 200
    range:
        gte:
            cpu.user_p: 0.5
        lt:
            cpu.user_p: 0.8
</code></pre><p>可用的条件判断还包括：<br>equals<br>contains<br>regexp<br>range<br>or<br>and<br>not</p>
<p>output<br>目前 beat 可以发送数据给 Elasticsearch、Logstash、File、Kafka、Redis 和 Console 六种目的地址。<br>这里以logstash为例：<br>beats 发送到 Elasticsearch 也是走 HTTP 接口。示例配置段如下：</p>
<h1 id="——————————————-Logstash-output-————————————————"><a href="#——————————————-Logstash-output-————————————————" class="headerlink" title="——————————————- Logstash output ————————————————"></a>——————————————- Logstash output ————————————————</h1><p>output.logstash:</p>
<h1 id="The-Logstash-hosts"><a href="#The-Logstash-hosts" class="headerlink" title="The Logstash hosts"></a>The Logstash hosts</h1><p>  hosts: [“47.96.10.91:5044”]<br>  worker: 2<br>  loadbalance: true</p>
<h1 id="Optional-SSL-By-default-is-off"><a href="#Optional-SSL-By-default-is-off" class="headerlink" title="Optional SSL. By default is off."></a>Optional SSL. By default is off.</h1><h1 id="List-of-root-certificates-for-HTTPS-server-verifications"><a href="#List-of-root-certificates-for-HTTPS-server-verifications" class="headerlink" title="List of root certificates for HTTPS server verifications"></a>List of root certificates for HTTPS server verifications</h1><h1 id="ssl-certificate-authorities-“-etc-pki-root-ca-pem”"><a href="#ssl-certificate-authorities-“-etc-pki-root-ca-pem”" class="headerlink" title="ssl.certificate_authorities: [“/etc/pki/root/ca.pem”]"></a>ssl.certificate_authorities: [“/etc/pki/root/ca.pem”]</h1><h1 id="Certificate-for-SSL-client-authentication"><a href="#Certificate-for-SSL-client-authentication" class="headerlink" title="Certificate for SSL client authentication"></a>Certificate for SSL client authentication</h1><h1 id="ssl-certificate-“-etc-pki-client-cert-pem”"><a href="#ssl-certificate-“-etc-pki-client-cert-pem”" class="headerlink" title="ssl.certificate: “/etc/pki/client/cert.pem”"></a>ssl.certificate: “/etc/pki/client/cert.pem”</h1><h1 id="Client-Certificate-Key"><a href="#Client-Certificate-Key" class="headerlink" title="Client Certificate Key"></a>Client Certificate Key</h1><h1 id="ssl-key-“-etc-pki-client-cert-key”"><a href="#ssl-key-“-etc-pki-client-cert-key”" class="headerlink" title="ssl.key: “/etc/pki/client/cert.key”"></a>ssl.key: “/etc/pki/client/cert.key”</h1><p>这里 worker 的含义，是 beat 连到每个 host 的线程数。在 loadbalance 开启的情况下，意味着有 4 个worker 轮训发送数据。</p>
<p>output字段<br>Filebeat 发送的日志，会包含以下字段：<br>beat.hostname beat 运行的主机名<br>beat.name shipper 配置段设置的 name，如果没设置，等于 beat.hostname<br>@timestamp 读取到该行内容的时间<br>type 通过 document_type 设定的内容<br>input_type 来自 “log” 还是 “stdin”<br>source 具体的文件名全路径<br>offset 该行日志的起始偏移量<br>message 日志内容<br>fields 添加的其他固定字段都存在这个对象里面</p>
<p>配置概览<br>filebeat:<br>    spool_size: 1024                         # 最大可以攒够 1024 条数据一起发送出去<br>    idle_timeout: “5s”                       # 否则每 5 秒钟也得发送一次<br>    registry_file: “.filebeat”               #文件读取位置记录文件，会放在当前工作目录下。所以如果你换一个工作目录执行 filebeat 会导致重复传输！<br>    config_dir: “path/to/configs/contains/many/yaml” # 如果配置过长，可以通过目录加载方式拆分配置<br>    prospectors:                             # 有相同配置参数的可以归类为一个 prospector</p>
<pre><code>    - input_type: log               # 除了 &quot;log&quot;，还有 &quot;stdin&quot;
        fields:                          # 类似 logstash 的 add_fields
            logsource: YII_INFO
            logtype: YIIdev              
        paths:                           # 指明读取文件的位置
            - /home/www/temp/logs/mobile.info.log
            - /home/www/temp/logs/crontab.info.log
            - /home/www/temp/logs/api.info.log
            - /home/www/temp/logs/pc.info.log
            - /home/www/temp/logs/inside.info.*.log
        include_lines: [&quot;^ERR&quot;, &quot;^WARN&quot;] # 只发送包含这些字样的日志
        exclude_lines: [&quot;^OK&quot;]           # 不发送包含这些字样的日志
        document_type: &quot;YII_dev_123_log&quot; # 定义写入 ES 时的 _type 值
        ignore_older: &quot;24h&quot;              # 超过 24 小时没更新内容的文件不再监听。在 windows 上另外有一个配置叫 force_close_files，只要文件名一变化立刻关闭文件句柄，保证文件可以被删除，缺陷是可能会有日志还没读完
        scan_frequency: &quot;10s&quot;           # 每 10 秒钟扫描一次目录，更新通配符匹配上的文件列表
        tail_files: false               # 是否从文件末尾开始读取
        harvester_buffer_size: 16384    # 实际读取文件时，每次读取 16384 字节
        backoff: &quot;1s&quot;                   # 每 1 秒检测一次文件是否有新的一行内容需要读取
        # 多行日志合并
        multiline.pattern: &#39;^((\d+)\.(\d+)\.(\d+)\.(\d+)\s){2}\[&#39;
        multiline.negate: true
        multiline.match: after

        ... 下面可以有多个- input_type: 甚至多个prospectors
</code></pre><h1 id="——————————————-Logstash-output-————————————————-1"><a href="#——————————————-Logstash-output-————————————————-1" class="headerlink" title="——————————————- Logstash output ————————————————"></a>——————————————- Logstash output ————————————————</h1><p>output.logstash:</p>
<h1 id="The-Logstash-hosts-1"><a href="#The-Logstash-hosts-1" class="headerlink" title="The Logstash hosts"></a>The Logstash hosts</h1><p>  hosts: [“47.96.10.91:5044”]</p>
<h1 id="Optional-SSL-By-default-is-off-1"><a href="#Optional-SSL-By-default-is-off-1" class="headerlink" title="Optional SSL. By default is off."></a>Optional SSL. By default is off.</h1><h1 id="List-of-root-certificates-for-HTTPS-server-verifications-1"><a href="#List-of-root-certificates-for-HTTPS-server-verifications-1" class="headerlink" title="List of root certificates for HTTPS server verifications"></a>List of root certificates for HTTPS server verifications</h1><h1 id="ssl-certificate-authorities-“-etc-pki-root-ca-pem”-1"><a href="#ssl-certificate-authorities-“-etc-pki-root-ca-pem”-1" class="headerlink" title="ssl.certificate_authorities: [“/etc/pki/root/ca.pem”]"></a>ssl.certificate_authorities: [“/etc/pki/root/ca.pem”]</h1><h1 id="Certificate-for-SSL-client-authentication-1"><a href="#Certificate-for-SSL-client-authentication-1" class="headerlink" title="Certificate for SSL client authentication"></a>Certificate for SSL client authentication</h1><h1 id="ssl-certificate-“-etc-pki-client-cert-pem”-1"><a href="#ssl-certificate-“-etc-pki-client-cert-pem”-1" class="headerlink" title="ssl.certificate: “/etc/pki/client/cert.pem”"></a>ssl.certificate: “/etc/pki/client/cert.pem”</h1><h1 id="Client-Certificate-Key-1"><a href="#Client-Certificate-Key-1" class="headerlink" title="Client Certificate Key"></a>Client Certificate Key</h1><h1 id="ssl-key-“-etc-pki-client-cert-key”-1"><a href="#ssl-key-“-etc-pki-client-cert-key”-1" class="headerlink" title="ssl.key: “/etc/pki/client/cert.key”"></a>ssl.key: “/etc/pki/client/cert.key”</h1><p>filebeat 输出到控制台<br><a href="https://www.elastic.co/guide/en/beats/filebeat/current/configuring-output.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/configuring-output.html</a><br>./filebeat -e #启动filebeat</p>
<p>输出到：<br>output.console:<br>  pretty: true</p>
<p>过滤：<br><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filtering-and-enhancing-data.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/filtering-and-enhancing-data.html</a></p>
<p>7.2 版本使用<br>processors:</p>
<ul>
<li>drop_event:<br>  when:<pre><code> regexp:
    message: &quot;^DBG:&quot;
</code></pre></li>
</ul>
<h1 id="对字段刨析"><a href="#对字段刨析" class="headerlink" title="对字段刨析"></a>对字段刨析</h1><p>processors:</p>
<ul>
<li>dissect:<h1 id="2019-07-14-02-40-11-006-INFO-status-1-time-60ms-request-GVA-MAD-20190908-ctripDirect2016331"><a href="#2019-07-14-02-40-11-006-INFO-status-1-time-60ms-request-GVA-MAD-20190908-ctripDirect2016331" class="headerlink" title="2019-07-14 02:40:11.006 INFO  - status:1,time:60ms,request:GVA-MAD|20190908/|ctripDirect2016331|"></a>2019-07-14 02:40:11.006 INFO  - status:1,time:60ms,request:GVA-MAD|20190908/|ctripDirect2016331|</h1>  tokenizer: “%{date} %{time}  %{level} %{null} %{status},time:%{time},request:%{flight}|%{date}|%{cid}|%{other}”<br>  field: “message”<br>  target_prefix: “mesg”</li>
</ul>
<h1 id="支持脚本处理"><a href="#支持脚本处理" class="headerlink" title="支持脚本处理"></a>支持脚本处理</h1><p>processors:</p>
<ul>
<li>script:<br>  lang: javascript<br>  id: my_filter<br>  source: &gt;<pre><code>function process(event) {
    event.Tag(&quot;js&quot;);
}
</code></pre></li>
</ul>
<p>利用elasticsearch pipeline处理</p>
<p>pipeline: “timestamp-pipeline-id”<br>POST /_ingest/pipeline</p>
<p>{<br>    “timestamp-pipeline-id”: {<br>        “description”: “timestamp pipeline”,<br>        “processors”: [<br>            {<br>                “grok”: {<br>                    “field”: “message”,<br>                    “patterns”: [<br>                        “%{TIMESTAMP_ISO8601:timestamp} “<br>                    ]<br>                },<br>                “remove”: {<br>                    “field”: “@timestamp”<br>                }<br>            },<br>            {<br>                “date”: {<br>                    “field”: “timestamp”,<br>                    “formats”: [<br>                        “yyyy-MM-dd HH:mm:ss.SSS”<br>                    ]<br>                },<br>                “remove”: {<br>                    “field”: “timestamp”<br>                }<br>            }<br>        ],<br>        “on_failure”: [<br>            {<br>                “set”: {<br>                    “field”: “_index”,<br>                    “value”: “failed-“<br>                }<br>            }<br>        ]<br>    }<br>}</p>
<p>filebeat.config.modules:<br>  path: ${path.config}/modules.d/*.yml</p>
<p>filebeat modules enable nginx<br>filebeat modules list<br>filebeat setup -e</p>
<p>cat &gt; /etc/filebeat/filebeat.yml &lt;&lt; EOF<br>filebeat.prospectors:</p>
<ul>
<li>input_type: log<br>paths:<ul>
<li>/var/log/nginx/*.log<br>exclude_files: [‘.gz$’]</li>
</ul>
</li>
</ul>
<p>output.logstash:<br>  hosts: [“10.21.5.5:5400”]<br>EOF</p>
]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
  </entry>
  <entry>
    <title>filebeat</title>
    <url>/2020/06/Filebeat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>filebeat.inputs:</p>
<ul>
<li>type: log<br>enabled: true<br>paths:<ul>
<li>/data/log/java_web/ota-whitelist-service/ota-whitelist-service.<em>.log<br>tail_files: true<br>include_lines: [‘.</em>OtaQuery.*’]</li>
</ul>
</li>
</ul>
<hr>
<p>  fields:<br>    otaChannel: ctrip<br>    otaSubChannel: ctrip-1<br>  fields_under_root: true<br>filebeat.config.modules:<br>  path: ${path.config}/modules.d/*.yml</p>
<h2 id="reload-enabled-false"><a href="#reload-enabled-false" class="headerlink" title="  reload.enabled: false"></a>  reload.enabled: false</h2><p>setup.template.settings:<br>  index.number_of_shards: 1<br>  index.codec: best_compression<br>  index.mapping.ignore_malformed: true<br>setup.template.name: “ota-query”<br>setup.template.pattern: “ota-query-*”<br>setup.template.overwrite: false</p>
<h2 id="setup-template-enable-false"><a href="#setup-template-enable-false" class="headerlink" title="setup.template.enable: false"></a>setup.template.enable: false</h2><p>setup.kibana:<br>output.elasticsearch:<br>  hosts: [“119.84.8.44:60116”]<br>  username: “elastic”<br>  password: “56781234”</p>
<h2 id="pipeline-“ota-query-pipeline”"><a href="#pipeline-“ota-query-pipeline”" class="headerlink" title="  pipeline: “ota-query-pipeline”"></a>  pipeline: “ota-query-pipeline”</h2><p>setup.ilm.enabled: true<br>setup.ilm.rollover_alias: “ota-query”<br>setup.ilm.pattern: “{now/d}-000001”</p>
<h2 id="setup-ilm-policy-name-“ota-query”"><a href="#setup-ilm-policy-name-“ota-query”" class="headerlink" title="setup.ilm.policy_name: “ota-query”"></a>setup.ilm.policy_name: “ota-query”</h2><p>processors:</p>
<h2 id="add-host-metadata"><a href="#add-host-metadata" class="headerlink" title="  - add_host_metadata: ~"></a>  - add_host_metadata: ~</h2><p>logging.level: info<br>logging.to_files: true<br>logging.files:<br>  path: /var/log/filebeat<br>  name: filebeat<br>  keepfiles: 7<br>  permissions: 0644</p>
<hr>
<p>PUT  /_ingest/pipeline/us-nginx-pipeline<br>{<br>    “description” : “parse us-nginx query”,<br>    “processors” : [<br>      {<br>        “dissect” : {<br>          “field” : “message”,<br>          “pattern” : “””%{remoteip} %{hostip} %{nouse} %{nouse1} [%{date}] “%{method} %{path} %{httptype}” %{httpstatus} %{delay} %{size} %{nouse3} %{clienttype} %{clienttype1} %{clientip} %{upstreamip} %{backstatus} %{backdeply}”””<br>        }<br>      }<br>    ]<br>}</p>
]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
  </entry>
  <entry>
    <title>DevelopRoadmap</title>
    <url>/2020/06/DevelopRoadmap/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>MaintainerRoadmap</title>
    <url>/2020/06/MaintainerRoadmap/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://edu.aliyun.com/roadmap/linux" target="_blank" rel="noopener">https://edu.aliyun.com/roadmap/linux</a><br><a href="https://edu.aliyun.com/developer?spm=5176.11399608.1149155.1.56c74679Db50CA" target="_blank" rel="noopener">https://edu.aliyun.com/developer?spm=5176.11399608.1149155.1.56c74679Db50CA</a></p>
<ul>
<li><p>核心<br>系统安装<br>无人值守装机<br>常用命令<br>编辑器<br>软件包管理<br>用户权限<br>文件管理</p>
</li>
<li><p>Shell编程<br>基本功能<br>正则<br>字符处理<br>流程控制</p>
</li>
<li><p>系统管理<br>启动管理<br>服务管理<br>进程管理与工作管理<br>日志管理</p>
</li>
<li><p>服务管理<br>网络基础<br>SSH<br>DHCP<br>DNS<br>Vsftp<br>NFS<br>Samba<br>LAMP<br>Apache<br>LNMP<br>Nginx<br>企业邮件<br>ELK<br>Tomcat<br>Rsync</p>
</li>
<li><p>数据库管理<br>MySQL基础<br>MySQL集群<br>NoSQL数据库</p>
</li>
<li><p>集群<br>集群概念<br>负载均衡集群<br>高可用集群<br>多级负载<br>Squid缓存、代理服务<br>网络存储集群<br>监控集群<br>安全防护</p>
</li>
</ul>
<ul>
<li>虚拟化<br>虚拟化概述<br>Vcent<br>Docker<br>Openstack<br>k8s<br>大厂面试题</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>linux系统优化</title>
    <url>/2020/06/linux%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://access.redhat.com/documentation/en-us/" target="_blank" rel="noopener">redhat product docs</a></li>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/" target="_blank" rel="noopener">linux</a></li>
</ul>
<p>linux 操作系统</p>
<h2 id="硬件组成"><a href="#硬件组成" class="headerlink" title="硬件组成"></a>硬件组成</h2><ul>
<li>处理器<ul>
<li>运算器（负责运算）</li>
<li>控制器（控制数据传输）</li>
<li>寄存器（暂存器）</li>
<li>锁存器</li>
</ul>
</li>
<li>北桥<ul>
<li>cpu 和ram 通信</li>
</ul>
</li>
<li>cpu 缓存<ul>
<li>一级缓存（指令缓存，数据缓存）</li>
</ul>
</li>
<li>二级缓存</li>
<li>三级缓存（多cpu 共享的）</li>
<li>缓存置换策略（MRU，LRU）</li>
<li>内存<ul>
<li>RAM ：分区对应cpu缓存</li>
</ul>
</li>
<li><p>地址（32位，64位）每个单元一个byte</p>
</li>
<li><p>PAE:物理地址扩展（32bit+4bit =64G）</p>
</li>
</ul>
<blockquote>
<p>2^32=4G</p>
<p>2^64=2TB</p>
</blockquote>
<ul>
<li><p>当前CPU的型号</p>
<ul>
<li>Write through 通写：更新缓存</li>
<li>Write back 回写：更新数据再写到其他缓存</li>
</ul>
</li>
<li><p>显卡</p>
<ul>
<li>显存(通过PCIE-&gt;北桥连接CPU)</li>
</ul>
</li>
<li>固态硬盘：多个U盘</li>
<li>IO设备<ul>
<li>高速IO（PCIE : 北桥）</li>
</ul>
</li>
<li><p>低速IO（PCI: 南桥）</p>
</li>
<li><p>IO设备寻址</p>
</li>
<li>IO总线复用</li>
<li>com口：65535个</li>
<li>IO控制器（设备信号转成总线信号）</li>
</ul>
<p>pull：CPU轮询IO设备<br>可编程中断控制器：cpu 外部设备<br>中断信号（中断向量）<br>识别那个设备发的IO请求</p>
<ul>
<li>临界区：资源竞争的地方</li>
<li>DMA:直接内存访问（CPU 指挥DMA负责传输数据，产生中断报告完成传输）</li>
</ul>
<p>ROM：自举程序<br>映射内存的最低处<br>内存存储顺序<br>1、自举程序<br>2、DMA<br>3、内核<br>4、进程</p>
<p>时钟脉冲<br>电频<br>上升沿完成切换</p>
<p>管理程序<br>Monitor<br>OS<br>VM<br>CPU:时间切片<br>指令计数器</p>
<p>进程<br>一个独立的运行单位<br>由操作系统来调用<br>系统资源：cpu时间，存储空间<br>进程切换：保存现场，恢复现场</p>
<p>内存：<br>内核<br>进程1<br>进程2<br>进程3</p>
<p>4k为单位<br>页<br>页框<br>物理地址<br>虚拟：<br>线性地址<br>翻译：通过页目录<br>物理地址</p>
<p>CPU模式：<br>内核模式：特权指令<br>用户模式：</p>
<p>虚拟机把特权指令交给内核，<br>内核进行翻译，控制<br>仿真<br>模拟<br>资源状态<br>ready<br>sleeping<br>可打断<br>不可打断</p>
<p>IBM redbook</p>
<p>Task_Struct:进程描述符：进程的数据：进程的所有信息<br>双向链表进行组织<br>mm_struct<br>tty_struct<br>fs_struct<br>files_struct<br>signal_struct<br>进程切换：<br>cpu运行信息保存到进程描述符中<br>sys 占用过的原因<br>进程不停切换<br>中断太多</p>
<p>系统时钟：切换时间<br>tick：滴答<br>时间解析度</p>
<p>怎么切换：抢占式<br>时钟滴答：</p>
<p>继承类别：<br>交互式进程：IO<br>批处理进程：计算进程<br>实时进程(Real-time）</p>
<p>cpu:时间片长，优先级低<br>IO:时间片段，优先级高<br>Linux 优先级：Prority<br>实现优先级：1-99，数字越小，优先级越低<br>SCHED_FIFO<br>SCHED_RR</p>
<p>静态优先级：100-139，数据越大，优先级越高<br>实时高于静态<br>SCHED_OTHER</p>
<p>nice：手动调整静态优先级<br>-20，19：100，139<br>0：120<br>动态优先级:主要调整SCHED_OTHER</p>
<p>nice N command<br>renice -n # pid<br>chrt -f -p prio PID<br>chrt -r -p prio PID<br>chrt -f -p prio command<br>ps -e -o class,rtprio,nice,cmd</p>
<p>进程结构<br>代码区 Text<br>数据区 Data<br>BSS 初始化为零的区<br>堆区 动态分配<br>栈区  本地变量，函数参数，返回地址<br>kernel-&gt;init<br>init<br>fork()<br>task_struct<br>COW:Copy On Write<br>prefork<br>tick less:无滴答系统<br>interrupt-driven<br>硬中断<br>软中断<br>不用滴答可以让cpu深度睡眠<br>SMP 对称多cpu<br>一个内存控制器<br>NUMA 非一致性内存访问<br>多内存控制器<br>rebalanacing</p>
<p>CPU affinity ： cpu 姻亲关系，bind<br>numa<br>numstat<br>numa_miss<br>numad 自动管理进程分配（繁忙的系统，性能提升50%）</p>
<p>taskset 将进程和cpu绑定<br>taskset -p mask pid</p>
<h1 id="把101-绑定到-3-cpu"><a href="#把101-绑定到-3-cpu" class="headerlink" title="把101 绑定到 3# cpu"></a>把101 绑定到 3# cpu</h1><p>taskset -p -c 3 101</p>
<p>等命令来查看进程运行的信息<br>sar<br>dstat<br>iostat</p>
<p>cpu还可以划分为多个组(域)，可以把进程binding上组上<br>根域</p>
<p>可以把cpuset 挂载在文件系统上<br>服务器架构<br>SMP<br>NUMA</p>
<p>内存子系统组件：<br>//使用slab cache 减少小内存的使用<br>slab allocater:链表管理<br>kmem_cache<br>slabs_empty<br>slabs_full<br>slabs_partial<br>slabs<br>page<br>kuddy system<br>kswapd<br>pdflush 脏页：一个磁盘一个pdfflush 进程<br>mmu</p>
<p>虚拟化环境<br>   进程-&gt;主机—&gt;内存<br>PA-&gt;HA-&gt;MA<br>支持虚拟化的cpu影子页表<br>shadow PT<br>Hugepage<br>systctl -w vm.nr_hugepages = n</p>
<p>huggetlbfs 文件系统<br>mysql buffer 使用大页面</p>
<p>系统调用<br>strace -c -p PID<br>strace -o out.file<br>strace -c command //输出摘要信息</p>
<p>缩减慢速子系统的服务时间：<br>filesystem: buffer cache 缓存文件元数据<br>Disk io: page cache：缓存disk io<br>进程通信使用共享内存<br>network IO：使用buffer cache ，arp cache</p>
<p>虚拟机资源过量使用<br>cpu可以过量使用<br>物理内存的过量使用是以swap为前提的<br>vm.overcommit_memory<br>0: 不使用<br>1 : always<br>2：使用swap<br>vm.overcommit_memory = 2<br>vm.overcommit_ratio = 50<br>OOM:/proc/1/oom_score //内存超出通过OOM kill  进程</p>
<p>slabtop<br>可以通过调整slabs来改善slab的使用</p>
<p>/proc/net/arp<br>软限制：可以短时间超过<br>硬限制：不可以超过</p>
<p>列出arp<br>ip neighbor list<br>清空<br>ip neighbor flush dev ethX<br>arp table -&gt;gc<br>mmap<br>vm.lowmem_reserve_ratio<br>vm.vfs_cache_presure 目录与源文件缓存<br>0 不回收 dentries 和inodes<br>1-99 倾向于不回收<br>100+ 倾向于回收</p>
<p>page-cluster = 4 一次性使用<br>zone_reclaim_mode<br>1<br>2 回收写的脏页<br>4<br>grep Anon /proc/meminfo<br>进程通信使用Anon page<br>Anon page 系统 ： 栈，堆的数据<br>RSS，page cache，anon page</p>
<p>如何高效使用内核资源 /proc,/sys<br>压缩<br>cpu调度<br>mem 调优<br>文件系统 调优<br>I/O 调优<br>网络子系统 调优</p>
<p>Black art performance<br>Systemtop<br>Oprofile<br>vaigrind 内存泄露探测工具<br>perf 性能评估</p>
<p>进程通信<br>ipcs -l<br>ipcrm<br>上限<br>一次性读写上限</p>
<p>pdflush 脏页<br>清理上限<br>vm.dirty_background_ratio<br>vm.dirty_ratio<br>vm.dirty_writeback_centisecs</p>
<p>清洗脏页<br>sync&amp;&amp;echo 3&gt;/proc/sys/vm/drop_caches</p>
<p>进程运行时 /proc/1/info<br>vm.swappiness</p>
<p>IO Scheduler:<br>CFQ<br>NOOP<br>Deadline: 最后期限调度<br>anticipatory</p>
]]></content>
  </entry>
  <entry>
    <title>SquidStunnel</title>
    <url>/2020/06/SquidStunnel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A：本地主机</span></span><br><span class="line"><span class="comment"># B：远程主机</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># B：</span></span><br><span class="line"><span class="comment"># 安装squid</span></span><br><span class="line">yum -y install squid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Stunnel 服务端</span></span><br><span class="line">yum -y install stunnel openssl openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置squid</span></span><br><span class="line">vim /etc/squid/squid.conf</span><br><span class="line">acllocalnet src 66.0.0.6/32</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许所有的访问</span></span><br><span class="line">http_access allow all</span><br><span class="line"></span><br><span class="line"><span class="comment"># squid监听端口</span></span><br><span class="line">http_port 6100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">acl localnet src 10.0.0.0/8     <span class="comment"># RFC1918 possible internal network</span></span><br><span class="line">acl localnet src 172.16.0.0/12  <span class="comment"># RFC1918 possible internal network</span></span><br><span class="line">acl localnet src 192.168.0.0/16 <span class="comment"># RFC1918 possible internal network</span></span><br><span class="line">acl localnet src fc00::/7       <span class="comment"># RFC 4193 local private network range</span></span><br><span class="line">acl localnet src fe80::/10      <span class="comment"># RFC 4291 link-local (directly plugged) machines</span></span><br><span class="line">acl localnet src 49.7.65.135/24      <span class="comment"># RFC 4291 link-local (directly plugged) machines</span></span><br><span class="line"></span><br><span class="line">acl SSL_ports port 443</span><br><span class="line">acl Safe_ports port 80          <span class="comment"># http</span></span><br><span class="line">acl Safe_ports port 21          <span class="comment"># ftp</span></span><br><span class="line">acl Safe_ports port 443         <span class="comment"># https</span></span><br><span class="line">acl Safe_ports port 70          <span class="comment"># gopher</span></span><br><span class="line">acl Safe_ports port 210         <span class="comment"># wais</span></span><br><span class="line">acl Safe_ports port 1025-65535  <span class="comment"># unregistered ports</span></span><br><span class="line">acl Safe_ports port 280         <span class="comment"># http-mgmt</span></span><br><span class="line">acl Safe_ports port 488         <span class="comment"># gss-http</span></span><br><span class="line">acl Safe_ports port 591         <span class="comment"># filemaker</span></span><br><span class="line">acl Safe_ports port 777         <span class="comment"># multiling http</span></span><br><span class="line">acl CONNECT method CONNECT</span><br><span class="line"></span><br><span class="line">http_access deny !Safe_ports</span><br><span class="line">http_access deny CONNECT !SSL_ports</span><br><span class="line">http_access allow localhost manager</span><br><span class="line">http_access deny manager</span><br><span class="line"></span><br><span class="line">http_access allow localnet</span><br><span class="line">http_access allow localhost</span><br><span class="line"></span><br><span class="line">http_access deny all</span><br><span class="line"></span><br><span class="line">http_port 6100</span><br><span class="line"><span class="comment"># http_port 3128 transparent</span></span><br><span class="line">cache_mem 64 MB</span><br><span class="line">cache_swap_low 80</span><br><span class="line">cache_swap_high 97</span><br><span class="line">cache_dir ufs /usr/<span class="built_in">local</span>/squid/var/cache/squid 100 16 256</span><br><span class="line">cache_effective_user squid</span><br><span class="line">cache_effective_group squid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">coredump_dir /var/spool/squid</span><br><span class="line"></span><br><span class="line">refresh_pattern ^ftp:           1440    20%     10080</span><br><span class="line">refresh_pattern ^gopher:        1440    0%      1440</span><br><span class="line">refresh_pattern -i (/cgi-bin/|\?) 0     0%      0</span><br><span class="line">refresh_pattern .               0       20%     4320</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl stop firewald.service </span><br><span class="line">systemctl <span class="built_in">disable</span> firewald.service</span><br><span class="line">yum install iptables-services iptables-devel -y</span><br><span class="line">systemctl <span class="built_in">enable</span> iptables.service</span><br><span class="line">systemctl start iptables.service</span><br><span class="line">iptables -I INPUT 1 -s 192.9.191.0/24 -p tcp --dport 3128 -j ACCEPT</span><br><span class="line">iptables -I INPUT  2 -p tcp --dport 3128 -j DROP </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务 service squid start</span></span><br><span class="line">systemctl restart squid.service</span><br><span class="line">squid -k parse  //检查配置文件</span><br><span class="line">squid -z    //初始化</span><br><span class="line">chown squid /data/var/squid/</span><br><span class="line">systemctl restart squid.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="comment">###   acl和http_pass访问控制   ###</span></span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line">acl manager proto cache_object</span><br><span class="line">acl localhost src 127.0.0.1/32::1</span><br><span class="line">acl to_localhost dst 127.0.0.0/80.0.0.0/32::1</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 以下定义了局域网地址localnet（需要了解一些网络里面的私有地址概念）</span></span><br><span class="line">acl localnet src 10.0.0.0/8</span><br><span class="line">acl localnet src 172.16.0.0/12</span><br><span class="line">acl localnet src 192.168.0.0/16</span><br><span class="line">acl localnet src fc00::/7</span><br><span class="line">acl localnet src fe80::/10</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义SSL_ports为443</span></span><br><span class="line">acl SSL_ports port 443</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义了Safe_ports所代表的端口</span></span><br><span class="line">acl Safe_ports port 80      <span class="comment"># http</span></span><br><span class="line">acl Safe_ports port 21      <span class="comment"># ftp</span></span><br><span class="line">acl Safe_ports port 443     <span class="comment"># https</span></span><br><span class="line">acl Safe_ports port 70      <span class="comment"># gopher</span></span><br><span class="line">acl Safe_ports port 210     <span class="comment"># wais</span></span><br><span class="line">acl Safe_ports port 1025-65535  <span class="comment"># unregistered ports</span></span><br><span class="line">acl Safe_ports port 280     <span class="comment"># http-mgmt</span></span><br><span class="line">acl Safe_ports port 488     <span class="comment"># gss-http</span></span><br><span class="line">acl Safe_ports port 591     <span class="comment"># filemaker</span></span><br><span class="line">acl Safe_ports port 777     <span class="comment"># multiling http</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义CONNECT代表http里的CONNECT请求方法</span></span><br><span class="line">acl CONNECT method CONNECT</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 允许本机管理缓存</span></span><br><span class="line">http_access allow manager localhost</span><br><span class="line"><span class="comment"># 拒绝其他地址管理缓存</span></span><br><span class="line">http_access deny manager</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 拒绝不安全端口请求</span></span><br><span class="line">http_access deny !Safe_ports</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 不允许连接非安全SSL_ports端口</span></span><br><span class="line">http_access deny CONNECT !SSL_ports</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 拒绝连接到本地服务器提供的服务</span></span><br><span class="line"><span class="comment"># （用于保护本机一些只有本机用户才能访问的服务）</span></span><br><span class="line"><span class="comment"># http_access deny to_localhost</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 允许局域网用户的请求</span></span><br><span class="line">http_access allow localnet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许本机用户的请求</span></span><br><span class="line">http_access allow localhost</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 拒绝其他所有请求</span></span><br><span class="line">http_access deny all</span><br><span class="line"> </span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="comment">###   squid 服务器基本配置      ###</span></span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Squid的监听端口</span></span><br><span class="line">http_port 3128</span><br><span class="line"> </span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"><span class="comment">###   squid 缓存配置           ###</span></span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 出现cgi-bin或者？的URL不予缓存</span></span><br><span class="line">hierarchy_stoplist cgi-bin ?</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 磁盘缓存目录 </span></span><br><span class="line"><span class="comment">#cache_dir ufs /var/spool/squid 100 16 256</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># squid挂掉后，临终遗言要放到哪里</span></span><br><span class="line">coredump_dir /var/spool/squid</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 刷新缓存规则</span></span><br><span class="line">refresh_pattern ^ftp:       1440    20% 10080</span><br><span class="line">refresh_pattern ^gopher:    1440    0%  1440</span><br><span class="line">refresh_pattern -i (/cgi-bin/|\?) 0 0%  0</span><br><span class="line">refresh_pattern .       0   20% 4320</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存配置</span></span><br><span class="line"><span class="comment"># cache_dir scheme directory size L1 L2 [options]</span></span><br><span class="line"><span class="comment"># scheme 默认为ufs。其他有：aufs, diskd, coss, null</span></span><br><span class="line"><span class="comment"># directory 建议将一个缓寸目录放在单独的分区中</span></span><br><span class="line"><span class="comment"># Size 100MB</span></span><br><span class="line"><span class="comment"># L1 and L2:L1指定第一层，L2指定第二层各是多少目录数。</span></span><br><span class="line"><span class="comment"># Options: (read-only max-size)</span></span><br><span class="line"><span class="comment"># read-only：用在当你将缓存目录下面的内容移动到其他硬盘上，并且还需要这些数据的时候。如果不加read-only，Squid的hit率会急剧下降。</span></span><br><span class="line"><span class="comment"># max-size：指定最大缓存的数据大小。单位是字节。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#refresh_pattern [-i] regexp min percent max [options]</span></span><br><span class="line">refresh_pattern -i .gif$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .jpg$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .png$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .mp3$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .wmv$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .rm$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .swf$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .mpeg$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .wma$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .c3p0$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .mp4$ 1440 50% 2880 ignore-reload</span><br><span class="line">refresh_pattern -i .css$ 10 50% 60 reload-into-ims</span><br><span class="line">refresh_pattern -i .js$ 10 50% 60 reload-into-ims</span><br><span class="line">refresh_pattern -i .xml$ 10 50% 30 reload-into-ims</span><br><span class="line"></span><br><span class="line"><span class="comment"># regexp 就不讲了，大家都明白的;)</span></span><br><span class="line"><span class="comment"># min, max的单位是分钟，percent就是百分比</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果希望页面一进入cache就不删除，直到被主动purge掉为止，可以加上ignore-reload选项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stunnel.conf:配置文件  stunnel.log:日志文件  stunnel.pem #认证文件，客户端和服务端一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置stunnel server 配置</span></span><br><span class="line">vim  /etc/stunnel/stunnel.conf</span><br><span class="line">cert= /etc/stunnel/stunnel.pem  ;;;<span class="comment"># 认证文件</span></span><br><span class="line">CAfile= /etc/stunnel/stunnel.pem ;;;<span class="comment"># 认证文件</span></span><br><span class="line">client=no  ;;;<span class="comment"># 服务端</span></span><br><span class="line">[sproxy]</span><br><span class="line">accept= 0.0.0.0:443  ;;;<span class="comment"># 监听端口</span></span><br><span class="line">connect= 123.145.123.123:6100  ;;;<span class="comment">#squid服务连接端口</span></span><br><span class="line"></span><br><span class="line">cert = /etc/stunnel/stunnel.pem</span><br><span class="line">CAfile = /etc/stunnel/stunnel.pem</span><br><span class="line">socket = l:TCP_NODELAY=1</span><br><span class="line">socket = r:TCP_NODELAY=1</span><br><span class="line">pid = /var/lib/stunnel4/stunnel.pid</span><br><span class="line">verify = 3</span><br><span class="line">setuid = root</span><br><span class="line">setgid = root</span><br><span class="line">client = no</span><br><span class="line">delay = no</span><br><span class="line">sslVersion = all</span><br><span class="line">compression = zlib</span><br><span class="line">debug = 7</span><br><span class="line">syslog = yes</span><br><span class="line">output = stunnel.log</span><br><span class="line">[sproxy]</span><br><span class="line">accept = 0.0.0.0:443</span><br><span class="line">connect = 127.0.0.1:6100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir /var/lib/stunnel4/ -p</span><br><span class="line">cp stunnel.pem /etc/stunnel/stunnel.pem</span><br><span class="line"><span class="comment"># 启动服务 </span></span><br><span class="line">stunnel /etc/stunnel/stunnel.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># A：</span></span><br><span class="line">yum -y install stunnel openssl openssl-devel</span><br><span class="line">配置stunnel client 配置</span><br><span class="line">vim  /etc/stunnel/stunnel.conf</span><br><span class="line">client = yes</span><br><span class="line">[sproxy]</span><br><span class="line">accept = 0.0.0.0:8001  ;;;<span class="comment"># 监听地址</span></span><br><span class="line">connect = 47.254.89.154:443  ;;;<span class="comment"># stunnel服务端地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传服务器证书到 /etc/stunnel/stunnel.pem</span></span><br><span class="line">mkdir /var/lib/stunnel4/ -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务 stunnel /etc/stunnel/stunnel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 证书生成：</span></span><br><span class="line"><span class="comment"># 需要安装上面的证书生成命令，重新生成证书后手动更新</span></span><br><span class="line">openssl req -new -x509 -days 365 -nodes -out stunnel.pem -keyout stunnel.pem</span><br><span class="line"></span><br><span class="line">openssl s_client -connect server:443 -ssl3</span><br><span class="line">openssl s_client -connect server:443 -tls1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://47.254.89.54:6100</span><br><span class="line"><span class="built_in">export</span> https_proxy=https://47.254.89.54:443</span><br><span class="line">curl http://www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$http_proxy</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Shadowsock</title>
    <url>/2020/06/Shadowsock/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 pip 安装</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple  --upgrade pip</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple shadowsocks</span><br><span class="line"></span><br><span class="line">vi /etc/shadowsocks.json</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&#123;  </span></span><br><span class="line"><span class="string">    "server":"0.0.0.0",  </span></span><br><span class="line"><span class="string">    "server_port":8989,   </span></span><br><span class="line"><span class="string">    "local_address":"127.0.0.1",  </span></span><br><span class="line"><span class="string">    "local_port":1080,  </span></span><br><span class="line"><span class="string">    "password":"yourpassword",  </span></span><br><span class="line"><span class="string">    "timeout":300,  </span></span><br><span class="line"><span class="string">    "method":"aes-256-cfb",  </span></span><br><span class="line"><span class="string">    "fast_open": false  </span></span><br><span class="line"><span class="string">&#125;'</span> &gt;/etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">ssserver -c /etc/shadowsocks.json -d restart</span><br></pre></td></tr></table></figure>
<h2 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;/etc/shadowsocks.json</span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">"enable"</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"password"</span> : <span class="string">"123456"</span>,</span><br><span class="line">      <span class="string">"method"</span> : <span class="string">"aes-128-cfb"</span>,</span><br><span class="line">      <span class="string">"remarks"</span> : <span class="string">"fesf"</span>,</span><br><span class="line">      <span class="string">"server"</span> : <span class="string">"39.96.36.62"</span>,</span><br><span class="line">      <span class="string">"obfs"</span> : <span class="string">"plain"</span>,</span><br><span class="line">      <span class="string">"protocol"</span> : <span class="string">"origin"</span>,</span><br><span class="line">      <span class="string">"server_port"</span> : 8808,</span><br><span class="line">      <span class="string">"remarks_base64"</span> : <span class="string">"ZmVzZg=="</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sslocal -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>CentOS7配置http代理</title>
    <url>/2020/06/CentOS7%E9%85%8D%E7%BD%AEhttp%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS7配置代理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先安装 shadowsock 客户端</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再安装 http 客户端 把 http 转成 sock5 </span></span><br><span class="line">yum install -y texi2html texinfo git gcc gcc-c++ glibc</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jech/polipo.git</span><br><span class="line"><span class="built_in">cd</span> polipo</span><br><span class="line">make all</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置polipo</span></span><br><span class="line">vi /etc/polipo/config</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/polipo.config</span><br><span class="line">socksParentProxy = <span class="string">"127.0.0.1:1080"</span> </span><br><span class="line">socksProxyType = socks5  </span><br><span class="line">proxyAddress=<span class="string">"0.0.0.0"</span>  </span><br><span class="line">proxyPort=8888</span><br><span class="line">logFile = /var/<span class="built_in">log</span>/polipo</span><br><span class="line">logLevel = 99</span><br><span class="line">logSyslog = <span class="literal">true</span></span><br><span class="line">daemonise=<span class="literal">true</span>  </span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line"></span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动polipo</span></span><br><span class="line">polipo -c /etc/polipo.config</span><br><span class="line">curl -x 127.0.0.1:8888  ip.sb</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8888</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8888</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Keepalived_LVS安装</title>
    <url>/2020/06/Keepalived-LVS%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="keepalived-安装"><a href="#keepalived-安装" class="headerlink" title="keepalived 安装"></a>keepalived 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install keepalived.x86_64 ipvsadm.x86_64 -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置KeepAlived</span></span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id lvs01</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface em1</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        27.221.53.58</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 27.221.53.58 80 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo wrr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    persistence_timeout 0</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 27.221.53.41 80 &#123;</span><br><span class="line">        weight 3</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 10</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 27.221.53.47 80 &#123;</span><br><span class="line">        weight 3</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 10</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RealServer服务器</span><br><span class="line"><span class="built_in">cd</span> /etc/init.d/</span><br><span class="line">vim lvs_realserver.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line">VIP1=27.221.53.58</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Start LVS of Real Server ..."</span></span><br><span class="line">        /sbin/ifconfig lo:1 <span class="variable">$&#123;VIP1&#125;</span> broadcast <span class="variable">$&#123;VIP1&#125;</span> netmask 255.255.255.255 up</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"2"</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"2"</span> &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"OK!"</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Stop LVS of Real Server ..."</span></span><br><span class="line">        /sbin/ifconfig lo:1 down</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"0"</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"0"</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"0"</span> &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"0"</span> &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"OK!"</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mariadb</title>
    <url>/2020/06/mariadb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mariadb-install"><a href="#mariadb-install" class="headerlink" title="mariadb install"></a>mariadb install</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mariadb mariadb-server python2-PyMySQL -y</span><br><span class="line"> </span><br><span class="line">vim /etc/my.cnf.d/openstack.cnf</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">bind</span>-address = 192.168.0.52</span><br><span class="line">default-storage-engine = innodb</span><br><span class="line">innodb_file_per_table</span><br><span class="line">max_connections = 4096</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">character-set-server = utf8</span><br><span class="line"> </span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb.service</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line"> </span><br><span class="line">数据库安装</span><br><span class="line"><span class="comment">#validate</span></span><br><span class="line">netstat -ntlp |grep 3306</span><br><span class="line"> </span><br><span class="line">mysql_secure_installation</span><br><span class="line">n y....</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mongodb</title>
    <url>/2020/06/mongodb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mongodb-install"><a href="#mongodb-install" class="headerlink" title="mongodb install"></a>mongodb install</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mongodb-server mongodb -y</span><br><span class="line"> </span><br><span class="line">/etc/mongod.conf</span><br><span class="line">bind_ip = 10.0.0.11</span><br><span class="line">smallfiles = <span class="literal">true</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mongod.service systemctl start mongod.service</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>memcache</title>
    <url>/2020/06/memcache/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="memcache-install"><a href="#memcache-install" class="headerlink" title="memcache install"></a>memcache install</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install memcached python-memcached -y</span><br><span class="line"> </span><br><span class="line">vim /etc/sysconfig/memcached</span><br><span class="line">OPTIONS=<span class="string">"-l 127.0.0.1,::1,controller"</span></span><br><span class="line"> </span><br><span class="line">systemctl <span class="built_in">enable</span> memcached.service</span><br><span class="line">systemctl start memcached.service</span><br><span class="line"> </span><br><span class="line"><span class="comment"># validate</span></span><br><span class="line">netstat -ntlp |grep 11211</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Rabbitmq</title>
    <url>/2020/06/Rabbitmq/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="rabbitmq-install"><a href="#rabbitmq-install" class="headerlink" title="rabbitmq install"></a>rabbitmq install</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 rabbitmq</span></span><br><span class="line">yum install rabbitmq-server -y</span><br><span class="line"> </span><br><span class="line">systemctl <span class="built_in">enable</span> rabbitmq-server.service</span><br><span class="line">systemctl start rabbitmq-server.service</span><br><span class="line"> </span><br><span class="line"><span class="comment">#validate</span></span><br><span class="line">netstat -ntlp|grep 25672</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Etcd</title>
    <url>/2020/06/Etcd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="etcd-安装"><a href="#etcd-安装" class="headerlink" title="etcd 安装"></a>etcd 安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install etcd -y</span><br><span class="line"> </span><br><span class="line">vim /etc/etcd/etcd.conf</span><br><span class="line"> </span><br><span class="line"><span class="comment">#[Member]</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd/default.etcd"</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"http://10.0.0.11:2380"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"http://10.0.0.11:2379"</span></span><br><span class="line">ETCD_NAME=<span class="string">"controller"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"http://10.0.0.11:2380"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"http://10.0.0.11:2379"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">"controller=http://10.0.0.11:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster-01"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span></span><br><span class="line"> </span><br><span class="line">systemctl <span class="built_in">enable</span> etcd</span><br><span class="line">systemctl start etcd</span><br><span class="line"> </span><br><span class="line">netstat -ntlp|grep etcd</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>GO</category>
      </categories>
  </entry>
  <entry>
    <title>NTP</title>
    <url>/2020/06/NTP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ntp-安装"><a href="#ntp-安装" class="headerlink" title="ntp 安装"></a>ntp 安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install chrony -y</span><br><span class="line"> </span><br><span class="line">vim /etc/chrony.conf</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">"/^server/d"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp1.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp2.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf </span><br><span class="line">sed -i <span class="string">"/#allow/s/#//"</span> /etc/chrony.conf</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd.service;systemctl start chronyd.service</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>ProductManageTools</title>
    <url>/2020/06/ProductManageTools/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>cloud note<br>项目管理 ScrumWorks</p>
<p>需求管理 confluence<br>需求收集 Wiki<br>需求评审 Mind</p>
<p>bug 管理 Jira</p>
<p>产品管理<br>产品设计 Axure<br>规划迭代 Excel<br>产品研发 Visio</p>
<p>流程图（流程图是对过程、算法、流程的一种图像表示。）<br>泳道图（流程图中经常用于梳理业务的一种图）</p>
<p>产品设计草图（产品经理可以用设计草图来帮助自己思考、完善功能设计）<br>（角色、任务、逻辑（条件）、输入、输出）<br>大家可以参考这两本经典书籍：《用户体验草图设计》、《关键设计报告》。</p>
<p>原型图（信息（类型、结构、梳理）、布局、权重（哪些信息更重要）、交互形式）<br>信息结构图（描述的是某个对象的属性）<br>测试用例图（关注角色、任务和事件三要素）</p>
<p>甘特图（用来描述项目进度）</p>
<p>常用 UML 动态图（5 个）：<br>用例图，活动图，状态机图，序列图，通信图。</p>
<p>常用 UML 静态图（4 个）：<br>类图，包图，部署图，构件图。</p>
<p>运维常用图<br>拓扑图<br>结构图</p>
]]></content>
  </entry>
  <entry>
    <title>window10安装</title>
    <url>/2020/06/window10%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>做为运维，始终逃不过装系统的困扰。哈哈哈。</p>
<p><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></p>
<p>U启动<br><a href="http://ushendupe.yunkoubei.net/jiaocheng/uefibqdzz.html" target="_blank" rel="noopener">http://ushendupe.yunkoubei.net/jiaocheng/uefibqdzz.html</a></p>
<p>windows 10系统:<br>链接:<a href="https://pan.baidu.com/s/1JdiU8iUtXc4Zj60zT79Hsg" target="_blank" rel="noopener">https://pan.baidu.com/s/1JdiU8iUtXc4Zj60zT79Hsg</a>  密码:o43n</p>
<p>office 系统<br>链接：<a href="https://pan.baidu.com/s/16XdrNeh2Ayo-tIBQcIAdYA" target="_blank" rel="noopener">https://pan.baidu.com/s/16XdrNeh2Ayo-tIBQcIAdYA</a> 提取码：3apb</p>
<p>iso 提取<br><a href="https://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">https://cn.ultraiso.net/xiazai.html</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>ali云应用部署</title>
    <url>/2020/06/ali%E4%BA%91%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ali云-cpfs"><a href="#ali云-cpfs" class="headerlink" title="ali云 cpfs"></a>ali云 cpfs</h2><ul>
<li><a href="https://help.aliyun.com/document_detail/131060.html?spm=a2c4g.11186623.4.2.6892722avCbsoK" target="_blank" rel="noopener">ali云 cpfs</a></li>
</ul>
<h3 id="cpfs-客户端安装"><a href="#cpfs-客户端安装" class="headerlink" title="cpfs 客户端安装"></a>cpfs 客户端安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保持kernel kernel-devel kernel-headers的版本一致</span></span><br><span class="line">sudo yum update kernel-devel kernel-headers</span><br><span class="line"></span><br><span class="line">sudo yum install -y make gcc libyaml-devel libtool zlib-devel glibc-headers dkms expect</span><br><span class="line"></span><br><span class="line">wget https://cpfs-client.oss-cn-beijing.aliyuncs.com/centos/cpfs-client-2.10.8-202.el7.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf cpfs-client-2.10.8-202.el7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这一步大概需要等待5-10分钟</span></span><br><span class="line">sudo rpm -vih  cpfs-client-dkms-1.0.0-202.el7.noarch.rpm</span><br><span class="line">sudo rpm -vih cpfs-client-2.10.8-202.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h4 id="本地挂载验证"><a href="#本地挂载验证" class="headerlink" title="本地挂载验证"></a>本地挂载验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/cpfs/cpfs-mounts.conf</span><br><span class="line">xxx.cn-beijing.cpfs.nas.aliyuncs.com@tcp:xxx.cn-beijing.cpfs.nas.aliyuncs.com@tcp:/xxx</span><br><span class="line">/etc/init.d/cpfs-client start</span><br><span class="line">systemctl <span class="built_in">enable</span> cpfs-client</span><br></pre></td></tr></table></figure>
<h4 id="kubernetes使用cfs作为持久存储"><a href="#kubernetes使用cfs作为持久存储" class="headerlink" title="kubernetes使用cfs作为持久存储"></a>kubernetes使用cfs作为持久存储</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cpfs-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">5Ti</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">flexVolume:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">"alicloud/cpfs"</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">server:</span> <span class="string">xxx.cn-beijing.cpfs.nas.aliyuncs.com@tcp:xxx.cn-beijing.cpfs.nas.aliyuncs.com@tcp</span></span><br><span class="line">      <span class="attr">fileSystem:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure>
<h4 id="PVC"><a href="#PVC" class="headerlink" title="PVC"></a>PVC</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cpfs-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">5Ti</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>公司容器化项目方案</title>
    <url>/2020/06/%E5%85%AC%E5%8F%B8%E5%AE%B9%E5%99%A8%E5%8C%96%E9%A1%B9%E7%9B%AE%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先对老平台资源占用情况进行计算，获取所有资源占用情况。</p>
<h1 id="老项目资源成本计算"><a href="#老项目资源成本计算" class="headerlink" title="老项目资源成本计算"></a>老项目资源成本计算</h1><div class="table-container">
<table>
<thead>
<tr>
<th>业务</th>
<th>机器配置</th>
<th>数量(台)</th>
<th>总数</th>
<th>费用(元)</th>
</tr>
</thead>
<tbody>
<tr>
<td>携程1</td>
<td>8C,16G</td>
<td>8</td>
<td>64C，128G</td>
<td>6400</td>
</tr>
<tr>
<td>携程2</td>
<td>8C,16G</td>
<td>8</td>
<td>64C，128G</td>
<td>6400</td>
</tr>
<tr>
<td>淘宝</td>
<td>8C,16G</td>
<td>6</td>
<td>48C, 96G</td>
<td>4800</td>
</tr>
<tr>
<td>去哪儿</td>
<td>8C,16G</td>
<td>2</td>
<td>12C，32G</td>
<td>1600</td>
</tr>
<tr>
<td>OTHER</td>
<td>8C,16G</td>
<td>3</td>
<td>24C,48G</td>
<td>2400</td>
</tr>
<tr>
<td>渠道总数</td>
<td>8C,16G</td>
<td>27</td>
<td>196C,384G</td>
<td>21600</td>
</tr>
<tr>
<td>美国</td>
<td>8C,16G</td>
<td>20</td>
<td>160C,320G</td>
<td>32000</td>
</tr>
<tr>
<td>国内接口</td>
<td>8C,16G</td>
<td>5</td>
<td>40C,96G</td>
<td>4000</td>
</tr>
<tr>
<td>数据库</td>
<td>8C,16G</td>
<td>5</td>
<td>8C,48G,2T</td>
<td>5500</td>
</tr>
<tr>
<td>外网流量</td>
<td>8C,16G</td>
<td>5</td>
<td>40C,96G</td>
<td>20000</td>
</tr>
</tbody>
</table>
</div>
<h1 id="项目-业务流"><a href="#项目-业务流" class="headerlink" title="项目(业务流)"></a>项目(业务流)</h1><p>云主机规划:<br>国内</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>集群节点</th>
<th>数量</th>
<th>云主机配置</th>
<th>单价</th>
<th>总额(元)</th>
</tr>
</thead>
<tbody>
<tr>
<td>rancher</td>
<td>1</td>
<td>4c，16G</td>
<td>620</td>
<td>620</td>
</tr>
<tr>
<td>master</td>
<td>3</td>
<td>4c,16G,500G</td>
<td>620</td>
<td>1860</td>
</tr>
<tr>
<td>work</td>
<td>6</td>
<td>40c,196G,500G</td>
<td>5000</td>
<td>30000</td>
</tr>
<tr>
<td>cpfs</td>
<td>1</td>
<td>5TB,2.5T/s</td>
<td>8700</td>
<td>8700</td>
</tr>
</tbody>
</table>
</div>
<p>美国</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>集群节点</th>
<th>数量</th>
<th>云主机配置</th>
<th>单价</th>
<th>总额(元)</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>3</td>
<td>4c,16G,500G</td>
<td>620</td>
<td>620</td>
</tr>
<tr>
<td>work</td>
<td>3</td>
<td>40c,196G,500G</td>
<td>5000</td>
<td>30000</td>
</tr>
<tr>
<td>cpfs</td>
<td>1</td>
<td>2TB,2.5T/s</td>
<td>8700</td>
<td>8700</td>
</tr>
</tbody>
</table>
</div>
<p>其他</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>应用</th>
<th>数量</th>
<th>云主机配置</th>
<th>单价</th>
<th>总额(元)</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据库</td>
<td>1</td>
<td>8C,16G</td>
<td>8C,48G,2T</td>
<td>5500</td>
</tr>
<tr>
<td>外网流量</td>
<td>8C,16G</td>
<td>5</td>
<td>40C,96G</td>
<td>20000</td>
</tr>
</tbody>
</table>
</div>
<h1 id="项目-辅助业务"><a href="#项目-辅助业务" class="headerlink" title="项目(辅助业务)"></a>项目(辅助业务)</h1>]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>apt包管理工具</title>
    <url>/2020/06/apt%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="docker容器中安装vim"><a href="#docker容器中安装vim" class="headerlink" title="docker容器中安装vim"></a>docker容器中安装vim</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新后源</span></span><br><span class="line">cat /etc/apt/sources.list</span><br><span class="line"><span class="comment"># deb http://snapshot.debian.org/archive/debian/20200607T000000Z buster main</span></span><br><span class="line">deb http://deb.debian.org/debian buster main</span><br><span class="line"><span class="comment"># deb http://snapshot.debian.org/archive/debian-security/20200607T000000Z buster/updates main</span></span><br><span class="line">deb http://security.debian.org/debian-security buster/updates main</span><br><span class="line"><span class="comment"># deb http://snapshot.debian.org/archive/debian/20200607T000000Z buster-updates main</span></span><br><span class="line">deb http://deb.debian.org/debian buster-updates main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用阿里云镜像</span></span><br><span class="line">cat&lt;&lt;<span class="string">'EOF'</span> &gt;./sources.list</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure>
<h2 id="使用-apt-镜像源"><a href="#使用-apt-镜像源" class="headerlink" title="使用 apt 镜像源"></a>使用 apt 镜像源</h2><p>mv /etc/apt/sources.list /etc/apt/sources.list.bak</p>
<h2 id="apt-get-help"><a href="#apt-get-help" class="headerlink" title="apt-get help"></a>apt-get help</h2><p>update - Retrieve new lists of packages<br>upgrade - Perform an upgrade<br>install - Install new packages (pkg is libc6 not libc6.deb)<br>reinstall - Reinstall packages (pkg is libc6 not libc6.deb)<br>remove - Remove packages<br>purge - Remove packages and config files<br>autoremove - Remove automatically all unused packages<br>dist-upgrade - Distribution upgrade, see apt-get(8)<br>dselect-upgrade - Follow dselect selections<br>build-dep - Configure build-dependencies for source packages<br>clean - Erase downloaded archive files<br>autoclean - Erase old downloaded archive files<br>check - Verify that there are no broken dependencies<br>source - Download source archives<br>download - Download the binary package into the current directory<br>changelog - Download and display the changelog for the given package</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>fluent-bit</title>
    <url>/2020/06/fluent-bit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">docker pull fluent/fluent-<span class="built_in">bit</span>:<span class="number">1.4</span></span><br><span class="line">docker <span class="built_in">run</span> -ti fluent/fluent-<span class="built_in">bit</span>:<span class="number">1.4</span> /fluent-<span class="built_in">bit</span>/bin/fluent-<span class="built_in">bit</span> -i cpu -o <span class="built_in">stdout</span> -f <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ kubectl <span class="keyword">create</span> namespace <span class="keyword">logging</span></span><br><span class="line">$ kubectl <span class="keyword">create</span> -f https://raw.githubusercontent.com/fluent/fluent-<span class="built_in">bit</span>-kubernetes-<span class="keyword">logging</span>/<span class="keyword">master</span>/fluent-<span class="built_in">bit</span>-service-account.yaml</span><br><span class="line">$ kubectl <span class="keyword">create</span> -f https://raw.githubusercontent.com/fluent/fluent-<span class="built_in">bit</span>-kubernetes-<span class="keyword">logging</span>/<span class="keyword">master</span>/fluent-<span class="built_in">bit</span>-role.yaml</span><br><span class="line">$ kubectl <span class="keyword">create</span> -f https://raw.githubusercontent.com/fluent/fluent-<span class="built_in">bit</span>-kubernetes-<span class="keyword">logging</span>/<span class="keyword">master</span>/fluent-<span class="built_in">bit</span>-<span class="keyword">role</span>-binding.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl <span class="keyword">create</span> -f https://raw.githubusercontent.com/fluent/fluent-<span class="built_in">bit</span>-kubernetes-<span class="keyword">logging</span>/<span class="keyword">master</span>/<span class="keyword">output</span>/elasticsearch/fluent-<span class="built_in">bit</span>-configmap.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="keyword">create</span> -f https://raw.githubusercontent.com/fluent/fluent-<span class="built_in">bit</span>-kubernetes-<span class="keyword">logging</span>/<span class="keyword">master</span>/<span class="keyword">output</span>/elasticsearch/fluent-<span class="built_in">bit</span>-ds.yaml</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>supervisor</title>
    <url>/2020/06/supervisor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="conceptual"><a href="#conceptual" class="headerlink" title="conceptual"></a>conceptual</h2><p>Supervisor是用Python开发的一套通用的进程管理程序<br>能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启</p>
<h2 id><a href="#" class="headerlink" title=" "></a> </h2><p>yum install supervisor</p>
<h2 id="配置文件-etc-supervisord-conf"><a href="#配置文件-etc-supervisord-conf" class="headerlink" title="配置文件 /etc/supervisord.conf"></a>配置文件 /etc/supervisord.conf</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[unix_http_server]</span></span><br><span class="line"><span class="attr">file</span>=/tmp/supervisor.sock   <span class="comment">;UNIX socket 文件，supervisorctl 会使用</span></span><br><span class="line"><span class="comment">;chmod=0700                 ;socket文件的mode，默认是0700</span></span><br><span class="line"><span class="comment">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">;[inet_http_server]         ;HTTP服务器，提供web管理界面</span></span><br><span class="line"><span class="comment">;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span></span><br><span class="line"><span class="comment">;username=user              ;登录管理后台的用户名</span></span><br><span class="line"><span class="comment">;password=123               ;登录管理后台的密码</span></span><br><span class="line"> </span><br><span class="line"><span class="section">[supervisord]</span></span><br><span class="line"><span class="attr">logfile</span>=/tmp/supervisord.log <span class="comment">;日志文件，默认是 $CWD/supervisord.log</span></span><br><span class="line"><span class="attr">logfile_maxbytes</span>=<span class="number">50</span>MB        <span class="comment">;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span></span><br><span class="line"><span class="attr">logfile_backups</span>=<span class="number">10</span>           <span class="comment">;日志文件保留备份数量默认10，设为0表示不备份</span></span><br><span class="line"><span class="attr">loglevel</span>=info                <span class="comment">;日志级别，默认info，其它: debug,warn,trace</span></span><br><span class="line"><span class="attr">pidfile</span>=/tmp/supervisord.pid <span class="comment">;pid 文件</span></span><br><span class="line"><span class="attr">nodaemon</span>=<span class="literal">false</span>               <span class="comment">;是否在前台启动，默认是false，即以 daemon 的方式启动</span></span><br><span class="line"><span class="attr">minfds</span>=<span class="number">1024</span>                  <span class="comment">;可以打开的文件描述符的最小值，默认 1024</span></span><br><span class="line"><span class="attr">minprocs</span>=<span class="number">200</span>                 <span class="comment">;可以打开的进程数的最小值，默认 200</span></span><br><span class="line"> </span><br><span class="line"><span class="section">[supervisorctl]</span></span><br><span class="line"><span class="attr">serverurl</span>=unix:///tmp/supervisor.sock <span class="comment">;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span></span><br><span class="line"><span class="comment">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span></span><br><span class="line"><span class="section">[program:xx]</span></span><br><span class="line"><span class="attr">command</span>=/opt/apache-tomcat-<span class="number">8.0</span>.<span class="number">35</span>/bin/catalina.sh run  <span class="comment">; 程序启动命令</span></span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span>       <span class="comment">; 在supervisord启动的时候也自动启动</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">10</span>         <span class="comment">; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span>     <span class="comment">; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span></span><br><span class="line"><span class="attr">startretries</span>=<span class="number">3</span>       <span class="comment">; 启动失败自动重试次数，默认是3</span></span><br><span class="line"><span class="attr">user</span>=tomcat          <span class="comment">; 用哪个用户启动进程，默认是root</span></span><br><span class="line"><span class="attr">priority</span>=<span class="number">999</span>         <span class="comment">; 进程启动优先级，默认999，值小的优先启动</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span> <span class="comment">; 把stderr重定向到stdout，默认false</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">20</span>MB  <span class="comment">; stdout 日志文件大小，默认50MB</span></span><br><span class="line"><span class="attr">stdout_logfile_backups</span> = <span class="number">20</span>   <span class="comment">; stdout 日志文件备份数，默认是10</span></span><br><span class="line"><span class="comment">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/opt/apache-tomcat-<span class="number">8.0</span>.<span class="number">35</span>/logs/catalina.out</span><br><span class="line"><span class="attr">stopasgroup</span>=<span class="literal">false</span>     <span class="comment">;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span></span><br><span class="line"><span class="attr">killasgroup</span>=<span class="literal">false</span>     <span class="comment">;默认为false，向进程组发送kill信号，包括子进程</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">;包含其它配置文件</span></span><br><span class="line"><span class="section">[include]</span></span><br><span class="line"><span class="attr">files</span> = relative/directory/*.ini    <span class="comment">;可以指定一个或多个以.ini结束的配置文件</span></span><br></pre></td></tr></table></figure>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#项目名</span></span><br><span class="line"><span class="section">[program:blog]</span></span><br><span class="line"><span class="comment">#脚本目录</span></span><br><span class="line"><span class="attr">directory</span>=/opt/bin</span><br><span class="line"><span class="comment">#脚本执行命令</span></span><br><span class="line"><span class="attr">command</span>=/usr/bin/python /opt/bin/test.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#supervisor启动的时候是否随着同时启动，默认True</span></span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment">#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本运行的用户身份 </span></span><br><span class="line"><span class="attr">user</span> = test</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出 </span></span><br><span class="line"><span class="attr">stderr_logfile</span>=/tmp/blog_stderr.log </span><br><span class="line"><span class="attr">stdout_logfile</span>=/tmp/blog_stdout.log </span><br><span class="line"><span class="comment">#把stderr重定向到stdout，默认 false</span></span><br><span class="line"><span class="attr">redirect_stderr</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">#stdout日志文件大小，默认 50MB</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span> = <span class="number">20</span>M</span><br><span class="line"><span class="comment">#stdout日志文件备份数</span></span><br><span class="line"><span class="attr">stdout_logfile_backups</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure>
<h2 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supervisorctl status        <span class="comment">#查看所有进程的状态</span></span><br><span class="line">supervisorctl stop es       <span class="comment">#停止es</span></span><br><span class="line">supervisorctl start es      <span class="comment">#启动es</span></span><br><span class="line">supervisorctl restart       <span class="comment">#重启es</span></span><br><span class="line">supervisorctl update        <span class="comment">#配置文件修改后使用该命令加载新的配置</span></span><br><span class="line">supervisorctl reload        <span class="comment">#重新启动配置中的所有程序</span></span><br><span class="line">supervisorctl restart all   <span class="comment">#重启所有应用</span></span><br><span class="line">supervisorctl stop all      <span class="comment">#停止所有应用</span></span><br><span class="line">supervisorctl start all     <span class="comment">#启动所有应用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisord 服务</span></span><br><span class="line">systemctl start supervisord.service     <span class="comment">#启动supervisor并加载默认配置文件</span></span><br><span class="line">systemctl <span class="built_in">enable</span> supervisord.service    <span class="comment">#将supervisor加入开机启动项</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ruby</title>
    <url>/2020/06/ruby/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>Linux下tty、pty、pts的概念区别</title>
    <url>/2020/06/Linux%E4%B8%8Btty%E3%80%81pty%E3%80%81pts%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>tty （Teletype）终端设备的统称。tty设备包括虚拟控制台，串口以及伪终端设备。<br>pty 虚拟终端 pseudo-tty<br>  pts(pseudo-terminal slave)是pty的实现方法<br>  ptmx(pseudo-terminal master)配合使用实现pty<br>  伪终端(Pseudo Terminal)是成对的逻辑终端设备(即master和slave设备, 对master的操作会反映到slave上)。<br>/dev/console 控制台(通过串口显示器连上去的那个)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">tty</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ag"</span> &gt;/dev/pts/0</span><br><span class="line"><span class="comment"># 两个 ssh 会话间通信</span></span><br><span class="line"><span class="comment"># pts1</span></span><br><span class="line">cat &lt;/dev/pts/0</span><br><span class="line"><span class="comment"># pts2</span></span><br><span class="line">cat /etc/passwd &gt;/dev/pts/0</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>rust</title>
    <url>/2020/06/rust/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://www.rust-lang.org/zh-CN/" target="_blank" rel="noopener">rust docs</a></li>
<li><a href="https://www.runoob.com/rust/rust-tutorial.html" target="_blank" rel="noopener">rust runoob</a></li>
<li><a href="https://doc.rust-lang.org/std/index.html" target="_blank" rel="noopener">标准库</a></li>
</ul>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Rustup：Rust安装器和版本管理工具<br>Cargo：Rust 的构建工具和包管理器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl --proto <span class="string">'=https'</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># rust 更新</span></span><br><span class="line">rustup update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rust 的构建工具和包管理器</span></span><br><span class="line">cargo --version</span><br><span class="line">cargo build 可以构建项目</span><br><span class="line">cargo run 可以运行项目</span><br><span class="line">cargo <span class="built_in">test</span> 可以测试项目</span><br><span class="line">cargo doc 可以为项目构建文档</span><br><span class="line">cargo publish 可以将库发布到 crates.io。</span><br></pre></td></tr></table></figure>
<h1 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载环境</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.cargo/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">cargo new hello-rust</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">hello-rust</span><br><span class="line">|- Cargo.toml <span class="comment"># 为 Rust 的清单文件。其中包含了项目的元数据和依赖库。</span></span><br><span class="line">|- src</span><br><span class="line">  |- main.rs <span class="comment"># 为编写应用代码的地方。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">cargo run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加依赖 Cargo.toml</span></span><br><span class="line">[dependencies]</span><br><span class="line">ferris-says = <span class="string">"0.1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">cargo build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用依赖</span></span><br><span class="line">use ferris_says::say;</span><br></pre></td></tr></table></figure>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Rust-调用-Windows-API"><a href="#Rust-调用-Windows-API" class="headerlink" title="Rust 调用 Windows API"></a>Rust 调用 Windows API</h1><blockquote>
<p>Rust/WinRT 方便使用Rust构建Windows应用</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">[target.<span class="symbol">'cfg</span>(windows)'.dependencies]</span><br><span class="line">winapi = &#123; version = <span class="string">"0.3"</span>, features = [<span class="string">"winuser"</span>] &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[cfg(windows)]</span> <span class="keyword">extern</span> <span class="keyword">crate</span> winapi;</span><br><span class="line"><span class="keyword">use</span> std::io::Error;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(windows)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">print_message</span></span>(msg: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, Error&gt; &#123;</span><br><span class="line">    <span class="keyword">use</span> std::ffi::OsStr;</span><br><span class="line">    <span class="keyword">use</span> std::iter::once;</span><br><span class="line">    <span class="keyword">use</span> std::os::windows::ffi::OsStrExt;</span><br><span class="line">    <span class="keyword">use</span> std::ptr::null_mut;</span><br><span class="line">    <span class="keyword">use</span> winapi::um::winuser::&#123;MB_OK, MessageBoxW&#125;;</span><br><span class="line">    <span class="keyword">let</span> wide: <span class="built_in">Vec</span>&lt;<span class="built_in">u16</span>&gt; = OsStr::new(msg).encode_wide().chain(once(<span class="number">0</span>)).collect();</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        MessageBoxW(null_mut(), wide.as_ptr(), wide.as_ptr(), MB_OK)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> ret == <span class="number">0</span> &#123; <span class="literal">Err</span>(Error::last_os_error()) &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="literal">Ok</span>(ret) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[cfg(not(windows))]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">print_message</span></span>(msg: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;(), Error&gt; &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, msg);</span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    print_message(<span class="string">"Hello, world!"</span>).unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="rust-web-框架"><a href="#rust-web-框架" class="headerlink" title="rust web 框架"></a>rust web 框架</h1><p>Hyper官网<br>Rocket官网<br>Actix-web官网</p>
<h1 id="Rust-基础语法"><a href="#Rust-基础语法" class="headerlink" title="Rust 基础语法"></a>Rust 基础语法</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Rust 是强类型语言，但具有自动判断变量类型的能力。</span></span><br><span class="line"><span class="comment"># Rust 语言不允许精度有损失的自动数据类型转换。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> a = 123; <span class="comment"># a 是不可变量</span></span><br><span class="line"><span class="built_in">let</span> mut b = 456; <span class="comment"># b 是可变量，mutable</span></span><br><span class="line"></span><br><span class="line">const a: i32 = 123; <span class="comment"># 常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重影就是指变量的名称可以被重新使用的机制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数型（Integer）</span></span><br><span class="line">i8，u8</span><br><span class="line"><span class="comment"># isize 和 usize 两种整数类型是用来衡量数据大小的，它们的位长度取决于所运行的目标平台，如果是 32 位架构的处理器将使用 32 位位长度整型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔型 true 或 false</span></span><br><span class="line"><span class="comment"># 字符型 字符型用 char 表示</span></span><br><span class="line"><span class="comment"># 复合类型 </span></span><br><span class="line"><span class="built_in">let</span> tup: (i32, f64, u8) = (500, 6.4, 1);</span><br><span class="line"><span class="built_in">let</span> (x, y, z) = tup;</span><br><span class="line"><span class="comment"># 数组</span></span><br><span class="line"><span class="built_in">let</span> a = [1, 2, 3, 4, 5];</span><br><span class="line"><span class="built_in">let</span> mut a = [1, 2, 3];</span><br><span class="line"><span class="built_in">let</span> first = a[0];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数</span></span><br><span class="line">fn &lt;函数名&gt; ( &lt;参数&gt; ) &lt;函数体&gt;</span><br><span class="line"><span class="comment"># 函数参数</span></span><br><span class="line">fn another_function(x: i32, y: i32) &#123;</span><br><span class="line">    println!(<span class="string">"x 的值为 : &#123;&#125;"</span>, x);</span><br><span class="line">    println!(<span class="string">"y 的值为 : &#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">let</span> y = &#123;</span><br><span class="line">        <span class="built_in">let</span> x = 3;</span><br><span class="line">        x + 1</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数嵌套</span></span><br><span class="line">fn five() -&gt; i32 &#123;</span><br><span class="line">        5</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 函数返回值</span></span><br><span class="line">fn add(a: i32, b: i32) -&gt; i32 &#123;</span><br><span class="line">    <span class="built_in">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件语句</span></span><br><span class="line"><span class="keyword">if</span> number &lt; 5 &#123;</span><br><span class="line">        println!(<span class="string">"条件为 true"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println!(<span class="string">"条件为 false"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rust 中的条件表达式必须是 bool 类型</span></span><br><span class="line"><span class="comment"># while</span></span><br><span class="line">fn <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">let</span> mut number = 1;</span><br><span class="line">    <span class="keyword">while</span> number != 4 &#123;</span><br><span class="line">        println!(<span class="string">"&#123;&#125;"</span>, number);</span><br><span class="line">        number += 1;</span><br><span class="line">    &#125;</span><br><span class="line">    println!(<span class="string">"EXIT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># for</span></span><br><span class="line">fn <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">let</span> a = [10, 20, 30, 40, 50];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a.<span class="function"><span class="title">iter</span></span>() &#123;</span><br><span class="line">        println!(<span class="string">"值为 : &#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># range</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 0..5 &#123;</span><br><span class="line">  println!(<span class="string">"a[&#123;&#125;] = &#123;&#125;"</span>, i, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#loop 循环</span></span><br><span class="line">loop &#123;</span><br><span class="line">  println(<span class="string">"wo ..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 变量范围</span></span><br><span class="line">&#123;</span><br><span class="line">    // 在声明以前，变量 s 无效</span><br><span class="line">    <span class="built_in">let</span> s = <span class="string">"runoob"</span>;</span><br><span class="line">    // 这里是变量 s 的可用范围</span><br><span class="line">&#125;</span><br><span class="line">// 变量范围已经结束，变量 s 无效</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆，堆中数据需要clone</span></span><br><span class="line"><span class="built_in">let</span> s1 = String::from(<span class="string">"hello"</span>);</span><br><span class="line"><span class="built_in">let</span> s2 = s1.clone();</span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp; 运算符可以取变量的"引用"。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 租借</span></span><br><span class="line"><span class="built_in">let</span> s2 = &amp;s1;</span><br><span class="line"><span class="built_in">let</span> s2 = &amp;mut s1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串切片</span></span><br><span class="line"><span class="built_in">let</span> s = String::from(<span class="string">"broadcast"</span>);</span><br><span class="line"><span class="built_in">let</span> part1 = &amp;s[0..5];</span><br><span class="line"><span class="built_in">let</span> part2 = &amp;s[5..9];</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rust 中的结构体（Struct）</span></span><br><span class="line">struct Site &#123;</span><br><span class="line">    domain: String,</span><br><span class="line">    name: String,</span><br><span class="line">    nation: String,</span><br><span class="line">    found: u32</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组结构体</span></span><br><span class="line">struct Color(u8, u8, u8);</span><br><span class="line"></span><br><span class="line"><span class="comment"># #[derive(Debug)]</span></span><br><span class="line"><span class="comment"># &#123;:#?&#125; &#123;:?&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">wider</span></span>(&amp;<span class="keyword">self</span>, rect: &amp;Rectangle) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt; rect.width</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> rect2 = Rectangle &#123; width: <span class="number">40</span>, height: <span class="number">20</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, rect1.wider(&amp;rect2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结构体关联函数"><a href="#结构体关联函数" class="headerlink" title="结构体关联函数"></a>结构体关联函数</h1><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">create</span></span>(width: <span class="built_in">u32</span>, height: <span class="built_in">u32</span>) -&gt; Rectangle &#123;</span><br><span class="line">        Rectangle &#123; width, height &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect = Rectangle::create(<span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, rect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Rust-枚举类"><a href="#Rust-枚举类" class="headerlink" title="Rust 枚举类"></a>Rust 枚举类</h1><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Book</span></span> &#123;</span><br><span class="line">    Papery, Electronic</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">enum Book &#123;</span></span><br><span class="line"><span class="comment">    Papery(u32),</span></span><br><span class="line"><span class="comment">    Electronic(String),</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> book = Book::Papery;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="match-语法"><a href="#match-语法" class="headerlink" title="match 语法"></a>match 语法</h1><blockquote>
<p>Option::None</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> opt = <span class="built_in">Option</span>::<span class="literal">Some</span>(<span class="string">"Hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> opt = <span class="built_in">Option</span>::<span class="literal">Some</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">match</span> opt &#123;</span><br><span class="line">        <span class="built_in">Option</span>::<span class="literal">Some</span>(something) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, something);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">Option</span>::<span class="literal">None</span> =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"opt is nothing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">match</span> i &#123;</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="built_in">println!</span>(<span class="string">"zero"</span>),</span><br><span class="line">    _ =&gt; &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Rust-组织管理"><a href="#Rust-组织管理" class="headerlink" title="Rust 组织管理"></a>Rust 组织管理</h1><p>Rust 中有三和重要的组织概念：箱、包、模块。<br>箱（Crate）<br>“箱”是二进制程序文件或者库文件，存在于”包”中。<br>包（Package）<br>当我们使用 Cargo 执行 new 命令创建 Rust 工程时，工程目录下会建立一个 Cargo.toml 文件。工程的实质就是一个包，包必须由一个 Cargo.toml 文件来管理，该文件描述了包的基本信息以及依赖项。<br>模块（Module）<br>Rust 中的组织单位是模块（Module）<br>Rust 中的路径分隔符是 :: 。<br>Rust 中有两种简单的访问权：公共（public）和私有（private）。<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> second_module;</span><br><span class="line"><span class="keyword">use</span> crate::nation::government::govern;</span><br></pre></td></tr></table></figure></p>
<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不可恢复错误</span></span><br><span class="line"><span class="built_in">panic!</span>(<span class="string">"error occured"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可恢复的错误</span></span><br><span class="line"><span class="comment">// Result 类提供了两个办法：unwrap() 和 expect(message: &amp;str) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可恢复的错误的传递</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(i: <span class="built_in">i32</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, <span class="built_in">bool</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123; <span class="literal">Ok</span>(i) &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="literal">Err</span>(<span class="literal">false</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> r = f(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Ok</span>(v) = r &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Ok: f(-1) = &#123;&#125;"</span>, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Err"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rust 中可以在 Result 对象后添加 ? 操作符将同类的 Err 直接传递出去</span></span><br><span class="line"><span class="keyword">let</span> t = f(i)?;</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch exception</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> str_file = read_text_from_file(<span class="string">"hello.txt"</span>);</span><br><span class="line">    <span class="keyword">match</span> str_file &#123;</span><br><span class="line">        <span class="literal">Ok</span>(s) =&gt; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s),</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; &#123;</span><br><span class="line">            <span class="keyword">match</span> e.kind() &#123;</span><br><span class="line">                io::ErrorKind::NotFound =&gt; &#123;</span><br><span class="line">                    <span class="built_in">println!</span>(<span class="string">"No such file"</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                _ =&gt; &#123;</span><br><span class="line">                    <span class="built_in">println!</span>(<span class="string">"Cannot read the file"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="所有权有以下三条规则："><a href="#所有权有以下三条规则：" class="headerlink" title="所有权有以下三条规则："></a>所有权有以下三条规则：</h1><p>  Rust 中的每个值都有一个变量，称为其所有者。<br>  一次只能有一个所有者。<br>  当所有者不在程序运行范围时，该值将被删除。</p>
<h1 id="泛型与特性"><a href="#泛型与特性" class="headerlink" title="泛型与特性"></a>泛型与特性</h1><p>在函数中定义泛型<br>fn max<T>(array: &amp;[T]) -&gt; T {}</T></p>
<p>结构体与枚举类中的泛型<br>struct Point<T> {<br>    x: T,<br>    y: T<br>}</T></p>
<p>特性<br>特性（trait）概念接近于 Java 中的接口（Interface），但两者不完全相同。<br>trait Descriptive {<br>    fn describe(&amp;self) -&gt; String;<br>}<br>impl &lt;特性名&gt; for &lt;所实现的类型名&gt;</p>
<p>默认特性<br>可以定义方法</p>
<p>特性做参数</p>
<h1 id="Rust-生命周期"><a href="#Rust-生命周期" class="headerlink" title="Rust 生命周期"></a>Rust 生命周期</h1>]]></content>
  </entry>
  <entry>
    <title>alpine</title>
    <url>/2020/06/alpine/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://alpinelinux.org/" target="_blank" rel="noopener">alpine </a></li>
<li><a href="https://alpinelinux.org/downloads/" target="_blank" rel="noopener">alpine docs</a></li>
<li><a href="https://mirrors.alpinelinux.org/" target="_blank" rel="noopener">alpine 镜像源</a></li>
</ul>
<h2 id="alpine-一个只有-5MB-linux-系统"><a href="#alpine-一个只有-5MB-linux-系统" class="headerlink" title="alpine (一个只有 5MB linux 系统)"></a>alpine (一个只有 5MB linux 系统)</h2><p>一个容器只需不超过 8 MB 的空间。而在磁盘中的最小安装仅要大约 130 MB 的存储空间。<br>Apline 提供了完整的 Linux 环境<br>基于musl libc 和 busybox<br>root默认无密登陆</p>
<h2 id="配置系统-setup-alpine"><a href="#配置系统-setup-alpine" class="headerlink" title="配置系统 setup-alpine"></a>配置系统 setup-alpine</h2><p>  键盘布局:us<br>  网络设置<br>  root密码设置<br>  时区设置Asia/Shanghai<br>  image模式选择<br>    r:随机的<br>    f:在已有的选择最快的<br>    e:手动修改配置文件<br>  软件安装选择<br>  磁盘格式化<br>  添加账号<br>提供APK包管理工具</p>
<h2 id="apk包管理工具"><a href="#apk包管理工具" class="headerlink" title="apk包管理工具"></a>apk包管理工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过描述文件查找特定的软件包</span></span><br><span class="line">apk search -v -d <span class="string">'docker'</span></span><br><span class="line"><span class="comment"># 查询openssh相关的软件包</span></span><br><span class="line">apk search wget</span><br><span class="line"><span class="comment"># 安装一个软件包</span></span><br><span class="line">apk add  wget</span><br><span class="line"><span class="comment"># 删除已安装的xxx软件包</span></span><br><span class="line">apk del  wget</span><br><span class="line"><span class="comment"># 更新软件包索引文件</span></span><br><span class="line">apk update</span><br><span class="line"><span class="comment"># 获取 apt 帮助</span></span><br><span class="line">apk --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 列出所有已安装的软件包</span></span><br><span class="line">apk info</span><br><span class="line"><span class="comment"># 显示完整的软件包信息</span></span><br><span class="line">apk info -a zlib</span><br><span class="line"><span class="comment"># 显示指定文件属于的包</span></span><br><span class="line">apk info --who-owns /sbin/lbu</span><br></pre></td></tr></table></figure>
<h2 id="管理init系统"><a href="#管理init系统" class="headerlink" title="管理init系统"></a>管理init系统</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 管理init系统</span></span><br><span class="line">rc-update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个服务</span></span><br><span class="line">rc-update add docker boot</span><br><span class="line"><span class="comment"># 删除一个服务</span></span><br><span class="line">rc-update del docker boot</span><br><span class="line"><span class="comment"># 检查所有运行级别的状态</span></span><br><span class="line">rc-status -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个服务</span></span><br><span class="line">rc-service sshd start</span><br><span class="line"><span class="comment"># 停止一个服务</span></span><br><span class="line">rc-service sshd stop</span><br><span class="line"><span class="comment"># 重启一个服务</span></span><br><span class="line">rc-service sshd restart</span><br></pre></td></tr></table></figure>
<h2 id="系统运行级别"><a href="#系统运行级别" class="headerlink" title="系统运行级别"></a>系统运行级别</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># defaultAlpine Linux可用的运行级</span></span><br><span class="line">sysinit</span><br><span class="line">boot</span><br><span class="line">single</span><br><span class="line">reboot</span><br><span class="line">shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改为single运行级</span></span><br><span class="line">openrc single</span><br><span class="line"><span class="comment"># 重启系统，类似于shutdown -r now。</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># 关机，类似于shutdown -h now。</span></span><br><span class="line">halt</span><br><span class="line"><span class="comment"># 关机</span></span><br><span class="line">poweroff</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>创业</title>
    <url>/2020/06/%E5%88%9B%E4%B8%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><h2 id="中间环节"><a href="#中间环节" class="headerlink" title="中间环节"></a>中间环节</h2><h2 id="供给"><a href="#供给" class="headerlink" title="供给"></a>供给</h2><h2 id="案例破析"><a href="#案例破析" class="headerlink" title="案例破析"></a>案例破析</h2><h3 id="金融案例"><a href="#金融案例" class="headerlink" title="金融案例"></a>金融案例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需求</span></span><br><span class="line">贷款方</span><br><span class="line">  银行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间环节</span></span><br><span class="line">银行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 供给</span></span><br><span class="line">储蓄方</span><br><span class="line">  银行</span><br></pre></td></tr></table></figure>
<p>P2Pchat<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求</span></span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">实现注册功能</span><br><span class="line">=&gt; 获取机器名=&gt; 获取MAC地址=》hashcode=&gt;生成UID</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line">实现client获取到机器名，获取到mac地址</span><br><span class="line">实现client注册到server</span><br><span class="line"></span><br><span class="line"><span class="comment"># server类</span></span><br><span class="line">监听地址</span><br><span class="line">clientID存储池</span><br><span class="line">会话池</span><br><span class="line">错误列表</span><br><span class="line">应答列表</span><br><span class="line"></span><br><span class="line"><span class="comment"># client类</span></span><br><span class="line">链接地址</span><br><span class="line">暴露地址</span><br><span class="line">错误列表</span><br><span class="line">-&gt; 连接server</span><br><span class="line">-&gt; 打洞</span><br><span class="line">-&gt; 发送hello包</span><br><span class="line">-&gt; 关闭连接</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话类</span></span><br><span class="line">-&gt; 创建会话</span><br><span class="line">-&gt; 关闭会话</span><br><span class="line"></span><br><span class="line"><span class="comment">#client GUI</span></span><br><span class="line">server 地址</span><br><span class="line">server 端口</span><br><span class="line">昵称</span><br><span class="line">-&gt; 登录</span><br><span class="line">=&gt; 获取机器名</span><br><span class="line">=&gt; 获取MAC地址</span><br><span class="line">=&gt; 后台生成一个UID</span><br><span class="line">-&gt; 搜索好友（UID，昵称）</span><br><span class="line">-&gt; 加入好友</span><br><span class="line">-&gt; 创建会话</span><br><span class="line">-&gt; 聊天</span><br><span class="line">-&gt; 传输文件</span><br><span class="line">-&gt; 语音</span><br><span class="line">-&gt; 视频</span><br><span class="line">-&gt; 远程</span><br><span class="line">-&gt; 绘板</span><br><span class="line">-&gt; 群会话</span><br><span class="line">-&gt; 管理员控制</span><br></pre></td></tr></table></figure></p>
<p>p2p 短视频<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">p2p 微博</span><br><span class="line">```bash</span><br></pre></td></tr></table></figure></p>
<p>p2p 商城<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">搜索引擎</span><br><span class="line">```bash</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line"><span class="comment"># spider</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分词</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全文 index</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类标识</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># client端</span></span><br><span class="line">输入关键字</span><br><span class="line">-&gt;查询</span><br><span class="line">输出结果</span><br><span class="line">输出关键字相关主题</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>OTHER</category>
      </categories>
  </entry>
  <entry>
    <title>Fluentd</title>
    <url>/2020/06/Fluentd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://docs.fluentd.org/" target="_blank" rel="noopener">fluentd docs</a></li>
<li><a href="https://docs.fluentbit.io/manual/" target="_blank" rel="noopener">fluentdbit docs</a></li>
<li><a href="https://www.fluentd.org/plugins" target="_blank" rel="noopener">插件列表</a></li>
</ul>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><h4 id="设置NTP"><a href="#设置NTP" class="headerlink" title="设置NTP"></a>设置NTP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install chrony -y</span><br><span class="line">sed -i <span class="string">"/^server/d"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp1.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp2.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"/#allow/s/#//"</span> /etc/chrony.conf</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd.service;systemctl start chronyd.service</span><br></pre></td></tr></table></figure>
<h4 id="增加文件描述符"><a href="#增加文件描述符" class="headerlink" title="增加文件描述符"></a>增加文件描述符</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;/etc/security/limits.conf</span><br><span class="line">root soft nofile 65536</span><br><span class="line">root hard nofile 65536</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">ulimit</span> -HSn 65535</span><br></pre></td></tr></table></figure>
<h4 id="优化网络参数"><a href="#优化网络参数" class="headerlink" title="优化网络参数"></a>优化网络参数</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">net.core.somaxconn</span> = <span class="number">1024</span></span><br><span class="line"><span class="attr">net.core.netdev_max_backlog</span> = <span class="number">5000</span></span><br><span class="line"><span class="attr">net.core.rmem_max</span> = <span class="number">16777216</span></span><br><span class="line"><span class="attr">net.core.wmem_max</span> = <span class="number">16777216</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_wmem</span> = <span class="number">4096</span> <span class="number">12582912</span> <span class="number">16777216</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_rmem</span> = <span class="number">4096</span> <span class="number">12582912</span> <span class="number">16777216</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_max_syn_backlog</span> = <span class="number">8096</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_slow_start_after_idle</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">net.ipv4.tcp_tw_reuse</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">net.ipv4.ip_local_port_range</span> = <span class="number">10240</span> <span class="number">65535</span></span><br></pre></td></tr></table></figure>
<h2 id="在CentOS安装"><a href="#在CentOS安装" class="headerlink" title="在CentOS安装"></a>在CentOS安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent3.sh | sh</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">/etc/td-agent/td-agent.conf</span><br><span class="line"><span class="comment"># 配置语法</span></span><br><span class="line"><span class="comment"># Data Source</span></span><br><span class="line">&lt;<span class="built_in">source</span>&gt;</span><br><span class="line">  @<span class="built_in">type</span> syslog</span><br><span class="line">  port 5140</span><br><span class="line">  tag system</span><br><span class="line">&lt;/<span class="built_in">source</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output Endpoint</span></span><br><span class="line">&lt;match debug.log&gt;</span><br><span class="line">  @<span class="built_in">type</span> kafka2</span><br><span class="line">  port 5140</span><br><span class="line">  brokers kafka-server:9092</span><br><span class="line">  tag system</span><br><span class="line">  <span class="comment"># other parameters...</span></span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo systemctl restart td-agent</span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line">/var/<span class="built_in">log</span>/td-agent/td-agent.log</span><br></pre></td></tr></table></figure>
<h2 id="fluentd-插件管理"><a href="#fluentd-插件管理" class="headerlink" title="fluentd 插件管理"></a>fluentd 插件管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">/usr/sbin/td-agent-gem install fluent-plugin-s3</span><br></pre></td></tr></table></figure>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span>  <span class="comment"># 输入</span></span><br><span class="line">match   <span class="comment"># 输出</span></span><br><span class="line">filter  <span class="comment"># 处理</span></span><br><span class="line">system  <span class="comment"># fluentd 系统配置</span></span><br><span class="line">label   <span class="comment"># 对数据分类路由</span></span><br><span class="line">@include <span class="comment"># 导入其他文件，include 文件尾部可以设置共享参数</span></span><br></pre></td></tr></table></figure>
<h2 id="统配符的使用"><a href="#统配符的使用" class="headerlink" title="统配符的使用"></a>统配符的使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 &lt;match&gt; and &lt;filter&gt; 标签使用</span></span><br><span class="line"><span class="comment"># 匹配一个</span></span><br><span class="line">*</span><br><span class="line"><span class="comment"># 0 或多个</span></span><br><span class="line">**</span><br><span class="line"><span class="comment"># x，y 或者 z</span></span><br><span class="line">&#123;x,y,z&#125;</span><br><span class="line"><span class="comment"># Ruby 扩展</span></span><br><span class="line"><span class="comment">#&#123;...&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="输入及输出插件"><a href="#输入及输出插件" class="headerlink" title="输入及输出插件"></a>输入及输出插件</h2><p>输入</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>name</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>in_tail</td>
<td>监视指定日志文件</td>
</tr>
<tr>
<td>in_forward</td>
<td>从其他fluentd或各种编程语言日志输出模块接收事件信息。</td>
</tr>
<tr>
<td>in_http</td>
<td>通过HTTP的POST请求接收事件信息。</td>
</tr>
<tr>
<td>in_syslog</td>
<td>syslog的日志</td>
</tr>
<tr>
<td>in_exec</td>
<td></td>
</tr>
<tr>
<td>in_scribe</td>
<td>Facebook开发的日志收集服务「Scribe」协议接收事件信息。</td>
</tr>
</tbody>
</table>
</div>
<p>输出</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>name</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>out_file</td>
<td>输出至指定文件</td>
</tr>
<tr>
<td>out_stdout</td>
<td>输出至标准输出</td>
</tr>
<tr>
<td>out_null</td>
<td>不进行输出</td>
</tr>
<tr>
<td>out_copy</td>
<td>输出日志至一个以上的目标地址</td>
</tr>
<tr>
<td>out_roundrobin</td>
<td>以轮询调度方式向一个以上的目标地址进行输出</td>
</tr>
<tr>
<td>out_exec_filter</td>
<td></td>
</tr>
<tr>
<td>out_forward</td>
<td>通过网络向其他fluentd进行输出</td>
</tr>
<tr>
<td>out_mongo</td>
<td>输出至MongoDB</td>
</tr>
<tr>
<td>out_mongo_replset</td>
<td>输出至MongoDB副本</td>
</tr>
<tr>
<td>out_exec</td>
<td></td>
</tr>
<tr>
<td>out_s3</td>
<td>保存至Amazon S3存储</td>
</tr>
<tr>
<td>out_webhdfsQ</td>
<td>保存至HDFS</td>
</tr>
</tbody>
</table>
</div>
<h2 id="docker-使用"><a href="#docker-使用" class="headerlink" title="docker 使用"></a>docker 使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull</span></span><br><span class="line">docker pull fluent/fluentd:v1.6-debian-1</span><br><span class="line">docker pull fluent/fluentd</span><br><span class="line"><span class="comment"># docker run</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker sh</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 3ea2a969bae0 sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># fluentd -h</span></span><br><span class="line">ruby -v</span><br><span class="line">ruby 2.5.2p104</span><br><span class="line">fluentd -h</span><br><span class="line">cat /fluentd/etc/fluent.conf</span><br><span class="line"></span><br><span class="line">fluent-cat</span><br><span class="line">fluent-gem</span><br><span class="line">fluent-debug</span><br><span class="line">fluent-binlog-reader</span><br><span class="line">fluent-ca-generate</span><br><span class="line">fluent-plugin-generate</span><br><span class="line">fluent-plugin-config-format</span><br></pre></td></tr></table></figure>
<h2 id="docker-compose使用"><a href="#docker-compose使用" class="headerlink" title="docker-compose使用"></a>docker-compose使用</h2><ul>
<li><a href="https://docs.fluentd.org/container-deployment/docker-compose" target="_blank" rel="noopener">fluentd compose 配置</a><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">httpd</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">fluentd</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">"fluentd"</span> <span class="comment"># 使用fluentd</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">fluentd-address:</span> <span class="string">localhost:24224</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">httpd.access</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">fluentd:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./fluentd</span> <span class="comment"># build 镜像</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./fluentd/conf:/fluentd/etc</span></span><br><span class="line">    <span class="attr">links:</span> <span class="comment"># 连接到 elasticsearch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"elasticsearch"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"24224:24224"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"24224:24224/udp"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.2.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"discovery.type=single-node"</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9200"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9200:9200"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.2.0</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"elasticsearch"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5601:5601"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="fluentd-for-k8s"><a href="#fluentd-for-k8s" class="headerlink" title="fluentd for k8s"></a>fluentd for k8s</h2><h3 id="定义configmap"><a href="#定义configmap" class="headerlink" title="定义configmap"></a>定义configmap</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fluentd-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">fluent.conf:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">&lt;source&gt;</span></span><br><span class="line">      <span class="string">type</span> <span class="string">tail</span></span><br><span class="line">      <span class="string">format</span> <span class="string">none</span></span><br><span class="line">      <span class="string">path</span> <span class="string">/var/log/nginx/host.access.log</span></span><br><span class="line">      <span class="string">pos_file</span> <span class="string">/var/log/nginx/1.log.pos</span></span><br><span class="line">    <span class="string">&lt;/source&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;match</span> <span class="string">**&gt;</span></span><br><span class="line">      <span class="string">type</span> <span class="string">stdout</span></span><br><span class="line">    <span class="string">&lt;/match&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="在-sidecar-中使用"><a href="#在-sidecar-中使用" class="headerlink" title="在 sidecar 中使用"></a>在 sidecar 中使用</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">    <span class="attr">mountPath:</span> <span class="string">/var/log</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span> <span class="comment"># 使用 configmap</span></span><br><span class="line">    <span class="attr">mountPath:</span> <span class="string">/etc/fluentd-config</span> <span class="comment"># 挂载到指定的路径</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">  <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">  <span class="attr">configMap:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fluentd-config</span> <span class="comment"># 指定 configmap</span></span><br></pre></td></tr></table></figure>
<h4 id="如果让两个容器在一个pod中共享文件，需要创建一个共享卷"><a href="#如果让两个容器在一个pod中共享文件，需要创建一个共享卷" class="headerlink" title="如果让两个容器在一个pod中共享文件，需要创建一个共享卷"></a>如果让两个容器在一个pod中共享文件，需要创建一个共享卷</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">two-containers</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">volumes:</span> <span class="comment"># 声明共享卷</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">    <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumeMounts:</span> <span class="comment"># 挂载共享卷</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">debian-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">debian</span></span><br><span class="line">    <span class="attr">volumeMounts:</span> <span class="comment"># 挂载共享卷</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/pod-data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">["/bin/sh"]</span></span><br><span class="line">    <span class="attr">args:</span> <span class="string">["-c",</span> <span class="string">"echo Hello from the debian container &gt; /pod-data/index.html"</span><span class="string">]</span></span><br></pre></td></tr></table></figure>
<h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>$ git clone <a href="https://github.com/fluent/fluentd-kubernetes-daemonset" target="_blank" rel="noopener">https://github.com/fluent/fluentd-kubernetes-daemonset</a><br>fluentd-daemonset-elasticsearch.yaml<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fluentd</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">fluentd-logging</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">fluentd-logging</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">fluentd-logging</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fluentd</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">fluent/fluentd-kubernetes-daemonset:v1-debian-elasticsearch</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">FLUENT_ELASTICSEARCH_HOST</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"elasticsearch-logging"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">FLUENT_ELASTICSEARCH_PORT</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"9200"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FLUENT_ELASTICSEARCH_SCHEME</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"http"</span></span><br><span class="line">          <span class="comment"># Option to configure elasticsearch plugin with self signed certs</span></span><br><span class="line">          <span class="comment"># ================================================================</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FLUENT_ELASTICSEARCH_SSL_VERIFY</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"true"</span></span><br><span class="line">          <span class="comment"># Option to configure elasticsearch plugin with tls</span></span><br><span class="line">          <span class="comment"># ================================================================</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FLUENT_ELASTICSEARCH_SSL_VERSION</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"TLSv1_2"</span></span><br><span class="line">          <span class="comment"># X-Pack Authentication</span></span><br><span class="line">          <span class="comment"># =====================</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FLUENT_ELASTICSEARCH_USER</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"elastic"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FLUENT_ELASTICSEARCH_PASSWORD</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"changeme"</span></span><br><span class="line">          <span class="comment"># Logz.io Authentication</span></span><br><span class="line">          <span class="comment"># ======================</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LOGZIO_TOKEN</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"ThisIsASuperLongToken"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LOGZIO_LOGTYPE</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"kubernetes"</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/log</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/docker/containers</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/lib/docker/containers</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>企业备份灾备方案</title>
    <url>/2020/06/%E4%BC%81%E4%B8%9A%E5%A4%87%E4%BB%BD%E7%81%BE%E5%A4%87%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>联想 SureHA</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>docker-registry</title>
    <url>/2020/06/Docker-registry/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="按装"><a href="#按装" class="headerlink" title="按装"></a>按装</h2><p>docker run -d \<br> -p 5000:5000 \<br> -v /usr/local/registry:/var/lib/registry \<br> —restart=always \<br> —name registry \<br> registry</p>
<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> cat &lt;&lt;<span class="string">'EOF'</span> &gt;docker-compose.yml</span><br><span class="line"> version: <span class="string">"3.8"</span></span><br><span class="line"> services:</span><br><span class="line">   registry:</span><br><span class="line">     container_name: registry</span><br><span class="line">     image: registry</span><br><span class="line">     ports:</span><br><span class="line">     - 80:5000</span><br><span class="line">     volumes:</span><br><span class="line">     - ./data/registry:/var/lib/registry:z</span><br><span class="line">     restart: always</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id><a href="#" class="headerlink" title=" "></a> </h2><p>curl <a href="http://119.84.8.43:10096/v2/_catalog" target="_blank" rel="noopener">http://119.84.8.43:10096/v2/_catalog</a></p>
<h2 id="添加http-镜像库"><a href="#添加http-镜像库" class="headerlink" title="添加http 镜像库"></a>添加http 镜像库</h2><h3 id="编辑配置文件”-etc-default-docker”"><a href="#编辑配置文件”-etc-default-docker”" class="headerlink" title="编辑配置文件”/etc/default/docker”"></a>编辑配置文件”/etc/default/docker”</h3><p>$ sudo vi /etc/default/docker</p>
<h3 id="将这行添加到文件最后，如果已经存在选项，确定你将它添加到当前选项的列表中。"><a href="#将这行添加到文件最后，如果已经存在选项，确定你将它添加到当前选项的列表中。" class="headerlink" title="将这行添加到文件最后，如果已经存在选项，确定你将它添加到当前选项的列表中。"></a>将这行添加到文件最后，如果已经存在选项，确定你将它添加到当前选项的列表中。</h3><p>$ DOCKER_OPTS=”$DOCKER_OPTS —insecure-registry=${DOMAIN}:${PORT}”</p>
<h3 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h3><p>$ sudo service docker restart</p>
<p><a href="https://rancher.com/docs/rancher/v1.6/zh/environments/registries/" target="_blank" rel="noopener">rancher 镜像库</a></p>
<h3 id="rancher-work-添加"><a href="#rancher-work-添加" class="headerlink" title="rancher work 添加"></a>rancher work 添加</h3><p>vi /etc/docker/daemon.json<br>“insecure-registries”: [“119.84.8.43:10096”]</p>
]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>Maven管理</title>
    <url>/2020/06/Maven%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://maven.apache.org/" target="_blank" rel="noopener">maven</a></li>
<li><a href="https://search.maven.org/" target="_blank" rel="noopener">maven search</a></li>
</ul>
<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><pre><code>依赖包管理
目录结构
    src
        main
            java
            resource
        test
            java
            resource
    target
    pom.xml
        packages 打包
        properties 变量
        dependencies 依赖
        scope
            编译时 compile
            测试时 test
            运行时 runtime
            provided
构建
    配置环境
    编译打包流程
    版本管理
    命令行工具
Maven 中央仓库
Maven 镜像仓库
Maven 私服仓库
构建流程
    clean -&gt; compile -&gt; test -&gt; package
Phase 根据依赖，顺序执行
    mvn clean [compile] tests
</code></pre><h2 id="maven-常用指令"><a href="#maven-常用指令" class="headerlink" title="maven 常用指令"></a>maven 常用指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Maven项目</span></span><br><span class="line"><span class="comment"># 普通java项目</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># web项目</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出该项目所依赖的项目(jar)列表</span></span><br><span class="line">mvn dependency:resolve</span><br><span class="line">mvn dependency:analyze <span class="comment">#(找出项目非直接依赖)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看整个项目的依赖树</span></span><br><span class="line">mvn dependency:tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看完整的依赖</span></span><br><span class="line">mvn install -X</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包应用(jar)</span></span><br><span class="line">mvn install assembly:assembly</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动你的 web 应用</span></span><br><span class="line">mvn jetty:run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新编译</span></span><br><span class="line">mvn compile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译测试代码</span></span><br><span class="line">mvn <span class="built_in">test</span>-compile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">mvn <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line">mvn package</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除产生的项目</span></span><br><span class="line">mvn clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成eclipse项目</span></span><br><span class="line">mvn eclipse:eclipse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只打jar包</span></span><br><span class="line">mvn jar:jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过单元测</span></span><br><span class="line">mvn <span class="built_in">test</span> -Dmaven.test.failure.ignore=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过整个测试</span></span><br><span class="line">mvn install -Dmaven.test.skip=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maven打包跳过测试</span></span><br><span class="line">mvn package -Dmaven.test.skip=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载依赖包的源代码</span></span><br><span class="line">mvn dependency:sources</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Maven 项目</span></span><br><span class="line">mvn archetype:generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看报告流程</span></span><br><span class="line">mvn site</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查当前Maven环境启用的文件</span></span><br><span class="line">mvn <span class="built_in">help</span>:effective-settings</span><br><span class="line">mvn <span class="built_in">help</span>:effective-pom</span><br><span class="line">mvn <span class="built_in">help</span>:active-profiles</span><br><span class="line">mvn -s &lt;filepath&gt; &lt;goal&gt;</span><br><span class="line">mvn -s ~/.m2/settings_local.xml clean deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前项目的所有mvn配置</span></span><br><span class="line">mvn -X</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有可用的环境变量和Java系统属性</span></span><br><span class="line">mvn <span class="built_in">help</span>:system</span><br></pre></td></tr></table></figure>
<h2 id="maven-设置-（conf-setting）"><a href="#maven-设置-（conf-setting）" class="headerlink" title="maven 设置 （conf/setting）"></a>maven 设置 （conf/setting）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地库的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/var/jenkins_home/local/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定镜像源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://119.84.8.44:60114/nexus/content/groups/public/ --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 其它代理仓库 spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="nexus-maven镜像仓库"><a href="#nexus-maven镜像仓库" class="headerlink" title="nexus maven镜像仓库"></a>nexus maven镜像仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>jenkinsPipeline</title>
    <url>/2020/06/JenkinsPipeline/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="pipeline-语法"><a href="#pipeline-语法" class="headerlink" title="pipeline 语法"></a>pipeline 语法</h2><p>工作空间 workspace : 构建的空间<br>阶段（stage）： 一个阶段包含多个steps &gt; step<br>步骤（step）： 当任何一个步骤执行失败时，Pipeline 的执行结果也为失败。<br>shell 命令 ： sh ‘echo “Hello World”‘<br>retry(3) ：重试<br>timeout(time: 3, unit: ‘MINUTES’) ：3分钟<br>agent ：指令告诉Jenkins在哪里以及如何执行Pipeline<br>tool ：引用系统配置 JAVA_HOME = tool “jdk8”<br>环境变量配置<br>environment {<br>        DISABLE_AUTH = ‘true’<br>        DB_ENGINE    = ‘sqlite’<br>    }<br>单元测试<br>junit ‘build/reports/<em>*/</em>.xml’</p>
<p>清理工作 post<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            echo 'One way or another, I have finished'</span><br><span class="line">            deleteDir() /* clean up our workspace */</span><br><span class="line">        &#125;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo 'I succeeeded!'</span><br><span class="line">        &#125;</span><br><span class="line">        unstable &#123;</span><br><span class="line">            echo 'I am unstable :/'</span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            echo 'I failed :('</span><br><span class="line">            mail to: 'team@example.com',</span><br><span class="line">             subject: "Failed Pipeline: $&#123;currentBuild.fullDisplayName&#125;",</span><br><span class="line">             body: "Something is wrong with $&#123;env.BUILD_URL&#125;"</span><br><span class="line">        &#125;</span><br><span class="line">        changed &#123;</span><br><span class="line">            echo 'Things were different before...'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="pipline-示例"><a href="#pipline-示例" class="headerlink" title="pipline 示例"></a>pipline 示例</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage('Build') &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo 'Building'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage('Test') &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo 'Testing'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage('Deploy') &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo 'Deploying'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用-docker-容器进行编译（好处是在独立环境中运行，不会破坏当前jenkins-环境）"><a href="#使用-docker-容器进行编译（好处是在独立环境中运行，不会破坏当前jenkins-环境）" class="headerlink" title="使用 docker 容器进行编译（好处是在独立环境中运行，不会破坏当前jenkins 环境）"></a>使用 docker 容器进行编译（好处是在独立环境中运行，不会破坏当前jenkins 环境）</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul>
<li><a href="https://download.docker.com/linux/static/stable/x86_64/" target="_blank" rel="noopener">下载docker 二进制包</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzvf /path/to/&lt;FILE&gt;.tar.gz</span><br><span class="line"><span class="comment"># 放到合适的位置，一会要映射到容器中</span></span><br><span class="line">sudo cp -r docker /opt/docker</span><br><span class="line"><span class="comment"># sudo dockerd &amp;</span></span><br><span class="line"><span class="comment"># sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="更改docker-运行时，暴露-API"><a href="#更改docker-运行时，暴露-API" class="headerlink" title="更改docker 运行时，暴露 API"></a>更改docker 运行时，暴露 API</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改启动文件</span></span><br><span class="line"><span class="comment"># /usr/lib/systemd/system/docker.service</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">curl http://localhost:4243/version</span><br></pre></td></tr></table></figure>
<h3 id="对-jenkins-容器-docker-compose-yml-文件进行更新"><a href="#对-jenkins-容器-docker-compose-yml-文件进行更新" class="headerlink" title="对 jenkins 容器 docker-compose.yml 文件进行更新"></a>对 jenkins 容器 docker-compose.yml 文件进行更新</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./data/jenkins:/var/jenkins_home:z</span></span><br><span class="line">    <span class="comment"># 新加</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="comment"># 根据具体位置设置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./data/jenkins/docker/docker:/usr/bin/docker</span></span><br></pre></td></tr></table></figure>
<h3 id="新建一个项目测试-docker-容器-pipeline"><a href="#新建一个项目测试-docker-容器-pipeline" class="headerlink" title="新建一个项目测试 docker 容器 pipeline"></a>新建一个项目测试 docker 容器 pipeline</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        docker &#123;</span><br><span class="line">            image 'maven:3-alpine'</span><br><span class="line">            args '-v /root/.m2:/root/.m2'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage('Build') &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh 'mvn -B -DskipTests clean package'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage('Test') &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh 'mvn test'</span><br><span class="line">            &#125;</span><br><span class="line">            post &#123;</span><br><span class="line">                always &#123;</span><br><span class="line">                    junit 'target/surefire-reports/*.xml'</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="把代码发布出来"><a href="#把代码发布出来" class="headerlink" title="把代码发布出来"></a>把代码发布出来</h3><p>容器是临时容器，要将编译好的代码发布出来</p>
<h2 id="使用-blue-ocean"><a href="#使用-blue-ocean" class="headerlink" title="使用 blue ocean"></a>使用 blue ocean</h2><p>左侧的 打开Blue Ocean 来访问Blue Ocean页面。<br>Create a new Pipeline 按钮</p>
<h2 id="maven项目-pipeline-示例"><a href="#maven项目-pipeline-示例" class="headerlink" title="maven项目 pipeline 示例"></a>maven项目 pipeline 示例</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">   agent any</span><br><span class="line">   <span class="comment">// 获取jenkins 配置</span></span><br><span class="line">   tools &#123;</span><br><span class="line">      <span class="comment">// 获取maven插件</span></span><br><span class="line">      maven "maven3"</span><br><span class="line">      jdk "jdk8"</span><br><span class="line">      docker "docker"</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 设置环境变量</span></span><br><span class="line">   environment&#123;</span><br><span class="line">       <span class="comment">// 可以在这里设置</span></span><br><span class="line">       <span class="comment">// JAVA_HOME = tool "jdk8"</span></span><br><span class="line">       HELLO = "hello"</span><br><span class="line">   &#125;</span><br><span class="line">   stages &#123;</span><br><span class="line">     stage('clear space') &#123;</span><br><span class="line">         steps &#123;</span><br><span class="line">           sh "rm -rf ./*"</span><br><span class="line">           sh "printenv"</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">      stage('Build') &#123;</span><br><span class="line">         steps &#123;</span><br><span class="line">            <span class="comment">// 下载源码</span></span><br><span class="line">            git 'https://github.com/jglick/simple-maven-project-with-tests.git'</span><br><span class="line"></span><br><span class="line">            <span class="comment">// unix build</span></span><br><span class="line">            sh "mvn -Dmaven.test.failure.ignore=true clean package"</span><br><span class="line"></span><br><span class="line">            <span class="comment">// windows build</span></span><br><span class="line">            <span class="comment">// bat "mvn -Dmaven.test.failure.ignore=true clean package"</span></span><br><span class="line">         &#125;</span><br><span class="line">      stage('Build') &#123;</span><br><span class="line">         steps &#123;</span><br><span class="line">            <span class="comment">// 下载源码</span></span><br><span class="line">            git 'https://github.com/jglick/simple-maven-project-with-tests.git'</span><br><span class="line"></span><br><span class="line">            <span class="comment">// unix build</span></span><br><span class="line">            sh "mvn -Dmaven.test.failure.ignore=true clean package"</span><br><span class="line"></span><br><span class="line">            <span class="comment">// windows build</span></span><br><span class="line">            <span class="comment">// bat "mvn -Dmaven.test.failure.ignore=true clean package"</span></span><br><span class="line">         &#125;</span><br><span class="line">         post &#123;</span><br><span class="line">            <span class="comment">// 成功后单元测试</span></span><br><span class="line">            success &#123;</span><br><span class="line">               junit '**/target/surefire-reports/TEST-*.xml'</span><br><span class="line">               archiveArtifacts 'target/*.jar'</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>gitlab项目示例</title>
    <url>/2020/06/Gitlab%E9%A1%B9%E7%9B%AE%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="gitlab-项目示例-step-on-step"><a href="#gitlab-项目示例-step-on-step" class="headerlink" title="gitlab 项目示例 (step on step)"></a>gitlab 项目示例 (step on step)</h2><h3 id="注册用户"><a href="#注册用户" class="headerlink" title="注册用户"></a>注册用户</h3><p><a href="http://119.84.8.43:10097/users/sign_in" target="_blank" rel="noopener">http://119.84.8.43:10097/users/sign_in</a><br>注册用户</p>
<h3 id="管理员授权"><a href="#管理员授权" class="headerlink" title="管理员授权"></a>管理员授权</h3><p>管理员登录 -&gt; gitlab 设置 -&gt; overview -&gt; users -&gt; edit<br>Access -&gt; Regular -&gt; 去掉External</p>
<h3 id="创建项目组"><a href="#创建项目组" class="headerlink" title="创建项目组"></a>创建项目组</h3><p>leader账号登录 -&gt; groups -&gt; new group</p>
<p>Private 用户授权可访问<br>Internal<br>Public</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>leader账号登录 -&gt; your groups -&gt; new project<br>Initialize repository with a README</p>
<h3 id="邀请开发团队成员"><a href="#邀请开发团队成员" class="headerlink" title="邀请开发团队成员"></a>邀请开发团队成员</h3><p>your projects -&gt; project -&gt; settings -&gt; member<br>invite user<br>invite group</p>
<p>GitLab member or Email address</p>
<p>Choose a role permission<br>  guest<br>  reporter<br>  developer<br>  maintainer</p>
<p>Access expiration date</p>
<h3 id="leader-（-设置里程碑，设置list-）"><a href="#leader-（-设置里程碑，设置list-）" class="headerlink" title="leader （ 设置里程碑，设置list ）"></a>leader （ 设置里程碑，设置list ）</h3><p>git clone <a href="http://119.84.8.43:10097/youlv/b1.git" target="_blank" rel="noopener">http://119.84.8.43:10097/youlv/b1.git</a></p>
<p>Username : leader1<br>Password :<br>git config —global user.name “leader1”<br>git config —global user.email “leader1@123.com”</p>
<p>设置远程分支<br>git add ./*<br>git commit -m “update v0.1”<br>git push —set-upstream origin develop （开发人员没有此权限）</p>
<h4 id="设置git-flow-分支"><a href="#设置git-flow-分支" class="headerlink" title="设置git-flow 分支"></a>设置git-flow 分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化git-flow</span></span><br><span class="line">git-flow init</span><br><span class="line"><span class="comment"># 获取状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">git tag -a v0.0.1 -m <span class="string">'version 0.0.1'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">git add ./*</span><br><span class="line">git commit -m <span class="string">"develop 0.0.1"</span></span><br><span class="line"><span class="comment"># 在远程设置一个 develop 分支</span></span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin develop</span><br></pre></td></tr></table></figure>
<h3 id="开发人员获取代码-（获取list-进行开发）"><a href="#开发人员获取代码-（获取list-进行开发）" class="headerlink" title="开发人员获取代码 （获取list 进行开发）"></a>开发人员获取代码 （获取list 进行开发）</h3><p>git clone  <a href="http://119.84.8.43:10097/youlv/business1.git" target="_blank" rel="noopener">http://119.84.8.43:10097/youlv/business1.git</a><br>下载 gitflow 安装</p>
<ul>
<li>
</li>
</ul>
<p>cd business1/</p>
<h2 id="git-flow-init"><a href="#git-flow-init" class="headerlink" title="git-flow init"></a>git-flow init</h2><p>No branches exist yet. Base branches must be created now.<br>Branch name for production releases: [master]<br>Branch name for “next release” development: [develop]</p>
<p>How to name your supporting branch prefixes?<br>Feature branches? [feature/]<br>Release branches? [release/]<br>Hotfix branches? [hotfix/]<br>Support branches? [support/]<br>Version tag prefix? []<br>alertyandeMacBook-Pro:business1 alert$ git status<br>位于分支 develop<br>无文件要提交，干净的工作区</p>
<hr>
<h3 id="开发代码"><a href="#开发代码" class="headerlink" title="开发代码"></a>开发代码</h3><p>cd business1/<br>cat &lt;&lt;’EOF’ &gt; HelloWorld.java<br>public class HelloWorld {<br>    public static void main(String []args) {<br>       System.out.println(“Hello World”);<br>    }<br>}<br>EOF</p>
<hr>
<p>alert$ git add ./*<br>alert$ git commit -m “v0.1”<br>[master（根提交） fad4b7a] v0.1<br> 1 file changed, 5 insertions(+)<br> create mode 100644 HelloWorld.java<br>alert$ git push<br>枚举对象: 3, 完成.<br>对象计数中: 100% (3/3), 完成.<br>使用 8 个线程进行压缩<br>压缩对象中: 100% (2/2), 完成.<br>写入对象中: 100% (3/3), 304 bytes | 304.00 KiB/s, 完成.<br>总共 3 （差异 0），复用 0 （差异 0）<br>To <a href="http://119.84.8.43:10097/youlv/business1.git" target="_blank" rel="noopener">http://119.84.8.43:10097/youlv/business1.git</a><br>[new branch]      master -&gt; master</p>
<hr>
]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>shell例程序</title>
    <url>/2020/06/shell%E4%BE%8B%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="log-输出"><a href="#log-输出" class="headerlink" title="log 输出"></a>log 输出</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">log</span></span>()&#123;</span><br><span class="line"><span class="comment"># 用法：log 1</span></span><br><span class="line"><span class="comment"># 方法在函数或模块前加上注释，会将注释打印出来</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[0;32m ------<span class="variable">$1</span>、`sed -n "</span>/\&lt;<span class="built_in">log</span> <span class="variable">$1</span>\&gt;/&#123;x;p&#125;;h<span class="string">" <span class="variable">$0</span>|grep # `\t------- \e[m"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>shell</category>
      </categories>
  </entry>
  <entry>
    <title>gitflow_install</title>
    <url>/2020/06/Gitflow-install/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Gitflow安装"><a href="#Gitflow安装" class="headerlink" title="Gitflow安装"></a>Gitflow安装</h2><h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'GEOF'</span> &gt;gitflow-installer.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git-flow make-less installer for *nix systems, by Rick Osborne</span></span><br><span class="line"><span class="comment"># Based on the git-flow core Makefile:</span></span><br><span class="line"><span class="comment"># http://github.com/nvie/gitflow/blob/master/Makefile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Licensed under the same restrictions as git-flow:</span></span><br><span class="line"><span class="comment"># http://github.com/nvie/gitflow/blob/develop/LICENSE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Does this need to be smarter for each host OS?</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$INSTALL_PREFIX</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">	INSTALL_PREFIX=<span class="string">"/usr/local/bin"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$REPO_NAME</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">	REPO_NAME=<span class="string">"gitflow"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$REPO_HOME</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">	REPO_HOME=<span class="string">"http://github.com/nvie/gitflow.git"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">EXEC_FILES=<span class="string">"git-flow"</span></span><br><span class="line">SCRIPT_FILES=<span class="string">"git-flow-init git-flow-feature git-flow-hotfix git-flow-release git-flow-support git-flow-version gitflow-common gitflow-shFlags"</span></span><br><span class="line">SUBMODULE_FILE=<span class="string">"gitflow-shFlags"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"### gitflow no-make installer ###"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">	uninstall)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"Uninstalling git-flow from <span class="variable">$INSTALL_PREFIX</span>"</span></span><br><span class="line">		<span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$INSTALL_PREFIX</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">for</span> script_file <span class="keyword">in</span> <span class="variable">$SCRIPT_FILES</span> <span class="variable">$EXEC_FILES</span> ; <span class="keyword">do</span></span><br><span class="line">				<span class="built_in">echo</span> <span class="string">"rm -vf <span class="variable">$INSTALL_PREFIX</span>/<span class="variable">$script_file</span>"</span></span><br><span class="line">				rm -vf <span class="string">"<span class="variable">$INSTALL_PREFIX</span>/<span class="variable">$script_file</span>"</span></span><br><span class="line">			<span class="keyword">done</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"The '<span class="variable">$INSTALL_PREFIX</span>' directory was not found."</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"Do you need to set INSTALL_PREFIX ?"</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">		<span class="built_in">exit</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="built_in">help</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"Usage: [environment] gitflow-installer.sh [install|uninstall]"</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"Environment:"</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"   INSTALL_PREFIX=<span class="variable">$INSTALL_PREFIX</span>"</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"   REPO_HOME=<span class="variable">$REPO_HOME</span>"</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"   REPO_NAME=<span class="variable">$REPO_NAME</span>"</span></span><br><span class="line">		<span class="built_in">exit</span></span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"Installing git-flow to <span class="variable">$INSTALL_PREFIX</span>"</span></span><br><span class="line">		<span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$REPO_NAME</span>"</span> -a -d <span class="string">"<span class="variable">$REPO_NAME</span>/.git"</span> ] ; <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"Using existing repo: <span class="variable">$REPO_NAME</span>"</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"Cloning repo from GitHub to <span class="variable">$REPO_NAME</span>"</span></span><br><span class="line">			git <span class="built_in">clone</span> <span class="string">"<span class="variable">$REPO_HOME</span>"</span> <span class="string">"<span class="variable">$REPO_NAME</span>"</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">		<span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$REPO_NAME</span>/<span class="variable">$SUBMODULE_FILE</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"Submodules look up to date"</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"Updating submodules"</span></span><br><span class="line">			lastcwd=<span class="variable">$PWD</span></span><br><span class="line">			<span class="built_in">cd</span> <span class="string">"<span class="variable">$REPO_NAME</span>"</span></span><br><span class="line">			git submodule init</span><br><span class="line">			git submodule update</span><br><span class="line">			<span class="built_in">cd</span> <span class="string">"<span class="variable">$lastcwd</span>"</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">		install -v -d -m 0755 <span class="string">"<span class="variable">$INSTALL_PREFIX</span>"</span></span><br><span class="line">		<span class="keyword">for</span> exec_file <span class="keyword">in</span> <span class="variable">$EXEC_FILES</span> ; <span class="keyword">do</span></span><br><span class="line">			install -v -m 0755 <span class="string">"<span class="variable">$REPO_NAME</span>/<span class="variable">$exec_file</span>"</span> <span class="string">"<span class="variable">$INSTALL_PREFIX</span>"</span></span><br><span class="line">		<span class="keyword">done</span></span><br><span class="line">		<span class="keyword">for</span> script_file <span class="keyword">in</span> <span class="variable">$SCRIPT_FILES</span> ; <span class="keyword">do</span></span><br><span class="line">			install -v -m 0644 <span class="string">"<span class="variable">$REPO_NAME</span>/<span class="variable">$script_file</span>"</span> <span class="string">"<span class="variable">$INSTALL_PREFIX</span>"</span></span><br><span class="line">		<span class="keyword">done</span></span><br><span class="line">		<span class="built_in">exit</span></span><br><span class="line">		;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line">GEOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">sh gitflow-installer.sh</span><br></pre></td></tr></table></figure>
<h3 id="gitflow-版本分支"><a href="#gitflow-版本分支" class="headerlink" title="gitflow 版本分支"></a>gitflow 版本分支</h3><div class="table-container">
<table>
<thead>
<tr>
<th>分支</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>develop 分支</td>
<td>开发版</td>
</tr>
<tr>
<td>-&gt; feature 分支</td>
<td>新功能</td>
</tr>
<tr>
<td>release 分支</td>
<td>发布版</td>
</tr>
<tr>
<td>master 分支</td>
<td>稳定版，审核</td>
</tr>
<tr>
<td>-&gt;hotfix 分支</td>
<td>修复线上bug</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L -O https://raw.github.com/nvie/gitflow/develop/contrib/gitflow-installer.sh</span><br><span class="line">sudo bash gitflow-installer.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># master、develop、feature、relase、hotfix等分支 </span></span><br><span class="line"><span class="comment"># 常用指令</span></span><br><span class="line">指令|解释</span><br><span class="line">-|-</span><br><span class="line">git flow init |初始化</span><br><span class="line">git flow feature start MYFEATURE|开始新Feature</span><br><span class="line">git flow feature publish MYFEATURE|Publish一个Feature</span><br><span class="line">git flow feature pull origin MYFEATURE|获取Publish的Feature</span><br><span class="line">git flow feature finish MYFEATURE|完成一个Feature</span><br><span class="line">git flow release start RELEASE [BASE]|开始一个Release</span><br><span class="line">git flow release publish RELEASE|Publish一个Release</span><br><span class="line">git flow release finish RELEASE|发布Release</span><br><span class="line">git flow hotfix start VERSION [BASENAME]|开始一个Hotfix</span><br><span class="line">git flow hotfix finish VERSION|发布一个Hotfix</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>jenkinsK8s</title>
    <url>/2020/06/JenkinsK8s/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用jenkins 进行 k8s 发布</p>
<p>jenkins 上安装 Git,Maven,JDK,helm</p>
<ul>
<li><a href="/2020/05/Jenkins/" title="Jenkins docker安装">Jenkins docker安装</a></li>
<li><a href="/2020/06/helm%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/" title="Helm安装">Helm安装</a></li>
<li>
</li>
</ul>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>源码 + dockerfile<br>|（gitlab）<br>发布到 master<br>| (触发 webhook)<br>jenkins 构建<br>| (执行 build-image.sh,将镜像发送到 registry仓库）<br>ssh<br>| (执行对应的 helm 把镜像推送到 k8s 集群)<br>finished</p>
<h3 id="源代码要求"><a href="#源代码要求" class="headerlink" title="源代码要求"></a>源代码要求</h3><p>源代码中需要包含 dockerfile<br>git clone <a href="http://119.84.8.43:10097/youlv/go-meta-auth-service.git" target="_blank" rel="noopener">http://119.84.8.43:10097/youlv/go-meta-auth-service.git</a><br>git add ./*<br>git commit -m “v1.0.0”<br>git push</p>
<h3 id="新建-view，新建项目"><a href="#新建-view，新建项目" class="headerlink" title="新建 view，新建项目"></a>新建 view，新建项目</h3><p>view:youlv<br>project: go-meta-auth-service</p>
<h3 id="配置-webhook"><a href="#配置-webhook" class="headerlink" title="配置 webhook"></a>配置 webhook</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">url:</span><span class="string">http:</span><span class="comment">//182.92.67.154:8080/project/go-meta-auth-service</span></span><br><span class="line">Secret <span class="string">token:</span> <span class="number">86</span>cf9557098741074f10a43721368fd2</span><br></pre></td></tr></table></figure>
<h3 id="设置-ssh-key"><a href="#设置-ssh-key" class="headerlink" title="设置 ssh key"></a>设置 ssh key</h3><p>ssh-keygen -t rsa -C “youremail@example.com”<br>cat ~/.ssh/id_rsa.pub<br>把 公钥复制到gitlab 项目中</p>
<h2 id="创建pipeline"><a href="#创建pipeline" class="headerlink" title="创建pipeline"></a>创建pipeline</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">   agent any</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 获取jenkins 配置</span></span><br><span class="line">   tools &#123;</span><br><span class="line">      <span class="comment">// 获取maven插件</span></span><br><span class="line">      maven <span class="string">"maven3"</span></span><br><span class="line">      jdk <span class="string">"jdk8"</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 设置环境变量</span></span><br><span class="line">   environment&#123;</span><br><span class="line">       <span class="comment">// JAVA_HOME = tool "jdk8"</span></span><br><span class="line">       VERSION_ID=<span class="string">"$&#123;BUILD_ID&#125;"</span></span><br><span class="line">       GIT_PROJECT_ADDR=<span class="string">"http://119.84.8.43:13201/go-meta/go-meta-service.git"</span> <span class="comment">//项目的git地址</span></span><br><span class="line">       JENKINS_WORKSPACE=<span class="string">"/var/jenkins_home/workspace"</span>    <span class="comment">//jenkins存放文件的地址</span></span><br><span class="line">       PROJECT_NAME=<span class="string">"$&#123;JOB_NAME&#125;"</span>       <span class="comment">// 项目名</span></span><br><span class="line">       JAR_NAME=<span class="string">"$&#123;PROJECT_NAME&#125;-0.0.$&#123;VERSION_ID&#125;.jar"</span>   <span class="comment">// 项目生成的jar的名字</span></span><br><span class="line">       IMAGE_NAME=<span class="string">"$&#123;PROJECT_NAME&#125;"</span>                    <span class="comment">// 镜像名一般和项目名相同</span></span><br><span class="line">       IMAGE_ADDR=<span class="string">"119.84.8.43:10096/youlv/go-meta-auth-service"</span>    <span class="comment">// 镜像的位置</span></span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   stages&#123;</span><br><span class="line">       stage('prepare')&#123;</span><br><span class="line">           steps&#123;</span><br><span class="line">               <span class="keyword">sh</span> <span class="string">"rm -rf ./*"</span></span><br><span class="line">               <span class="keyword">sh</span> <span class="string">"printenv"</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       stage('pull source')&#123;</span><br><span class="line">           steps&#123;</span><br><span class="line">               echo <span class="string">"pull source"</span></span><br><span class="line">               <span class="comment">// git credentialsId: 'go-meta-service', url: 'http://119.84.8.43:13201/go-meta/go-meta-service.git'</span></span><br><span class="line">               git branch: 'dev', credentialsId: 'go-<span class="keyword">meta</span>-service', url: 'http:<span class="comment">//119.84.8.43:13201/go-meta/go-meta-service.git'</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       stage('build')&#123;</span><br><span class="line">           steps&#123;</span><br><span class="line">               echo <span class="string">"build"</span></span><br><span class="line">               <span class="comment">//sh "mvn -Dmaven.test.failure.ignore=true clean package"</span></span><br><span class="line">               <span class="comment">//sh "mvn clean"</span></span><br><span class="line">               <span class="comment">//sh "mvn package"</span></span><br><span class="line">               <span class="keyword">sh</span> <span class="string">"mvn -Dmaven.test.failure.ignore=true -pl go-meta-auth-service -am clean package"</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       stage(<span class="string">"make image"</span>)&#123;</span><br><span class="line">           steps&#123;</span><br><span class="line">               echo <span class="string">"make image"</span></span><br><span class="line">               <span class="keyword">sh</span> '''<span class="keyword">cat</span> &lt;&lt;'EOF' &gt; dockerfile</span><br><span class="line">FROM centos</span><br><span class="line"><span class="keyword">RUN</span> <span class="keyword">rm</span> -f /etc/localtime \</span><br><span class="line">&amp;&amp; ln -sv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span><br><span class="line">&amp;&amp; echo <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone</span><br><span class="line"></span><br><span class="line">ARG project=go-<span class="keyword">meta</span>-auth-service</span><br><span class="line">ARG jdk_dir=/opt/java</span><br><span class="line"><span class="keyword">RUN</span> <span class="keyword">mkdir</span> -p <span class="variable">$&#123;jdk_dir&#125;</span>/<span class="keyword">app</span></span><br><span class="line">ADD http:<span class="comment">//127.0.0.1/jdk-8u251-linux-x64.tar.tgz $&#123;jdk_dir&#125;</span></span><br><span class="line">WORKDIR <span class="variable">$&#123;jdk_dir&#125;</span></span><br><span class="line"><span class="keyword">RUN</span> tar -xzf jdk-8u251-linux-x64.tar.tgz&amp;&amp; <span class="keyword">rm</span> -f jdk-8u251-linux-x64.tar.tgz</span><br><span class="line">ADD <span class="variable">$&#123;project&#125;</span>/target/go-<span class="keyword">meta</span>-auth-service-1.0.0.jar <span class="variable">$&#123;jdk_dir&#125;</span>/<span class="keyword">app</span></span><br><span class="line">ENV PATH <span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:$&#123;jdk_dir&#125;/jdk1.8.0_251/bin"</span></span><br><span class="line"># EXPOSE 22</span><br><span class="line">EXPOSE 9090</span><br><span class="line">WORKDIR /opt/java/<span class="keyword">app</span>/</span><br><span class="line">CMD [<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"java -jar -Dserver.port=9090 ./go-meta-auth-service-1.0.0.jar"</span>]</span><br><span class="line">'''</span><br><span class="line">                <span class="keyword">sh</span> 'docker build -t <span class="variable">$&#123;IMAGE_ADDR&#125;</span>:latest .'</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       stage('push image')&#123;</span><br><span class="line">           steps&#123;</span><br><span class="line">               <span class="keyword">sh</span> <span class="string">"docker login 119.84.8.43:10096 -u yanqi -p yanqi"</span></span><br><span class="line">               <span class="keyword">sh</span> <span class="string">"docker push $&#123;IMAGE_ADDR&#125;:latest"</span></span><br><span class="line">               <span class="keyword">sh</span> <span class="string">"docker logout"</span></span><br><span class="line">               <span class="keyword">sh</span> <span class="string">"curl http://119.84.8.43:10096/v2/_catalog"</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="web-服务提供jdk包下载"><a href="#web-服务提供jdk包下载" class="headerlink" title="web 服务提供jdk包下载"></a>web 服务提供jdk包下载</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">wget <span class="symbol">http:</span>/<span class="regexp">/tengine.taobao.org/download</span><span class="regexp">/tengine-2.3.2.tar.gz</span></span><br><span class="line"><span class="regexp">yum -y install pcre-devel openssl-devel</span></span><br><span class="line"><span class="regexp">./configure</span> --prefix=<span class="regexp">/opt/tengine</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt; dockerfile</span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -f /etc/localtime \</span></span><br><span class="line"><span class="bash">&amp;&amp; ln -sv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">&amp;&amp; <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> project=go-meta-auth-service</span><br><span class="line"><span class="keyword">ARG</span> jdk_dir=/opt/java</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$&#123;jdk_dir&#125;</span>/app</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> http://127.0.0.1/jdk-8u251-linux-x64.tar.tgz <span class="variable">$&#123;jdk_dir&#125;</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$&#123;jdk_dir&#125;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -xzf jdk-8u251-linux-x64.tar.tgz&amp;&amp; rm -f jdk-8u251-linux-x64.tar.tgz</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="variable">$&#123;project&#125;</span>/target/go-meta-auth-service-1.0.0.jar <span class="variable">$&#123;jdk_dir&#125;</span>/app</span></span><br><span class="line"><span class="keyword">ENV</span> PATH <span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:$&#123;jdk_dir&#125;/jdk1.8.0_251/bin"</span></span><br><span class="line"><span class="comment"># EXPOSE 22</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9090</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/java/app/</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"java -jar -Dserver.port=9090 ./go-meta-auth-service-1.0.0.jar"</span>]</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id="jenkins-插件"><a href="#jenkins-插件" class="headerlink" title="jenkins 插件"></a>jenkins 插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitlab 插件</span></span><br><span class="line"><span class="comment"># maven 插件</span></span><br></pre></td></tr></table></figure>
<h3 id="git-拉取源码"><a href="#git-拉取源码" class="headerlink" title="git 拉取源码"></a>git 拉取源码</h3><p>使用 Gitlab Hook Plugin</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">mvnHome</span></span></span><br><span class="line"><span class="function">   <span class="title">stage</span></span>(<span class="symbol">'Preparatio</span>n') &#123; <span class="comment">// for display purposes</span></span><br><span class="line">      git <span class="symbol">'https</span>:<span class="comment">//github.com/itcrazy2016/springboot-demo.git'</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mvn-build"><a href="#mvn-build" class="headerlink" title="mvn build"></a>mvn build</h3><p>/root/.jenkins/workspace/springboot-demo<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">   <span class="keyword">def</span> mvnHome</span><br><span class="line">   stage(<span class="string">'Preparation'</span>) &#123; <span class="comment">// for display purposes</span></span><br><span class="line">      git <span class="string">'https://github.com/wuzhenzhao/springboot-demo.git'</span></span><br><span class="line">   &#125;</span><br><span class="line">   dir(<span class="string">'/root/.jenkins/workspace/springboot-demo/springboot-demo'</span>) &#123; <span class="comment">// 切换到/home/jenkins目录中做一些事情</span></span><br><span class="line">    <span class="comment">// some block</span></span><br><span class="line">    stage(<span class="string">'Maven Build'</span>) &#123; </span><br><span class="line">       sh <span class="string">"mvn clean package"</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="git-push触发jenkins自动构建"><a href="#git-push触发jenkins自动构建" class="headerlink" title="git push触发jenkins自动构建"></a>git push触发jenkins自动构建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在github上配置jenkins的webhook地址，</span></span><br><span class="line"><span class="comment"># 配置GitHub Server  [系统管理]-&gt;[系统配置]-&gt;[找到github服务器]-&gt;找到Github，这里有 Web Hook的地址：</span></span><br><span class="line"><span class="comment"># 选择构建触发器，并且选择Github Hook触发</span></span><br><span class="line"><span class="comment"># 生成Personal access tokens</span></span><br><span class="line"><span class="comment"># Jenkins访问github需要授权，所以在github上生成token交给jenkins使用，即 Personal access tokens.</span></span><br><span class="line"><span class="comment"># github的Settings[个人信息右上角]--&gt;Developer settings--&gt;Personal access tokens</span></span><br></pre></td></tr></table></figure>
<h3 id="build-amp-push镜像"><a href="#build-amp-push镜像" class="headerlink" title="build&amp;push镜像"></a>build&amp;push镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># springboot-demo-build-image.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到springboot-demo目录</span></span><br><span class="line"><span class="built_in">cd</span> ../springboot-demo</span><br><span class="line"><span class="comment"># 编写Dockerfile文件</span></span><br><span class="line">cat &lt;&lt;EOF &gt; Dockerfile</span><br><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">COPY target/springboot-demo-1.0-SNAPSHOT.jar /springboot-demo.jar</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/springboot-demo.jar"</span>]</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Dockerfile created successfully!"</span></span><br><span class="line"><span class="comment"># 基于指定目录下的Dockerfile构建镜像</span></span><br><span class="line">docker build -t registry.cn-hangzhou.aliyuncs.com/wuzz-docker/springboot-demo:v1.0 .</span><br><span class="line"><span class="comment"># push镜像，这边需要阿里云镜像仓库登录，在当前安装了jenkins主机上登录</span></span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/wuzz-docker/springboot-demo:v1.0</span><br></pre></td></tr></table></figure>
<h3 id="使用shell-进行构建"><a href="#使用shell-进行构建" class="headerlink" title="使用shell 进行构建"></a>使用shell 进行构建</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">   <span class="keyword">def</span> mvnHome</span><br><span class="line">   stage(<span class="string">'Preparation'</span>) &#123; <span class="comment">// for display purposes</span></span><br><span class="line">      git <span class="string">'https://github.com/wuzhenzhao/springboot-demo.git'</span></span><br><span class="line">   &#125;</span><br><span class="line">   dir(<span class="string">'/root/.jenkins/workspace/springboot-demo/springboot-demo'</span>) &#123; <span class="comment">// 切换到/home/jenkins目录中做一些事情</span></span><br><span class="line">    <span class="comment">// some block</span></span><br><span class="line">    stage(<span class="string">'Maven Build'</span>) &#123; </span><br><span class="line">       sh <span class="string">"mvn clean package"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build Image'</span>) &#123;</span><br><span class="line">           sh <span class="string">"/root/.jenkins/workspace/scripts/springboot-demo-build-image.sh"</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="编写-build-image-sh"><a href="#编写-build-image-sh" class="headerlink" title="编写 build-image.sh"></a>编写 build-image.sh</h1><h3 id="使用-helm-部署到k8s"><a href="#使用-helm-部署到k8s" class="headerlink" title="使用 helm 部署到k8s"></a>使用 helm 部署到k8s</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">   <span class="keyword">def</span> mvnHome</span><br><span class="line">   stage(<span class="string">'Preparation'</span>) &#123; <span class="comment">// for display purposes</span></span><br><span class="line">      git <span class="string">'https://github.com/wuzhenzhao/springboot-demo.git'</span></span><br><span class="line">   &#125;</span><br><span class="line">   dir(<span class="string">'/root/.jenkins/workspace/springboot-demo/springboot-demo'</span>) &#123; <span class="comment">// 切换到/home/jenkins目录中做一些事情</span></span><br><span class="line">    <span class="comment">// some block</span></span><br><span class="line">    stage(<span class="string">'Maven Build'</span>) &#123; </span><br><span class="line">       sh <span class="string">"mvn clean package"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build Image'</span>) &#123;</span><br><span class="line">           sh <span class="string">"/root/.jenkins/workspace/scripts/springboot-demo-build-image.sh"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'K8S Deploy'</span>) &#123;</span><br><span class="line">        sh <span class="string">"/root/.jenkins/workspace/scripts/k8s-deploy-springboot-demo.sh"</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>Ali公有云管理</title>
    <url>/2020/06/Ali%E5%85%AC%E6%9C%89%E4%BA%91%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id><a href="#" class="headerlink" title=" "></a> </h2><ul>
<li><p>计算引擎</p>
<ul>
<li>虚拟化</li>
<li>容器</li>
<li>nodejs</li>
</ul>
</li>
<li><p>数据库</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算资源成本(月)</span></span><br><span class="line">CPU: 85元/C/月</span><br><span class="line">MEMORY: 10元/G/月</span><br><span class="line">DISK: 0.35元/G/月</span><br><span class="line">NETFLOW: 0.6/G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例成本</span></span><br><span class="line">40C,192G=5280元/月</span><br><span class="line">1C,1G,20G=52元/月</span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s 集群成本</span></span><br><span class="line">CPU: 24core</span><br><span class="line">MEM: 96G</span><br><span class="line">DISK: 500G  31/小时 31*24*30  29760元/月</span><br><span class="line"></span><br><span class="line"><span class="comment"># 价格另算</span></span><br><span class="line">SLB</span><br><span class="line">NAT</span><br><span class="line">弹性IP</span><br><span class="line"><span class="comment"># admin#123.Com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IDC 托管成本</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>华为交换机基本配置命令详解</title>
    <url>/2020/06/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="华为交换机基本配置命令详解"><a href="#华为交换机基本配置命令详解" class="headerlink" title="华为交换机基本配置命令详解"></a>华为交换机基本配置命令详解</h2><p>1、配置文件相关命令<br>system-view                    进入特权模式<br>display current-configuration      显示当前生效的配置<br>display saved-configuration        显示flash中配置文件，即下次上电启动时所用的配置文件<br>reset saved-configuration           檫除旧的配置文件<br>reboot                                          交换机重启<br>display version                             显示系统版本信息</p>
<p>2、基本配置<br>super password                          修改特权用户密码<br>sysname                                     交换机命名<br>interface GigabitEthernet 1/0/1            进入接口视图<br>interface vlan 1                           进入接口视图<br>ip address 192.168.100.253 255.255.255.0            配置VLAN的IP地址<br>ip route-static 0.0.0.0 0.0.0.0 10.1.1.1     静态路由＝网关</p>
<p>3、telnet配置<br>user-interface vty 0 4                                                                                     进入虚拟终端<br>[S3026-ui-vty0-4]authentication-mode password                                     设置口令模式<br>[S3026-ui-vty0-4]set authentication password simple fesf1qaz               设置口令<br>[S3026-ui-vty0-4]user-role network-admin                                                 用户级</p>
<p>4、端口配置<br>[Quidway-Ethernet1/0/1]duplex {half|full|auto}                    配置端口工作状态<br>[Quidway-Ethernet1/0/1]speed {10|100|auto}                      配置端口工作速率<br>[Quidway-Ethernet1/0/1]flow-control                                  配置端口流控<br>[Quidway-Ethernet1/0/1]mdi {across|auto|normal}              配置端口平接扭接<br>[Quidway-Ethernet1/0/1]port link-type {trunk|access|hybrid}     设置端口工作模式<br>[Quidway-Ethernet1/0/1]undo shutdown                                     激活端口<br>[Quidway-Ethernet1/0/2]quit                                                        退出系统视图</p>
<p>5、链路聚合配置</p>
<p>[DeviceA] link-aggregation group 1 mode manual       创建手工聚合组1<br>[Qw_A] interface ethernet 1/0/1                     将以太网端口Ethernet1/0/1加入聚合组1<br>[Qw_A-Ethernet1/0/1] port link-aggregation group 1<br>[Qw_A-Ethernet1/0/1] interface ethernet 1/0/2    将以太网端口Ethernet1/0/1加入聚合组1<br>[Qw_A-Ethernet1/0/2] port link-aggregation group 1<br>[Qw_A] link-aggregation group 1 service-type tunnel     # 在手工聚合组的基础上创建tunnel业务环回组。<br>[Qw_A] interface ethernet 1/0/1               将以太网端口Ethernet1/0/1加入业务环回组。<br>[Qw_A-Ethernet1/0/1] undo stp<br>[Qw_A-Ethernet1/0/1] port link-aggregation group 1</p>
<p>6、端口镜像<br>monitor-port        　指定镜像端口<br>port mirror     　　 指定被镜像端口<br>port mirror int_list observing-port int_type int_num  指定镜像和被镜像</p>
<p>以太网端口有三种链路类型：Access、Hybrid和Trunk。<br>   Access类型的端口只能属于1个VLAN，一般用于连接计算机的端口；<br>   Trunk类型的端口可以允许多个VLAN通过，可以接收和发送多个VLAN的报文，一般用于交换机之间连接的端口；<br>    Hybrid类型的端口可以允许多个VLAN通过，可以接收和发送多个VLAN的报文，可以用于交换机之间连接，也可以用于连接用户的计算机。<br>    Hybrid端口和Trunk端口在接收数据时，处理方法是一样的，唯一不同之处在于发送数据时：Hybrid端口可以允许多个VLAN的报文发送时不打标签，而Trunk端口只允许缺省VLAN的报文发送时不打标签。</p>
<p>7、VLAN配置<br>vlan 4                                 　　　　　　   创建VLAN<br>[Quidway-vlan4]port ethernet 1/0/1 to ethernet 1/0/4 　　　  在VLAN中增加端口</p>
<p>① 配置基于access的VLAN<br>[Quidway-Ethernet1/0/2]port access vlan 4          　　　　　 当前端口加入到VLAN<br>注意：缺省情况下，端口的链路类型为Access类型，所有Access端口均属于且只属于VLAN1</p>
<p>② 配置基于trunk的VLAN<br>[Quidway-Ethernet 1/0/24]port link-type trunk                        设置当前端口为trunk<br>[Quidway-Ethernet 1/0/24]port trunk permit vlan {ID|All}     　设trunk允许的VLAN<br>注意：所有端口缺省情况下都是允许VLAN1的报文通过的<br>[Quidway-Ethernet1/0/2]port trunk pvid vlan 34   　　　　　  设置trunk端口的PVID</p>
<p>③ 配置基于Hybrid端口的VLAN<br>[Quidway-Ethernet1/0/2]port link-type hybrid              配置端口的链路类型为Hybrid类型<br>[Quidway-Ethernet1/0/2]port hybrid vlan vlan-id-list { tagged | untagged }  允许指定的VLAN通过当前Hybrid端口<br>注意：缺省情况下，所有Hybrid端口只允许VLAN1通过<br>[Quidway-Ethernet1/0/2]port hybrid pvid vlan vlan-id      设置Hybrid端口的缺省VLAN<br>注意：缺省情况下，Hybrid端口的缺省VLAN为VLAN1</p>
<p>④ VLAN描述<br>description string                      　　　　 指定VLAN描述字符<br>undo description                         　　  　删除VLAN描述字符<br>display vlan [vlan_id]                               查看VLAN设置</p>
<p>⑤ 私有VLAN配置<br>[Qw_A-vlanx]isolate-user-vlan enable          　　　 　　设置主vlan<br>[Qw_A]Isolate-user-vlan  secondary  　　　 　　           设置主vlan包括的子vlan<br>[Quidway-Ethernet1/0/2]port hybrid pvid vlan      　　 设置vlan的pvid<br>[Quidway-Ethernet1/0/2]port hybrid pvid             　　  删除vlan的pvid<br>[Quidway-Ethernet1/0/2]port hybrid vlan vlan_id_list untagged 　设置无标识的vlan</p>
<p>如果包的vlan id与PVId一致，则去掉vlan信息. 默认PVID=1。<br>所以设置PVID为所属vlan id, 设置可以互通的vlan为untagged.</p>
<p>8、STP配置<br>stp {enable|disable}                               设置生成树,默认关闭<br>stp mode rstp                                        设置生成树模式为rstp<br>stp priority 8192                         　　　 设置交换机的优先级<br>stp root {primary|secondary}             　设置为根或根的备份<br>[Quidway-Ethernet0/1]stp cost 200      设置交换机端口的花费</p>
<p>display mac-address                            显示地址表信息<br>display mac-address aging-time         显示地址表动态表项的老化时间<br>display port-mac                                  显示用户配置的以太网端口MAC地址的起始值</p>
<p>2、端口隔离配置</p>
<p>① 通过端口隔离特性，用户可以将需要进行控制的端口加入到一个隔离组中，实现隔离组中的端口之间二层、三层数据的隔离，既增强了网络的安全性，也为用户提供了灵活的组网方案。</p>
<p>[Sysname] interface ethernet1/0/2   将以太网端口Ethernet1/0/2加入隔离组。<br>[Sysname-Ethernet1/0/2] port isolate<br>[Sysname] display isolate port      显示隔离组中的端口信息</p>
<p>② 配置隔离组后，只有隔离组内各个端口之间的报文不能互通，隔离组内端口与隔离组外端口以及隔离组外端口之间的通信不会受到影响。<br>③ 端口隔离特性与以太网端口所属的VLAN无关。<br>④ 当汇聚组中的某个端口加入或离开隔离组后，本设备中同一汇聚组内的其它端口，均会自动加入或离开该隔离组。<br>⑤ 对于既处于某个聚合组又处于某个隔离组的一组端口，其中的一个端口离开聚合组时不会影响其他端口，即其他端口仍将处于原聚合组和原隔离组中。<br>⑥ 如果某个聚合组中的端口同时属于某个隔离组，当在系统视图下直接删除该聚合组后，该聚合组中的端口仍将处于该隔离组中。<br>⑦ 当隔离组中的某个端口加入聚合组时，该聚合组中的所有端口，会自动加入隔离组中。</p>
<p>13、端口安全配置<br>[Switch] port-security enable     启动端口安全功能<br>[Switch] interface Ethernet 1/0/1  进入以太网Ethernet1/0/1端口视图<br>[Switch-Ethernet1/0/1] port-security max-mac-count 80<br>设置端口允许接入的最大MAC地址数为80<br>[Switch-Ethernet1/0/1] port-security port-mode autolearn  配置端口的安全模式为autolearn<br>[Switch-Ethernet1/0/1] mac-address security 0001-0002-0003 vlan 1<br>将Host 的MAC地址0001-0002-0003作为Security MAC添加到VLAN 1中<br>[Switch-Ethernet1/0/1] port-security intrusion-mode disableport-temporarily<br>设置Intrusion Protection特性被触发后，暂时关闭该端口<br>[Switch]port-security timer disableport 30       关闭时间为30秒。</p>
<p>14、端口绑定配置<br>通过端口绑定特性，网络管理员可以将用户的MAC地址和IP地址绑定到指定的端口上。进行绑定操作后，交换机只对从该端口收到的指定MAC地址和IP地址的用户发出的报文进行转发，提高了系统的安全性，增强了对网络安全的监控。</p>
<p>[Qw_A-Ethernet1/0/1] am user-bind mac-addr 0001-0002-0003 ip-addr 10.12.1.1<br>将Host 1的MAC地址和IP地址绑定到Ethernet1/0/1端口。<br>有的交换机上绑定的配置不一样<br>[Qw_A] interface ethernet 1/0/2<br>[Qw_A-Ethernet1/0/2] user-bind ip-address 192.168.0.3 mac-address 0001-0203-0405<br>端口过滤配置<br>[Qw_A] interface ethernet1/0/1      配置端口Ethernet1/0/1的端口过滤功能。<br>[Qw_A-Ethernet1/0/1] ip check source ip-address mac-address<br>[Qw_A] dhcp-snooping             开启DHCP Snooping功能。<br>[Qw_A] interface ethernet1/0/2<br>设置与DHCP服务器相连的端口Ethernet1/0/2为信任端口。<br>[Qw_A-Ethernet1/0/2] dhcp-snooping trust<br>在端口Ethernet1/0/1上启用IP过滤功能，防止客户端使用伪造的不同源IP地址对服务器进行攻击</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>ceph存储配置</title>
    <url>/2020/06/ceph%E5%AD%98%E5%82%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://docs.ceph.org.cn/start/" target="_blank" rel="noopener">ceph 安装配置</a></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>逻辑思维题库</title>
    <url>/2020/06/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4%E9%A2%98%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>jetbrain软件卸载</title>
    <url>/2020/06/jetbrain%E8%BD%AF%E4%BB%B6%E5%8D%B8%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写了个脚本卸载"><a href="#写了个脚本卸载" class="headerlink" title="写了个脚本卸载"></a>写了个脚本卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;uninstalljetbrain.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 产品列表</span></span><br><span class="line">group=<span class="string">"AppCode</span></span><br><span class="line"><span class="string">CLion</span></span><br><span class="line"><span class="string">DataGrip</span></span><br><span class="line"><span class="string">Datalore</span></span><br><span class="line"><span class="string">dotTrace</span></span><br><span class="line"><span class="string">Exposed</span></span><br><span class="line"><span class="string">GoLand</span></span><br><span class="line"><span class="string">Hub</span></span><br><span class="line"><span class="string">IntelliJ</span></span><br><span class="line"><span class="string">JetBrains</span></span><br><span class="line"><span class="string">Kotlin</span></span><br><span class="line"><span class="string">KotlinConf</span></span><br><span class="line"><span class="string">Ktor</span></span><br><span class="line"><span class="string">MPS</span></span><br><span class="line"><span class="string">PhpStorm</span></span><br><span class="line"><span class="string">PyCharm</span></span><br><span class="line"><span class="string">Resharper</span></span><br><span class="line"><span class="string">Resharper C++</span></span><br><span class="line"><span class="string">Rider</span></span><br><span class="line"><span class="string">RubyMine</span></span><br><span class="line"><span class="string">Space</span></span><br><span class="line"><span class="string">TeamCity</span></span><br><span class="line"><span class="string">Toolbox App</span></span><br><span class="line"><span class="string">Upsource</span></span><br><span class="line"><span class="string">Webstorm</span></span><br><span class="line"><span class="string">YouTrack"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目安装目录</span></span><br><span class="line">dir=<span class="string">"/Users/alert/Library/Preferences/</span></span><br><span class="line"><span class="string">/Users/alert/Library/Caches/</span></span><br><span class="line"><span class="string">/Users/alert/Library/Logs/"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> <span class="variable">$dir</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$d</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="variable">$group</span></span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> $(<span class="built_in">pwd</span>) <span class="variable">$s</span></span><br><span class="line">  tree ./ -L 1|awk <span class="string">'&#123;print $2&#125;'</span>|grep -i <span class="string">"\&lt;<span class="variable">$s</span>"</span></span><br><span class="line">  tree ./ -L 1|awk <span class="string">'&#123;print $2&#125;'</span>|grep -i <span class="string">"\&lt;<span class="variable">$s</span>"</span>|xargs rm -rf -</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="variable">$group</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">cd</span> /Users/alert/Library/Application\ Support/</span><br><span class="line">tree ./ -L 1|awk <span class="string">'&#123;print $2&#125;'</span>|grep -i <span class="string">"\&lt;<span class="variable">$s</span>"</span></span><br><span class="line">tree ./ -L 1|awk <span class="string">'&#123;print $2&#125;'</span>|grep -i <span class="string">"\&lt;<span class="variable">$s</span>"</span>|xargs rm -rf -</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>免费ssl申请</title>
    <url>/2020/06/%E5%85%8D%E8%B4%B9ssl%E7%94%B3%E8%AF%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://freessl.cn/" target="_blank" rel="noopener">https://freessl.cn/</a>  免费证书申请</p>
<h2 id="填入申请域名"><a href="#填入申请域名" class="headerlink" title="填入申请域名"></a>填入申请域名</h2><h2 id="生成CSR文件"><a href="#生成CSR文件" class="headerlink" title="生成CSR文件"></a>生成CSR文件</h2><p><a href="https://www.racent.com/generate-csr" target="_blank" rel="noopener">https://www.racent.com/generate-csr</a> CSR 在线生成</p>
<h2 id="设置DNS-解析txt纪录"><a href="#设置DNS-解析txt纪录" class="headerlink" title="设置DNS 解析txt纪录"></a>设置DNS 解析txt纪录</h2><p>key：TXT 记录<br>值：记录值</p>
<p>验证域名：wx.xxxx.com<br>TXT 记录：_dnsauth.wx<br>记录值：202004120717021oq4s1ogkvbr3jw70a48u8w9ib3bfhqfvzpfq6gdzcxrrdcml7</p>
<h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>nslookup -q=txt _dnsauth.gitlab.uhetrip.com</p>
<h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><h2 id="配置到nginx中"><a href="#配置到nginx中" class="headerlink" title="配置到nginx中"></a>配置到nginx中</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen              443 ssl;</span><br><span class="line">        server_name        wx.xxxx.com;</span><br><span class="line">        keepalive_timeout   70;</span><br><span class="line">        &#x2F;&#x2F; pem 是生成的证书，key是csr生成的key</span><br><span class="line">        ssl_certificate      wx.xxx.com&#x2F;full_chain.pem; </span><br><span class="line">        ssl_certificate_key  wx.xxxx.com&#x2F;wx.xxxxp.com.key;</span><br><span class="line">        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers         HIGH:!aNULL:!MD5;</span><br><span class="line">        &#x2F;&#x2F; 后端服务</span><br><span class="line">        location ~* &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;119.1.1.1:10090;</span><br><span class="line">            access_log  &#x2F;data&#x2F;log&#x2F;nginxlog&#x2F;weiinssl.log  main;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>idea反编译jar文件</title>
    <url>/2020/06/idea%E5%8F%8D%E7%BC%96%E8%AF%91jar%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="创建一个-Maven-项目"><a href="#创建一个-Maven-项目" class="headerlink" title="创建一个 Maven 项目"></a>创建一个 Maven 项目</h2><p>将 jar 拖拽到项目中<br>-&gt; 右击 jar 选择 As a library<br>-&gt; 选择 存放位置 prject library<br>然后就会反编译 jar 得到 java 文件和 配置文件</p>
<p>从 jar 中找到<br><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">BOOT-INF</span><br><span class="line">  classes</span><br><span class="line">    com.xxx 数据文件</span><br><span class="line">    yml xml 配置文件</span><br><span class="line">  <span class="class"><span class="keyword">lib</span> 依赖库</span></span><br><span class="line">META-INF maven pom.xml 文件</span><br><span class="line">org.xxx 程序类</span><br></pre></td></tr></table></figure></p>
<p>war 处理<br>war 包解压<br>-&gt; 打开一个已存在的项目<br>-&gt; 点击具体的 class 就可以decode class</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>SSL证书</title>
    <url>/2020/06/SSL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念及原理"><a href="#概念及原理" class="headerlink" title="概念及原理"></a>概念及原理</h2><p>公钥 -&gt; 私钥<br><strong>证书</strong>: 其实包含三部分，用户的信息，用户的公钥，还有CA中心对该证书里面的信息的签名<br><strong>根证书</strong>: 根证书是未被签名的公钥证书或自签名的证书。<br><strong>证书数字签名(hash)</strong>: 公钥密码解决保密性问题数字签名解决完整性问题和有效性问题<br>根证书-&gt; 中间证书 -&gt; 颁发的其他证书</p>
<p><strong>存储</strong>：<br>受信任的证书根植于主流浏览器的信任存储中。<br>Chrome -&gt; 设置 -&gt; 隐私和安全性 -&gt; 更多 -&gt; 管理证书</p>
<p><strong>验证</strong>：<br>当您的浏览器在网站上验证最终用户SSL证书时，它使用提供的公钥来验证签名并在证书链上向上移动一个链接。重复这个过程：对签名进行身份验证，并跟踪签名的证书链，直到最终到达<strong>浏览器信任存储中的一个根证书</strong>。如果它不能将证书链回其受信任的根，它就不会信任该证书。</p>
<h2 id="自己签发根证书示例"><a href="#自己签发根证书示例" class="headerlink" title="自己签发根证书示例"></a>自己签发根证书示例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单演示使用 ip 签发证书</span></span><br><span class="line"><span class="comment"># 生成根证书</span></span><br><span class="line">openssl genrsa -out ca.key 4096</span><br><span class="line"></span><br><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650 \</span><br><span class="line"> -subj <span class="string">"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=192.168.0.69"</span> \</span><br><span class="line"> -key ca.key \</span><br><span class="line"> -out ca.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对根证书签名</span></span><br><span class="line">openssl genrsa -out mycert.key 4096</span><br><span class="line"></span><br><span class="line">openssl req -sha512 -new \</span><br><span class="line">    -subj <span class="string">"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=192.168.0.69"</span> \</span><br><span class="line">    -key mycert.key \</span><br><span class="line">    -out mycert.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为registry生成证书</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"subjectAltName = IP:192.168.0.69"</span> &gt; extfile.cnf</span><br><span class="line"></span><br><span class="line">openssl x509 -req -sha512 -days 3650 \</span><br><span class="line">    -extfile extfile.cnf \</span><br><span class="line">    -CA ca.crt -CAkey ca.key -CAcreateserial \</span><br><span class="line">    -<span class="keyword">in</span> mycert.csr \</span><br><span class="line">    -out mycert.crt</span><br></pre></td></tr></table></figure>
<p>ssh 暴力破解<br><a href="http://server.51cto.com/sOS-569326.htm" target="_blank" rel="noopener">http://server.51cto.com/sOS-569326.htm</a></p>
<p><a href="https://www.bboysoul.com/2017/10/25/%E4%BD%BF%E7%94%A8SSHScan%E6%89%AB%E6%8F%8F%E7%A0%B4%E8%A7%A3ssh%E5%AF%86%E7%A0%81/" target="_blank" rel="noopener">https://www.bboysoul.com/2017/10/25/%E4%BD%BF%E7%94%A8SSHScan%E6%89%AB%E6%8F%8F%E7%A0%B4%E8%A7%A3ssh%E5%AF%86%E7%A0%81/</a></p>
<p><a href="http://www.my-ip-neighbors.com" target="_blank" rel="noopener">http://www.my-ip-neighbors.com</a>   reverse ip lookup<br>www.sameip.org  whois<br>国内: <a href="http://www.cmd5.com" target="_blank" rel="noopener">http://www.cmd5.com</a> (收费很.强大)<br>国内：<a href="http://www.md5.com.cn/" target="_blank" rel="noopener">http://www.md5.com.cn/</a> (有特色，还没怎么用)<br>国内：www.xmd5.com(还不错)<br>国外：<a href="http://www.c0llision.net/webcrack.php(免费，还不错" target="_blank" rel="noopener">http://www.c0llision.net/webcrack.php(免费，还不错</a>)<br>国外：<a href="http://hashkiller.com/" target="_blank" rel="noopener">http://hashkiller.com/</a> (免费，相当强大!!!)<br>国外：<a href="http://ops.conus.info/(免费，少有的oracle" target="_blank" rel="noopener">http://ops.conus.info/(免费，少有的oracle</a> hash在线破解网站)<br><a href="http://www.c0llision.net/webcrack.php" target="_blank" rel="noopener">http://www.c0llision.net/webcrack.php</a>  破解HASH<br><a href="http://www.objectif-securite.ch/en/products.php" target="_blank" rel="noopener">http://www.objectif-securite.ch/en/products.php</a>  破解HASH<br>linxer<br>看雪 <a href="http://www.pediy.com/" target="_blank" rel="noopener">http://www.pediy.com/</a><br>unpack  www.unpack.cn</p>
<p><a href="https://jobrest.gitbooks.io/kali-linux-cn/content/index.html" target="_blank" rel="noopener">https://jobrest.gitbooks.io/kali-linux-cn/content/index.html</a></p>
<h2 id="使用-easyrsa-生成证书"><a href="#使用-easyrsa-生成证书" class="headerlink" title="使用 easyrsa 生成证书"></a>使用 easyrsa 生成证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz</span><br><span class="line">tar xzf easy-rsa.tar.gz</span><br><span class="line"><span class="built_in">cd</span> easy-rsa-master/easyrsa3</span><br><span class="line">./easyrsa init-pki</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 CA</span></span><br><span class="line">./easyrsa --batch <span class="string">"--req-cn=<span class="variable">$&#123;MASTER_IP&#125;</span>@`date +%s`"</span> build-ca nopass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成服务器证书和密钥</span></span><br><span class="line">./easyrsa --subject-alt-name=<span class="string">"IP:<span class="variable">$&#123;MASTER_IP&#125;</span>,"</span>\</span><br><span class="line"><span class="string">"IP:<span class="variable">$&#123;MASTER_CLUSTER_IP&#125;</span>,"</span>\</span><br><span class="line"><span class="string">"DNS:kubernetes,"</span>\</span><br><span class="line"><span class="string">"DNS:kubernetes.default,"</span>\</span><br><span class="line"><span class="string">"DNS:kubernetes.default.svc,"</span>\</span><br><span class="line"><span class="string">"DNS:kubernetes.default.svc.cluster,"</span>\</span><br><span class="line"><span class="string">"DNS:kubernetes.default.svc.cluster.local"</span> \</span><br><span class="line">--days=10000 \</span><br><span class="line">build-server-full server nopass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 pki/ca.crt、 pki/issued/server.crt 和 pki/private/server.key </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># API 服务器的启动参数中添加以下参数</span></span><br><span class="line">--client-ca-file=/yourdirectory/ca.crt</span><br><span class="line">--tls-cert-file=/yourdirectory/server.crt</span><br><span class="line">--tls-private-key-file=/yourdirectory/server.key</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>rancher使用维护</title>
    <url>/2020/06/Rancher%E4%BD%BF%E7%94%A8%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://docs.rancher.cn/rancher2x/quick-start.html" target="_blank" rel="noopener"> rander 2.x 新文档 </a></li>
</ul>
<h2 id="rancher-概念"><a href="#rancher-概念" class="headerlink" title="rancher 概念"></a>rancher 概念</h2><p>catalog：</p>
<p><a href="https://github.com/rancher/charts/tree/master/charts" target="_blank" rel="noopener">https://github.com/rancher/charts/tree/master/charts</a></p>
<h2 id="安装示例"><a href="#安装示例" class="headerlink" title="安装示例"></a>安装示例</h2><ul>
<li>通过 rancher 安装一个 k8s 集群。</li>
<li>建立一个 pod，并完成对 pod 迁移，扩容，更新。</li>
<li>建立存储卷，将容器目录映射到存储卷。</li>
<li>连接到私有的容器镜像库，启动自定义镜像。</li>
<li>添加Pod水平自动伸缩 HBA</li>
</ul>
<p>修改默认的 registry<br>在 系统管理 -&gt; 系统设置 -&gt; 高级设置, 点击 我确认已经知道修改高级设置可能导致问题.<br>找到registry.default 设置然后点击编辑按钮。</p>
<p>限制镜像库的使用</p>
<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><h3 id="使用自建镜像库-issue"><a href="#使用自建镜像库-issue" class="headerlink" title="使用自建镜像库 issue"></a>使用自建镜像库 issue</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># x509: certificate signed by unknown authority</span></span><br><span class="line">使用了自签名证明，提示证书未受信任。</span><br><span class="line">解决方法:</span><br><span class="line">  申请个受信任证书</span><br><span class="line">  把镜像库改成公开</span><br></pre></td></tr></table></figure>
<h3 id="gitlab-挂载了nfs，启动不起来"><a href="#gitlab-挂载了nfs，启动不起来" class="headerlink" title="gitlab 挂载了nfs，启动不起来"></a>gitlab 挂载了nfs，启动不起来</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Errno::EPERM when <span class="built_in">running</span> Gitlab <span class="keyword">on</span> OpenShift <span class="keyword">and</span> NFS persistent Volume</span><br><span class="line">原因是 gitlab 需要改文件权限导致。建议后端存储不要用nfs</span><br></pre></td></tr></table></figure>
<h3 id="rancher2-x-pipeline-gitlab-不能自动触发"><a href="#rancher2-x-pipeline-gitlab-不能自动触发" class="headerlink" title="rancher2.x pipeline gitlab 不能自动触发"></a>rancher2.x pipeline gitlab 不能自动触发</h3><p>Admin Area -&gt; Settings -&gt; Network -&gt;Outbound requests</p>
<h3 id="rancher-监控"><a href="#rancher-监控" class="headerlink" title="rancher 监控"></a>rancher 监控</h3><p>集群模式-&gt; tools -&gt; monitoring -&gt; Enable Persistent Storage for Grafana=true -&gt; save<br>在集群模式下就可以查看grafana</p>
<ul>
<li><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/4929" target="_blank" rel="noopener">gitlab community</a></li>
</ul>
<h3 id="Charts应用商店设置"><a href="#Charts应用商店设置" class="headerlink" title="Charts应用商店设置"></a>Charts应用商店设置</h3><p>Catalogs是GitHub存储库。<br>其中包含用于部署的应用程序模板。<br>URL 必须是git clone 可以处理并且必须以.git结尾的URL 。分支名称必须是应用商店URL中的分支。<br>则默认情况下将使用master分支。</p>
<p>Project -&gt; Tools -&gt; Catalogs -&gt; add catalog<br>-&gt; mycatalog<br>| <a href="http://120.84.8.23:10097/youlv/youlvcharts.git" target="_blank" rel="noopener">http://120.84.8.23:10097/youlv/youlvcharts.git</a><br>| Use private catalog(checked)<br>| username, password<br>| Branch:master , Helm Version: helm3<br>add</p>
<p>Project -&gt; Apps -&gt; mynginx -&gt; Launch<br>找到自定义的 charts 点击运行</p>
]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>helm安装使用</title>
    <url>/2020/06/helm%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener">helm3.0 下载</a></li>
</ul>
<h1 id="kubernetes-helm"><a href="#kubernetes-helm" class="headerlink" title="kubernetes-helm"></a>kubernetes-helm</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm k8s包管理工具</span></span><br><span class="line">helm          <span class="comment"># 客户端工具</span></span><br><span class="line">Tiller        <span class="comment"># 服务端</span></span><br><span class="line">Chart         <span class="comment"># 软件包</span></span><br><span class="line">Repoistory    <span class="comment"># 软件仓库</span></span><br><span class="line">Release       <span class="comment"># 发布到k8s集群</span></span><br></pre></td></tr></table></figure>
<h1 id="helm2-to-helm3"><a href="#helm2-to-helm3" class="headerlink" title="helm2 to helm3"></a>helm2 to helm3</h1><ul>
<li><a href="https://helm.sh/docs/topics/v2_v3_migration/" target="_blank" rel="noopener">helm2 to helm3</a></li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、 移除了Tiller</span><br><span class="line"><span class="number">2</span>、 分布式仓库以及Helm Hub</span><br><span class="line">helm3 search hub hazelcast</span><br><span class="line"><span class="number">3</span>、 JSON Schema 验证</span><br><span class="line"><span class="number">4</span>、 Helm 测试</span><br><span class="line"><span class="number">5</span>、 命令行语法</span><br></pre></td></tr></table></figure>
<h1 id="helm3-0"><a href="#helm3-0" class="headerlink" title="helm3.0"></a>helm3.0</h1><h2 id="helm3-0-基本用法"><a href="#helm3-0-基本用法" class="headerlink" title="helm3.0 基本用法"></a>helm3.0 基本用法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 kubeconfig 连接集群</span></span><br><span class="line"><span class="comment"># kubectl config view --raw</span></span><br><span class="line">cat &lt;&lt; EOF &gt;KubernetesCluster/kubeconfig</span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority: ./ca.crt</span><br><span class="line">    server: https://192.168.0.71/k8s/clusters/c-lc9dm</span><br><span class="line">  name: Default</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: Default</span><br><span class="line">    user: Default</span><br><span class="line">  name: Default</span><br><span class="line">current-context: Default</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: Default</span><br><span class="line">  user:</span><br><span class="line">    token: kubectl-shell-user-prfbt:fsk2pxzz88bvsg7pjhrjpj7gbnxks9gzvgmvkb7zcvhlbtg929bqnd</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># /nonexistent/.kube/certs/ca.crt</span></span><br><span class="line">cat &lt;&lt; EOF &gt;./KubernetesCluster/ca.crt</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIBiDCCAS6gAwIBAgIBADAKBggqhkjOPQQDAjA7MRwwGgYDVQQKExNkeW5hbWlj</span><br><span class="line">bGlzdGVuZXItb3JnMRswGQYDVQQDExJkeW5hbWljbGlzdGVuZXItY2EwHhcNMjAw</span><br><span class="line">NjA1MDI1MzE4WhcNMzAwNjAzMDI1MzE4WjA7MRwwGgYDVQQKExNkeW5hbWljbGlz</span><br><span class="line">dGVuZXItb3JnMRswGQYDVQQDExJkeW5hbWljbGlzdGVuZXItY2EwWTATBgcqhkjO</span><br><span class="line">PQIBBggqhkjOPQMBBwNCAASstTayZLui2EZBF26Wbl5xvyxeYW9jQzlltfcFFFFZ</span><br><span class="line">+/1J0FktiOBSFiRRCP8MI9wqNzuWsdZkxJUec1fRfvftoyMwITAOBgNVHQ8BAf8E</span><br><span class="line">BAMCAqQwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNIADBFAiEAt3QuSmDc</span><br><span class="line">1/NeGi5taMHSAriP9goCw7ijP+sEXwwWWlgCIDmDyd/vGt6MO8WSIgOhciqwUBAa</span><br><span class="line">EyMQ53kc3iSgIuZ/</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接 k8s</span></span><br><span class="line"><span class="comment"># helm --kubeconfig ./kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=<span class="string">"./KubernetesCluster/kubeconfig"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出helm 环境变量</span></span><br><span class="line">helm env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出本地仓库</span></span><br><span class="line">helm repo list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加阿里云公用的仓库</span></span><br><span class="line">helm repo add aliyun https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新本地仓库</span></span><br><span class="line">helm repo update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在本地仓库 search mysql</span></span><br><span class="line">helm search repo mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 mysql 信息</span></span><br><span class="line">helm show chart aliyun/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># install chart 到 k8s</span></span><br><span class="line">helm --kubeconfig ./kubeconfig  install db aliyun/redis -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建本地索引</span></span><br><span class="line">helm repo index abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置配置</span></span><br><span class="line">helm install my-web bitnami/tomcat \</span><br><span class="line">  --<span class="built_in">set</span> service.type=NodePort \</span><br><span class="line">  --<span class="built_in">set</span> persistence.enabled=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="helm-charts-目录结构"><a href="#helm-charts-目录结构" class="headerlink" title="helm charts 目录结构"></a>helm charts 目录结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myapplication/v1.0 <span class="comment"># 应用</span></span><br><span class="line">charts             <span class="comment"># 其中包含了运行一个应用所需要的镜像、依赖和资源定义等</span></span><br><span class="line">templates          <span class="comment"># 部署应用的yaml文件</span></span><br><span class="line">Chart.yaml         <span class="comment"># 应用基本信息</span></span><br><span class="line">values.yaml        <span class="comment"># pod 信息</span></span><br></pre></td></tr></table></figure>
<h2 id="helm-自己构建-charts"><a href="#helm-自己构建-charts" class="headerlink" title="helm 自己构建 charts"></a>helm 自己构建 charts</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个charts 库</span></span><br><span class="line">git <span class="built_in">clone</span> http://119.84.8.43:10097/youlv/youlvcharts.git</span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">"blyanqi@163.com"</span></span><br><span class="line">git config --global user.name <span class="string">"leader1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己构建 chart</span></span><br><span class="line">helm create mynginx -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line">helm package mynginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到集群中,name       ,指定命名空间</span></span><br><span class="line">helm install n1 mynginx -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">helm uninstall n1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">helm upgrade n1 nginx -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看升级版本</span></span><br><span class="line">helm list -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚</span></span><br><span class="line">helm rollback n1 1 -n <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h1 id="helm-2-0"><a href="#helm-2-0" class="headerlink" title="helm 2.0"></a>helm 2.0</h1><h2 id="helm-2-0-基本指令"><a href="#helm-2-0-基本指令" class="headerlink" title="helm 2.0 基本指令"></a>helm 2.0 基本指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm init</span><br><span class="line">helm list <span class="comment">#查看在集群上安装的 Charts 列表</span></span><br><span class="line">helm repo list <span class="comment">#</span></span><br><span class="line">helm search <span class="comment">#</span></span><br><span class="line">  helm search 存储库名称 <span class="comment">#如 stable 或 incubator</span></span><br><span class="line">  helm search chart名称 <span class="comment">#如 wordpress 或 spark</span></span><br><span class="line">helm repo update <span class="comment"># 更新</span></span><br><span class="line">helm create app <span class="comment"># 创建应用</span></span><br><span class="line">helm lint <span class="comment"># 语法检查</span></span><br><span class="line">helm package <span class="comment"># 打包</span></span><br><span class="line">helm install <span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Helm客户端(helm)和Helm服务端(Tiller)。</span></span><br><span class="line">helm init</span><br><span class="line"></span><br><span class="line">--tiller-image</span><br><span class="line"><span class="built_in">export</span> HELM_HOST=localhost:44134</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tiller可以升级使用helm init --upgrade</span></span><br><span class="line"><span class="comment"># 默认情况下，tiller将安装release信息存储在其运行的命名空间中的ConfigMaps中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># helm 官方charts</span></span><br><span class="line">https://github.com/helm/charts/tree/master/stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># rancher 官方应用中心</span></span><br><span class="line">rancher/charts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 云原生应用中心 for ali</span></span><br><span class="line">cloudnativeapp/charts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># PiggyMetrics springcloud 应用 Docker Compose部署</span></span><br><span class="line">这个项目包含了3个业务微服务，分别是</span><br><span class="line">  统计服务（Statistics Service）、</span><br><span class="line">  账户服务（Account Service）</span><br><span class="line">  通知服务（Notification Service）。</span><br><span class="line">每个服务分别对应一个独立的MongoDB。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用kompose工具将 docker-compose 转成 kubernetes 应用</span></span><br><span class="line"><span class="comment"># 去掉一些不支持的指令</span></span><br><span class="line"><span class="comment"># 增加Kubernetes server type annotation</span></span><br><span class="line"><span class="comment"># 转换</span></span><br><span class="line">kompose convert -f docker-compose.yml -f docker-compose.dev.yml -o piggymetrics -c</span><br><span class="line"><span class="comment"># 运行helm install命令</span></span><br><span class="line">helm install --namespace pm --name piggy piggymetrics/</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">helm delete --purge piggymetrics</span><br><span class="line">release <span class="string">"piggymetrics"</span> deleted</span><br></pre></td></tr></table></figure>
<h2 id="helm-安装到-rancher-server"><a href="#helm-安装到-rancher-server" class="headerlink" title="helm 安装到 rancher server"></a>helm 安装到 rancher server</h2><h3 id="helm2-0"><a href="#helm2-0" class="headerlink" title="helm2.0"></a>helm2.0</h3><ul>
<li><a href="https://docs.rancher.cn/rancher2x/installation/helm-ha-install/online/tcp-l4/helm-install.html#_1-%E9%85%8D%E7%BD%AEhelm%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90" target="_blank" rel="noopener"> rancher docs install helm </a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建ClusterRoleBinding以授予tiller帐户对集群的访问权限</span></span><br><span class="line"></span><br><span class="line">kubectl --kubeconfig=kube_configxxx.yml -n kube-system create serviceaccount tiller</span><br><span class="line">kubectl --kubeconfig=kube_configxxx.yml create clusterrolebinding tiller \</span><br><span class="line">--clusterrole cluster-admin --serviceaccount=kube-system:tiller</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rancher中安装Tiller</span></span><br><span class="line">kubeconfig=xxx.yml</span><br><span class="line"></span><br><span class="line">helm_version=`helm version |grep Client | awk -F<span class="string">""</span>\" <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">helm init --kubeconfig=<span class="variable">$kubeconfig</span> \</span><br><span class="line">--service-account tiller --skip-refresh \</span><br><span class="line">--tiller-image registry.cn-shanghai.aliyuncs.com/rancher/tiller:<span class="variable">$helm_version</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
  </entry>
  <entry>
    <title>容器栈</title>
    <url>/2020/06/%E5%AE%B9%E5%99%A8%E6%A0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li>DKE        容器引擎</li>
<li>containerd 容器引擎</li>
<li>docker 容器管理工具</li>
<li>kubernetes  容器编排工具</li>
<li>helm        包管理工具</li>
<li>rancher k8s 管理工具</li>
<li>harbor  私有镜像库</li>
<li>gitlab  代码托管</li>
<li>jenkins CI,CD 工具</li>
</ul>
<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><p>研发 -&gt; 代码提交到(Gitlab) -&gt; 触发hook -&gt; (jenkins)通过pipeline开始构建代码打包镜像 -&gt; 发布到（k8s中)<br>-&gt; 开发环境<br>-&gt; 测试环境<br>-&gt; 生产环境</p>
]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>k3s安装配置</title>
    <url>/2020/06/k3s%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://rancher.com/docs/k3s/latest/en/" target="_blank" rel="noopener">K3S docs</a></li>
</ul>
<h1 id="k3s-概念及原理"><a href="#k3s-概念及原理" class="headerlink" title="k3s 概念及原理"></a>k3s 概念及原理</h1><ul>
<li>helm controller</li>
<li>service LB</li>
<li>Traefik LB</li>
<li>持久化和存储</li>
<li>RootFS</li>
</ul>
]]></content>
      <categories>
        <category>容器技术</category>
      </categories>
  </entry>
  <entry>
    <title>img</title>
    <url>/2020/06/img/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="内部使用，无内容展示"><a href="#内部使用，无内容展示" class="headerlink" title="内部使用，无内容展示"></a>内部使用，无内容展示</h2>]]></content>
  </entry>
  <entry>
    <title>一站式运维环境搭建</title>
    <url>/2020/06/%E4%B8%80%E7%AB%99%E5%BC%8F%E8%BF%90%E7%BB%B4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="主机自动化安装"><a href="#主机自动化安装" class="headerlink" title="主机自动化安装"></a>主机自动化安装</h2><ul>
<li><a href="/2020/05/Cobbler/" title="Cobbler">Cobbler</a>
</li>
</ul>
<h2 id="服务自动化部署"><a href="#服务自动化部署" class="headerlink" title="服务自动化部署"></a>服务自动化部署</h2><ul>
<li><a href="/2020/05/Ansible%E4%BD%BF%E7%94%A8/" title="使用Ansible大规模部署">使用Ansible大规模部署</a>
</li>
</ul>
<h2 id="openstack-私有云安装（适用规模大的环境）"><a href="#openstack-私有云安装（适用规模大的环境）" class="headerlink" title="openstack 私有云安装（适用规模大的环境）"></a>openstack 私有云安装（适用规模大的环境）</h2><ul>
<li><a href="/2020/05/OpenStack%E5%AE%89%E8%A3%85/" title="OpenStack安装">OpenStack安装</a>
</li>
</ul>
<h2 id="非私有云安装-适用于规模小的环境"><a href="#非私有云安装-适用于规模小的环境" class="headerlink" title="非私有云安装 (适用于规模小的环境)"></a>非私有云安装 (适用于规模小的环境)</h2><ul>
<li></li>
<li><a href="/2020/05/KVM%E5%AE%89%E8%A3%85/" title="KMV虚拟化">KMV虚拟化</a>
</li>
</ul>
<h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h2><ul>
<li><a href="/2020/05/Docker%E5%AE%89%E8%A3%85/" title="Docker安装部署">Docker安装部署</a>
</li>
</ul>
<h2 id="k8s-集群部署"><a href="#k8s-集群部署" class="headerlink" title="k8s 集群部署"></a>k8s 集群部署</h2><ul>
<li></li>
<li>or</li>
<li>
</li>
</ul>
<h2 id="docker-私有镜像仓库搭建"><a href="#docker-私有镜像仓库搭建" class="headerlink" title="docker 私有镜像仓库搭建"></a>docker 私有镜像仓库搭建</h2><ul>
<li><a href="/2020/05/Harbor%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/" title="Harbor安装配置">Harbor安装配置</a>
</li>
</ul>
<h2 id="dockerfile-容器镜像制作"><a href="#dockerfile-容器镜像制作" class="headerlink" title="dockerfile 容器镜像制作"></a>dockerfile 容器镜像制作</h2><ul>
<li><a href="/2020/05/Dockerfile/" title="容器镜像制作">容器镜像制作</a>
</li>
</ul>
<h2 id="ELK-环境搭建"><a href="#ELK-环境搭建" class="headerlink" title="ELK 环境搭建"></a>ELK 环境搭建</h2><ul>
<li><a href="/2020/05/ELK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/" title="ELK安装配置">ELK安装配置</a>
</li>
</ul>
<h2 id="运维监控"><a href="#运维监控" class="headerlink" title="运维监控"></a>运维监控</h2><ul>
<li><a href="/2020/05/Openfalcon/" title="Openfalcon安装">Openfalcon安装</a></li>
<li><a href="/2020/05/Prometheus/" title="prometheus安装">prometheus安装</a></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>rancher安装k8s</title>
    <url>/2020/06/Rancher%E5%AE%89%E8%A3%85k8s/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>
</li>
</ul>
<h2 id="简易-docker-安装脚本（包含基本主机配置）"><a href="#简易-docker-安装脚本（包含基本主机配置）" class="headerlink" title="简易 docker 安装脚本（包含基本主机配置）"></a>简易 docker 安装脚本（包含基本主机配置）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'GEOF'</span>&gt;install.sh</span><br><span class="line"><span class="function"><span class="title">log</span></span>()&#123;</span><br><span class="line"><span class="comment"># 注释</span></span><br><span class="line"><span class="comment"># log 1 ，使用方法（会将 注释打印出来）</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[0;32m ------<span class="variable">$1</span>、`sed -n "</span>/\&lt;<span class="built_in">log</span> <span class="variable">$1</span>\&gt;/&#123;x;p&#125;;h<span class="string">" <span class="variable">$0</span>`\t------- \e[m"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主机名</span></span><br><span class="line"><span class="built_in">log</span> 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"127.0.0.1   localhost</span></span><br><span class="line"><span class="string">::1         localhost</span></span><br><span class="line"><span class="string">192.168.0.72 k8sn-1</span></span><br><span class="line"><span class="string">192.168.0.73 k8sn-2"</span>&gt;/etc/hosts</span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line"><span class="built_in">log</span> 2</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line"><span class="built_in">log</span> 3</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">"s/^SELINUX=enforcing/SELINUX=disabled/g"</span> /etc/selinux/config</span><br><span class="line"><span class="comment"># 关闭 swap</span></span><br><span class="line"><span class="built_in">log</span> 4</span><br><span class="line">swapoff -a;sed -i <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span><br><span class="line"><span class="comment"># 配置dns</span></span><br><span class="line"><span class="built_in">log</span> 5</span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;/etc/resolv.conf</span><br><span class="line">nameserver 202.106.0.20</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 配置镜像源</span></span><br><span class="line"><span class="built_in">log</span> 6</span><br><span class="line">rm  /etc/yum.repos.d/* -rf</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="comment">#yum -y install epel-release</span></span><br><span class="line">yum -y install wget</span><br><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line">yum -y update</span><br><span class="line"><span class="comment"># 配置 ntp</span></span><br><span class="line"><span class="built_in">log</span> 7</span><br><span class="line">yum install chrony -y</span><br><span class="line">sed -i <span class="string">"/^server/d"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp1.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp2.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf </span><br><span class="line">sed -i <span class="string">"/#allow/s/#//"</span> /etc/chrony.conf</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd.service;systemctl start chronyd.service</span><br><span class="line"><span class="comment"># 安装 docker</span></span><br><span class="line"><span class="built_in">log</span> 8</span><br><span class="line">yum -y install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum -y install docker-ce-18.06.2.ce</span><br><span class="line"><span class="comment"># 配置 docker</span></span><br><span class="line"><span class="built_in">log</span> 9</span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://pe80e41t.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line"><span class="built_in">log</span> 10</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 docker 版本</span></span><br><span class="line"><span class="built_in">log</span> 11</span><br><span class="line">docker --version</span><br><span class="line">GEOF</span><br></pre></td></tr></table></figure>
<h2 id="在-rancher-中配置"><a href="#在-rancher-中配置" class="headerlink" title="在 rancher 中配置"></a>在 rancher 中配置</h2><h3 id="k8sn-1-安装-master"><a href="#k8sn-1-安装-master" class="headerlink" title="k8sn-1 安装 master"></a>k8sn-1 安装 master</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sudo docker run -d <span class="params">--privileged</span> <span class="params">--restart=unless-stopped</span> <span class="params">--net=host</span> -v <span class="string">/etc/kubernetes</span>:<span class="string">/etc/kubernetes</span> -v <span class="string">/var/run</span>:<span class="string">/var/run</span> rancher/rancher-agent<span class="function">:v2.4.4</span> <span class="params">--server</span> https:<span class="string">//192.168.0.71</span> <span class="params">--token</span> v7lxh82dqhbkfngvk7dzqnb8jvnrm58lh7vzjqcdjftvpk8bwflp5m <span class="params">--ca-checksum</span> 482dbd8274d4038743cbbc176ebd9bb328afa221ecbc1c11a9961d402df05f11 <span class="params">--etcd</span> <span class="params">--controlplane</span></span><br></pre></td></tr></table></figure>
<h3 id="k8sn-1-安装-worker"><a href="#k8sn-1-安装-worker" class="headerlink" title="k8sn-1 安装 worker"></a>k8sn-1 安装 worker</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sudo docker run -d <span class="params">--privileged</span> <span class="params">--restart=unless-stopped</span> <span class="params">--net=host</span> -v <span class="string">/etc/kubernetes</span>:<span class="string">/etc/kubernetes</span> -v <span class="string">/var/run</span>:<span class="string">/var/run</span> rancher/rancher-agent<span class="function">:v2.4.4</span> <span class="params">--server</span> https:<span class="string">//192.168.0.71</span> <span class="params">--token</span> v7lxh82dqhbkfngvk7dzqnb8jvnrm58lh7vzjqcdjftvpk8bwflp5m <span class="params">--ca-checksum</span> 482dbd8274d4038743cbbc176ebd9bb328afa221ecbc1c11a9961d402df05f11 <span class="params">--worker</span></span><br></pre></td></tr></table></figure>
<h2 id="创建集群存储-使用nfs"><a href="#创建集群存储-使用nfs" class="headerlink" title="创建集群存储(使用nfs)"></a>创建集群存储(使用nfs)</h2><h3 id="创建存储类"><a href="#创建存储类" class="headerlink" title="创建存储类"></a>创建存储类</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-storage</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">nfs-client-provisioner</span></span><br></pre></td></tr></table></figure>
<h3 id="创建PV（nfs）"><a href="#创建PV（nfs）" class="headerlink" title="创建PV（nfs）"></a>创建PV（nfs）</h3><ul>
<li><a href="/2020/05/NFS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/" title="NFS安装配置">NFS安装配置</a>
</li>
</ul>
]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>kubernetes备份恢复</title>
    <url>/2020/06/Kubernetes%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>linux安装服务前配置</title>
    <url>/2020/06/linux%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1%E5%89%8D%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装前配置"><a href="#安装前配置" class="headerlink" title="安装前配置"></a>安装前配置</h2><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停用防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure>
<h3 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">"s/^SELINUX=enforcing/SELINUX=disabled/g"</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>
<h3 id="关闭-swap"><a href="#关闭-swap" class="headerlink" title="关闭 swap"></a>关闭 swap</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">swapoff -a sed -i <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span><br></pre></td></tr></table></figure>
<h3 id="NTP-配置"><a href="#NTP-配置" class="headerlink" title="NTP 配置"></a>NTP 配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install chrony -y</span><br><span class="line"><span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line">sed -i <span class="string">"/^server/d"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp1.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp2.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf </span><br><span class="line">sed -i <span class="string">"/#allow/s/#//"</span> /etc/chrony.conf</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd.service;systemctl start chronyd.service</span><br></pre></td></tr></table></figure>
<h3 id="配置国内yum-源"><a href="#配置国内yum-源" class="headerlink" title="配置国内yum 源"></a>配置国内yum 源</h3><a href="/2020/05/%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/" title="配置国内各种镜像源">配置国内各种镜像源</a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装下载工具</span></span><br><span class="line">yum install -y wget;</span><br><span class="line">rm  /etc/yum.repos.d/* -rf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Aliyun 源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>
<h3 id="DNS-配置"><a href="#DNS-配置" class="headerlink" title="DNS 配置"></a>DNS 配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;/etc/resolv.conf</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="局域网扫描"><a href="#局域网扫描" class="headerlink" title="局域网扫描"></a>局域网扫描</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># arping</span></span><br><span class="line">arping -I eth0 192.168.0.59 -b</span><br><span class="line"></span><br><span class="line"><span class="comment"># arp-scan</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/royhills/arp-scan</span><br><span class="line"><span class="built_in">cd</span> arp-scan</span><br><span class="line">autoreconf --install</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yum install epel-release</span><br><span class="line">yum install arp-scan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描</span></span><br><span class="line">arp-scan --interface=eth0 192.168.0.0/24</span><br><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure>
<h3 id="grep中进行非贪婪的匹配"><a href="#grep中进行非贪婪的匹配" class="headerlink" title="grep中进行非贪婪的匹配"></a>grep中进行非贪婪的匹配</h3><p>grep -o -P “http.*?,” xxx.file</p>
<h3 id="Linux下Json格式化神器jq"><a href="#Linux下Json格式化神器jq" class="headerlink" title="Linux下Json格式化神器jq"></a>Linux下Json格式化神器jq</h3><p>yum -y install epel-release<br>yum -y install jq</p>
]]></content>
  </entry>
  <entry>
    <title>创建Yum源</title>
    <url>/2020/06/%E5%88%9B%E5%BB%BAYum%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自定义yum-仓库"><a href="#自定义yum-仓库" class="headerlink" title="自定义yum 仓库"></a>自定义yum 仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建yum仓库目录</span></span><br><span class="line">mkdir -p /application/yum/centos7/x86_64/</span><br><span class="line"><span class="built_in">cd</span> /application/yum/centos7/x86_64/</span><br><span class="line"><span class="comment"># 上传rpm包(略)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装createrepo软件</span></span><br><span class="line">yum -y install createrepo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化repodata索引文件</span></span><br><span class="line">createrepo -pdo /application/yum/centos7/x86_64/ /application/yum/centos7/x86_64/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供yum服务（使用python http）</span></span><br><span class="line"><span class="built_in">cd</span> /application/yum/centos6.6/x86_64/</span><br><span class="line">python -m SimpleHTTPServer 80 &amp;&gt;/dev/null &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新的rpm包</span></span><br><span class="line">yum downloader pcre-devel openssl-devel </span><br><span class="line">createrepo --update /application/yum/centos6.6/x86_64/   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端配置</span></span><br><span class="line">[abc_com]</span><br><span class="line">name=Server</span><br><span class="line">baseurl=http://10.0.0.8</span><br><span class="line"><span class="built_in">enable</span>=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定使用yum库</span></span><br><span class="line">yum --enablerepo=abc_com --disablerepo=base,extras,updates,epel list </span><br><span class="line"></span><br><span class="line"><span class="comment"># 把ali的库指向自定义yum库</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'10.0.0.8 mirrors.aliyun.com'</span> &gt;&gt;/etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步线上的yum库</span></span><br></pre></td></tr></table></figure>
<h2 id="yum使用"><a href="#yum使用" class="headerlink" title="yum使用"></a>yum使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出 repo 库</span></span><br><span class="line">yum repolist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出repo所有包</span></span><br><span class="line">yum list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安装包</span></span><br><span class="line">yum list installed</span><br><span class="line">rpm -qa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出可更新的包</span></span><br><span class="line">yum list updates</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出额外的包 </span></span><br><span class="line">yum list extras</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出依赖列表</span></span><br><span class="line">yum deplist zlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过依赖 --skip-broken</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出相关的包</span></span><br><span class="line">yum list php*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出软件包提供的文件</span></span><br><span class="line">yum provides ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出包信息</span></span><br><span class="line">yum info zlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出软件包所有文件</span></span><br><span class="line">rpm -ql zlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出文件所属的包</span></span><br><span class="line">rpm -qf /usr/lib64/libz.so.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索 nc命令 是哪个包提供的</span></span><br><span class="line">yum whatprovides <span class="string">"nc"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装包搜索</span></span><br><span class="line">yum search netstat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">yum -y install</span><br><span class="line">yum localinstall</span><br><span class="line"><span class="comment"># 指定库 --enablerepo=</span></span><br><span class="line"><span class="comment"># 指定下载目录 --downloaddir=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载包</span></span><br><span class="line">yum remove</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级包</span></span><br><span class="line">yum upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 降级包</span></span><br><span class="line">yum downgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出分组信息</span></span><br><span class="line">yum grouplist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装组</span></span><br><span class="line">yum groupinstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组更新</span></span><br><span class="line">yum groupupdate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组移除</span></span><br><span class="line">yum groupremove</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组信息</span></span><br><span class="line">yum groupinfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># localinstall</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装分类包</span></span><br><span class="line">yum -y install @base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类信息</span></span><br><span class="line">    103 @anaconda</span><br><span class="line">   9070 base</span><br><span class="line">    179 @base</span><br><span class="line">    250 extras</span><br><span class="line">    544 updates</span><br><span class="line">     23 @updates</span><br><span class="line"><span class="comment"># 查看yum 历史记录</span></span><br><span class="line">yum <span class="built_in">history</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Gradle安装使用</title>
    <url>/2020/06/Gradle%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a></li>
<li><p><a href="https://guides.gradle.org/creating-new-gradle-builds/" target="_blank" rel="noopener">New Project</a></p>
</li>
<li><p><a href="https://groovy-lang.org/documentation.html" target="_blank" rel="noopener">groovy</a></p>
</li>
<li><a href="https://kotlinlang.org/docs/tutorials/" target="_blank" rel="noopener">kotlin</a></li>
</ul>
<h2 id="创建一个新项目"><a href="#创建一个新项目" class="headerlink" title="创建一个新项目"></a>创建一个新项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir basic-demo</span><br><span class="line"><span class="built_in">cd</span> basic-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># gradle 初始化</span></span><br><span class="line">gradle init</span><br><span class="line">or</span><br><span class="line">gradle init --dsl kotlin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成目录结构</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Maven安装</title>
    <url>/2020/06/Maven%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://maven.apache.org/" target="_blank" rel="noopener">Maven</a></li>
<li><a href="https://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz" target="_blank" rel="noopener">Maven download</a></li>
<li><a href="https://maven.apache.org/ref/3.6.3/" target="_blank" rel="noopener">Maven docs</a></li>
<li><a href="/2020/05/Java%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/" title="Java环境配置">Java环境配置</a></li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/AdoptOpenJDK/" target="_blank" rel="noopener">openJDK 镜像</a></li>
</ul>
<h3 id="设置-mvn-环境"><a href="#设置-mvn-环境" class="headerlink" title="设置 mvn 环境"></a>设置 mvn 环境</h3><p>目录结构<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir mavenproject</span><br><span class="line">├── apache-maven-3.6.3</span><br><span class="line">├── demo <span class="comment"># maven 示例</span></span><br><span class="line">├── env</span><br><span class="line">├── gen.sh  <span class="comment"># 用来生成整个项目</span></span><br><span class="line">├── java11 -&gt; jdk-11.0.7</span><br><span class="line">├── java14 -&gt; jdk-14.0.1</span><br><span class="line">├── java8 -&gt; jdk1.8.0_251</span><br><span class="line">├── jdk-11.0.7</span><br><span class="line">├── jdk-14.0.1</span><br><span class="line">├── jdk1.8.0_251</span><br><span class="line">└── maven -&gt; apache-maven-3.6.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装</span></span><br><span class="line">base64 -i ~/Downloads/jdk-8u251-linux-x64.tar.gz -o .a&amp;&amp;cat .a &gt;&gt; gen.sh</span><br><span class="line">base64 -i ~/Downloads/jdk-11.0.7_linux-x64_bin.tar.gz -o .b&amp;&amp;cat .b &gt;&gt; gen.sh</span><br><span class="line">base64 -i ~/Downloads/jdk-14.0.1_linux-x64_bin.tar.gz -o .c&amp;&amp;cat .c &gt;&gt; gen.sh</span><br><span class="line">base64 -i ~/Downloads/apache-maven-3.6.3-bin.tar.gz -o .c&amp;&amp;cat .d &gt;&gt; gen.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">rm -rf .a .b .c .d</span><br><span class="line">cat .a .b .c .d &gt;&gt; gen.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># mac 解包</span></span><br><span class="line">base64 -Dd -i a.tgz -o jdk-8u251-linux-x64.tar.tgz</span><br><span class="line">base64 -Dd -i b.tgz -o jdk-11.0.7_linux-x64_bin.tar.gz</span><br><span class="line">base64 -Dd -i c.tgz -o jdk-14.0.1_linux-x64_bin.tar.gz</span><br><span class="line">base64 -Dd -i d.tgz -o apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">sed -i <span class="string">""</span> <span class="string">'150,160d'</span> gen.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos base64</span></span><br><span class="line">yum -y install coreutils</span><br><span class="line">base64 -d &lt; a.tgz &gt; jdk-8u251-linux-x64.tar.tgz</span><br><span class="line">base64 -d &lt; b.tgz &gt; jdk-11.0.7_linux-x64_bin.tar.gz</span><br><span class="line">base64 -d &lt; c.tgz &gt; jdk-14.0.1_linux-x64_bin.tar.gz</span><br><span class="line">base64 -d &lt; d.tgz &gt; apache-maven-3.6.3-bin.tar.gz</span><br></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">java8</a></li>
<li><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">java11</a></li>
<li><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">java14</a></li>
</ul>
<h3 id="gen-sh-centos"><a href="#gen-sh-centos" class="headerlink" title="gen.sh (centos)"></a>gen.sh (centos)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'GEOF'</span> &gt;gen.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># packages</span></span><br><span class="line">grep -i linux /etc/redhat-release ||<span class="built_in">exit</span></span><br><span class="line"><span class="built_in">command</span> -v base64||yum -y install coreutils</span><br><span class="line"></span><br><span class="line">MAINDIR=<span class="variable">$PWD</span></span><br><span class="line"><span class="comment"># create directory</span></span><br><span class="line">mkdir -p env</span><br><span class="line">mkdir -p demo/src/main/java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># java env</span></span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;env/java8.sh</span><br><span class="line">MAINDIR=<span class="variable">$PWD</span></span><br><span class="line">JAVA_HOME=<span class="variable">$&#123;MAINDIR&#125;</span>/java8</span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">PATH=<span class="variable">$&#123;MAINDIR&#125;</span>/java8/bin:/usr/<span class="built_in">local</span>/bin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:<span class="variable">$&#123;MAINDIR&#125;</span>/maven/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME  CLASSPATH PATH</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;env/java11.sh</span><br><span class="line">MAINDIR=<span class="variable">$PWD</span></span><br><span class="line">JAVA_HOME=<span class="variable">$&#123;MAINDIR&#125;</span>/java11</span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">PATH=<span class="variable">$&#123;MAINDIR&#125;</span>/java11/bin:/usr/<span class="built_in">local</span>/bin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:<span class="variable">$&#123;MAINDIR&#125;</span>/maven/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME  CLASSPATH PATH</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;env/java14.sh</span><br><span class="line">MAINDIR=<span class="variable">$PWD</span></span><br><span class="line">JAVA_HOME=<span class="variable">$&#123;MAINDIR&#125;</span>/java14</span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">PATH=<span class="variable">$&#123;MAINDIR&#125;</span>/java14/bin:/usr/<span class="built_in">local</span>/bin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:<span class="variable">$&#123;MAINDIR&#125;</span>/maven/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME  CLASSPATH PATH</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># uncompress jdk</span></span><br><span class="line">sed -n <span class="string">'150p'</span> <span class="variable">$0</span> &gt;a.tgz</span><br><span class="line">sed -n <span class="string">'151p'</span> <span class="variable">$0</span> &gt;b.tgz</span><br><span class="line">sed -n <span class="string">'152p'</span> <span class="variable">$0</span> &gt;c.tgz</span><br><span class="line">sed -n <span class="string">'153p'</span> <span class="variable">$0</span> &gt;d.tgz</span><br><span class="line">base64 -d &lt; a.tgz &gt; jdk-8u251-linux-x64.tar.tgz</span><br><span class="line">base64 -d &lt; b.tgz &gt; jdk-11.0.7_linux-x64_bin.tar.gz</span><br><span class="line">base64 -d &lt; c.tgz &gt; jdk-14.0.1_linux-x64_bin.tar.gz</span><br><span class="line">base64 -d &lt; d.tgz &gt; apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">tar -zxf jdk-8u251-linux-x64.tar.tgz</span><br><span class="line">tar -zxf jdk-11.0.7_linux-x64_bin.tar.gz</span><br><span class="line">tar -zxf jdk-14.0.1_linux-x64_bin.tar.gz</span><br><span class="line">tar -zxf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">ln -sf jdk1.8.0_251 java8</span><br><span class="line">ln -sf jdk-11.0.7 java11</span><br><span class="line">ln -sf jdk-14.0.1 java14</span><br><span class="line">ln -sf apache-maven-3.6.3 maven</span><br><span class="line">rm -f *.tgz *.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># HelloWorld.java</span></span><br><span class="line">cat &lt;&lt;EOF &gt; demo/src/main/java/HelloWorld.java</span><br><span class="line">package com.tianmaying.mavendemo;</span><br><span class="line"></span><br><span class="line">import org.joda.time.LocalTime;</span><br><span class="line"></span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        LocalTime currentTime = new LocalTime();</span><br><span class="line">        System.out.println(<span class="string">"The current local time is: "</span> + currentTime);</span><br><span class="line">        Greeter greeter = new Greeter();</span><br><span class="line">        System.out.println(greeter.sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># Greeter.java</span></span><br><span class="line">cat &lt;&lt;EOF &gt; demo/src/main/java/Greeter.java</span><br><span class="line">package com.tianmaying.mavendemo;</span><br><span class="line"></span><br><span class="line">public class Greeter &#123;</span><br><span class="line">    public String <span class="function"><span class="title">sayHello</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"Hello world!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># pom.xml</span></span><br><span class="line">cat &lt;&lt;EOF &gt; demo/pom.xml</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gs-maven&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;0.1.0&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- tag::joda[] --&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;joda-time&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;joda-time&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;!-- end::joda[] --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.1&lt;/version&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;shade&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                        &lt;configuration&gt;</span><br><span class="line">                            &lt;transformers&gt;</span><br><span class="line">                                &lt;transformer</span><br><span class="line">                                    implementation=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span><br><span class="line">                                    &lt;mainClass&gt;com.tianmaying.mavendemo.HelloWorld&lt;/mainClass&gt;</span><br><span class="line">                                &lt;/transformer&gt;</span><br><span class="line">                            &lt;/transformers&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建Java代码</span></span><br><span class="line"><span class="comment"># mvn compile</span></span><br><span class="line"><span class="comment"># mvn package</span></span><br><span class="line"><span class="comment"># mvn install</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须到149行</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">GEOF</span><br></pre></td></tr></table></figure>
<h3 id="maven-目录结构"><a href="#maven-目录结构" class="headerlink" title="maven 目录结构"></a>maven 目录结构</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">└── <span class="attribute">src</span></span><br><span class="line">    └── main</span><br><span class="line">        └── java</span><br></pre></td></tr></table></figure>
<h3 id="配置-maven-镜像"><a href="#配置-maven-镜像" class="headerlink" title="配置 maven 镜像"></a>配置 maven 镜像</h3><p>conf/settings.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="代理库"><a href="#代理库" class="headerlink" title="代理库"></a>代理库</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>一键安装DevOps环境</title>
    <url>/2020/06/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85DevOps%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Rancher-安装配置"><a href="#Rancher-安装配置" class="headerlink" title="Rancher 安装配置"></a>Rancher 安装配置</h2><ul>
<li><a href="/2020/05/Rancher%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/" title="Rancher安装配置">Rancher安装配置</a></li>
<li>
</li>
</ul>
<h2 id="Gitlab-安装配置"><a href="#Gitlab-安装配置" class="headerlink" title="Gitlab 安装配置"></a>Gitlab 安装配置</h2><ul>
<li></li>
<li><a href="/2020/05/Gitlab/" title="Gitlab管理">Gitlab管理</a></li>
<li>
</li>
</ul>
<h2 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h2><ul>
<li><a href="/2020/05/Jenkins/" title="jenkins">jenkins</a></li>
<li>
</li>
</ul>
<h2 id="配置-JDK"><a href="#配置-JDK" class="headerlink" title="配置 JDK"></a>配置 JDK</h2><h2 id="配置-Maven"><a href="#配置-Maven" class="headerlink" title="配置 Maven"></a>配置 Maven</h2><ul>
<li><a href="/2020/06/Maven%E5%AE%89%E8%A3%85/" title="Maven安装">Maven安装</a></li>
<li><a href="/2020/06/Maven%E7%AE%A1%E7%90%86/" title="Maven管理">Maven管理</a>
</li>
</ul>
<h2 id="配置-docker"><a href="#配置-docker" class="headerlink" title="配置 docker"></a>配置 docker</h2><ul>
<li><a href="/2020/05/Docker/" title="Docker">Docker</a></li>
<li></li>
<li><a href="/2020/05/Docker%E5%AE%89%E8%A3%85/" title="Docker安装">Docker安装</a></li>
<li><a href="/2020/05/Docker%E5%AE%89%E8%A3%85/" title="Docker安装">Docker安装</a>
</li>
</ul>
]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/2020/06/Git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="git概念"><a href="#git概念" class="headerlink" title="git概念"></a>git概念</h2><ul>
<li>本地库</li>
<li>远程库</li>
<li>clone</li>
<li>版本<ul>
<li>master（预发和生产版本）</li>
<li>dev（开发环境版本)</li>
<li>release（测试环境版本）</li>
<li>feature（本地或开发版本）</li>
<li>hotfix（测试、预发和生产版本）</li>
<li>tag（留存上线版本）</li>
<li>bugfix（本地或开发版本）</li>
</ul>
</li>
<li>分支<ul>
<li>分支清理</li>
<li>分支保护</li>
</ul>
</li>
<li>合并</li>
<li>冲突</li>
<li>Git Flow</li>
</ul>
<h2 id="git-使用"><a href="#git-使用" class="headerlink" title="git 使用"></a>git 使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小组成员需要建立属于自己的分支，每个分支代表着开发不同的功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个本地库,生成一个隐藏目录 .git/</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── hooks</span><br><span class="line">│   ├── applypatch-msg.sample</span><br><span class="line">│   ├── commit-msg.sample</span><br><span class="line">│   ├── fsmonitor-watchman.sample</span><br><span class="line">│   ├── post-update.sample</span><br><span class="line">│   ├── pre-applypatch.sample</span><br><span class="line">│   ├── pre-commit.sample</span><br><span class="line">│   ├── pre-push.sample</span><br><span class="line">│   ├── pre-rebase.sample</span><br><span class="line">│   ├── pre-receive.sample</span><br><span class="line">│   ├── prepare-commit-msg.sample</span><br><span class="line">│   └── update.sample</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── objects</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span>  <span class="comment">#关闭自动换行</span></span><br><span class="line">git config --global user.mail <span class="string">"blyanqi@163.com"</span></span><br><span class="line">git config --global user.name <span class="string">"blyanqi"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置远程库地址</span></span><br><span class="line">git remote add origin https://gitee.com/blyanqi/devops.git</span><br><span class="line"><span class="comment"># 从远程库拉取</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="comment"># 创建新文件</span></span><br><span class="line">touch help.c</span><br><span class="line"><span class="comment"># 提交到本地库</span></span><br><span class="line">git add ./*</span><br><span class="line">git commit -m <span class="string">"v1"</span></span><br><span class="line"><span class="comment"># 推送到远程库</span></span><br><span class="line">git push -u origin master</span><br><span class="line">git push origin master:master -f <span class="comment">#强制推送本地分支到远程分支</span></span><br><span class="line"><span class="comment"># 显示本地库状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">mkdir project</span><br><span class="line">git config --global user.mail <span class="string">"blyanqi@163.com"</span></span><br><span class="line">git config --global user.name <span class="string">"blyanqi"</span></span><br><span class="line">git remote add origin https://gitee.com/blyanqi/test.git</span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 建立分支</span></span><br><span class="line">git branch dev</span><br><span class="line">git branch <span class="built_in">test</span></span><br><span class="line">git branch pro</span><br><span class="line">git checkout dev</span><br><span class="line"><span class="comment"># 设置远程分支和本地分支映射</span></span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin dev</span><br><span class="line"><span class="comment"># push 当前dev分支</span></span><br><span class="line">git push</span><br><span class="line"><span class="comment"># 查看分支间不同</span></span><br><span class="line">git diff master dev</span><br><span class="line">git merge dev master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 打轻量级标签</span></span><br><span class="line">git tag v0.1</span><br><span class="line"><span class="comment"># 附注标签</span></span><br><span class="line">git tag -a v1.4 -m <span class="string">"my version 1.4"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出标签</span></span><br><span class="line">git tag -l <span class="string">"v0.*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 commit 号</span></span><br><span class="line">git show v0.1</span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除tag</span></span><br><span class="line">git tag -d v0.1.2 </span><br><span class="line"><span class="comment"># 删除远程库</span></span><br><span class="line">git push origin :refs/tags/v0.1.2</span><br></pre></td></tr></table></figure>
<p><a href="https://gitee.com/" target="_blank" rel="noopener">gitee</a></p>
]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>APP抓取指南</title>
    <url>/2020/05/APP%E6%8A%93%E5%8F%96%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="fiddler-概念"><a href="#fiddler-概念" class="headerlink" title="fiddler 概念"></a>fiddler 概念</h2><ul>
<li>左面板-抓包面板</li>
<li>右面版-处理面<ul>
<li>Statistics统计页签</li>
<li>inspectors检查页签<ul>
<li>HTTP Request</li>
<li>HTTPResponse</li>
<li>AutoResponse自动响应页签<ul>
<li>修改服务器端返回的数据</li>
</ul>
</li>
<li>composer构建页签<ul>
<li>支持手动构建和发送HTTP， HTTPS和FTP请求</li>
</ul>
</li>
<li>Filters过滤页签<ul>
<li>可以标记、 修改或隐藏某些特征的数据流</li>
<li>REGEX 过滤</li>
</ul>
</li>
<li>Timeline时间轴页签<ul>
<li>网络请求时间的功能</li>
</ul>
</li>
</ul>
</li>
<li>Fiddler命令行工具<ul>
<li>help ： 打开官方的使用页面介绍， 所有的命令都会列出来</li>
<li>cls ： 清屏 (Ctrl+x 也可以清屏)</li>
<li>select ： 选择会话的命令， 选择所有相应类型select image、select css、select html</li>
<li>?sometext ： 查找字符串并高亮显示查找到的会话列表的条目，？qq.com</li>
<li><blockquote>
<p>size : 选择请求响应大小小于size字节的会话</p>
</blockquote>
</li>
<li>=status/=method/@host:查找状态、方法、主机相对应的session会话，=504，=get，@<a href="http://www.qq.com" target="_blank" rel="noopener">http://www.qq.com</a></li>
<li>quit：退出fiddler</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fiddler 是以代理web服务器的形式工作的</span></span><br></pre></td></tr></table></figure>
<h2 id="fiddler-配置使用"><a href="#fiddler-配置使用" class="headerlink" title="fiddler 配置使用"></a>fiddler 配置使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fiddler 用来截获APP报文，获取APP接口</span></span><br><span class="line"><span class="comment"># fiddler 抓取两种流量HTTP,HTTPS</span></span><br><span class="line">http 可以直接抓取</span><br><span class="line">https 需要使用证书</span><br><span class="line"></span><br><span class="line">client -&gt; http -&gt; fiddler -&gt;http -&gt; server</span><br><span class="line">client -&gt; https1 -&gt; fiddler -&gt; https2 -&gt; server</span><br><span class="line"></span><br><span class="line">https1 为 fiddler 为客户端签发的证书</span><br><span class="line">https2 为 server 为代理签发的证书</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手机</span></span><br><span class="line">Fiddler</span><br><span class="line">手机需要指定代理到 Fiddler</span><br><span class="line"></span><br><span class="line">Tool-&gt; options -&gt; https -&gt; decycpt https traffic</span><br><span class="line"><span class="comment"># 第一次勾选会提出安装提示。</span></span><br><span class="line">没有提示勾选 Actions-&gt;Trust Root Certificate</span><br><span class="line">通过 Actions -&gt; 可以 <span class="built_in">export</span> certificate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置代理端口 Connections -&gt; port</span></span><br><span class="line">Allow remote computers to connect</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 Fiddler 地址： ipconfig</span></span><br><span class="line">192.168.1.106</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手机修改代理配置</span></span><br><span class="line"><span class="comment"># 打开wifi -&gt;显示高级设置-&gt; 代理设置</span></span><br><span class="line">192.168.1.106 8888</span><br><span class="line"></span><br><span class="line"><span class="comment"># https 配置</span></span><br><span class="line">访问 http://192.168.1.106:8888 -&gt; 下载证书</span><br><span class="line">在 wifi 高级设置中安装证书</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟器使用（使用vitrualbox 构建）</span></span><br><span class="line">[逍遥](https://www.xyaz.cn/)</span><br><span class="line">夜游神</span><br><span class="line">mumu</span><br></pre></td></tr></table></figure>
<h2 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h2><p><a href="https://www.charlesproxy.com/documentation/installation/" target="_blank" rel="noopener">charles</a><br>Charles v4.1.4破解文件下载:<br>链接: <a href="https://pan.baidu.com/s/1sl5AeTJ密码" target="_blank" rel="noopener">https://pan.baidu.com/s/1sl5AeTJ密码</a>: cp7z<br>注：将文件名改为：charles.jar<br>Windows 平台,将下载的charles.jar文件覆盖到安装目录下的lib文件夹下即可完成破解!<br>Mac 平台,将下载的charles.jar文件右键 Charles.app 显示包内容,覆盖到Content-&gt;Java下即可完成破解!</p>
<p>安装证书<br>点击 Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate on a Mobile Device<br><a href="https://www.jianshu.com/p/666d0b30a330" target="_blank" rel="noopener">https://www.jianshu.com/p/666d0b30a330</a></p>
<h2 id="appium介绍"><a href="#appium介绍" class="headerlink" title="appium介绍"></a>appium介绍</h2><p>python-client -&gt; app-client -&gt; app-server -&gt;IOS|Android<br><a href="https://github.com/appium/python-client" target="_blank" rel="noopener">python-client</a></p>
<p><a href="https://www.luoxudong.com/306.html" target="_blank" rel="noopener">https://www.luoxudong.com/306.html</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Gitlab管理</title>
    <url>/2020/05/Gitlab/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://github.com/gitlabhq" target="_blank" rel="noopener">gitlib</a></li>
<li><a href="/2020/05/Gitlab/" title="Gitlab管理">Gitlab管理</a></li>
<li>
</li>
</ul>
<h2 id="概念-conceptual"><a href="#概念-conceptual" class="headerlink" title="概念 conceptual"></a>概念 conceptual</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git     <span class="comment"># 版本管理工具</span></span><br><span class="line">gitlib  <span class="comment"># 实现git功能的开发库</span></span><br><span class="line">githup  <span class="comment"># git 公有仓库</span></span><br><span class="line">gitlab  <span class="comment"># git 私有仓库</span></span><br></pre></td></tr></table></figure>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>nginx<br>gitlab-workhourse<br>gitlab-shell<br>logrotate<br>postgresql|mysql</p>
<h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><h3 id="设置新注册用户级别为外部"><a href="#设置新注册用户级别为外部" class="headerlink" title="设置新注册用户级别为外部"></a>设置新注册用户级别为外部</h3><p>admin-&gt; setting-&gt; account and limit -&gt; New users set to external</p>
<h3 id="添加一个新管理员用户"><a href="#添加一个新管理员用户" class="headerlink" title="添加一个新管理员用户"></a>添加一个新管理员用户</h3><p>删除默认管理员账号</p>
<h2 id="任务分配"><a href="#任务分配" class="headerlink" title="任务分配"></a>任务分配</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">议题：功能模块</span><br><span class="line">里程碑：功能模块的集合（开始日期，完成日期）</span><br><span class="line">  版本<span class="number">1.</span></span><br><span class="line">    list1 需要解决的问题（可以配置模板，）将问题指派给具体的执行人</span><br><span class="line">      标记的作用是分类</span><br><span class="line">    list2 </span><br><span class="line">  版本<span class="number">2.0</span></span><br><span class="line">  版本<span class="number">3.0</span></span><br></pre></td></tr></table></figure>
<h3 id="项目创建流程"><a href="#项目创建流程" class="headerlink" title="项目创建流程"></a>项目创建流程</h3><p>1、创建项目组<br>2、给组添加人员<br>3、创建项目</p>
<p>通过管理员工具 可以删除项目组、项目 、人员</p>
<h3 id="项目权限"><a href="#项目权限" class="headerlink" title="项目权限"></a>项目权限</h3><p>Private 私有的，只有你自己或者组内的成员能访问<br>Internal 所有登录的用户<br>Public 公开的，所有人都可以访问</p>
<h3 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h3><p>git仓库之间的代码传输协议主要使用ssh协议。<br>ssh-keygen -t rsa -C “$your_email”<br>cat ~/.ssh/id_rsa.pub</p>
<h3 id="创建-web-hook"><a href="#创建-web-hook" class="headerlink" title="创建 web-hook"></a>创建 web-hook</h3><ul>
<li><a href="https://docs.gitlab.com/ee/integration/jenkins.html#configure-the-jenkins-project" target="_blank" rel="noopener">gitlab CI/CD </a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 授权 jenkins 访问 gitlab 项目</span></span><br><span class="line">创建一个Gitlab用户或者选择一个存在的用户。</span><br><span class="line">对这个用户进行授权。（如果授权很多的gitlab项目，最好使用管理员授权）</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置 gitlab API</span></span><br><span class="line">用户 -&gt; setting -&gt; Access Tokens(侧边栏)</span><br><span class="line">创建一个 AT -&gt; 名字 -&gt; 有效期 -&gt; 授权范围（API）</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置 jenkins server</span></span><br><span class="line">在 jenkins 上配置 GitLab 插件。</span><br><span class="line">配置 jenkins 访问 gitlab 凭证</span><br><span class="line">Credentials -&gt; System -&gt; Global credentials -&gt; Add Credentials</span><br><span class="line"></span><br><span class="line">Manage Jenkins &gt; Configure System.</span><br><span class="line">-&gt; Enable authentication <span class="keyword">for</span> <span class="string">'/project'</span> end-point(勾选)</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置jenkins 项目</span></span><br><span class="line">新建一个 jenkins项目 -&gt; pipeline -&gt; general</span><br><span class="line">-&gt; GitHub project</span><br><span class="line"></span><br><span class="line">-&gt; build trigger </span><br><span class="line">Build when a change is pushed to GitLab. GitLab webhook（selected）</span><br><span class="line">URL: http://127.0.0.1:8080/project/youlv 这个地址是webhook地址，需要提供能gitlab</span><br><span class="line">advance -&gt; Secret token 这个token也需要提供给 gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置gitlab 项目</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#插件功能概览</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>网络维护</title>
    <url>/2020/05/%E7%BD%91%E7%BB%9C%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="网络维护概念"><a href="#网络维护概念" class="headerlink" title="网络维护概念"></a>网络维护概念</h2><ul>
<li>路由</li>
<li>交换</li>
<li>局域网组网</li>
<li>城域网</li>
<li>广域网技术</li>
<li>OSI 模型</li>
<li>TCP/IP 协议栈<ul>
<li>IPV4</li>
<li>IPV6</li>
</ul>
</li>
<li>网络协议</li>
<li>网络安全</li>
<li>隧道技术</li>
</ul>
<h2 id="网络维护实践"><a href="#网络维护实践" class="headerlink" title="网络维护实践"></a>网络维护实践</h2><a href="/2020/06/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/" title="华为交换机基本配置">华为交换机基本配置</a>
<h2 id="网络安全实践"><a href="#网络安全实践" class="headerlink" title="网络安全实践"></a>网络安全实践</h2><ul>
<li>攻击工具</li>
<li>防护策略</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>系统维护</title>
    <url>/2020/05/%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="系统维护概念"><a href="#系统维护概念" class="headerlink" title="系统维护概念"></a>系统维护概念</h1><ul>
<li>系统安装、升级</li>
<li>包管理</li>
<li>用户管理</li>
<li>脚本</li>
<li>批量作业</li>
<li>计划任务</li>
<li>负载管理</li>
</ul>
<h2 id="linux-系统维护"><a href="#linux-系统维护" class="headerlink" title="linux 系统维护"></a>linux 系统维护</h2><h2 id="windows-系统维护"><a href="#windows-系统维护" class="headerlink" title="windows 系统维护"></a>windows 系统维护</h2>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>容器技术</title>
    <url>/2020/05/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="容器技术概念"><a href="#容器技术概念" class="headerlink" title="容器技术概念"></a>容器技术概念</h2><ul>
<li>namespace隔离</li>
<li>分层文件系统 overlay</li>
<li>镜像</li>
<li>容器</li>
<li>编排</li>
</ul>
<h2 id="容器技术实践"><a href="#容器技术实践" class="headerlink" title="容器技术实践"></a>容器技术实践</h2><ul>
<li></li>
<li><a href="/2020/05/Docker/" title="Docker容器">Docker容器</a></li>
<li><a href="/2020/05/Docker%E5%AE%89%E8%A3%85/" title="Docker安装">Docker安装</a></li>
<li><a href="/2020/05/Harbor%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/" title="镜像仓库">镜像仓库</a></li>
<li><a href="/2020/05/Dockerfile/" title="制作镜像">制作镜像</a></li>
<li></li>
<li></li>
<li></li>
<li><a href="/2020/05/Rancher%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/" title="Rancher安装配置">Rancher安装配置</a></li>
<li></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>Elasticsearch集群管理</title>
    <url>/2020/05/Elasticsearch%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
  </entry>
  <entry>
    <title>Elasticsearch故障处理</title>
    <url>/2020/05/Elasticsearch%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kibana 日志报错 /var/log/message</span></span><br><span class="line">circuit_breaking_exception] [parent] Data too large, data <span class="keyword">for</span> [&lt;transport_request&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决：</span></span><br><span class="line">vi /etc/elasticsearch/jvm.options</span><br><span class="line">-Xms10g</span><br><span class="line">-Xmx10g</span><br><span class="line"></span><br><span class="line">systemctl restart elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># index-pattern 有问题，不出数。</span></span><br><span class="line"><span class="comment"># 重建一下index-pattern 就OK了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 indices 状态信息</span></span><br><span class="line">GET /_cat/indices/?v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 index-pattern id</span></span><br><span class="line">GET .kibana/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_source"</span>: [<span class="string">"index-pattern.title"</span>],</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"term"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"index-pattern"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取映射</span></span><br><span class="line">GET /engine-result/_mapping?pretty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重建索引</span></span><br><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"source"</span>: &#123;</span><br><span class="line">    <span class="string">"index"</span>: <span class="string">"map-test*"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dest"</span>: &#123;</span><br><span class="line">    <span class="string">"index"</span>: <span class="string">"new-index-test"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
  </entry>
  <entry>
    <title>ELK安装配置</title>
    <url>/2020/05/ELK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="base-configuration"><a href="#base-configuration" class="headerlink" title="base configuration"></a>base configuration</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/hosts</span><br><span class="line">192.168.0.130 elastic1</span><br><span class="line">192.168.0.131 elastic2</span><br><span class="line">192.168.0.132 elastic3</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id 192.168.0.130</span><br><span class="line">ssh-copy-id 192.168.0.131</span><br><span class="line">ssh-copy-id 192.168.0.133</span><br><span class="line"></span><br><span class="line">192.168.0.130 master</span><br><span class="line">192.168.0.131 node1</span><br><span class="line">192.168.0.132 node2</span><br><span class="line"></span><br><span class="line">yum -y install rsync&amp;&amp;/usr/bin/rsync -avzuP --delete --port=873 monitor@106.15.137.193::autosh /opt/autosh/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置资源限制</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"* soft nofile 65536</span></span><br><span class="line"><span class="string">* hard nofile 65536</span></span><br><span class="line"><span class="string">* soft nproc 32000</span></span><br><span class="line"><span class="string">* hard nproc 32000</span></span><br><span class="line"><span class="string">* hard memlock unlimited</span></span><br><span class="line"><span class="string">* soft memlock unlimited"</span>&gt;&gt;/etc/security/limits.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"DefaultLimitNOFILE=65536</span></span><br><span class="line"><span class="string">DefaultLimitNPROC=32000</span></span><br><span class="line"><span class="string">DefaultLimitMEMLOCK=infinity"</span>&gt;&gt; /etc/systemd/system.conf</span><br></pre></td></tr></table></figure>
<h2 id="easticsearch-Installation"><a href="#easticsearch-Installation" class="headerlink" title="easticsearch Installation"></a>easticsearch Installation</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入repo</span></span><br><span class="line"><span class="comment">#ssh 192.168.0.130 rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /etc/yum.repos.d/easticsearch-7.repo</span></span><br><span class="line">[elasticsearch-7.x]</span><br><span class="line">name=Elasticsearch repository <span class="keyword">for</span> 7.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/7.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他机器</span></span><br><span class="line">scp ./easticsearch-7.repo 192.168.0.130:/etc/yum.repos.d/</span><br><span class="line"><span class="comment"># rpm 安装</span></span><br><span class="line">ssh 192.168.0.130 yum -y install elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载安装</span></span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-x86_64.rpm</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-x86_64.rpm.sha512</span><br><span class="line">shasum -a 512 -c elasticsearch-7.2.0-x86_64.rpm.sha512</span><br><span class="line">rpm -ivh elasticsearch-7.2.0-x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单机配置</span></span><br><span class="line">path.data: /data/lib/elasticsearch</span><br><span class="line">path.logs: /data/<span class="built_in">log</span>/elasticsearch</span><br><span class="line"></span><br><span class="line">mkdir /data/lib/elasticsearch -p</span><br><span class="line">mkdir  /data/<span class="built_in">log</span>/elasticsearch -p</span><br></pre></td></tr></table></figure>
<h2 id="elasticsearch-配置"><a href="#elasticsearch-配置" class="headerlink" title="elasticsearch 配置"></a>elasticsearch 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/elasticsearch/elasticsearch.yml</span></span><br><span class="line"><span class="comment">#集群的名称</span></span><br><span class="line">cluster.name: yanqi-clusters</span><br><span class="line"><span class="comment">#节点的名称</span></span><br><span class="line">node.name: es-node-1</span><br><span class="line"><span class="comment">#是否有资格成为主节点</span></span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line"><span class="comment">#是否是数据节点</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line"><span class="comment">#数据和日志路径</span></span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/<span class="built_in">log</span>/elasticsearch</span><br><span class="line"><span class="comment">#设置访问的地址和端口</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。</span></span><br><span class="line">discovery.zen.ping.timeout: 3s</span><br><span class="line"><span class="comment">#设置是否打开多播发现节点，默认是true。</span></span><br><span class="line">discovery.zen.ping.multicast.enabled: <span class="literal">false</span></span><br><span class="line"><span class="comment">#集群地址设置</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"192.168.0.130"</span>,<span class="string">"192.168.0.131"</span>,<span class="string">"192.168.0.132"</span>]</span><br><span class="line"><span class="comment">#设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）</span></span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置集群中N个节点启动时进行数据恢复</span></span><br><span class="line">gateway.recover_after_nodes: 3</span><br><span class="line"><span class="comment">#设置初始化数据恢复进程的超时时间，默认是5分钟。</span></span><br><span class="line">gateway.recover_after_time: 5m</span><br><span class="line"><span class="comment">#初始化数据恢复时，并发恢复线程的个数，默认为4。</span></span><br><span class="line">cluster.routing.allocation.node_initial_primaries_recoveries: 4</span><br><span class="line"><span class="comment">#进行内存交换</span></span><br><span class="line">bootstrap.memory_lock: <span class="literal">true</span></span><br><span class="line"><span class="comment">#索引分片个数，默认为5片。</span></span><br><span class="line">index.number_of_shards: 5</span><br><span class="line"><span class="comment">#索引副本个数，默认为1个副本。</span></span><br><span class="line">index.number_of_replicas: 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是一些查询时的慢日志参数设置</span></span><br><span class="line">index.search.slowlog.level: TRACE</span><br><span class="line">index.search.slowlog.threshold.query.warn: 10s</span><br><span class="line">index.search.slowlog.threshold.query.info: 5s</span><br><span class="line">index.search.slowlog.threshold.query.debug: 2s</span><br><span class="line">index.search.slowlog.threshold.query.trace: 500ms</span><br><span class="line">index.search.slowlog.threshold.fetch.warn: 1s</span><br><span class="line">index.search.slowlog.threshold.fetch.info: 800ms</span><br><span class="line">index.search.slowlog.threshold.fetch.debug:500ms</span><br><span class="line">index.search.slowlog.threshold.fetch.trace: 200ms</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">cluster.name: my-application</span><br><span class="line">node.name: node-1</span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/<span class="built_in">log</span>/elasticsearch</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.seed_hosts: [<span class="string">"host1"</span>, <span class="string">"host2"</span>, <span class="string">"host3"</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"node-1"</span>, <span class="string">"node-2"</span>,<span class="string">"node-3"</span>]</span><br><span class="line">---</span><br><span class="line">cluster.name: my-application</span><br><span class="line">node.name: node-2</span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/<span class="built_in">log</span>/elasticsearch</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.seed_hosts: [<span class="string">"host1"</span>, <span class="string">"host2"</span>, <span class="string">"host3"</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"node-1"</span>, <span class="string">"node-2"</span>,<span class="string">"node-3"</span>]</span><br><span class="line">---</span><br><span class="line">cluster.name: my-application</span><br><span class="line">node.name: node-3</span><br><span class="line">path.data: /var/lib/elasticsearch</span><br><span class="line">path.logs: /var/<span class="built_in">log</span>/elasticsearch</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.seed_hosts: [<span class="string">"host1"</span>, <span class="string">"host2"</span>, <span class="string">"host3"</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"node-1"</span>, <span class="string">"node-2"</span>,<span class="string">"node-3"</span>]</span><br><span class="line">---</span><br><span class="line"><span class="comment"># 开启 Auth 认证功能</span></span><br><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> elasticsearch.service</span><br><span class="line">systemctl start elasticsearch.service</span><br><span class="line"></span><br><span class="line">/usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive</span><br><span class="line"></span><br><span class="line">sudo systemctl restart elasticsearch.service</span><br><span class="line">sudo systemctl restart kibana.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line"><span class="comment">#curl -XGET 'http://localhost:9200/_cluster/state?pretty'</span></span><br><span class="line">curl -XGET <span class="string">'localhost:9200/_cluster/health?pretty'</span></span><br><span class="line">curl -XGET <span class="string">"127.0.0.1:9200"</span></span><br><span class="line"></span><br><span class="line">elasticsearch-head</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/mobz/elasticsearch-head.git</span><br><span class="line"><span class="built_in">cd</span> elasticsearch-head</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br><span class="line">curl http://localhost:9100/</span><br></pre></td></tr></table></figure>
<h2 id="安装-kibana"><a href="#安装-kibana" class="headerlink" title="安装 kibana"></a>安装 kibana</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">yum -<span class="built_in">y</span> install kibana</span><br><span class="line"><span class="meta"># vim /etc/kibana/kibana.yml</span></span><br><span class="line"><span class="symbol">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="symbol">server.host:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="symbol">elasticsearch.hosts:</span> [<span class="string">"http://127.0.0.1:9200"</span>]</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable kibana.service</span><br><span class="line">sudo systemctl start kibana.service</span><br></pre></td></tr></table></figure>
<h2 id="安装分词插件"><a href="#安装分词插件" class="headerlink" title="安装分词插件"></a>安装分词插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/share/elasticsearch/bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.3.2/elasticsearch-analysis-ik-6.3.2.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志查看</span></span><br><span class="line">tail -200f /var/<span class="built_in">log</span>/elasticsearch/yanqi-clusters.log</span><br></pre></td></tr></table></figure>
<h2 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://www.elastic.co/downloads/logstash</span><br><span class="line">yum install logstash</span><br><span class="line"></span><br><span class="line">bin/logstash -f logstash-simple.conf</span><br><span class="line"></span><br><span class="line">input &#123; stdin &#123; &#125; &#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123; hosts =&gt; [<span class="string">"localhost:9200"</span>] &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bin/logstash -e <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></span><br><span class="line">stdout &#123; codec =&gt; rubydebug &#125;的意思是输出到控制台</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; <span class="string">"5044"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;COMBINEDAPACHELOG&#125;"</span>&#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line"></span><br><span class="line">    stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br><span class="line">----</span><br><span class="line"> elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [ <span class="string">"localhost:9200"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">geoip &#123;</span><br><span class="line">        <span class="built_in">source</span> =&gt; <span class="string">"clientip"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bin/logstash -f logstash.conf</span><br></pre></td></tr></table></figure>
<h2 id="filebeat-安装"><a href="#filebeat-安装" class="headerlink" title="filebeat 安装"></a>filebeat 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># filebeat -&gt; logstash -&gt; elasticsearch</span></span><br><span class="line"><span class="comment"># https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-x86_64.rpm</span></span><br><span class="line">rpm -ivh https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-x86_64.rpm</span><br><span class="line">rpm -ivh filebeat-7.2.0-x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim filebeat.yml</span></span><br><span class="line">---</span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">false</span></span><br><span class="line">  paths:</span><br><span class="line">    - /data/<span class="built_in">log</span>/java_web/ota-whitelist-service/ota-whitelist-service.2019-07-05.log</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line">  reload.enabled: <span class="literal">false</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">setup.kibana:</span><br><span class="line">  host: <span class="string">"119.84.8.41:6117"</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">"119.84.8.41:6116"</span>]</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"119.84.8.41:6118"</span>]</span><br><span class="line"><span class="comment">#processors:</span></span><br><span class="line"><span class="comment">#  - add_host_metadata: ~</span></span><br><span class="line"><span class="comment">#  - add_cloud_metadata: ~</span></span><br><span class="line"></span><br><span class="line">systemctl  start filebeat</span><br><span class="line"></span><br><span class="line"><span class="comment"># filebeat -e 直接输出到控制台</span></span><br><span class="line">./filebeat -e -c filebeat.yml -d <span class="string">"publish"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出到 elasticsearch</span></span><br><span class="line">filebeat setup -e \</span><br><span class="line">  -E output.logstash.enabled=<span class="literal">false</span> \</span><br><span class="line">  -E output.elasticsearch.hosts=[<span class="string">"119.84.8.41:6116"</span>] \</span><br><span class="line">  -E setup.kibana.host=119.84.8.41:6117</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">./filebeat setup --template -E output.logstash.enabled=<span class="literal">false</span> \</span><br><span class="line">-E <span class="string">'output.elasticsearch.hosts=["119.84.8.41:6116"]'</span></span><br></pre></td></tr></table></figure>
<h2 id="elasticsearch-head-插件"><a href="#elasticsearch-head-插件" class="headerlink" title="elasticsearch-head 插件"></a>elasticsearch-head 插件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">https://github.com/mobz/elasticsearch-head</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">git://github.com/mobz/elasticsearch-head.git</span></span><br><span class="line"><span class="string">cd</span> <span class="string">elasticsearch-head</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="string">npm</span> <span class="string">run</span> <span class="string">start</span></span><br><span class="line"></span><br><span class="line"><span class="string">grunt</span> <span class="string">server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">http.cors.allow-credentials:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http://192.168.0.130:9200 点击连接</span></span><br><span class="line"></span><br><span class="line"><span class="number">2019</span><span class="number">-07</span><span class="number">-05</span> <span class="number">00</span><span class="string">:23:32.965</span> <span class="string">INFO</span>  <span class="bullet">-</span> <span class="string">status:1,time:1947ms,request:KUL-SGN|20190815/|ctripDirect2016331|ABUS_F@IU3D|162257411018198086|1785362763|1</span></span><br><span class="line"></span><br><span class="line"><span class="string">"<span class="template-variable">%&#123;DATA:date&#125;</span> <span class="template-variable">%&#123;DATA:time&#125;</span> <span class="template-variable">%&#123;DATA:level&#125;</span> <span class="template-variable">%&#123;DATA:-&#125;</span> <span class="template-variable">%&#123;DATA:status&#125;</span>,<span class="template-variable">%&#123;DATA:delay&#125;</span>,<span class="template-variable">%&#123;DATA:airline&#125;</span>"</span><span class="string">|%&#123;DATA:startdt&#125;|%&#123;DATA:cid&#125;|%&#123;DATA:ipcc&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DATA是logstash定义好的正则</span></span><br><span class="line"></span><br><span class="line"><span class="string">overwrite</span> <span class="string">=&gt;</span> <span class="string">["message"]</span></span><br><span class="line"><span class="string">remove_field</span>  <span class="string">=&gt;</span> <span class="string">"message"</span></span><br><span class="line"><span class="string">add_field</span> <span class="string">=&gt;</span> <span class="string">&#123;</span> <span class="string">"shortHostname"</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;hostname[0]&#125;</span>"</span> <span class="string">&#125;</span></span><br><span class="line"><span class="string">rename</span> <span class="string">=&gt;</span> <span class="string">["shortHostname",</span> <span class="string">"hostname"</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://doc.yonyoucloud.com/doc/logstash-best-practice-cn/filter/grok.html</span></span><br><span class="line"><span class="comment"># http://grokdebug.herokuapp.com/</span></span><br><span class="line">match =&gt; [</span><br><span class="line">    <span class="string">"message"</span>, <span class="string">"(?&lt;request_time&gt;\d+(?:\.\d+)?)"</span>,</span><br><span class="line">    <span class="string">"message"</span>, <span class="string">"%&#123;SYSLOGBASE&#125; %&#123;DATA:message&#125;"</span>,</span><br><span class="line">    <span class="string">"message"</span>, <span class="string">"(?m)%&#123;WORD&#125;"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"input"</span> =&gt; &#123;</span><br><span class="line">        <span class="string">"type"</span> =&gt; <span class="string">"log"</span></span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="string">"date"</span> =&gt; <span class="string">"2019-07-05"</span>,</span><br><span class="line">     <span class="string">"time"</span> =&gt; <span class="string">"00:24:32.708"</span>,</span><br><span class="line">     <span class="string">"tags"</span> =&gt; [</span><br><span class="line">        [0] <span class="string">"beats_input_codec_plain_applied"</span></span><br><span class="line">    ],</span><br><span class="line">     <span class="string">"host"</span> =&gt; &#123;</span><br><span class="line">        <span class="string">"name"</span> =&gt; <span class="string">"xc1-1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="string">"log"</span> =&gt; &#123;</span><br><span class="line">        <span class="string">"offset"</span> =&gt; 27560723,</span><br><span class="line">          <span class="string">"file"</span> =&gt; &#123;</span><br><span class="line">            <span class="string">"path"</span> =&gt; <span class="string">"/data/log/java_web/ota-whitelist-service/ota-whitelist-service.2019-07-05.log"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="string">"ecs"</span> =&gt; &#123;</span><br><span class="line">        <span class="string">"version"</span> =&gt; <span class="string">"1.0.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; <span class="string">"5044"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok&#123;</span><br><span class="line">        remove_field =&gt;<span class="string">"@timestamp"</span></span><br><span class="line">        remove_field =&gt;<span class="string">"log"</span></span><br><span class="line">        remove_field =&gt;<span class="string">"input"</span></span><br><span class="line">        remove_field =&gt;<span class="string">"tag"</span></span><br><span class="line">        remove_field =&gt;<span class="string">"ecs"</span></span><br><span class="line">        remove_field =&gt;<span class="string">"tags"</span></span><br><span class="line">        remove_field =&gt; <span class="string">"agent"</span></span><br><span class="line">        remove_field =&gt;<span class="string">"@version"</span></span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">            <span class="string">"message"</span> =&gt; <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        index =&gt; <span class="string">"whitelog"</span></span><br><span class="line">        hosts =&gt; [ <span class="string">"119.84.8.41:6116"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-linux-x86_64.tar.gz</span><br><span class="line">tar -xvf elasticsearch-7.2.0-linux-x86_64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> elasticsearch-7.2.0/bin</span><br><span class="line">./elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配</span></span><br><span class="line"><span class="string">"patterns"</span>: [<span class="string">"%&#123;IP:client&#125; %&#123;WORD:method&#125; %&#123;URIPATHPARAM:request&#125; %&#123;NUMBER:bytes&#125; %&#123;NUMBER:duration&#125;"</span>],</span><br></pre></td></tr></table></figure>
<h2 id="ingest-对数据分字段"><a href="#ingest-对数据分字段" class="headerlink" title="ingest 对数据分字段"></a>ingest 对数据分字段</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建个pipeline</span></span><br><span class="line">curl -H <span class="string">'Content-Type: application/json'</span> -XPUT <span class="string">'http://119.84.8.41:6116/_ingest/pipeline/test-pipeline'</span> -d@pipeline.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"description"</span> : <span class="string">"test desc"</span>,</span><br><span class="line">  <span class="string">"processors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"grok"</span>: &#123;</span><br><span class="line"><span class="string">"field"</span>: <span class="string">"message"</span>,</span><br><span class="line">        <span class="string">"patterns"</span>: [<span class="string">"au_:%&#123;NUMBER:au_&#125;  9c_:%&#123;NUMBER:9c_&#125;  lcbx_f:%&#123;NUMBER:lcbx_f&#125;  lcjc_f:%&#123;NUMBER:lcjc_f&#125;  lcmm_f:%&#123;NUMBER:lcmm_f&#125;  lc6e_f:%&#123;NUMBER:lc6e_f&#125;  lcae_f:%&#123;NUMBER:lcae_f&#125;  lcub_f:%&#123;NUMBER:lcub_f&#125;  lc5j_f:%&#123;NUMBER:lc5j_f&#125;  lcij_f:%&#123;NUMBER:lcij_f&#125;  lcsg_f:%&#123;NUMBER:lcsg_f&#125;  lcfr_f:%&#123;NUMBER:lcfr_f&#125;  lcsl_f:%&#123;NUMBER:lcsl_f&#125;  lcbs_f:%&#123;NUMBER:lcbs_f&#125;  lcvj_f:%&#123;NUMBER:lcvj_f&#125;  vtae:%&#123;NUMBER:vtae&#125;  lcjt_f:%&#123;NUMBER:lcjt_f&#125; "</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"remove"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: [<span class="string">"agent"</span>, <span class="string">"log"</span>,<span class="string">"message"</span>,<span class="string">"ecs"</span>,<span class="string">"host"</span>,<span class="string">"input"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">"convert"</span> : &#123;</span><br><span class="line">        <span class="string">"field"</span> : <span class="string">"au_"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
  </entry>
  <entry>
    <title>使用flask_admin快速构建后台框架</title>
    <url>/2020/05/%E4%BD%BF%E7%94%A8flask-admin%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E5%90%8E%E5%8F%B0%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></span><br><span class="line">    MYSQLURI = <span class="string">'mysql+pymysql://yanqi:Bdp_288@127.0.0.1:3306/deployadmin?charset=utf8mb4&amp;autocommit=true'</span></span><br></pre></td></tr></table></figure>
<h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line"><span class="keyword">from</span> flask_admin <span class="keyword">import</span> Admin,BaseView,expose</span><br><span class="line"><span class="keyword">from</span> flask_admin.contrib.sqla <span class="keyword">import</span> ModelView</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_admin.contrib <span class="keyword">import</span> sqla</span><br><span class="line"><span class="keyword">from</span> flask_babelex <span class="keyword">import</span> Babel</span><br><span class="line"><span class="keyword">from</span> manager <span class="keyword">import</span> (CataHost,SysMenu,SysHost,SysSer)</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 app</span></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">'templates'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create dummy secrey key so we can use sessions</span></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'123456790'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 国际化</span></span><br><span class="line">babel = Babel(app)</span><br><span class="line">app.config[<span class="string">'BABEL_DEFAULT_LOCALE'</span>] = <span class="string">'zh_CN'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create database</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = Config.MYSQLURI</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_ECHO'</span>] = <span class="literal">True</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set optional bootswatch theme</span></span><br><span class="line">app.config[<span class="string">'FLASK_ADMIN_SWATCH'</span>] = <span class="string">'cerulean'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add administrative views here</span></span><br><span class="line">admin = Admin(app,name=<span class="string">u'后台管理系统'</span>, template_mode=<span class="string">'bootstrap3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里类似于app.route()，处理url请求</span></span><br><span class="line"><span class="comment"># 普通视图</span></span><br><span class="line"><span class="comment"># class MyView(BaseView):</span></span><br><span class="line"><span class="comment">#     @expose('/')</span></span><br><span class="line"><span class="comment">#     def index(self):</span></span><br><span class="line"><span class="comment">#         return self.render('myview.html')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制数据库模型视图</span></span><br><span class="line"><span class="comment"># 在这里初始化Flask Flask-SQLAlchemy Flask-Admin</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SysMenuModelView</span><span class="params">(sqla.ModelView)</span>:</span></span><br><span class="line">    <span class="comment"># 这三个变量定义管理员是否可以增删改，默认为True</span></span><br><span class="line">    <span class="comment"># can_delete = False</span></span><br><span class="line">    <span class="comment"># can_edit = False</span></span><br><span class="line">    <span class="comment"># can_create = False</span></span><br><span class="line">    <span class="comment"># 分页</span></span><br><span class="line">    page_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里是为了自定义显示的column名字</span></span><br><span class="line">    column_labels = dict(</span><br><span class="line">        name=<span class="string">u'名称'</span>,</span><br><span class="line">        alias_name=<span class="string">u'别称'</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果不想显示某些字段，可以重载这个变量</span></span><br><span class="line">    column_exclude_list = (</span><br><span class="line">        <span class="string">'password'</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 认证</span></span><br><span class="line">    <span class="comment"># def is_accessible(self):</span></span><br><span class="line">    <span class="comment">#     return login.current_user.is_authenticated</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HostModelView</span><span class="params">(sqla.ModelView)</span>:</span></span><br><span class="line">    page_size = <span class="number">100</span></span><br><span class="line">    column_labels = dict(</span><br><span class="line">        hostname=<span class="string">u'主机名'</span>,</span><br><span class="line">        innerip=<span class="string">u'内网IP'</span>,</span><br><span class="line">    )</span><br><span class="line">    column_sortable_list = (<span class="string">'hostname'</span>, <span class="string">'innerip'</span>,<span class="string">'outerip'</span>,<span class="string">'memtotal'</span>,<span class="string">'cpucore'</span>)</span><br><span class="line">    column_exclude_list = (</span><br><span class="line">        <span class="string">'password'</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 是否显示主键</span></span><br><span class="line">    <span class="comment"># column_display_pk = True</span></span><br><span class="line">    column_editable_list = (<span class="string">'status'</span>,<span class="string">'cpucore'</span>,<span class="string">'outerip'</span>)</span><br><span class="line">    column_searchable_list = (<span class="string">'hostname'</span>, <span class="string">'innerip'</span>,<span class="string">'outerip'</span>)</span><br><span class="line">    can_export = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    column_list = (<span class="string">'hostname'</span>, <span class="string">'innerip'</span>,<span class="string">'outerip'</span>,<span class="string">'memtotal'</span>,<span class="string">'cpucore'</span>,<span class="string">'status'</span>)</span><br><span class="line">    <span class="comment"># 如果不想显示某些字段，可以重载这个变量</span></span><br><span class="line">    column_exclude_list = (</span><br><span class="line">        <span class="string">'password'</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CataHostModelView</span><span class="params">(sqla.ModelView)</span>:</span></span><br><span class="line">    page_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SysSerModelView</span><span class="params">(sqla.ModelView)</span>:</span></span><br><span class="line">    page_size = <span class="number">200</span></span><br><span class="line">    column_labels = dict(</span><br><span class="line">        businesstype=<span class="string">u'业务类型'</span>,</span><br><span class="line">        innerip=<span class="string">u'内网IP'</span>,</span><br><span class="line">        outurl=<span class="string">u'外网地址'</span>,</span><br><span class="line">        remark=<span class="string">u'备注'</span>,</span><br><span class="line">        hostname=<span class="string">u'主机名'</span>,</span><br><span class="line">    )</span><br><span class="line">    column_sortable_list = (<span class="string">'otasite'</span>,<span class="string">'outurl'</span>,<span class="string">'ipcc'</span>,<span class="string">'cid'</span>,<span class="string">'sername'</span>,<span class="string">'innerip'</span>)</span><br><span class="line">    column_exclude_list = (</span><br><span class="line">        <span class="string">'password'</span>,</span><br><span class="line">    )</span><br><span class="line">    column_editable_list = (<span class="string">'otasite'</span>,<span class="string">'outurl'</span>,<span class="string">'ipcc'</span>,<span class="string">'cid'</span>,<span class="string">'businesstype'</span>,<span class="string">'remark'</span>)</span><br><span class="line">    column_searchable_list = (<span class="string">'hostname'</span>,<span class="string">'otasite'</span>,<span class="string">'outurl'</span>,<span class="string">'ipcc'</span>,<span class="string">'cid'</span>,<span class="string">'appname'</span>,<span class="string">'innerip'</span>,<span class="string">'sername'</span>)</span><br><span class="line">    can_export = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装载视图</span></span><br><span class="line"><span class="comment"># admin.add_view(MyView(name='myview', endpoint='myview'))</span></span><br><span class="line">admin.add_view(SysMenuModelView(SysMenu, db.session,name=<span class="string">u'导航管理'</span>, category=<span class="string">u'资源管理'</span>))</span><br><span class="line">admin.add_view(HostModelView(SysHost, db.session,name=<span class="string">u'主机管理'</span>, category=<span class="string">u'资源管理'</span>))</span><br><span class="line">admin.add_view(CataHostModelView(CataHost, db.session,name=<span class="string">u'主机分组'</span>, category=<span class="string">u'资源管理'</span>))</span><br><span class="line">admin.add_view(SysSerModelView(SysSer, db.session,name=<span class="string">u'服务管理'</span>, category=<span class="string">u'资源管理'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件上传</span></span><br><span class="line"><span class="keyword">from</span> flask_admin.contrib.fileadmin <span class="keyword">import</span> FileAdmin</span><br><span class="line"><span class="keyword">import</span> os.path <span class="keyword">as</span> op</span><br><span class="line">file_path = op.join(op.dirname(__file__), <span class="string">'static'</span>)</span><br><span class="line">admin.add_view(FileAdmin(file_path, <span class="string">'/temp/'</span>, name=<span class="string">'文件'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">8088</span>)</span><br></pre></td></tr></table></figure>
<h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate, MigrateCommand</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = Config.MYSQLURI</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_ECHO'</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line">manager.add_command(<span class="string">'db'</span>, MigrateCommand)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建导航表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SysMenu</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    alias_name = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    link = db.Column(db.String(<span class="number">1024</span>))</span><br><span class="line">    status = db.Column(db.INTEGER, default=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机分组表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CataHost</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    cataname = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    aliasname = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    pid = db.Column(db.INTEGER,default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.cataname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建主机表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SysHost</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    hostname = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    innerip = db.Column(db.String(<span class="number">18</span>))</span><br><span class="line">    loadavg = db.Column(db.FLOAT)</span><br><span class="line">    memuse = db.Column(db.FLOAT)</span><br><span class="line">    ethnet0 = db.Column(db.INTEGER)</span><br><span class="line">    ethnet1 = db.Column(db.INTEGER)</span><br><span class="line">    tcptotal = db.Column(db.INTEGER)</span><br><span class="line">    outerip = db.Column(db.String(<span class="number">18</span>))</span><br><span class="line">    memtotal = db.Column(db.INTEGER)</span><br><span class="line">    cpucore = db.Column(db.INTEGER)</span><br><span class="line">    uptime = db.Column(db.DateTime)</span><br><span class="line">    status = db.Column(db.INTEGER, default=<span class="number">1</span>)</span><br><span class="line">    cataid = db.Column(db.INTEGER,db.ForeignKey(<span class="string">'cata_host.id'</span>))</span><br><span class="line">    cata = db.relationship(<span class="string">"CataHost"</span>, backref=db.backref(<span class="string">'hostname'</span>,lazy=<span class="string">'dynamic'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    __table_args__ = (</span><br><span class="line">        db.UniqueConstraint(<span class="string">'hostname'</span>, <span class="string">'innerip'</span>, name=<span class="string">'hostname_innerip'</span>),</span><br><span class="line">        db.Index(<span class="string">'hostname_innerip'</span>, <span class="string">'hostname'</span>, <span class="string">'innerip'</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SysSer</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    otasite = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    cid = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    outurl = db.Column(db.String(<span class="number">200</span>))</span><br><span class="line">    businesstype = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    ipcc = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    sername = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    hostname = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    innerip = db.Column(db.String(<span class="number">18</span>))</span><br><span class="line">    appname = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    port = db.Column(db.INTEGER)</span><br><span class="line">    remark = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">    __table_args__ = (</span><br><span class="line">        db.UniqueConstraint(<span class="string">'sername'</span>, <span class="string">'innerip'</span>, name=<span class="string">'sername_innerip'</span>),</span><br><span class="line">        db.Index(<span class="string">'sername_innerip'</span>, <span class="string">'sername'</span>, <span class="string">'innerip'</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.sername</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统日志</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Syslog</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    cur_date = db.Column(db.DateTime)</span><br><span class="line">    user = db.Column(db.String(<span class="number">100</span>) )</span><br><span class="line">    utype = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    event = db.Column(db.TEXT )</span><br><span class="line"></span><br><span class="line"><span class="comment"># migrate_tab</span></span><br><span class="line"><span class="comment"># class AlembicVersion(db.Model):</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_db</span><span class="params">()</span>:</span></span><br><span class="line">    db.drop_all()</span><br><span class="line">    db.create_all()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deltab</span> <span class="params">(tabname)</span>:</span></span><br><span class="line">    db.session.delete(tabname)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># $ python manage.py db init</span></span><br><span class="line"><span class="comment"># $ python manage.py db migrate</span></span><br><span class="line"><span class="comment"># $ python manage.py db upgrade 第一次会创建表</span></span><br><span class="line"><span class="comment"># $ python manage.py db --help</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>golang微服务</title>
    <url>/2020/05/golang%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="golang-微服务"><a href="#golang-微服务" class="headerlink" title="golang 微服务"></a>golang 微服务</h2><ul>
<li>go-micro</li>
<li>Protobuf</li>
<li>Etcd</li>
</ul>
<p>Install go-micro<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"/Users/alert/go"</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=<span class="string">"/usr/local/go"</span></span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.io</span><br><span class="line"><span class="comment"># enable go modules</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GO111MODULE=on</span><br><span class="line"><span class="comment"># initialise go modules in your app</span></span><br><span class="line">go mod init</span><br><span class="line"><span class="comment"># now go get</span></span><br><span class="line"></span><br><span class="line">go get github.com/micro/protoc-gen-micro/v2</span><br></pre></td></tr></table></figure></p>
<h1 id="INSTALL-Protobuf"><a href="#INSTALL-Protobuf" class="headerlink" title="INSTALL Protobuf"></a>INSTALL Protobuf</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/protocolbuffers/protobuf/releases/download/v3.11.4/protoc-3.11.4-osx-x86_64.zip</span><br><span class="line"><span class="built_in">cd</span> protoc-3.6.1-osx-x86_64</span><br><span class="line">cp -r include/ /usr/<span class="built_in">local</span>/include/</span><br><span class="line">cp -r bin/ /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">protoc</span><br><span class="line"></span><br><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class="line">protoc --proto_path=<span class="variable">$GOPATH</span>/src:. --micro_out=. --go_out=. greeter.proto</span><br></pre></td></tr></table></figure>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├──<span class="built_in"> client </span> # 客户端</span><br><span class="line">│   ├── client</span><br><span class="line">│   └── client.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├──<span class="built_in"> server </span> # 服务端</span><br><span class="line">│   ├── server</span><br><span class="line">│   └── server.go</span><br><span class="line">└──<span class="built_in"> service </span># 协议</span><br><span class="line">    ├── greeter.pb.go</span><br><span class="line">    ├── greeter.pb.micro.go</span><br><span class="line">    └── greeter.proto</span><br></pre></td></tr></table></figure>
<h3 id="生成协议-Proto"><a href="#生成协议-Proto" class="headerlink" title="生成协议 Proto"></a>生成协议 Proto</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">protoc --proto_path=<span class="variable">$GOPATH</span>/src:. --micro_out=. --go_out=. path/to/greeter.proto</span><br></pre></td></tr></table></figure>
<h3 id="创建服务端"><a href="#创建服务端" class="headerlink" title="创建服务端"></a>创建服务端</h3><blockquote>
<p>server -&gt; server.go<br><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">	micro <span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line">	proto <span class="string">"mygomicro/service"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Greeter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Greeter)</span> <span class="title">Hello</span><span class="params">(ctx context.Context, req *proto.Request, rsp *proto.Response)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	rsp.Greeting = <span class="string">"Hello "</span> + req.Name</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Create a new service. Optionally include some options here.</span></span><br><span class="line">	service := micro.NewService(</span><br><span class="line">		micro.Name(<span class="string">"greeter"</span>),</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Init will parse the command line flags.</span></span><br><span class="line">	service.Init()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Register handler</span></span><br><span class="line">	proto.RegisterGreeterHandler(service.Server(), <span class="built_in">new</span>(Greeter))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Run the server</span></span><br><span class="line">	<span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="创建客户端"><a href="#创建客户端" class="headerlink" title="创建客户端"></a>创建客户端</h3><blockquote>
<p>client -&gt; client.go<br><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">	micro <span class="string">"github.com/micro/go-micro/v2"</span></span><br><span class="line">	proto <span class="string">"mygomicro/service"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Create a new service</span></span><br><span class="line">	service := micro.NewService(micro.Name(<span class="string">"greeter.client"</span>))</span><br><span class="line">	<span class="comment">// Initialise the client and parse command line flags</span></span><br><span class="line">	service.Init()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create new greeter client</span></span><br><span class="line">	greeter := proto.NewGreeterService(<span class="string">"greeter"</span>, service.Client())</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Call the greeter</span></span><br><span class="line">	rsp, err := greeter.Hello(context.TODO(), &amp;proto.Request&#123;Name: <span class="string">"John"</span>&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Print response</span></span><br><span class="line">	fmt.Println(rsp.Greeting)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="Run-Service"><a href="#Run-Service" class="headerlink" title="Run Service"></a>Run Service</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行服务端</span></span><br><span class="line">go run server.go</span><br><span class="line"><span class="comment"># 运行客户端</span></span><br><span class="line">go run client.go</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>go-micro</tag>
      </tags>
  </entry>
  <entry>
    <title>为blog加速</title>
    <url>/2020/05/%E4%B8%BAblog%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用-git-page-做一个免费的blog"><a href="#使用-git-page-做一个免费的blog" class="headerlink" title="使用 git page 做一个免费的blog"></a>使用 git page 做一个免费的blog</h2><a href="/2020/05/hexo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/" title="gitpage blog搭建">gitpage blog搭建</a>
<h2 id="注册一个自己的域名"><a href="#注册一个自己的域名" class="headerlink" title="注册一个自己的域名"></a>注册一个自己的域名</h2><p><a href="https://my.freenom.com" target="_blank" rel="noopener">freenom</a><br>去 freenom 注册一个自己的域名<br>网站有点卡，可以尝试多试几次。<br>management tools -&gt; nameservers -&gt; Use custom nameservers (enter below)-&gt;<br>把 dnspod 的 ns 地址填进去即可</p>
<h2 id="使用-dnspod-进行域名解析"><a href="#使用-dnspod-进行域名解析" class="headerlink" title="使用 dnspod 进行域名解析"></a>使用 dnspod 进行域名解析</h2><p><a href="https://www.dnspod.cn/Products/DNS" target="_blank" rel="noopener">dns pod </a><br>控制台-&gt;添加域名-&gt;输入新注册的域名-&gt;点入域名-&gt; 把ns地址粘到 freenom 中。<br>-&gt; 点击刷新 -&gt; 一会就生效</p>
<h2 id="在-GitHub-中配置域名"><a href="#在-GitHub-中配置域名" class="headerlink" title="在 GitHub 中配置域名"></a>在 GitHub 中配置域名</h2><p><a href="https://help.github.com/cn/github/working-with-github-pages/about-custom-domains-and-github-pages" target="_blank" rel="noopener">github page 添加自定义域名的方法</a><br>repo-&gt;setting-&gt;GitHub Pages -&gt;Custom domain-&gt; blog.yanqi.cf（我申请的域名）<br>保存会在repo 里生成一个 CNAME 文件<br>需要把这个文件写到 hexo 主题下，否则每次发布都会覆盖库的文件<br>echo “blog.yanqi.cf” &gt;themes/next/source/CNAME</p>
<h2 id="添加-CNAME类型-DNS-解析"><a href="#添加-CNAME类型-DNS-解析" class="headerlink" title="添加 CNAME类型 DNS 解析"></a>添加 CNAME类型 DNS 解析</h2><p>blog CNAME blyanqi.github.io</p>
<h2 id="修改-hexo-配置"><a href="#修改-hexo-配置" class="headerlink" title="修改 hexo 配置"></a>修改 hexo 配置</h2><p>url: <a href="http://blog.yanqi.cf/">http://blog.yanqi.cf/</a><br>root: /</p>
<h2 id="为-blog-添加统计分析"><a href="#为-blog-添加统计分析" class="headerlink" title="为 blog 添加统计分析"></a>为 blog 添加统计分析</h2><p>使用百度统计</p>
<p>添加网站-&gt; 获取代码<br>blog.yanqi.cf<br><a href="https://blog.yanqi.cf/index.html">https://blog.yanqi.cf/index.html</a></p>
<p>获取key,把这一行？后的key 添加到主题配置文件<br>hm.src = “<a href="https://hm.baidu.com/hm.js?" target="_blank" rel="noopener">https://hm.baidu.com/hm.js?</a>“;</p>
<p>修改主题配置文件  themes/next/_config.yml<br>baidu_analytics: ‘829697829f3xxxxxxx’</p>
<p>修改百度分析文件<br>themes/next/layout/_third-party/analytics/baidu-analytics.njk<br>直接把代码复制到这个文件，否则直接加key。百度统计检查不出来。</p>
<p>通过浏览器devtools查看<br>有一个hm.js，三个hm.gif文件</p>
<h2 id="Baidu-Analytics"><a href="#Baidu-Analytics" class="headerlink" title="Baidu Analytics"></a>Baidu Analytics</h2><p>获取代码<br>查看报告 -&gt; 查看实时报告</p>
<h2 id="更新，发布"><a href="#更新，发布" class="headerlink" title="更新，发布"></a>更新，发布</h2><p>hexo clean<br>hexo d</p>
<h2 id="生成站点地图"><a href="#生成站点地图" class="headerlink" title="生成站点地图"></a>生成站点地图</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install hexo-generator-sitemap</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install hexo-generator-baidu-sitemap --save</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">_config.yml</span></span><br><span class="line">  <span class="attr">sitemap</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>
<h2 id="在线生成站点地图"><a href="#在线生成站点地图" class="headerlink" title="在线生成站点地图"></a>在线生成站点地图</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">http<span class="variable">s:</span>//<span class="keyword">help</span>.bj.<span class="keyword">cn</span>/</span><br><span class="line"></span><br><span class="line">把生成的文件下载到 themes/<span class="keyword">next</span>/<span class="keyword">source</span>/</span><br></pre></td></tr></table></figure>
<h2 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">npm</span> <span class="string">install hexo-baidu-url-submit --save</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="attr">baidu_url_submit</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">count</span>: <span class="string">100</span></span><br><span class="line">  <span class="attr">host</span>: <span class="string">blog.yanqi.cf</span></span><br><span class="line">  <span class="attr">token</span>: <span class="string">8OGYxxxxxx</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">baidu_urls.txt #文档的地址， 新链接会保存在此文本文档里</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy</span>:<span class="string"></span></span><br><span class="line"> <span class="meta">-</span> <span class="string">type:baidu_url_submitter</span></span><br></pre></td></tr></table></figure>
<h2 id="在线提交"><a href="#在线提交" class="headerlink" title="在线提交"></a>在线提交</h2><p><a href="http://www.sousuoyinqingtijiao.com/" target="_blank" rel="noopener">搜索引擎在线提交</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Dockerfile</title>
    <url>/2020/05/Dockerfile/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://hub.docker.com/" target="_blank" rel="noopener"> docker hub </a></p>
<h2 id="Dockerfile-指令"><a href="#Dockerfile-指令" class="headerlink" title="Dockerfile 指令"></a>Dockerfile 指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FROM：指定基础镜像，必须为第一个命令</span></span><br><span class="line"><span class="comment"># MAINTAINER: 维护者信息</span></span><br><span class="line">LABEL maintainer=blyanqi@163.com</span><br><span class="line"><span class="comment"># RUN：构建镜像时执行的命令</span></span><br><span class="line"><span class="comment"># ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</span></span><br><span class="line"><span class="comment"># COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</span></span><br><span class="line"><span class="comment"># CMD：构建容器后调用，也就是在容器启动时才进行调用。</span></span><br><span class="line"><span class="comment"># ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去"application"，只使用参数。</span></span><br><span class="line"><span class="comment"># LABEL：用于为镜像添加元数据</span></span><br><span class="line"><span class="comment"># ARG：用于指定传递给构建运行时的变量</span></span><br><span class="line"><span class="comment"># ENV：设置环境变量</span></span><br><span class="line"><span class="comment"># EXPOSE：指定于外界交互的端口</span></span><br><span class="line"><span class="comment"># VOLUME：用于指定持久化目录</span></span><br><span class="line"><span class="comment"># WORKDIR：工作目录，类似于cd命令</span></span><br><span class="line"><span class="comment"># USER:指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</span></span><br><span class="line"><span class="comment"># ONBUILD：用于设置镜像触发器,当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发</span></span><br><span class="line"><span class="comment"># ENV CONFIG /usr/local/config</span></span><br></pre></td></tr></table></figure>
<h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><h4 id="查看镜像历史"><a href="#查看镜像历史" class="headerlink" title="查看镜像历史"></a>查看镜像历史</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">history</span> alpine</span><br></pre></td></tr></table></figure>
<h4 id="制作dockerfile"><a href="#制作dockerfile" class="headerlink" title="制作dockerfile"></a>制作dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> alpine</span><br><span class="line"><span class="comment"># 添加维护</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=blyanqi@163.com</span></span><br><span class="line"><span class="comment"># 使用清华大学源站</span></span><br><span class="line"><span class="keyword">run</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g'</span> /etc/apk/repositories</span></span><br><span class="line"><span class="comment"># 添加工具</span></span><br><span class="line"><span class="keyword">run</span><span class="bash"> apk add --no-cache bash mysql-client git</span></span><br></pre></td></tr></table></figure>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -t myalpine:0.1 .</span><br><span class="line"><span class="comment"># 指定dockerfile</span></span><br><span class="line">docker build -f /path/to/a/Dockerfile -t myalpine:0.1 .</span><br><span class="line"><span class="comment"># 启动 -d 后台运行 -it 交互方式 /bin/bash 会替换都最后一个 cmd</span></span><br><span class="line">docker run -d -it --name my1 myalpine:0.1 /bin/bash</span><br></pre></td></tr></table></figure>
<h2 id="springboot-dockerfile"><a href="#springboot-dockerfile" class="headerlink" title="springboot dockerfile"></a>springboot dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成的新镜像以centos镜像为基础</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="comment"># 升级系统</span></span><br><span class="line"><span class="comment">#RUN yum -y update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -f /etc/localtime \</span></span><br><span class="line"><span class="bash">&amp;&amp; ln -sv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">&amp;&amp; <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加jdk安装包</span></span><br><span class="line"><span class="keyword">ARG</span> jdk_dir=/opt/java</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$&#123;jdk_dir&#125;</span>/app</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u251-linux-x64.tar.gz <span class="variable">$&#123;jdk_dir&#125;</span></span></span><br><span class="line"><span class="comment"># 添加业务包</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> go-meta-auth-service-1.0.0.jar <span class="variable">$&#123;jdk_dir&#125;</span>/app</span></span><br><span class="line"><span class="comment"># 安装jdk</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'$a\export LANG=en_US.UTF-8'</span> /etc/profile \</span></span><br><span class="line"><span class="bash">&amp;&amp;sed -i <span class="string">'$a\JAVA_HOME=$&#123;jdk_dir&#125;/jdk1.8.0_251'</span> /etc/profile \</span></span><br><span class="line"><span class="bash">&amp;&amp;sed -i <span class="string">'$a\PATH=$PATH:$JAVA_HOME/bin'</span> /etc/profile \</span></span><br><span class="line"><span class="bash">&amp;&amp;sed -i <span class="string">'$a\CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib'</span> /etc/profile \</span></span><br><span class="line"><span class="bash">&amp;&amp;sed -i <span class="string">'$a\export JAVA_HOME JRE_HOME PATH CLASSPATH'</span> /etc/profile</span></span><br><span class="line"><span class="keyword">ENV</span> PATH <span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:$&#123;jdk_dir&#125;/jdk1.8.0_251/bin"</span></span><br><span class="line"><span class="comment"># EXPOSE 22</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9090</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/java/app/</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"java -jar -Dserver.port=9090 ./go-meta-auth-service-1.0.0.jar"</span>]</span></span><br></pre></td></tr></table></figure>
<h2 id="python-示例"><a href="#python-示例" class="headerlink" title="python 示例"></a>python 示例</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">run</span><span class="bash"> mkdir -p /data/opt</span></span><br><span class="line"><span class="keyword">add</span><span class="bash"> ./chromedriver /data/opt</span></span><br><span class="line"><span class="keyword">add</span><span class="bash"> ./google-chrome-stable_current_x86_64.rpm /data/opt</span></span><br><span class="line"><span class="keyword">add</span><span class="bash"> ./config.properties /data/config/lcc_spider_browser/</span></span><br><span class="line"><span class="keyword">add</span><span class="bash"> ./python3.tgz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">add</span><span class="bash"> ./lcc_spider_browser-1.13.1.tgz /data/opt/</span></span><br><span class="line"><span class="keyword">add</span><span class="bash"> ./startup.sh  /data/opt/lcc_spider_browser-1.13.1/bin</span></span><br><span class="line"><span class="keyword">run</span><span class="bash"> yum -y install openssl gzip openssl-devel gcc gcc-c++ glibc</span></span><br><span class="line"><span class="keyword">env</span> PATH=$PATH:/usr/local/python3/bin</span><br><span class="line"><span class="keyword">env</span> LANG=en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">workdir</span><span class="bash"> /data/opt</span></span><br><span class="line"><span class="keyword">run</span><span class="bash"> yum -y install ./google-chrome-stable_current_x86_64.rpm</span></span><br><span class="line"><span class="keyword">workdir</span><span class="bash"> /data/opt/lcc_spider_browser-1.13.1</span></span><br><span class="line"><span class="keyword">cmd</span><span class="bash"> sh bin/startup.sh</span></span><br></pre></td></tr></table></figure>
<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># WARNING: Ignoring http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gz: temporary error (try again later)</span></span><br><span class="line"><span class="comment"># 重启 docker-daemon</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>docker-compose</title>
    <url>/2020/05/Docker-compose/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">compose docs</a></li>
<li><a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">compose file 参考</a></li>
<li><a href="https://github.com/docker/awesome-compose" target="_blank" rel="noopener">Docker compose samples</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>curl -L <a href="https://get.daocloud.io/docker/compose/releases/download/1.26.0/docker-compose-`uname" target="_blank" rel="noopener">https://get.daocloud.io/docker/compose/releases/download/1.26.0/docker-compose-`uname</a> -s<code>-</code>uname -m` &gt; /usr/local/bin/docker-compose<br>chmod +x /usr/local/bin/docker-compose</p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">"3.8"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">webapp:tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># build</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">"3.8"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">webapp:tag</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">network:</span> <span class="string">host</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">thin</span> <span class="string">-p</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>
<h3 id="yaml-配置文件"><a href="#yaml-配置文件" class="headerlink" title="yaml 配置文件"></a>yaml 配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.8"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span></span><br></pre></td></tr></table></figure>
<h4 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.8"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span></span><br></pre></td></tr></table></figure>
<p>network_mode：设置网络模式<br>network_mode: “bridge”<br>network_mode: “host”<br>network_mode: “none”<br>network_mode: “service:[service name]”<br>network_mode: “container:[container name/id]”</p>
<p>links<br>服务之间可以使用服务名称相互访问，links 允许定义一个别名，从而使用该别名访问其它服务</p>
]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>系统信息采集</title>
    <url>/2020/05/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>系统登录</title>
    <url>/2020/05/%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>CMDB</title>
    <url>/2020/05/CMDB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Cobbler</title>
    <url>/2020/05/Cobbler/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://cobbler.readthedocs.io/en/release28/installation.html" target="_blank" rel="noopener">cobbler docs </a><br><a href="https://github.com/cobbler/cobbler.git" target="_blank" rel="noopener">cobbler github源</a></p>
<h2 id="所需服务"><a href="#所需服务" class="headerlink" title="所需服务"></a>所需服务</h2><p>  PXE (服务器需要支持PXE，一般都支持)<br>  DHCP<br>  DNS<br>  YUM<br>  TFTP<br>  HTTP<br>  Kickstart<br>  python</p>
<h2 id="docker-compose-构建"><a href="#docker-compose-构建" class="headerlink" title="docker compose 构建"></a>docker compose 构建</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.7'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">centos7-build:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">local/cobbler-centos7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cobbler-centos7</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">./dockerfiles/CentOS7.dockerfile</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rpm-build/el7:/usr/src/cobbler/rpm-build</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">centos8-build:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">local/cobbler-centos8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cobbler-centos8</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">./dockerfiles/CentOS8.dockerfile</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rpm-build/el8:/usr/src/cobbler/rpm-build</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">fedora31-build:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">local/cobbler-fedora31</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cobbler-fedora31</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">./dockerfiles/Fedora31.dockerfile</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rpm-build/f31:/usr/src/cobbler/rpm-build</span></span><br></pre></td></tr></table></figure>
<h1 id><a href="#" class="headerlink" title="#"></a>#</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">docker run -itd --name cobbler -v <span class="regexp">/Users/</span>alert<span class="regexp">/test/</span>cobbler<span class="regexp">/cobbler-3.1.2/</span>rpm-<span class="string">build:</span>/mnt centos</span><br><span class="line">docker exec -it <span class="number">24</span>df24a5b34d bash</span><br></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><a href="/2020/06/linux%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1%E5%89%8D%E9%85%8D%E7%BD%AE/" title="linux安装服务前配置">linux安装服务前配置</a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 cobbler</span></span><br><span class="line">sudo rpm -Uvh http://mirror.atl.genesisadaptive.com/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">yum install cobbler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">vim /etc/cobbler/settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认密码</span></span><br><span class="line">default_password_crypted: <span class="string">"<span class="variable">$1</span><span class="variable">$bfI7WLZz</span><span class="variable">$PxXetL97LkScqJFxnW7KS1</span>"</span></span><br><span class="line">openssl passwd -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Next_Server</span></span><br><span class="line"><span class="comment"># default, HTTP and TFTP</span></span><br><span class="line">server: 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># DHCP/PXE</span></span><br><span class="line">next_server: 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># manage_dhcp setting</span></span><br><span class="line"><span class="comment"># default, don't manage</span></span><br><span class="line">manage_dhcp: 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">vi /etc/cobbler/dhcp.template</span><br><span class="line"></span><br><span class="line">subnet 192.168.1.0 netmask 255.255.255.0 &#123;</span><br><span class="line">     option routers             192.168.1.1;</span><br><span class="line">     option domain-name-servers 192.168.1.210,192.168.1.211;</span><br><span class="line">     option subnet-mask         255.255.255.0;</span><br><span class="line">     filename                   <span class="string">"/pxelinux.0"</span>;</span><br><span class="line">     default-lease-time         2.8.0;</span><br><span class="line">     max-lease-time             43200;</span><br><span class="line">     next-server                <span class="variable">$next_server</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ks file</span></span><br><span class="line">/var/www/cobbler/ks_mirror</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start cobblerd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> cobblerd.service</span><br><span class="line">systemctl status cobblerd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">cobbler check</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cobbler sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载镜像</span></span><br><span class="line">mount -t iso9660 -o loop,ro /path/to/isos/Fedora-Server-dvd-x86_64-28-1.1.iso /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">cobbler import --name=fedora28 --arch=x86_64 --path=/mnt</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cobbler distro list</span><br><span class="line">cobbler profile list</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">cobbler distro report --name=fedora28-x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cobbler system add --name=<span class="built_in">test</span> --profile=fedora28-x86_64</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cobbler system list</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cobbler system report --name=<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cobbler system edit --name=<span class="built_in">test</span> --interface=eth0 --mac=00:11:22:AA:BB:CC --ip-address=192.168.1.100 --netmask=255.255.255.0 --static=1 --dns-name=test.mydomain.com</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cobbler system edit --name=<span class="built_in">test</span> --gateway=192.168.1.1 --hostname=test.mydomain.com</span><br></pre></td></tr></table></figure>
<h2 id="使用容器搭建"><a href="#使用容器搭建" class="headerlink" title="使用容器搭建"></a>使用容器搭建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/cobbler/cobbler.git</span><br><span class="line"><span class="built_in">cd</span> cobbler</span><br><span class="line">git checkout release31</span><br><span class="line"></span><br><span class="line">wget https://codeload.github.com/cobbler/cobbler/tar.gz/v3.1.2</span><br><span class="line">tar -zxf cobbler-3.1.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cobbler-3.1.2</span><br><span class="line"><span class="comment"># 构建基于centos8镜像</span></span><br><span class="line">docker-compose up centos8-build</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/jasonlix5/docker-cobbler/blob/master/Dockerfile" target="_blank" rel="noopener"></a></p>
<h1 id="jdk1-8"><a href="#jdk1-8" class="headerlink" title="jdk1.8"></a>jdk1.8</h1><h1 id="java-jar-Dserver-port-9090-go-meta-auth-service-jar"><a href="#java-jar-Dserver-port-9090-go-meta-auth-service-jar" class="headerlink" title="java -jar -Dserver.port=9090 go-meta-auth-service.jar"></a>java -jar -Dserver.port=9090 go-meta-auth-service.jar</h1><p>docker run \<br>-d \<br>—privileged \<br>—net host \<br>-v /sys/fs/cgroup:/sys/fs/cgroup:ro \<br>-v etc/cobbler/settings:/etc/cobbler/settings \<br>-v etc/cobbler/dhcp.template:/etc/cobbler/dhcp.template \<br>-v var/www/cobbler/images:/var/www/cobbler/images \<br>-v var/www/cobbler/ks_mirror:/var/www/cobbler/ks_mirror \<br>-v var/www/cobbler/links:/var/www/cobbler/links \<br>-v var/lib/cobbler/config:/var/lib/cobbler/config \<br>-v var/lib/tftpboot:/var/lib/tftpboot \<br>-v dist/centos:/mnt:ro \<br>-p 69:69 \<br>-p 80:80 \<br>-p 443:443 \<br>-p 25151:25151 \<br>—name cobbler cobbler</p>
<p>sudo mount -t iso9660 -o loop,ro -v dist/centos.iso dist/centos<br>docker exec -it cobbler cobbler import —name=centos7 —arch=x86_64 —path=/mnt</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>自动化安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Openfalcon</title>
    <url>/2020/05/Openfalcon/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据上报</span></span><br><span class="line">falcon-agent(<span class="comment"># 客户端代理)</span></span><br><span class="line">| </span><br><span class="line">falcon-gateway</span><br><span class="line">|                  falcon-alarm <span class="comment"># 报警</span></span><br><span class="line">falcon-transfer -&gt; falcon-judge <span class="comment"># 告警判断</span></span><br><span class="line">                -&gt; falcon-graph <span class="comment"># 数据存储</span></span><br><span class="line">|</span><br><span class="line">falcon-api <span class="comment"># 数据查询</span></span><br><span class="line">  falcon-hbs</span><br><span class="line">  falcon-nodata <span class="comment">#数据未上报处理</span></span><br><span class="line">  falcon-aggregator <span class="comment">#聚合某集群下的所有机器的某个指标的值</span></span><br><span class="line">Dashboard</span><br></pre></td></tr></table></figure>
<ul>
<li>用户</li>
<li>endpoint 机器</li>
<li>HostGroup 主机组</li>
<li>counter tag</li>
<li>Template 模块,一个模板是可以绑定到多个HostGroup的</li>
<li>al</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://book.open-falcon.com/zh_0_2/quick_install/frontend.html" target="_blank" rel="noopener">falcon 0.2 docs</a></p>
<h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装redis</span></span><br><span class="line">yum install -y redis</span><br><span class="line"><span class="comment"># 安装mysql</span></span><br><span class="line">yum install -y mysql-server</span><br><span class="line">注意，请确保redis和MySQL已启动。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化MySQL表结构</span></span><br><span class="line"><span class="built_in">cd</span> /tmp/ &amp;&amp; git <span class="built_in">clone</span> https://github.com/open-falcon/falcon-plus.git </span><br><span class="line"><span class="built_in">cd</span> /tmp/falcon-plus/scripts/mysql/db_schema/</span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 1_uic-db-schema.sql</span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 2_portal-db-schema.sql</span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 3_dashboard-db-schema.sql</span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 4_graph-db-schema.sql</span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 5_alarms-db-schema.sql</span><br><span class="line">rm -rf /tmp/falcon-plus/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你是从v0.1.0升级到当前版本v0.2.0，那么只需要执行如下命令：</span></span><br><span class="line">mysql -h 127.0.0.1 -u root -p &lt; 5_alarms-db-schema.sql</span><br></pre></td></tr></table></figure>
<h3 id="下载-二进制包"><a href="#下载-二进制包" class="headerlink" title="下载 二进制包"></a>下载 <a href="https://github.com/open-falcon/falcon-plus/releases" target="_blank" rel="noopener">二进制包</a></h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建工作目录</span></span><br><span class="line"><span class="built_in">export</span> FALCON_HOME=/home/work</span><br><span class="line"><span class="built_in">export</span> WORKSPACE=<span class="variable">$FALCON_HOME</span>/open-falcon</span><br><span class="line">mkdir -p <span class="variable">$WORKSPACE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压二进制包</span></span><br><span class="line">tar -xzvf open-falcon-v0.2.1.tar.gz -C <span class="variable">$WORKSPACE</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line">grep -Ilr 3306  ./ | xargs -n1 -- sed -i <span class="string">'s/root:/real_user:real_password/g'</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./open-falcon start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查所有模块的启动状况</span></span><br><span class="line">./open-falcon check</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./open-falcon [start|stop|restart|check|monitor|reload] module</span></span><br><span class="line">./open-falcon start agent</span><br></pre></td></tr></table></figure>
<h3 id="安装前端"><a href="#安装前端" class="headerlink" title="安装前端"></a>安装前端</h3><ul>
<li>版本 （不知道为啥官方连版本都不说明）<ul>
<li>CentOS Linux release 7.8.2003 (Core)</li>
<li>Python 2.7.5</li>
<li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建工作目录</span></span><br><span class="line"><span class="built_in">export</span> HOME=/home/work</span><br><span class="line"><span class="built_in">export</span> WORKSPACE=<span class="variable">$HOME</span>/open-falcon</span><br><span class="line">mkdir -p <span class="variable">$WORKSPACE</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git clone code</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/open-falcon/dashboard.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 python 环境</span></span><br><span class="line">yum install -y python-virtualenv</span><br><span class="line">yum install -y python-devel</span><br><span class="line">yum install -y openldap-devel</span><br><span class="line">yum install -y mysql-devel</span><br><span class="line">yum groupinstall <span class="string">"Development tools"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/dashboard/</span><br><span class="line">virtualenv ./env</span><br><span class="line"></span><br><span class="line">./env/bin/pip install -r pip_requirements.txt -i https://pypi.douban.com/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">dashboard的配置文件为： <span class="string">'rrd/config.py'</span>，请根据实际情况修改</span><br><span class="line"></span><br><span class="line"><span class="comment"># API_ADDR 表示后端api组件的地址</span></span><br><span class="line">API_ADDR = <span class="string">"http://127.0.0.1:8080/api/v1"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据实际情况，修改PORTAL_DB_*, 默认用户名为root，默认密码为""</span></span><br><span class="line"><span class="comment"># 根据实际情况，修改ALARM_DB_*, 默认用户名为root，默认密码为""</span></span><br><span class="line"><span class="comment"># 以开发者模式启动</span></span><br><span class="line">./env/bin/python wsgi.py</span><br><span class="line"><span class="comment"># open http://127.0.0.1:8081 in your browser.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在生产环境启动</span></span><br><span class="line">bash control start</span><br><span class="line"><span class="comment"># open http://127.0.0.1:8081 in your browser.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止dashboard运行</span></span><br><span class="line">bash control stop</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">bash control tail</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="docker-方式安装"><a href="#docker-方式安装" class="headerlink" title="docker 方式安装"></a>docker 方式安装</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>git clone <a href="https://github.com/open-falcon/falcon-plus.git" target="_blank" rel="noopener">https://github.com/open-falcon/falcon-plus.git</a></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Build container;</span></span><br><span class="line"><span class="keyword">FROM</span> openfalcon/makegcc-golang:<span class="number">1.10</span>-alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=blyanqi@163.com</span></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> FALCON_DIR=/open-falcon PROJ_PATH=$&#123;GOPATH&#125;/src/github.com/open-falcon/falcon-plus</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用清华大学源站</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g'</span> /etc/apk/repositories</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$FALCON_DIR</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p <span class="variable">$FALCON_DIR</span>/logs &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache ca-certificates bash git supervisor</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . <span class="variable">$&#123;PROJ_PATH&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$&#123;PROJ_PATH&#125;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make all \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make pack4docker \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -zxf open-falcon-v*.tar.gz -C <span class="variable">$&#123;FALCON_DIR&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf <span class="variable">$&#123;PROJ_PATH&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Final container;</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.7</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=blyanqi@163.com</span></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> FALCON_DIR=/open-falcon</span><br><span class="line"><span class="comment"># 使用清华大学源站</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g'</span> /etc/apk/repositories</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$FALCON_DIR</span>/logs &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache ca-certificates bash git supervisor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> docker/supervisord.conf /etc/supervisord.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=0 <span class="variable">$&#123;FALCON_DIR&#125;</span> <span class="variable">$&#123;FALCON_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8433</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$&#123;FALCON_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/bin/supervisord"</span>, <span class="string">"-c"</span>, <span class="string">"/etc/supervisord.conf"</span>]</span></span><br></pre></td></tr></table></figure>
<h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">docker build -t falcon-<span class="keyword">plus</span>:<span class="number">0.1</span> .</span><br><span class="line"></span><br><span class="line">docker run -d --name falcon-<span class="keyword">plus</span> falcon-<span class="keyword">plus</span>:<span class="number">0.1</span></span><br></pre></td></tr></table></figure>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>git clone <a href="https://github.com/open-falcon/dashboard.git" target="_blank" rel="noopener">https://github.com/open-falcon/dashboard.git</a></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">2.7</span>-alpine3.<span class="number">7</span></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="keyword">ENV</span> prefix=/open-falcon</span><br><span class="line"><span class="keyword">ENV</span> <span class="keyword">workdir</span><span class="bash">=<span class="variable">$prefix</span>/dashboard</span></span><br><span class="line"><span class="comment"># 使用清华大学源站</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g'</span> /etc/apk/repositories</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache \</span></span><br><span class="line"><span class="bash">    ca-certificates bash git g++ perl make \</span></span><br><span class="line"><span class="bash">    py-mysqldb \</span></span><br><span class="line"><span class="bash">    py-pyldap</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$prefix</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PYTHONPATH <span class="string">"$&#123;PYTHONPATH&#125;:/usr/lib/python2.7/site-packages/"</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$workdir</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./ ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install \</span></span><br><span class="line"><span class="bash">    Flask==0.10.1 \</span></span><br><span class="line"><span class="bash">    Flask-Babel==0.9 \</span></span><br><span class="line"><span class="bash">    Jinja2==2.7.2 \</span></span><br><span class="line"><span class="bash">    Werkzeug==0.9.4 \</span></span><br><span class="line"><span class="bash">    gunicorn==19.9.0 \</span></span><br><span class="line"><span class="bash">    python-dateutil==2.2 \</span></span><br><span class="line"><span class="bash">    requests==2.3.0  -i https://mirrors.aliyun.com/pypi/simple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>]</span></span><br></pre></td></tr></table></figure>
<h4 id="构建-1"><a href="#构建-1" class="headerlink" title="构建"></a>构建</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker build -t openfalcon-dashboard:<span class="number">0.1</span> .</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">run</span> -d -<span class="keyword">it</span> <span class="comment">--name falcon-dashboard openfalcon-dashboard:0.1 bash</span></span><br></pre></td></tr></table></figure>
<h3 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">falcondashboard</span> docker centos8 中构建没成功</span><br><span class="line">主要是 mysql-devel的问题</span><br></pre></td></tr></table></figure>
<h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">"3.8"</span></span><br><span class="line">services:</span><br><span class="line">  <span class="comment"># 数据库</span></span><br><span class="line">  mysql:</span><br><span class="line">    container_name: mysql</span><br><span class="line">    image: mariadb</span><br><span class="line">    volumes:</span><br><span class="line">     - /data/db:/var/lib/mysql:Z</span><br><span class="line">    environment:</span><br><span class="line">     - MYSQL_ROOT_PASSWORD=root</span><br><span class="line">    ports:</span><br><span class="line">     - 3306:3306</span><br><span class="line">    restart: always</span><br><span class="line">  <span class="comment"># redis</span></span><br><span class="line">  redis:</span><br><span class="line">    container_name: redis</span><br><span class="line">    image: redis</span><br><span class="line">    volumes:</span><br><span class="line">     - /data/redis:/data</span><br><span class="line">    ports:</span><br><span class="line">     - 6379:6379</span><br><span class="line">  <span class="comment"># falcon 后端</span></span><br><span class="line">  falcon:</span><br><span class="line">    image: falcon-plus:0.1</span><br><span class="line">    container_name: falcon</span><br><span class="line">    <span class="comment">#command: echo 'start all;exit'|bash ./ctrl.sh</span></span><br><span class="line">    ports:</span><br><span class="line">     - 8443:8443</span><br><span class="line">     - 8080:8080</span><br><span class="line">    environment:</span><br><span class="line">     - MYSQL_PORT=root:root@tcp\(mysql:3306\)</span><br><span class="line">     - REDIS_PORT=redis:6379</span><br><span class="line">    volumes:</span><br><span class="line">     - /data/open-falcon/data:/open-falcon/data:Z</span><br><span class="line">     - /data/open-falcon/logs:/open-falcon/logs:Z</span><br><span class="line">    depends_on:</span><br><span class="line">     - mysql</span><br><span class="line">     - redis</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">docker-compose stop</span><br><span class="line"><span class="comment"># 停止并删除容器</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>
<p><a href="#前端">DashBoard 安装</a></p>
<h2 id="客户端部署"><a href="#客户端部署" class="headerlink" title="客户端部署"></a>客户端部署</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cfg.json</span><br><span class="line">./open-falcon start agent  <span class="comment"># 启动进程</span></span><br><span class="line">./open-falcon stop agent  <span class="comment"># 停止进程</span></span><br><span class="line">./open-falcon monitor agent  <span class="comment"># 查看日志</span></span><br><span class="line">./falcon-agent --check</span><br></pre></td></tr></table></figure>
<h3 id="api接口"><a href="#api接口" class="headerlink" title="api接口"></a>api接口</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">ts=`<span class="type">date</span> +%s`; curl -X POST -d "[&#123;\"metric\": \"metric.demo\", \"endpoint\": \"qd-<span class="keyword">open</span>-falcon-judge01.hd\", \"<span class="type">timestamp</span>\": $ts,\"step\": 60,\"<span class="keyword">value</span>\": 9,\"counterType\": \"GAUGE\",\"tags\": \"project=falcon,module=judge\"&#125;]" http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1988</span>/v1/push</span><br></pre></td></tr></table></figure>
<h2 id="graph存储"><a href="#graph存储" class="headerlink" title="graph存储"></a>graph存储</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim cfg.json</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">./open-falcon start graph</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">./open-falcon stop graph</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">./open-falcon monitor graph</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Prometheus</title>
    <url>/2020/05/Prometheus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Zabbix</title>
    <url>/2020/05/Zabbix/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://zabbix.org/wiki/Main_Page" target="_blank" rel="noopener">zabbix wiki</a></li>
<li><a href="https://www.zabbix.com/manuals" target="_blank" rel="noopener">zabbix docs</a></li>
</ul>
<h2 id="zabbix-组件"><a href="#zabbix-组件" class="headerlink" title="zabbix 组件"></a>zabbix 组件</h2><p>zabbix-server<br>zabbix-agent<br>zabbix-gateway</p>
<h3 id="依赖服务"><a href="#依赖服务" class="headerlink" title="依赖服务"></a>依赖服务</h3><p>php<br>mysql<br>http</p>
<h2 id="zabbix-安装"><a href="#zabbix-安装" class="headerlink" title="zabbix 安装"></a>zabbix 安装</h2><h3 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="server安装"><a href="#server安装" class="headerlink" title="server安装"></a>server安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 repo</span></span><br><span class="line">rpm -i https://repo.zabbix.com/zabbix/3.4/rhel/6/x86_64/zabbix-release-3.4-1.el6.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Zabbix服务器，前端，代理</span></span><br><span class="line">yum install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建初始数据库文件</span></span><br><span class="line">mysql -uroot -ppassword</span><br><span class="line">mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">'password'</span>;</span><br><span class="line">mysql&gt; quit;</span><br><span class="line"><span class="comment"># 导入初始架构和数据。系统将提示您输入新创建的密码。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql</span></span><br><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span><br></pre></td></tr></table></figure>
<h3 id="配置文件-etc-zabbix-zabbix-server-conf"><a href="#配置文件-etc-zabbix-zabbix-server-conf" class="headerlink" title="配置文件 /etc/zabbix/zabbix_server.conf"></a>配置文件 /etc/zabbix/zabbix_server.conf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line">DBPassword=password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区配置</span></span><br><span class="line">php_value date.timezone Europe/Riga</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl restart zabbix-server zabbix-agent httpd</span><br><span class="line">systemctl <span class="built_in">enable</span> zabbix-server zabbix-agent httpd</span><br></pre></td></tr></table></figure>
<h3 id="client-install（可以选择-ansible安装）"><a href="#client-install（可以选择-ansible安装）" class="headerlink" title="client install（可以选择 ansible安装）"></a>client install（可以选择 ansible安装）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 repo</span></span><br><span class="line">rpm -i https://repo.zabbix.com/zabbix/3.4/rhel/6/x86_64/zabbix-release-3.4-1.el6.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装启动</span></span><br><span class="line">yum -y install --nogpgcheck  zabbix-agent</span><br><span class="line">systemctl start zabbix-agent.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line"><span class="comment"># /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">PidFile=/var/run/zabbix/zabbix_agentd.pid <span class="comment"># pid 文件</span></span><br><span class="line">LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_agentd.log <span class="comment"># log 文件</span></span><br><span class="line">LogFileSize=0</span><br><span class="line">Server=10.88.2.11 <span class="comment"># server IP</span></span><br><span class="line">ServerActive=10.88.2.11 </span><br><span class="line">Hostname=engine-redis-3 <span class="comment"># 主机名</span></span><br><span class="line">Include=/etc/zabbix/zabbix_agentd.d/*.conf <span class="comment"># 其他配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量修改</span></span><br><span class="line">sed  -i  <span class="string">'s/Server=10.47.26.119/Server=10.88.2.11/g'</span>    /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">sed -i <span class="string">'s/ServerActive=10.47.26.119/ServerActive=10.88.2.11/g'</span>    /etc/zabbix/zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置完成重启</span></span><br><span class="line">systemctl restart zabbix-agent.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis 示例</span></span><br><span class="line"><span class="comment"># /etc/zabbix/zabbix_agentd.d/userparameter_redis.conf</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"UserParameter=redis.discovery,/opt/monitor/sbin/redis_port.py</span></span><br><span class="line"><span class="string">UserParameter=redis_stats[*],/data/redis/sbin/redis-cli -h 10.88.2.24  -p <span class="variable">$1</span> info|grep <span class="variable">$2</span>|cut -d : -f2</span></span><br><span class="line"><span class="string">UserParameter=redis_max[*],/data/redis/sbin/redis-cli -h 10.88.2.24  -p <span class="variable">$1</span> config get maxmemory|xargs|grep  <span class="variable">$2</span> |cut -d"</span> <span class="string">" -f2"</span>&gt;/etc/zabbix/zabbix_agentd.d/userparameter_redis.conf</span><br></pre></td></tr></table></figure>
<h2 id="zabbix-自动发现配置"><a href="#zabbix-自动发现配置" class="headerlink" title="zabbix 自动发现配置"></a>zabbix 自动发现配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">配置-&gt;自动发现-&gt;创建自动发现</span><br><span class="line">创建模板</span><br><span class="line"></span><br><span class="line">创建应用集</span><br><span class="line"></span><br><span class="line">创建动作</span><br><span class="line"></span><br><span class="line">新建主机群组</span><br><span class="line"></span><br><span class="line">新建模板</span><br><span class="line">名称:DIY  Template Nginx Auto Discovery</span><br><span class="line">主机列表</span><br><span class="line"></span><br><span class="line">模板-&gt;新建自动发现规则</span><br><span class="line">Nginx Port Discovery</span><br><span class="line">nginx.discovery</span><br><span class="line"></span><br><span class="line">创建监控项</span><br><span class="line">Nginx Connection timed out</span><br><span class="line">nginx_stats[<span class="string">"Connection timed out"</span>]</span><br><span class="line">Nginx limiting requests</span><br><span class="line">nginx_stats[<span class="string">"limiting requests"</span>]</span><br><span class="line"></span><br><span class="line">创建图形</span><br><span class="line">Nginx  Error Connection</span><br><span class="line"></span><br><span class="line">自动发现脚本</span><br><span class="line">userparameter_redis.conf</span><br><span class="line"><span class="comment"># 发现主机配置</span></span><br><span class="line">UserParameter=redis.discovery,/opt/monitor/zabbix/scripts/redis_port.py <span class="comment">#key ，脚本输出</span></span><br><span class="line"><span class="comment"># * 代表所有参数 </span></span><br><span class="line">UserParameter=redis_stats[*],/data/redis/sbin/redis-cli -h 10.24.169.11  -p <span class="variable">$1</span> info|grep <span class="variable">$2</span>|cut -d : -f2</span><br><span class="line">UserParameter=redis_max[*],/data/redis/sbin/redis-cli -h 10.24.169.11  -p <span class="variable">$1</span> config get maxmemory|xargs|grep  <span class="variable">$2</span> |cut -d<span class="string">" "</span> -f2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">脚本编写</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">import os</span><br><span class="line"><span class="comment">#import json</span></span><br><span class="line">import simplejson as json</span><br><span class="line">t=os.popen(<span class="string">""</span><span class="string">"sudo netstat -tlpn |grep redis-se|grep 0.0.0.0|awk '&#123;print <span class="variable">$4</span>&#125;'|awk -F: '&#123;print <span class="variable">$2</span>&#125;' "</span><span class="string">""</span>)</span><br><span class="line">ports = []</span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span>  t.readlines():</span><br><span class="line">        r = os.path.basename(port.strip())</span><br><span class="line">        ports += [&#123;<span class="string">'&#123;#REDISPORT&#125;'</span>:r&#125;]</span><br><span class="line"><span class="built_in">print</span> json.dumps(&#123;<span class="string">'data'</span>:ports&#125;,sort_keys=True,indent=4,separators=(<span class="string">','</span>,<span class="string">':'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"&#123;#REDISPORT&#125;"</span>:<span class="string">"7001"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建监控项原型</span><br><span class="line">名称 Redis <span class="variable">$1</span> Port Max memory</span><br><span class="line">键值 redis_max[&#123;<span class="comment">#REDISPORT&#125;,maxmemory] #这里传参 $1,$2</span></span><br><span class="line"></span><br><span class="line">创建触发器原型</span><br><span class="line">Redis &#123;<span class="comment">#REDISPORT&#125; Port 每秒请求数&gt;5000</span></span><br><span class="line">表达式</span><br><span class="line">&#123;DIY  Template Redis Auto Discovery:redis_stats[&#123;<span class="comment">#REDISPORT&#125;,instantaneous_ops_per_sec].last()&#125;&gt;5000 #传参</span></span><br><span class="line"></span><br><span class="line">动作</span><br><span class="line">动作-》操作-》信息</span><br><span class="line"></span><br><span class="line">动作-》操作-》操作</span><br><span class="line"></span><br><span class="line">动作-》恢复操作-》操作</span><br><span class="line"></span><br><span class="line">动作-》确认操作-》操作</span><br><span class="line"></span><br><span class="line">创建图形原型</span><br><span class="line">Redis &#123;<span class="comment">#REDISPORT&#125; Port Used memory</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">主脚本检查自动限流程序是否存在，如果不存在则启动，如果存在则退出。</span><br><span class="line"></span><br><span class="line">自动限流措施</span><br><span class="line">发现主机是否存在nginx</span><br><span class="line">检查nginx 错误日志</span><br><span class="line">检查当前时间点 Connection timed out 数，如果操作设定阈值，</span><br><span class="line">进行nginx限流控制，发现错误过大时进行error级别限制，</span><br><span class="line">等到Connection timed out消失设置到warning级别</span><br><span class="line">等2分钟warning级别正常工作，设置到正常级别</span><br><span class="line"></span><br><span class="line">提供nginx操作API，设置个token=wzxjnginx2019，没有token操作不了</span><br><span class="line">参数 host=&amp;action=start&amp;token=wzxjnginx2019</span><br><span class="line">启动</span><br><span class="line">关闭</span><br><span class="line">重启</span><br><span class="line">加载配置文件</span><br><span class="line">对资源限级</span><br><span class="line"></span><br><span class="line">listen + shopping.web 唯一表示一个资源</span><br><span class="line">设定对资源的限制分级，这个根据不同的业务手动配置</span><br><span class="line">limit_req_zone <span class="variable">$binary_remote_addr</span> zone=error:10m rate=10r/s;</span><br><span class="line">limit_req_zone <span class="variable">$binary_remote_addr</span> zone=warn:10m rate=100r/s;</span><br><span class="line">limit_req_zone <span class="variable">$binary_remote_addr</span> zone=info:10m rate=200r/s;</span><br><span class="line">limit_req_zone <span class="variable">$binary_remote_addr</span> zone=max:10m rate=500r/s;</span><br><span class="line"></span><br><span class="line">1级 error  10/s</span><br><span class="line">2级 warning 100/s</span><br><span class="line">3级 info 200/s</span><br><span class="line">4级 max 500/s</span><br><span class="line"></span><br><span class="line">资源限级  limit_req zone=three burst=120（根据rate加20%） 更改</span><br></pre></td></tr></table></figure>
<h2 id="zabbix-报警配置"><a href="#zabbix-报警配置" class="headerlink" title="zabbix 报警配置"></a>zabbix 报警配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zabbix 报警 -&gt;</span><br><span class="line">|持续时间</span><br><span class="line">|主题：</span><br><span class="line">&#123;TRIGGER.STATUS&#125;: &#123;TRIGGER.NAME&#125;</span><br><span class="line">|内容：</span><br><span class="line">&#123;HOSTNAME1&#125;-&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;-&#123;EVENT.DATE&#125;&#123;EVENT.TIME&#125;</span><br><span class="line">|当前:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br><span class="line">|维护期间暂停操作</span><br><span class="line">|方式：</span><br><span class="line">|即时：dingding</span><br><span class="line">    sendmessages</span><br><span class="line">|延时：</span><br><span class="line">    sendmail</span><br><span class="line"></span><br><span class="line"><span class="comment"># /usr/lib/zabbix/alertscripts/dingding.py</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span>&#125;</span><br><span class="line">api_url = <span class="string">"https://oapi.dingtalk.com/robot/send?access_token=617bd82c7ddc5f9ccac270549e69072c29edad539dc89c333d00b68133661861"</span></span><br><span class="line"></span><br><span class="line">def msg(text):</span><br><span class="line">    json_text= &#123;</span><br><span class="line">     <span class="string">"msgtype"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"text"</span>: &#123;</span><br><span class="line">            <span class="string">"content"</span>: text</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"at"</span>: &#123;</span><br><span class="line">            <span class="string">"atMobiles"</span>: [</span><br><span class="line">                <span class="string">"170********"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"isAtAll"</span>: False</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span> requests.post(api_url,json.dumps(json_text),headers=headers).content</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    text = sys.argv[1]</span><br><span class="line">    msg(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># /usr/lib/zabbix/alertscripts/dingding.sh</span></span><br><span class="line">---</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">content=<span class="string">"&#123;\"msgtype\":\"text\",\"text\":&#123;\"content\":\"<span class="variable">$1</span>\n<span class="variable">$2</span>\n\"&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#echo $content</span></span><br><span class="line"><span class="comment">#####钉钉报警#####</span></span><br><span class="line">curl  https://oapi.dingtalk.com/robot/send?access_token=617bd82c7ddc5f9ccac270549e69072c29edad539dc89c333d00b68133661861  -H <span class="string">'Content-Type: application/json'</span>  -d <span class="string">"<span class="variable">$content</span>"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>云计算</title>
    <url>/2020/05/%E4%BA%91%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="云计算概念"><a href="#云计算概念" class="headerlink" title="云计算概念"></a>云计算概念</h2><ul>
<li>OS 组成</li>
<li>虚拟化<ul>
<li>hypervisor</li>
</ul>
</li>
<li>qemu</li>
<li>kvm</li>
<li>xen</li>
<li>vmware</li>
<li>存储技术<ul>
<li>DAS</li>
<li>NFS</li>
<li>SAN</li>
<li>ISCSI</li>
<li>分布式文件系统<ul>
<li>ceph</li>
</ul>
</li>
</ul>
</li>
<li>镜像</li>
</ul>
<h2 id="云计算实践"><a href="#云计算实践" class="headerlink" title="云计算实践"></a>云计算实践</h2><ul>
<li><a href="/2020/05/OpenStack/" title="OpenStack">OpenStack</a></li>
<li><a href="/2020/05/OpenStack%E5%AE%89%E8%A3%85/" title="OpenStack安装">OpenStack安装</a></li>
</ul>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
  </entry>
  <entry>
    <title>AIops</title>
    <url>/2020/05/AIops/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://docs.moogsoft.com/en/getting-started.html" target="_blank" rel="noopener">Moogsoft</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>运维开发</title>
    <url>/2020/05/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li></li>
<li></li>
<li><a href="/2020/05/golang%E7%BC%96%E7%A8%8B/" title="GOLANG编程">GOLANG编程</a></li>
<li><a href="/2020/05/lua%E7%BC%96%E7%A8%8B/" title="LUA编程">LUA编程</a>
</li>
</ul>
<h2 id="WEB开发演变"><a href="#WEB开发演变" class="headerlink" title="WEB开发演变"></a>WEB开发演变</h2><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">url</span>-&gt;</span>功能模块-&gt;数据库</span><br><span class="line"><span class="function"><span class="title">view</span>-&gt;</span><span class="function"><span class="title">control</span>-&gt;</span><span class="function"><span class="title">model</span>-&gt;</span>数据库</span><br><span class="line">API网关-&gt;<span class="function"><span class="title">microservices</span>-&gt;</span>数据库</span><br></pre></td></tr></table></figure>
<h2 id="软件开发概念"><a href="#软件开发概念" class="headerlink" title="软件开发概念"></a>软件开发概念</h2><ul>
<li>ESB Enterprise Service Bus 企业服务总线</li>
<li>SOA Service-Oriented Architecture 面向服务的架构<ul>
<li>web service</li>
<li>microsevices</li>
</ul>
</li>
<li>Service Mesh 服务网格<ul>
<li>data plane 数据平面</li>
<li>control plane 控制平面</li>
<li>sidecar</li>
</ul>
</li>
<li>企业应用架构模式</li>
<li>UML Unified Modeling Language 统一建模语言<ul>
<li>功能模型</li>
<li>对象模型</li>
<li>动态模型</li>
</ul>
</li>
<li>API 网关</li>
</ul>
<h2 id="运维开发概念"><a href="#运维开发概念" class="headerlink" title="运维开发概念"></a>运维开发概念</h2><ul>
<li>CMDB 运维配置数据库<ul>
<li>主机</li>
<li>系统</li>
<li>网络</li>
<li>服务</li>
<li>平台 API(主要用于各系统间的整合)</li>
</ul>
</li>
<li>多租户<ul>
<li>企业空间（原子单位）<ul>
<li>区域(规模大的企业还会引入区域的概念)</li>
<li>项目</li>
<li>角色</li>
<li>用户</li>
<li>管理员</li>
</ul>
</li>
</ul>
</li>
<li><p>单租户（企业）</p>
<ul>
<li>项目</li>
<li>角色</li>
<li>用户</li>
<li>管理员</li>
</ul>
</li>
<li><p>项目</p>
<ul>
<li>应用<ul>
<li>应用框架</li>
<li>插件（插件接口是一个协议）<ul>
<li>通用插件接口<ul>
<li>初始化</li>
<li>反初始化</li>
<li>启动</li>
<li>停止</li>
</ul>
</li>
<li>专用插件接口</li>
<li>插件A</li>
<li>插件B</li>
</ul>
</li>
<li>公共函数库</li>
</ul>
</li>
<li>选型</li>
<li>源代码管理</li>
<li>三方接口</li>
<li>发布</li>
<li>升级</li>
</ul>
</li>
</ul>
<ul>
<li>接口（定义协议）</li>
<li>类 （定义功能）<ul>
<li>类&lt;-接口-&gt;类（实现依赖，设计模式产生）</li>
</ul>
</li>
<li>方法 (定义实现)</li>
<li>初始化方法 (对功能参数初始化)</li>
<li><p>属性 (定义功能的参数，机器学习本质不停调整参数，使之达到收敛)</p>
</li>
<li><p>抽象(抽象最简单的理解：把大象装冰箱需要几步？任何东西都可以这样抽象，再解构)</p>
</li>
<li><p>系统</p>
<ul>
<li>部分A</li>
<li>部分B …</li>
<li>部分间相互依赖 （最复杂的依赖关系：笛卡尔集）<ul>
<li>强依赖（影响系统正常运作）</li>
<li>弱依赖（不影响系统正常运作，功能性依赖）</li>
</ul>
</li>
</ul>
</li>
<li><a href="/2020/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" title="数据结构">数据结构</a>
</li>
<li><a href="/2020/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" title="设计模式">设计模式</a>
</li>
</ul>
<h2 id="运维开发实践"><a href="#运维开发实践" class="headerlink" title="运维开发实践"></a>运维开发实践</h2><p>运维开发的本质是对由于运维复杂度提升导致资源分散的整合</p>
<ul>
<li><a href="/2020/05/%E4%BD%BF%E7%94%A8flask-admin%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E5%90%8E%E5%8F%B0%E6%A1%86%E6%9E%B6/" title="使用flask_admin快速构建后台框架">使用flask_admin快速构建后台框架</a></li>
<li><a href="/2020/05/golang%E5%BE%AE%E6%9C%8D%E5%8A%A1/" title="使用golang构建微服务">使用golang构建微服务</a>
</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>运维自动化</title>
    <url>/2020/05/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="运维自动化概念"><a href="#运维自动化概念" class="headerlink" title="运维自动化概念"></a>运维自动化概念</h2><ul>
<li>安装自动化<ul>
<li>PXE</li>
<li>DHCP</li>
<li>TFTP</li>
<li>传输镜像</li>
</ul>
</li>
<li>CMDB 配置管理数据库</li>
<li>系统登录</li>
<li>系统信息采集</li>
<li>Jobs<ul>
<li>Schdule Jobs</li>
<li>cron Jobs</li>
</ul>
</li>
<li>系统部署自动化<ul>
<li>系统配置管理</li>
<li>包管理</li>
<li>系统升级</li>
<li>包依赖关系</li>
<li>命令执行</li>
</ul>
</li>
<li>业务部署自动化<ul>
<li>源代码</li>
<li>构建</li>
<li>发布<ul>
<li>开发环境</li>
<li>测试环境</li>
<li>生产环境</li>
</ul>
</li>
<li>发布方式<ul>
<li>金丝雀发布(灰度发布)</li>
<li>滚动发布</li>
<li>AB发布</li>
</ul>
</li>
<li>服务监控<ul>
<li>服务状态</li>
</ul>
</li>
<li>服务负载监控<ul>
<li>服务路由</li>
<li>服务熔断</li>
<li>服务降级</li>
</ul>
</li>
<li>服务扩缩容</li>
<li>服务回滚</li>
</ul>
</li>
</ul>
<h2 id="运维自动化实践"><a href="#运维自动化实践" class="headerlink" title="运维自动化实践"></a>运维自动化实践</h2><ul>
<li><a href="/2020/05/Cobbler/" title="Cobbler">Cobbler</a></li>
<li><a href="/2020/05/CMDB/" title="CMDB">CMDB</a></li>
<li><a href="/2020/05/%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95/" title="系统登录">系统登录</a></li>
<li><a href="/2020/05/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86/" title="系统信息采集">系统信息采集</a></li>
<li><a href="/2020/05/DevOps/" title="DevOps">DevOps</a>
</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>运维监控</title>
    <url>/2020/05/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="运维监控概念"><a href="#运维监控概念" class="headerlink" title="运维监控概念"></a>运维监控概念</h2><ul>
<li>时序数据库</li>
<li>数据留存期限</li>
<li>数据展现</li>
<li>数据采集<ul>
<li>采集精度</li>
<li>推送</li>
<li>拉取</li>
</ul>
</li>
<li>异常报警</li>
<li>阈值设定</li>
<li>报警级别</li>
<li>报警优先级</li>
<li>报警方式</li>
<li>报警组</li>
<li>报警人</li>
</ul>
<h2 id="运维监控实践"><a href="#运维监控实践" class="headerlink" title="运维监控实践"></a>运维监控实践</h2><ul>
<li><a href="/2020/05/Zabbix/" title="Zabbix">Zabbix</a></li>
<li><a href="/2020/05/Prometheus/" title="Prometheus">Prometheus</a></li>
<li><a href="/2020/05/Openfalcon/" title="Openfalcon">Openfalcon</a>
</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>linux使用</title>
    <url>/2020/05/linux%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="EPEL源"><a href="#EPEL源" class="headerlink" title="EPEL源"></a>EPEL源</h3><blockquote>
<p>基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum -y install epel-release</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">rpm -e epel-releas</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></p>
<h3 id="时区设置"><a href="#时区设置" class="headerlink" title="时区设置"></a>时区设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前时区</span></span><br><span class="line">date -R</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">tzselect</span><br><span class="line"></span><br><span class="line"><span class="comment"># RedHat Linux 和 CentOS</span></span><br><span class="line">timeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># dabian</span></span><br><span class="line">dpkg-reconfigure tzdata</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制相应的时区文件，替换系统时区文件</span></span><br><span class="line"><span class="comment"># cp /usr/share/zoneinfo/$主时区/$次时区 /etc/localtime</span></span><br><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前时间和日期写入BIOS</span></span><br><span class="line">hwclock -w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示日期时间</span></span><br><span class="line">date</span><br><span class="line">cal</span><br></pre></td></tr></table></figure>
<h3 id="docker、pod-时区更改"><a href="#docker、pod-时区更改" class="headerlink" title="docker、pod 时区更改"></a>docker、pod 时区更改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dockerfile</span></span><br><span class="line">RUN rm -f /etc/localtime \</span><br><span class="line">&amp;&amp; ln -sv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span><br><span class="line">&amp;&amp; <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器启动时指定</span></span><br><span class="line">docker run -it -v /etc/localtime:/etc/localtime centos /bin/sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s pod 时区</span></span><br><span class="line">volumeMounts:</span><br><span class="line">    - name: date-config</span><br><span class="line">      mountPath: /etc/localtime</span><br><span class="line">volumes:</span><br><span class="line">  - name: date-config</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /etc/localtime</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="snap-包管理工具"><a href="#snap-包管理工具" class="headerlink" title="snap 包管理工具"></a>snap 包管理工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install snapd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 unix socket</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now snapd.socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已经安装的snap包</span></span><br><span class="line">snap list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安装的服务</span></span><br><span class="line">snap services</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索要安装的snap包</span></span><br><span class="line">snap find lxd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装一个snap包</span></span><br><span class="line">snap install lxd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把一个包还原到以前安装的版本</span></span><br><span class="line">snap revert</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个snap包</span></span><br><span class="line">snap remove</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新软件包</span></span><br><span class="line">snap refresh</span><br><span class="line">snap refresh all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置path，否则找不到命令</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/var/lib/snapd/snap/bin</span><br></pre></td></tr></table></figure>
<h3 id="screan"><a href="#screan" class="headerlink" title="screan"></a>screan</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install screen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启会话</span></span><br><span class="line">screen -S first</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前会话</span></span><br><span class="line">screen -ls</span><br><span class="line">---</span><br><span class="line">There is a screen on:</span><br><span class="line">	2302.ttys003.alertyandeMacBook-Pro	(Detached)</span><br><span class="line">1 Socket <span class="keyword">in</span> /var/folders/6q/j94dgpfd7k94fq_4zpy7w7rc0000gn/T/.screen.</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># detach</span></span><br><span class="line">screen -d 2302.ttys003.alertyandeMacBook-Pro</span><br><span class="line"></span><br><span class="line"><span class="comment"># attach</span></span><br><span class="line">screen -r  2302.ttys003.alertyandeMacBook-Pro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入screen</span></span><br><span class="line">screen -x 2302.ttys003.alertyandeMacBook-Pro</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">screen -X -S 2302 quit</span><br><span class="line">-X 执行命令</span><br><span class="line">-S 指定pid</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>linux容器技术</title>
    <url>/2020/05/Linux%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://linuxcontainers.org/lxc/introduction/" target="_blank" rel="noopener">LXC</a></li>
</ul>
<h2 id="LXC"><a href="#LXC" class="headerlink" title="LXC"></a>LXC</h2><p>LXC是Linux内核包含功能的用户空间接口。通过功能强大的API和简单的工具，它使Linux用户可以轻松地创建和管理系统或应用程序容器。<br>LXC容器通常被认为是chroot和成熟的虚拟机之间的中间对象。<br>LXC当前由几个单独的组件组成：<br>  liblxc库<br>  API的几种语言绑定<br>  一组用于控制容器的标准工具<br>  分发容器模板</p>
<h2 id="LXD"><a href="#LXD" class="headerlink" title="LXD"></a>LXD</h2><p>LXD是下一代系统容器管理器。使用容器技术但类似于虚拟机<br>LXD是用Go编写的，它是免费软件，并根据Apache 2许可进行开发。。<br>通过nova-lxd 插件集成到 Openstack 中<br>无特权的容器，资源限制<br>基于镜像<br>高级资源控制（cpu，内存，网络I / O，块I / O，磁盘使用率和内核资源）<br>设备直通（USB，GPU，Unix字符和块设备，NIC，磁盘和路径）<br>网络管理（网桥创建和配置，跨主机隧道等）<br>存储管理（支持多个存储后端，存储池和存储卷）</p>
<p>LXD的核心是特权守护程序，该守护程序通过本地unix套接字以及网络（如果启用）公开REST API。<br>LXD不是LXC的改写，实际上，它是在LXC的基础上构建的，旨在提供新的，更好的用户体验。</p>
<p>LXD有两种发行版本：<br>  LTS版本<br>  功能发布</p>
<h3 id="使用LXD"><a href="#使用LXD" class="headerlink" title="使用LXD"></a>使用LXD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 源码安装</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/lxc/lxd.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用snap安装</span></span><br><span class="line">sanp install lxd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化配置</span></span><br><span class="line">lxd init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出容器</span></span><br><span class="line">lxc list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">lxc launch ubuntu:18.04 first</span><br><span class="line">lxc <span class="built_in">exec</span> first -- /bin/bash</span><br><span class="line">lxc <span class="built_in">exec</span> first -- apt-get update</span><br><span class="line">lxc file pull first/etc/hosts .</span><br><span class="line">lxc file push hosts first/tmp/</span><br><span class="line">lxc stop first</span><br><span class="line">lxc delete first</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程 image 地址</span></span><br><span class="line">lxc remote ls</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lxc config <span class="built_in">set</span> core.https_address [::]:8443</span><br><span class="line">lxc config <span class="built_in">set</span> core.trust_password something-secure</span><br><span class="line">lxc remote add foo 1.2.3.4</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>dockerInMac</title>
    <url>/2020/05/DockerInMac/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mac-中的docker-用法"><a href="#mac-中的docker-用法" class="headerlink" title="mac 中的docker 用法"></a>mac 中的docker 用法</h2><blockquote>
<p>在mac和windows 中使用轻量级虚拟化工具包 hyperkit来构建。</p>
<p>HyperKit包括一个完整的虚拟机管理程序，针对轻量级虚拟机进行了优化。</p>
</blockquote>
<h2 id="Hyperkit-安装位置"><a href="#Hyperkit-安装位置" class="headerlink" title="Hyperkit 安装位置"></a>Hyperkit 安装位置</h2><ul>
<li>HyperKit</li>
<li>VPNKit</li>
<li>DataKit<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 hyperkit 数据目录</span></span><br><span class="line"><span class="built_in">cd</span> /Users/alert/Library/Containers/com.docker.docker/Data/vms/0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连入 hyperkit (键入enter进入)</span></span><br><span class="line">screen tty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入docker 数据目录</span></span><br><span class="line"><span class="comment"># /var/lib/docker/containers/[hash_of_the_container]/hostconfig.json 容器配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a href="/2020/05/linux%E4%BD%BF%E7%94%A8/" title="screen用法">screen用法</a>
]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
      <tags>
        <tag>screen</tag>
      </tags>
  </entry>
  <entry>
    <title>lua编程</title>
    <url>/2020/05/lua%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://www.lua.org/manual/5.3/" target="_blank" rel="noopener">lua docs</a><h2 id="install-for-mac"><a href="#install-for-mac" class="headerlink" title="install for mac"></a>install for mac</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">tar -zxf Downloads/<span class="keyword">lua</span>-<span class="number">5.3</span>.<span class="number">5</span>.tar.gz</span><br><span class="line"><span class="keyword">cd</span> Downloads/<span class="keyword">lua</span>-<span class="number">5.3</span>.<span class="number">5</span></span><br><span class="line"><span class="keyword">make</span> macosx</span><br><span class="line">sudo <span class="keyword">make</span> install</span><br><span class="line"><span class="keyword">lua</span> -v</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">num = <span class="number">100</span> <span class="comment">-- 全局</span></span><br><span class="line"><span class="keyword">local</span> num = <span class="number">100</span>  <span class="comment">--局部</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span><span class="params">()</span></span> <span class="comment">--函数</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment">--结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 控制语句</span></span><br><span class="line"><span class="keyword">for</span> var=<span class="number">1</span>,<span class="number">100</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(var)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- table （关联数组）</span></span><br><span class="line"><span class="keyword">local</span> tab = &#123;&#125;</span><br><span class="line">tab[<span class="string">"k1"</span>] = <span class="string">"hello"</span></span><br><span class="line"><span class="built_in">print</span>(tab.key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab) <span class="keyword">do</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>词根</title>
    <url>/2020/05/%E8%AF%8D%E6%A0%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><ul>
<li>man - hand</li>
<li>tra - draw</li>
<li>cor - heart</li>
<li>simil - same </li>
<li>spir - breathe</li>
<li>sembl - like</li>
<li>cre - trust</li>
<li>popul - people</li>
</ul>
<h3 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h3><p>* </p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
  </entry>
  <entry>
    <title>商务英语</title>
    <url>/2020/05/%E5%95%86%E5%8A%A1%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Conference"><a href="#Conference" class="headerlink" title="Conference"></a>Conference</h3><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>headquarters</td>
<td>总公司，总部</td>
</tr>
<tr>
<td>LO ：liaison office</td>
<td>当地国家的分部</td>
</tr>
<tr>
<td>kick-off</td>
<td>启动某个项目</td>
</tr>
<tr>
<td>project</td>
<td>项目(破街)</td>
</tr>
<tr>
<td>team</td>
<td>团队</td>
</tr>
<tr>
<td>teamwork</td>
<td>团队精神</td>
</tr>
<tr>
<td>recognize</td>
<td>认可</td>
</tr>
<tr>
<td>amortize</td>
<td>分摊</td>
</tr>
<tr>
<td>partner</td>
<td>工作伙伴</td>
</tr>
<tr>
<td>boardroom</td>
<td>会议室</td>
</tr>
<tr>
<td>Conference call</td>
<td>这可是外企工作的主要工作方式</td>
</tr>
<tr>
<td>review</td>
<td>总结回顾</td>
</tr>
<tr>
<td>brainstorm</td>
<td>开动脑力，激起头脑风暴</td>
</tr>
<tr>
<td>Point</td>
<td>关键点;What’s your point? 你到底要讲什么？</td>
</tr>
<tr>
<td>proposal</td>
<td>待定的未经确认通过的提议，待讨论的方案</td>
</tr>
<tr>
<td>options</td>
<td>备选方案</td>
</tr>
<tr>
<td>My understanding is …</td>
<td>我的理解是…</td>
</tr>
<tr>
<td>solution</td>
<td>解决办法</td>
</tr>
<tr>
<td>ASAP</td>
<td>越快越好</td>
</tr>
<tr>
<td>deadline</td>
<td>完成某项目的最后期限</td>
</tr>
<tr>
<td>approach</td>
<td>达到 报告，会议中常用此词，尽量达到的意思</td>
</tr>
<tr>
<td>scenario</td>
<td>指某个大项目的其中一个阶段</td>
</tr>
<tr>
<td>in charge</td>
<td>对一个部门，一项有一定重要性的事务负责，也可以对人，与权力相关</td>
</tr>
<tr>
<td>responsible for</td>
<td>负责，介乎前两种表达之间</td>
</tr>
<tr>
<td>follow up</td>
<td>具体跟进某事，与事情的重要性</td>
</tr>
<tr>
<td>package</td>
<td>包裹，所谓“一揽子计划”就由此而来</td>
</tr>
<tr>
<td>creative / creativity</td>
<td>创造性思维</td>
</tr>
<tr>
<td>sign off</td>
<td>签发</td>
</tr>
<tr>
<td>assignment</td>
<td>任务，职责</td>
</tr>
</tbody>
</table>
</div>
<h3 id="employee"><a href="#employee" class="headerlink" title="employee"></a>employee</h3><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>Performance Evaluation</td>
<td>(定期的)员工个人评定</td>
</tr>
<tr>
<td>Quota</td>
<td>员工的计划任务量</td>
</tr>
<tr>
<td>manuel</td>
<td>工作手册，指南</td>
</tr>
<tr>
<td>pain in the ass</td>
<td>办公室口头禅</td>
</tr>
<tr>
<td>cell</td>
<td>手机</td>
</tr>
<tr>
<td>aggressive</td>
<td>表扬和批评人用的</td>
</tr>
<tr>
<td>Concern</td>
<td>要好好注意，别弄砸了!</td>
</tr>
<tr>
<td>promotion</td>
<td>升迁</td>
</tr>
<tr>
<td>credit</td>
<td>个人信用</td>
</tr>
<tr>
<td>reputation</td>
<td>名声，口碑</td>
</tr>
<tr>
<td>Appreciate</td>
<td>表达感谢</td>
</tr>
<tr>
<td>stand up meeting</td>
<td>非正式的短会，比如说三两个人站在过道中间讨论一下事情，老外喜欢这样干；</td>
</tr>
<tr>
<td>broadcast</td>
<td>外企发通知用的</td>
</tr>
<tr>
<td>push</td>
<td>推动工作</td>
</tr>
<tr>
<td>add sb.to loop</td>
<td>有的事知道的人少，这就很不好，应该让多些人知道，于是就把他绕到圈子里去。</td>
</tr>
<tr>
<td>intern</td>
<td>实习生</td>
</tr>
<tr>
<td>probation</td>
<td>试用期 新员工试用期：3 months probation</td>
</tr>
<tr>
<td>handover</td>
<td>工作交接</td>
</tr>
<tr>
<td>lunch break</td>
<td>午间休息</td>
</tr>
<tr>
<td>routine</td>
<td>例行事务</td>
</tr>
<tr>
<td>day in and day out</td>
<td>日复一日</td>
</tr>
<tr>
<td>on shifts</td>
<td>轮班</td>
</tr>
<tr>
<td>driver</td>
<td>推动者</td>
</tr>
</tbody>
</table>
</div>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>involve</td>
<td>介入，大佬很生气，后果很严重。</td>
</tr>
<tr>
<td>Do me a favor</td>
<td>帮个忙</td>
</tr>
<tr>
<td>Unacceptable</td>
<td>不能接受</td>
</tr>
<tr>
<td>Challenge</td>
<td>谴责、批评、指责</td>
</tr>
<tr>
<td>Follow up</td>
<td>跟办</td>
</tr>
<tr>
<td>To Do List</td>
<td>待办事项</td>
</tr>
<tr>
<td>You deserve it</td>
<td>褒义“当之无愧”，贬义“你活该”</td>
</tr>
<tr>
<td>harassment</td>
<td>骚扰</td>
</tr>
<tr>
<td>misunderstanding</td>
<td>误解，误会</td>
</tr>
<tr>
<td>You screw it up</td>
<td>搞砸了</td>
</tr>
<tr>
<td>fall guy</td>
<td>替罪羊</td>
</tr>
<tr>
<td>face music</td>
<td>挨骂，被上司训斥</td>
</tr>
<tr>
<td>kick somebody’s ass</td>
<td>老板训人</td>
</tr>
<tr>
<td>tough</td>
<td>两个意思，一指办事手段果断，不留情面；一指棘手的事情</td>
</tr>
<tr>
<td>lay off</td>
<td>解雇</td>
</tr>
</tbody>
</table>
</div>
<h3 id="travel-on-business"><a href="#travel-on-business" class="headerlink" title="travel on business"></a>travel on business</h3><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>jetlag</td>
<td>越洋出差</td>
</tr>
<tr>
<td>memo</td>
<td>备忘录</td>
</tr>
<tr>
<td>reminder</td>
<td>提醒一下</td>
</tr>
<tr>
<td>sticker</td>
<td>便签一种名为“post-it”的黄色小纸片</td>
</tr>
<tr>
<td>book</td>
<td>订机票，订酒店</td>
</tr>
<tr>
<td>go by book</td>
<td>按规章办事</td>
</tr>
<tr>
<td>expense</td>
<td>费用</td>
</tr>
<tr>
<td>budget</td>
<td>预算</td>
</tr>
<tr>
<td>petty cash</td>
<td>出差或办事前，跟财务领取的备用金</td>
</tr>
<tr>
<td>operator/receptionist</td>
<td>前台/接线员</td>
</tr>
<tr>
<td>extension</td>
<td>分机</td>
</tr>
<tr>
<td>reserve</td>
<td>秘书经常干的活，定餐位</td>
</tr>
<tr>
<td>beverage bar</td>
<td>喝水休息的地方</td>
</tr>
<tr>
<td>coffee/tea break</td>
<td>大公司工作时间内的小休</td>
</tr>
<tr>
<td>first-aid</td>
<td>指公司内的医药箱</td>
</tr>
<tr>
<td>presentation</td>
<td>简报，一般用ppt来做</td>
</tr>
<tr>
<td>outing</td>
<td>重要项目完成后，老板带大家出去疯一次</td>
</tr>
<tr>
<td>hangout</td>
<td>出去玩</td>
</tr>
<tr>
<td>gettogether</td>
<td>聚一聚</td>
</tr>
<tr>
<td>stand tree</td>
<td>请客“I stand tree this time.”这次我请客。</td>
</tr>
<tr>
<td>go dutch</td>
<td>各付各帐</td>
</tr>
<tr>
<td>localize</td>
<td>本地化</td>
</tr>
</tbody>
</table>
</div>
<h3 id="外企公司常用缩写"><a href="#外企公司常用缩写" class="headerlink" title="外企公司常用缩写"></a>外企公司常用缩写</h3><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>RGDS</td>
<td>regards 关于</td>
</tr>
<tr>
<td>TKS</td>
<td>thanks</td>
</tr>
<tr>
<td>ASAP</td>
<td>as soon as posible</td>
</tr>
<tr>
<td>BTW</td>
<td>by the way</td>
</tr>
<tr>
<td>FW</td>
<td>forward</td>
</tr>
<tr>
<td>COD</td>
<td>code of conduct</td>
</tr>
</tbody>
</table>
</div>
<h3 id="公司行为规范准则"><a href="#公司行为规范准则" class="headerlink" title="公司行为规范准则"></a>公司行为规范准则</h3><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>OL</td>
<td>office lady</td>
</tr>
<tr>
<td>EG</td>
<td>for example</td>
</tr>
<tr>
<td>FYI</td>
<td>for you information</td>
</tr>
<tr>
<td>ETC</td>
<td>esmated time of complete</td>
</tr>
<tr>
<td>ETS</td>
<td>esmated time of shipping</td>
</tr>
<tr>
<td>NG</td>
<td>no good</td>
</tr>
<tr>
<td>NFG</td>
<td>no fxxking good</td>
</tr>
<tr>
<td>FNG</td>
<td>fxxking new guy 常指把事情搞得一团糟的新员工</td>
</tr>
<tr>
<td>SOB</td>
<td>son of a bitch</td>
</tr>
<tr>
<td>cc</td>
<td>copies send to</td>
</tr>
</tbody>
</table>
</div>
<p>When are you free? 你什么时候有空?<br>Friday after 3:00. 星期五3点以后有空。<br>When are you available? 你什么时候有空？<br>That’s a bad day for me. 那天我不行。<br>That day is fine. 那天我可以。<br>When can I come over? 我什么时候去合适? （*come over“顺便拜访”。）<br>When can I stop by? 我什么时候可以去你那儿坐坐?<br>When should I come? 我什么时候来合适?<br>You decide when. 你定时间吧。<br>I’ll leave it up to you. 全交给你了。<br>It’s your decision. 你定吧。<br>You decide where. 你定地点吧。<br>Wherever you want is okay. 哪儿都行，只要你觉得好。<br>Is seven convenient for you? / Is seven okay for you? 7点行吗?<br>When can you come over? / What time can you make it? 你几点能来?<br>Is it too early? 太早了吗?<br>Is it too late? 太晚了吗<br>How’s the project going? 项目进展得怎么样？<br>Great! We’re way ahead of schedule. 非常好！我们要提前完工了。<br>We’re right on target. 我们正按计划进行。<br>Well, frankly, we’re running a little behind. 坦白地说，我们有点落后了。<br>Folks, we’re behind the eight-ballin meeting our sales target. Let’s speed things up. 兄弟们，我们都快完不成销售目标了。我们得抓紧啊。<br>It’s 70% done. 已经完成70％了。<br>It’ll be completed on time. 会按时完成的。<br>We’re halfway there. 我们已经完成一半了。<br>Have the milestones been identified for the new project? 新项目的关键活动都已经确定了吗？<br>What delivery date are we looking at? 什么时候交货？<br>There must be no further delays. The drop-dead date/deadline is next Friday’s close of business.不能再推迟了，最后期限是下周五下班的时候。<br>We are approaching the critical point for success or failure of this project. 我们正处在关系到整个工程成败的关键时刻。<br>I’ve been back and forth.我犹豫不定。<br>what was tonight?今晚本来要做什么？<br>this is so meant to be!这就是天意！<br>she’s gonna be crushed.她会崩溃的。<br>he can’t come to the phone now.他现在不能接电话<br>ready for a refill?我再给你倒一杯吧？<br>I love what u have done with this place.我喜欢这里的布置。<br>I can’t feel my hands.我手麻了。<br>have an affair 外遇<br>will anyone miss me if i weren’t here? 我在不在这里有什么区别吗？<br>I saw a lot of stuff.我大开眼界了<br>call security 通知警卫<br>does sth. mean squat to u? 对你来说sth狗屁不是吗？<br>what’s up with the greedy? 怎么这么贪啊？<br>work an extra shift 多轮一班<br>go on, i dare u! 有种你就去！<br>u r a freak! 你这个变态！<br>I sensed it was u.我感觉到是你了、<br>I apologize on behalf of him. 我替他道歉。<br>why are u changing the subject? 为什么要转移话题？<br>there’s no need to place blame.没有指责的必要。<br>it’s gonna leave a stain。这要留印子的。<br>I have part of the fault.我也有责任。<br>they are all well received 收到的反响都很好<br>talk u up 说你的好话<br>stand firm to 努力坚持<br>I was just leering 我只是用余光看看<br>organize my thoughts 整理思绪<br>get a little preoccupied 事先有事<br>no way to recover 没有掩饰的机会了<br>admire your candor你还真胆大<br>we are rolling 摄像机正在拍摄<br>go through this stack 看看这一叠<br>r u spying on me？你监视我？<br>just messing with u！跟你开玩笑呢！<br>enough is enough！闹够了<br>flyers 寻人（物）海报<br>it’s insensitive of me。我这么做很伤人<br>nod along 跟着点头<br>a totally separate subject 完全题外话<br>I thought it was the other way around 我以为是反过来的<br>close my bank account 注销银行卡<br>I feel wild today 我今天好亢奋！<br>I’m kind of beat 我有点累了<br>can u get the door?你能去开门吗<br>make a huge fool of myself 出了洋相<br>r u mocking me? 你嘲笑我？<br>sth.is beyond crap 那是扯淡<br>any luck?找到了吗？<br>don’t u rush me.别催我！<br>it doesn’t count.那不算。<br>she’s healed.她好了。（病或者伤害）<br>overreact 反应过度<br>patch things up with sb.和某人修复关系<br>corss that off my list 从单子上划掉<br>how did it go?怎么样？<br>present an award 颁奖<br>cut him some slack 放他一马<br>get over with 忘记<br>get in line排队（everybody get in line)大家排好队<br>I don’t have the energy for this我没有能力应付这个<br>you got me.你还真问住我了<br>The proposal is due two weeks from Monday.这个方案两周后的那个周一交。<br>We have to submit the final report by Thursday.我们必须在星期四前把最终报告交上去。<br>We need to report every other week. 或者 We need to report every two weeks.我们每隔一周就要汇报. （我们每两周汇报一次）<br>We need to do research every single day.我们每一天都必须做研究。<br>You can take your time though.不过你可以慢慢做。<br>It took me a while to figure out how to solve this problem.我花了好一会儿才想出如何解决这个问题。<br>We are out of time. 或者We run out of time.|我们时间不够了。<br>How much longer will it take you to get all of this stuff done? 你还要多久才能把事情做完?<br>How much longer would you need? 你还要多久才能把事情做完?<br>How long?是询问需要多长时间，How much longer? 是还需要多久？<br>Give me ten more minutes.再给我十分钟。<br>I don’t want to be the last-minute person next time.我下次不要再临时抱佛脚了。</p>
<h3 id="公司高层职位的英文缩写"><a href="#公司高层职位的英文缩写" class="headerlink" title="公司高层职位的英文缩写"></a>公司高层职位的英文缩写</h3><div class="table-container">
<table>
<thead>
<tr>
<th>position</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>CEO</td>
<td>Chief Executive Officer 首席执行官</td>
</tr>
<tr>
<td>CFO</td>
<td>Chief Financial Officer 首席财务官</td>
</tr>
<tr>
<td>COO</td>
<td>Chief Operated Officer 首席运营官</td>
</tr>
<tr>
<td>CTO</td>
<td>Chief Technology Officer 首席技术官</td>
</tr>
<tr>
<td>CIO</td>
<td>Chief Information Officer 首席信息官</td>
</tr>
<tr>
<td>CRO</td>
<td>Chief Risk Officer 首席风险官</td>
</tr>
</tbody>
</table>
</div>
<p>==========================================================<br>艺术总监 【CAO】 chief Artistic officer<br>首席品牌官【CBO】 chief brand officer<br>首席文化官【CCO】 Chief Cultural Officer<br>开发总监 【CDO】 chief Development officer<br>首席执行官【CEO】 Chief Executive officer<br>首席财务官【CFO】 Chief finance officer<br>人事总监 【CHO】 Chief Human resource officer<br>首席信息官【CIO】 chief information officer<br>首席知识官【CKO】 chief knowledge officer<br>首席市场官【CMO】 chief Marketing officer<br>首席谈判官【CNO】 chief Negotiation officer<br>首席营运官【COO】 chief Operation officer<br>公关总监 【CPO】 chief Public relation officer<br>质量总监 【CQO】 chief Quality officer<br>销售总监 【CSO】 chief Sales officer<br>首席技术官【CTO】 chief Technology officer<br>评估总监 【CVO】 chief Valuation officer</p>
<hr>
<p>GM：General Manager 总经理<br>VP：Vice President 副总裁FVP（First Vice President）第一副总裁<br>AVP：Assistant Vice President 副总裁助理<br>HRD：Human Resource Director 人力资源总监<br>OD：Operations Director 运营总监<br>MD：Marketing Director 市场总监<br>OM：Operations Manager 运作经理<br>PM：Production Manager生产经理、Product Manager产品经理、Project Manager项目经理)<br>注：这里面变化比较多，要结合谈话时的背景来判断究竟是指哪种身份）<br>BM（Branch Manager）部门经理<br>DM（District Manager）区域经理<br>RM（Regional Manager）区域经理</p>
<hr>
<h3 id="广告公司职位英文对照"><a href="#广告公司职位英文对照" class="headerlink" title="广告公司职位英文对照"></a>广告公司职位英文对照</h3><p>AAD〔Associated Account Director〕——副客户总监<br>AAD〔Associated Art Director〕——副美术指导<br>ACD〔Associated Creative Director〕——副创作总监<br>AD 〔Account Director〕——客户服务总监、业务指导<br>AD〔Art Director〕——美术指导（在创作部可以独挡一面执行美术指导工作的美术监督）<br>AE〔Account Executive〕——客户执行、客户服务、客户主任；预算执行者，负责广告代理商和广告主之间的一切有关业务，观念，预算，广告表现之联系<br>AM 〔Account Manager〕——客户经理<br>AP〔Account Planner〕——客户企划（分策略企划和业务企划两种）</p>
<p>ASM〔Area Sale Manager〕——大区销售经理<br>CD〔Creative Director〕——创作总监、创意总监、创意指导（CD的前身，不是撰稿人便　　是美术设计，因为积累了丰富的经验，并有优异的创作成绩而成为督导）<br>CGH〔Creative Group Head 〕——创意组长〔Computer Visualizer〕——计算机绘图员<br>CW〔Copywriter〕——撰稿人<br>DCS〔Director of Client Service〕——客户主管<br>ECD〔Executive Creative Director〕——执行创意总监<br>FA〔Finish Artist〕——完稿、画师〔Finish Artist Group Head〕——完稿组长<br>GAD〔Group Account Director〕——客户群总监<br>GCD〔Group Creative Director〕——创意群总监<br>GMD〔General Managing Director〕——总经理<br>MD〔Media Director〕——媒体指导、媒介部经理<br>SAD〔Senior Art Director〕——高级美术指导<br>SCW〔Senior Copywriter〕——高级文案〔Copy Director〕——文案指导</p>
<p>〔Media Supervisor〕——媒介主任、媒介总监<br>〔Media Planner〕——媒介策划<br>〔Planning Director〕——企划指导<br>〔Planning Supervisor〕——企划总监<br>〔Print Production Manager〕——平面制作经理<br>〔Production Manager〕——制作经理<br>〔Research Supervisor〕——调查总监<br>〔Studio Manager〕——画房经理、作业室经理<br>〔Traffic Control Specialist（简称Traffic）〕——制管人员<br>〔Traffic Coordinator〕——平面制作统筹<br>〔TV Producer〕——制片<br>〔Visualizer〕——插图家、插画师、绘图员、视觉设计<br>〔Visualizer Group Head〕——视觉设计组长<br>〔Artist〕——正稿员</p>
<hr>
<p>President 总裁<br>Vice-President 副总裁<br>Assistant VP 副总裁助理<br>Executive Marketing Director 市场行政总监<br>General Manager 总经理<br>Branch Manager 部门经理<br>Product Manager 产品经理<br>Project Manager 项目经理<br>Regional Manager 区域经理<br>Production Manager 生产经理<br>Transportation Manager 运输经理<br>Applications Programmer 应用软件程序员<br>Computer Operator 电脑操作员<br>Computer Operations Supervisor 电脑操作主管<br>Hardware Engineer 硬件工程师<br>Computer Technician 电脑技术员<br>MIS Manager 管理信息系统部经理<br>Developmental Engineer 开发工程师<br>Operations Analyst 操作分析<br>Director of Information Services 信息服务主管<br>LAN Administrator 局域网管理员<br>Systems Analyst 系统分析<br>Manager of Network Administration 网络管理经理<br>Systems Engineer 系统工程师<br>Product Support Manager 产品支持经理<br>Systems Programmer 系统程序员<br>VP Sales 销售副总裁<br>VP Marketing 市场副总裁<br>Senior Account Manager 高级客户经理<br>Telemarketing Director 电话销售总监<br>Sales Administrator 销售主管<br>Telemarketer 电话销售员<br>Regional Sales Manager 地区销售经理<br>Tele-Interviewer 电话调查员<br>Regional Account Manager 地区客户经理<br>Salesperson 销售员<br>Sales Representative 销售代表<br>Merchandising Manager 采购经理<br>Sales Manager 销售经理<br>Marketing Consultant 市场顾问<br>Sales Executive 销售执行者<br>Marketing Assistant 市场助理<br>Sales Assistant 销售助理<br>Marketing and Sales Director 市场与销售总监<br>Retail Buyer 零售采购员<br>Market Research Analyst 市场调查分析员<br>Manufacturer’s Representative 厂家代表<br>Purchasing Agent 采购代理<br>Assistant Account Executive 客户管理助理<br>Marketing Manager 市场经理<br>Advertising Manager 广告经理<br>Marketing Intern 市场实习<br>Advertising Coordinator 广告协调员<br>Marketing Director 市场总监<br>Advertising Assistant 广告助理<br>Account Manager 客户经理<br>Account Representative 客户代表<br>Accounting Payable Clerk 应付帐款文员<br>Accounting Assistant 会计助理<br>Accounting Manager 会计经理<br>Accounts Receivable Clerk 应收帐款文员<br>Accounting Clerk 会计文员<br>Certified Public Accountant 注册会计师<br>Senior Accountant 高级会计<br>Chief Financial Officer 首席财务官<br>Audit Manager 审计经理<br>Collections Officer 收款负责人<br>Actuarial Analyst 保险分析员<br>Auditor 审计师<br>Junior Accountant 初级会计<br>Loan Administrator 贷款管理员<br>Management Accountant 管理会计<br>Billing Clerk 票据文员<br>Billing Supervisor 票据管理员<br>Bookkeeper 档案管理<br>Staff Auditor 审计员<br>Bookkeeping Clerk 档案管理助理<br>Budget Analyst 预算分析<br>Tax Accountant 税务会计<br>Credit Analyst 信用分析<br>Credit Manager 信用管理经理<br>Vice-President of Administration and Finance 财务行政副总裁<br>Financial Analyst 财务分析<br>Vice-President of Finance 财务副总裁<br>Financial Consultant 财务顾问<br>Financial Manager 财务经理<br>Financial Planner 财务计划员<br>VP HR 人力资源副总裁<br>Assistant VP HR 人力资源副总裁助理<br>HR Director 人力资源总监<br>Compensation &amp; Benefit Manager 薪酬福利经理<br>Staffing Manager 招聘经理<br>Training Manager 培训经理<br>Benefits Coordinator 员工福利协调员<br>Employer Relations Representative 员工关系代表<br>Payroller 工资专员<br>Training Coordinator 培训协调员<br>Training Specialist 培训专员<br>HR Supervisor (Training) 培训主管<br>Vice-President of Administration 行政副总裁<br>Administrative Director 行政总监<br>Office Manager 办公室经理<br>File Clerk 档案管理员<br>Administration Assistant 行政助理<br>Receptionist 接待员<br>General Office Clerk 办公室文员<br>Secretary 秘书<br>Order Entry Clerk 订单输入文员<br>Operator 接线员<br>Typist 打字员<br>visiting professor 客座教授</p>
<hr>
<p>计算机/互联网/通讯 Technology/Internet<br>首席技术执行官 CTO/VP Engineering<br>技术总监/经理 Technical Director/Manager<br>信息技术经理 IT Manager<br>信息技术主管 IT Supervisor<br>信息技术专员 IT Specialist<br>项目经理/主管 Project Manager/Supervisor<br>项目执行/协调人员 Project Specialist / Coordinator<br>系统分析员 System Analyst<br>高级软件工程师 Senior Software Engineer<br>软件工程师 Software Engineer<br>系统工程师 System Engineer<br>高级硬件工程师 Senior Hardware Engineer<br>硬件工程师 Hardware Engineer<br>通信技术工程师 Communications Engineer<br>ERP技术/应用顾问 ERP Technical/Application Consultant<br>数据库工程师 Database Engineer<br>技术支持经理 Technical Support Manager<br>技术支持工程师 Technical Support Engineer<br>品质经理 QA Manager<br>信息安全工程师 Information Security Engineer<br>软件测试工程师 Software QA Engineer<br>硬件测试工程师 Hardware QA Engineer<br>测试员 Test Engineer<br>网站营运经理/主管 Web Operations Manager/Supervisor<br>网络工程师 Network Engineer<br>系统管理员/网管 System Manager/Webmaster<br>网页设计/制作 Web Designer/Production<br>技术文员/助理 Technical Clerk/Assistant</p>
<p>销售 Sales<br>销售总监 Sales Director<br>销售经理 Sales Manager<br>区域销售经理 Regional Sales Manager<br>客户经理 Sales Account Manager<br>渠道/分销经理 Channel/Distribution Manager<br>渠道主管 Channel Supervisor<br>销售主管 Sales Supervisor<br>销售代表 Sales Representative / Executive<br>销售工程师 Sales Engineer<br>医药代表 Pharmaceutical Sales Representative<br>保险代理 Insurance Agent<br>销售助理 Sales Assistant / Trainee<br>商务经理 Business Manager<br>商务专员/助理 Business Executive/Assistant<br>销售行政经理 Sales Admin. Manager<br>销售行政主管 Sales Admin. Supervisor<br>售前/售后技术服务经理 Technical Service Manager<br>售前/售后技术服务主管 Technical Service Supervisor<br>售前/售后技术服务工程师 Technical Service Engineer<br>售后/客户服务（非技术）经理 Customer Service Manager<br>售后/客户服务（非技术）主管 Customer Service Supervisor<br>售后/客户服务（非技术）专员 Customer Service Executive<br>经销商 Distributor</p>
<p>市场/公关/广告 Marketing/PR/Advertising<br>市场/广告总监 Marketing/Advertising Director/VP<br>市场/营销经理 Marketing Manager<br>市场/营销主管 Marketing Supervisor<br>市场/营销专员 Marketing Executive/Communication<br>市场助理 Marketing Assistant / Trainee<br>产品/品牌经理 Product/Brand Manager<br>产品/品牌主管 Product/Brand Supervisor<br>市场通路经理 Trade Marketing Manager<br>市场通路主管 Trade Marketing Supervisor<br>促销经理 Promotions Manager<br>促销主管 Promotions Supervisor<br>促销员 Promotions Specialist<br>市场分析/调研人员 Market Analyst/ Research Analyst<br>公关/会务经理 Public Relations Manager<br>公关/会务主管 Public Relations Supervisor<br>公关/会务专员 Public Relations Executive<br>媒介经理 Media Manager<br>媒介人员 Media Specialist<br>企业/业务发展经理 Business Development Manager<br>企业策划人员 Corporate Planning<br>广告策划/设计/文案 Advertising Creative/Design/Copy writer</p>
<p>财务/审计/统计/金融 Finance/Accounting/Banking<br>财务总监 CFO/Finance Director/VP<br>财务经理 Finance Manager<br>财务主管/总帐主管 Finance Supervisor<br>会计经理/会计主管 Accounting Manager/Supervisor<br>会计 Accountant / Accounting Trainee<br>出纳员 Cashier<br>财务/会计助理 Finance/Accounting Assistant<br>财务分析经理/主管 Financial Analysis Manager/Supervisor<br>财务分析员 Financial Analyst<br>成本经理/成本主管 Cost Accounting Manager/Supervisor<br>成本管理员 Cost Accounting Specialist<br>审计经理/主管 Audit Manager/Supervisor<br>审计专员/助理 Audit Executive/Assistant<br>税务经理/税务主管 Tax Manager/Supervisor<br>税务专员 Tax Executive<br>证券经纪人 Stock Broker<br>投资顾问 Investment Advisor<br>注册分析师 Certified Investment/Financial Analyst<br>投资/基金项目经理 Investment Manager<br>融资经理/融资主管 Treasury Manager/Supervisor<br>融资专员 Treasury Specialist<br>行长/副行长 President/Vice-President/Branch Manager<br>风险控制 Risk Management<br>进出口/信用证结算 Trading / LC Officer<br>清算人员 Settlement Officer<br>外汇主管 Foreign Exchange Supervisor<br>高级客户经理/客户经理 Senior Relationship Manager<br>客户主管/专员 Relationship?Supervisor/Executive<br>信贷/信用调查/分析人员 Loan/Credit Officer<br>银行柜台出纳 Bank Teller<br>统计员 Statistician</p>
<p>生产/营运/工程 Manufacturing/Operations/Engineering<br>工厂经理/厂长 Plant/Factory Manager<br>总工程师/副总工程师 Chief Engineer<br>项目经理/主管 Project Manager/Supervisor<br>项目工程师 Project Engineer<br>营运经理 Operations Manager<br>营运主管 Operations Supervisor<br>生产经理/车间主任 Production Manager/Workshop Supervisor<br>生产计划协调员 Production Planning Executive/Officer<br>生产主管/督导/领班 Production Supervisor/Team Leader<br>技术/工艺设计经理/主管 Technical/Industrial Design Mgr./Spvr.<br>技术/工艺设计工程师 Technical/Industrial Design Engineer<br>实验室负责人/工程师 Lab Manager/Engineer<br>工程/设备经理 Engineering/Facility Manager<br>工程/设备主管 Engineering/Facility Supervisor<br>工程/设备工程师 Engineering/Facility Engineer<br>电气/电子工程师 Electrical/Electronics Engineer<br>机械工程师 Mechanical Engineer<br>机电工程师 Electrical &amp; Mechanical Engineer<br>维修工程师 Maintenance Engineer<br>质量经理 QA Manager<br>质量主管 QA Supervisor<br>质量工程师 QA Engineer<br>质量检验员/测试员 QA Inspector<br>认证工程师 Certification Engineer<br>安全/健康/环境经理/主管 Safety/Health/Environment Manager/Supervisor<br>安全/健康/环境工程师 Safety/Health/Environment Engineer<br>工程绘图员 Project Drafting Specialist<br>机械制图员 Drafting Specialist<br>化验员 Laboratory Technician<br>技工 Technician / Engineer Trainee<br>电工 Electrician<br>服装打样/制版 Clothing/Apparel Sample Production</p>
<p>行政/人事/后勤 Admin./HR/Support Services<br>行政/人事总监 Admin/Human Resources Director<br>人事经理 Human Resources Manager<br>人事主管 Human Resources Supervisor<br>人事专员 Human Resources Specialist<br>人事助理 Human Resources Assistant<br>招聘经理/主管 Recruiting Manager/Supervisor<br>薪资福利经理/主管 Compensation &amp; Benefits Mgr./Supervisor<br>薪资福利专员/助理 Compensation &amp; Benefits Specialist/Assistant<br>培训经理/主管 Training Manager/Supervisor<br>培训专员/助理 Training Specialist/Assistant<br>行政经理/主管/办公室主任 Admin Manager/Supervisor/Office Manager<br>行政专员/助理 Admin Staff/Assistant<br>经理助理/秘书 Executive Assistant/Secretary<br>前台接待/总机 Receptionist<br>后勤 Office Support<br>资料管理员 Information / Data Management Specialist<br>电脑操作员/打字员 Computer Operator/Typist</p>
<p>高级管理 Senior Management<br>首席执行官/总经理 CEO/GM/President<br>副总经理 Deputy GM/VP/Management Trainee<br>总监 Director<br>合伙人 Partner<br>总裁/总经理助理 CEO/GM/President Assistant</p>
<p>物流/贸易/采购 Logis./Trading/Merchand./Purch.<br>物流经理 Logistics Manager<br>物流主管 Logistics Supervisor<br>物流专员/助理 Logistics Specialist/Assistant<br>物料经理 Materials Manager<br>物料主管 Materials Supervisor<br>采购经理 Purchasing Manager<br>采购主管 Purchasing Supervisor<br>采购员 Purchasing Specialist/Staff<br>外贸/贸易经理/主管 Trading Manager/Supervisor<br>外贸/贸易专员/助理 Trading Specialist/Assistant<br>业务跟单经理 Merchandiser Manager<br>高级业务跟单 Senior Merchandiser<br>业务跟单 Merchandiser<br>助理业务跟单 Assistant Merchandiser<br>仓库经理/主管 Warehouse Manager<br>仓库管理员 Warehouse Specialist<br>运输经理/主管 Distribution Manager/Supervisor<br>报关员 Customs Specialist<br>单证员 documentation Specialist<br>船务人员 Shipping Specialist<br>快递员 Courier<br>理货员 Warehouse Stock Management</p>
<p>文字/艺术/设计 Writer/Editor/Creative Artist/Designer<br>编辑/作家/撰稿人 Editor/Writer<br>记者 Journalist / Reporter<br>校对/录入 Proofreader/Data Entry Staff<br>排版设计 Layout Designer<br>艺术/设计总监 Creative/Design Director<br>影视策划/制作人员 Entertainment Planning / Production<br>导演 Director<br>摄影师 Photographer<br>音效师 Recording / Sounds Specialist<br>演员/模特/主持人 Actor/Actress/Model/MC<br>平面设计/美术设计 Graphic Artist/Designer<br>纺织/服装设计 Clothing / Apparel Designer<br>工业/产品设计 Industrial Designer<br>工艺品/珠宝设计 Artwork/Jewelry Designer</p>
<p>科研人员 Research Specialist Staff<br>科研管理人员 Research Management<br>科研人员 Research Specialist Staff</p>
<p>律师/法务 Legal<br>律师 Lawyer<br>法务人员 Legal Personnel<br>律师助理 Paralegal/Legal Assistant<br>书记员 Court Clerk</p>
<p>教师 Professor/Teacher<br>教师 ProfessorTeacher<br>教学/教务管理人员 Education/School Administrator<br>助教 Teaching Assistant<br>讲师 Lecturer<br>家教 Tutor</p>
<p>医疗/护理 Medicine / Nursing<br>医生（中、西医） Medical Doctor<br>医学管理人员 Healthcare / Medical Management<br>医药技术人员 Medical Technician<br>药库主任/药剂师 Pharmacist<br>护士/护理人员 Nurse / Nursing Personnel<br>临床协调员 Clinical Coodinator<br>临床研究员 Clinical Researcher<br>麻醉师 Anesthesiologist<br>心理医生 Psychologist/Psychiatrist<br>医药学检验 Clinical Laboratory</p>
<p>咨询/顾问 Consultant<br>专业顾问 Senior Consultant<br>咨询总监 Consulting Director / Partner<br>咨询经理 Consulting Manager<br>咨询员 Consultant</p>
<p>公务员 Official</p>
<p>在校学生 Student<br>应届毕业生 Graduating Student<br>实习生 Intern/Trainee</p>
<p>培训生 Trainee/Intern<br>培训生 Trainee</p>
<p>服务 Service<br>美容/健身顾问 Exercise Coach/Fitness Trainer<br>餐饮/娱乐经理 Banquet Services Manager<br>宾馆/酒店经理 Reception Manager<br>领班 Supervisor<br>服务员 Service Staff<br>营业员/收银员/理货员 Shop Clerk/Salesperson<br>厨师 Chief/Cook<br>导游 Tour Guide<br>司机 Chauffeur/Driver<br>保安 Security<br>寻呼员/话务员 Paging Operator</p>
<p>建筑/房地产 Construction/Real Estate<br>建筑工程师 Architect<br>结构/土建工程师 Structural Engineer<br>电气工程师 Electrical Engineer<br>给排水/暖通工程师 Drainage/HVAC Engineer<br>工程造价师/预结算 Budgeting Specialist<br>建筑工程管理 Construction Management<br>工程监理 Engineering Project Supervisor<br>室内外装潢设计 Decorator<br>城市规划与设计 Urban Design/Planning<br>建筑制图 CAD Drafter<br>施工员 Construction Crew<br>房地产开发/策划 Real Estate Development/Planning<br>房地产评估 Real Estate Appraisal<br>房地产中介/交易 Real Estate Agent/Broker<br>物业管理 Property Management</p>
<p>翻译 Translator<br>英语翻译 English Translation<br>日语翻译 Japanese Translator<br>德语翻译 German Translator<br>法语翻译 French Translator<br>俄语翻译 Russian Translator<br>西班牙语翻译 Spanish Translator<br>朝鲜语翻译 Korean Translator<br>其他语种翻译 Other Language Translator<br>兼职 Part Time</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
  </entry>
  <entry>
    <title>考研5500</title>
    <url>/2020/05/%E8%80%83%E7%A0%945500/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>英语</category>
      </categories>
  </entry>
  <entry>
    <title>项目管理</title>
    <url>/2020/05/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="架构评审"><a href="#架构评审" class="headerlink" title="架构评审"></a>架构评审</h3><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><h3 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h3><h3 id="看板管理"><a href="#看板管理" class="headerlink" title="看板管理"></a>看板管理</h3><h3 id="开发模型"><a href="#开发模型" class="headerlink" title="开发模型"></a>开发模型</h3><h4 id="SCRUM"><a href="#SCRUM" class="headerlink" title="SCRUM"></a>SCRUM</h4><h4 id="极限编程"><a href="#极限编程" class="headerlink" title="极限编程"></a>极限编程</h4><h4 id="PDCA-循环质量管理"><a href="#PDCA-循环质量管理" class="headerlink" title="PDCA 循环质量管理"></a>PDCA 循环质量管理</h4><h2 id="政策、法规"><a href="#政策、法规" class="headerlink" title="政策、法规"></a>政策、法规</h2><h2 id="团队管理"><a href="#团队管理" class="headerlink" title="团队管理"></a>团队管理</h2>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>设计思想</title>
    <url>/2020/05/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>分布式原理</title>
    <url>/2020/05/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><h3 id="CAP-原则"><a href="#CAP-原则" class="headerlink" title="CAP 原则"></a>CAP 原则</h3><h3 id="扩展性设计"><a href="#扩展性设计" class="headerlink" title="扩展性设计"></a>扩展性设计</h3><h3 id="稳定性和高可用"><a href="#稳定性和高可用" class="headerlink" title="稳定性和高可用"></a>稳定性和高可用</h3><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h2 id="分布式算法"><a href="#分布式算法" class="headerlink" title="分布式算法"></a>分布式算法</h2><h2 id="唯一-ID-生成"><a href="#唯一-ID-生成" class="headerlink" title="唯一 ID 生成"></a>唯一 ID 生成</h2>]]></content>
  </entry>
  <entry>
    <title>网络攻击</title>
    <url>/2020/05/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>安全</title>
    <url>/2020/05/%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="web-安全"><a href="#web-安全" class="headerlink" title="web 安全"></a>web 安全</h3><h3 id="DDos-防范"><a href="#DDos-防范" class="headerlink" title="DDos 防范"></a>DDos 防范</h3><h3 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h3><h3 id="服务器安全"><a href="#服务器安全" class="headerlink" title="服务器安全"></a>服务器安全</h3><h3 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h3><h3 id="授权和认证"><a href="#授权和认证" class="headerlink" title="授权和认证"></a>授权和认证</h3>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
  </entry>
  <entry>
    <title>性能优化</title>
    <url>/2020/05/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>网络原理</title>
    <url>/2020/05/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h3 id="IP-地址转换"><a href="#IP-地址转换" class="headerlink" title="IP 地址转换"></a>IP 地址转换</h3><h3 id="路由交换"><a href="#路由交换" class="headerlink" title="路由交换"></a>路由交换</h3><h4 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h4><h4 id="交换协议"><a href="#交换协议" class="headerlink" title="交换协议"></a>交换协议</h4>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>数据库原理</title>
    <url>/2020/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>中间件</title>
    <url>/2020/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="web-server"><a href="#web-server" class="headerlink" title="web server"></a>web server</h3><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h3 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h3><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><h3 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h3>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2020/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id><a href="#" class="headerlink" title="#"></a>#</h1><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><h3 id="常见的设计模式"><a href="#常见的设计模式" class="headerlink" title="常见的设计模式"></a>常见的设计模式</h3><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><h3 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h3><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统原理</title>
    <url>/2020/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a href="/2020/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" title="计算机组成原理">计算机组成原理</a>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="BootLoader"><a href="#BootLoader" class="headerlink" title="BootLoader"></a>BootLoader</h3><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><h3 id="文件系统管理"><a href="#文件系统管理" class="headerlink" title="文件系统管理"></a>文件系统管理</h3><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><h3 id="系统驱动管理"><a href="#系统驱动管理" class="headerlink" title="系统驱动管理"></a>系统驱动管理</h3><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
  </entry>
  <entry>
    <title>并发处理</title>
    <url>/2020/05/%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><blockquote>
<p>并行和并发的区别</p>
</blockquote>
<ul>
<li>多线程<ul>
<li>线程安全</li>
</ul>
</li>
<li>一致性、事务<ul>
<li>事务 ACID 特性</li>
<li>事务的隔离级别</li>
<li>MVCC</li>
</ul>
</li>
<li>锁<ul>
<li>悲观锁</li>
<li>乐观锁</li>
<li>公平锁 和 非公平锁</li>
<li>互斥锁</li>
<li>共享锁</li>
<li>死锁</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>KVM安装</title>
    <url>/2020/05/KVM%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="KVM-安装配置"><a href="#KVM-安装配置" class="headerlink" title="KVM 安装配置"></a>KVM 安装配置</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><ul>
<li>操作系统：centos7.x</li>
<li>内核版本：3.10.0-327.el7.x86_64</li>
<li>IP地址：192.168.1.1</li>
</ul>
<h3 id="检查CPU"><a href="#检查CPU" class="headerlink" title="检查CPU"></a>检查CPU</h3><ul>
<li>和Xen不同，KVM需要有CPU的支持（IntelVT)或(AMDSVM)</li>
<li>在安装KVM之前检查一下CPU是否提供了虚拟技术的支持<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">egrep<span class="string">'vmx|svm'</span> / proc / cpuinfo</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装KVM"><a href="#安装KVM" class="headerlink" title="安装KVM"></a>安装KVM</h3><h4 id="安装虚拟化的组件"><a href="#安装虚拟化的组件" class="headerlink" title="安装虚拟化的组件"></a>安装虚拟化的组件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install kvm pytho-virtinst libvirt bridge-utils virt-manager \</span><br><span class="line">qemu-kvm-tools virt-viewer virt-v2v libguestfs-tools-c \</span><br><span class="line">libguestfs-tools virt-install.noarch \</span><br></pre></td></tr></table></figure>
<h4 id="远程管理配置"><a href="#远程管理配置" class="headerlink" title="远程管理配置"></a>远程管理配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim / etc / sysconfig / libvirtd</span><br><span class="line">LIBVIRTD_CONFIG=/etc/libvirt/libvirtd.conf</span><br><span class="line">LIBVIRTD_ARGS=<span class="string">"--listen"</span></span><br><span class="line"></span><br><span class="line">sed  -i <span class="string">'/LIBVIRTD_CONFIG/s#=.*#=/etc/libvirt/libvirtd.conf#g'</span> /etc/sysconfig/libvirtd</span><br><span class="line">sed  -i <span class="string">'/LIBVIRTD_ARGS/s#=.*#=="--listen"#g'</span> /etc/sysconfig/libvirtd</span><br><span class="line"></span><br><span class="line"><span class="comment"># libvirtd tcp连接的设置</span></span><br><span class="line">vim /etc/libvirt/libvirtd.conf</span><br><span class="line"><span class="comment"># 这里主要是tcp连接的设置末尾添加如下：</span></span><br><span class="line">listen_tls = 0</span><br><span class="line">listen_tcp = 1</span><br><span class="line">tcp_port = <span class="string">"16509"</span>  <span class="comment"># tcp端口</span></span><br><span class="line">listen_addr = <span class="string">"192.168.0.103"</span>  <span class="comment"># 监听IP</span></span><br><span class="line">unix_sock_ro_perms = <span class="string">"0777"</span></span><br><span class="line">unix_sock_rw_perms = <span class="string">"0770"</span></span><br><span class="line">auth_tcp = <span class="string">"none"</span></span><br><span class="line">max_clients = 1024  <span class="comment"># 最大连接书</span></span><br><span class="line">min_workers = 100</span><br><span class="line">max_workers = 200</span><br><span class="line">max_requests = 20</span><br><span class="line">max_client_requests = 50</span><br></pre></td></tr></table></figure>
<h4 id="virsh控制台"><a href="#virsh控制台" class="headerlink" title="virsh控制台"></a>virsh控制台</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh -c qemu+tcp://192.168.1.1/system</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1006错误</span></span><br><span class="line">yum -y install novnc</span><br></pre></td></tr></table></figure>
<h4 id="对vnc的设置"><a href="#对vnc的设置" class="headerlink" title="对vnc的设置"></a>对vnc的设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里主要是对vnc的设置，一会儿通过vnc - viewer连接来进行安装，末尾添加</span></span><br><span class="line">vim /etc/libvirt/qemu.conf</span><br><span class="line">vnc_listen = <span class="string">"0.0.0.0"</span></span><br><span class="line">vnc_password = <span class="string">"m23456"</span>  <span class="comment"># vnc连接密码</span></span><br><span class="line">remote_display_port_min = 5900  <span class="comment"># vnc最小端口</span></span><br><span class="line">remote_display_port_max = 65500  <span class="comment"># vnc最大端口</span></span><br></pre></td></tr></table></figure>
<h4 id="确认一下是否kvm安装成功"><a href="#确认一下是否kvm安装成功" class="headerlink" title="确认一下是否kvm安装成功"></a>确认一下是否kvm安装成功</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/libvirtd restart</span><br><span class="line">or</span><br><span class="line">systemctl restart libvirtd.service</span><br></pre></td></tr></table></figure>
<h4 id="查看是否启动"><a href="#查看是否启动" class="headerlink" title="查看是否启动"></a>查看是否启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps - ef | grep libvirtd</span><br><span class="line">systemctl status libvirtd.service</span><br></pre></td></tr></table></figure>
<h4 id="查看kvm模块是否正常加载"><a href="#查看kvm模块是否正常加载" class="headerlink" title="查看kvm模块是否正常加载"></a>查看kvm模块是否正常加载</h4><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">lsmod <span class="string">|grep kvm</span></span><br></pre></td></tr></table></figure>
<h5 id="配置网桥连接"><a href="#配置网桥连接" class="headerlink" title="配置网桥连接"></a>配置网桥连接</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置网桥br0</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-br0</span><br><span class="line">DEVICE = br0</span><br><span class="line">TYPE = Bridge</span><br><span class="line">ONBOOT = <span class="literal">yes</span></span><br><span class="line">NM_CONTROLLED = <span class="literal">yes</span></span><br><span class="line">BOOTPROTO = static</span><br><span class="line">IPADDR = 192.168.1.1</span><br><span class="line">NETMASK = 255.255.255.0</span><br><span class="line">GATEWAY = 192.168.1.254</span><br><span class="line">DNS1 = 202.106.0.20</span><br><span class="line"></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-em1</span><br><span class="line">DEVICE = em1</span><br><span class="line">TYPE = Ethernet</span><br><span class="line">ONBOOT = <span class="literal">yes</span></span><br><span class="line">BRIDGE = br0</span><br><span class="line">NM_CONTROLLED = <span class="literal">yes</span></span><br></pre></td></tr></table></figure>
<h5 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/etc/init.d<span class="built_in">/network </span>restart</span><br></pre></td></tr></table></figure>
<h5 id="查看网络连接"><a href="#查看网络连接" class="headerlink" title="查看网络连接"></a>查看网络连接</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">brctl show</span><br><span class="line"><span class="comment"># 如果配置成功，会有以下输出：</span></span><br><span class="line">bridge name    <span class="built_in"> bridge </span>id               STP enabled     interfaces</span><br><span class="line">br0             8000.1866daecc2c4       <span class="literal">no</span>              em1</span><br><span class="line">                                                        vnet0</span><br><span class="line">                                                        vnet1</span><br><span class="line">                                                        vnet10</span><br><span class="line">                                                        vnet2</span><br><span class="line">                                                        vnet3</span><br><span class="line">                                                        vnet4</span><br><span class="line">                                                        vnet5</span><br><span class="line">virbr0          8000.5254003912f1       <span class="literal">yes</span>             virbr0-nic</span><br></pre></td></tr></table></figure>
<h5 id="检查ip转发是否开启"><a href="#检查ip转发是否开启" class="headerlink" title="检查ip转发是否开启"></a>检查ip转发是否开启</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat / etc / sysctl.conf | grep</span><br><span class="line">ip_forward</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">如果没有开启：</span><br><span class="line">vim / etc / sysctl.conf</span><br><span class="line">修改net.ipv4.ip_forward = 1</span><br><span class="line">/ sbin / sysctl - p</span><br></pre></td></tr></table></figure>
<h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /data/images - p</span><br><span class="line">mkdir /data/software/ -p</span><br><span class="line"></span><br><span class="line">virt-install --name=<span class="built_in">test</span> --ram 4096 --vcpus = 2 \</span><br><span class="line">--disk path = / data / images / test.img, size = 10, format = raw, bus = virtio \</span><br><span class="line">--cdrom / home / software / CentOS - 7 - x86_64 - DVD - 1810.iso - -network bridge = br0, model = virtio \</span><br><span class="line">--vnc --accelerate --force --autostart</span><br><span class="line"></span><br><span class="line">yum - y install acpid</span><br><span class="line"></span><br><span class="line">virsh dumpxml mechine1</span><br><span class="line">virsh create mechine1.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里解释一下主要的几个参数含义：</span></span><br><span class="line">--name      给虚拟机起个名字</span><br><span class="line">--ram       分配给虚拟机的内存，单位MB</span><br><span class="line">--vcpus     分配给虚拟机的cpu个数</span><br><span class="line">--cdrom     指定安装文件的全路径</span><br><span class="line">--disk      指定虚拟机img文件路径，如果虚拟机使用lvm分区，这里就指向到lvm的分区就行</span><br><span class="line">size        虚拟机文件大小，单位GB</span><br><span class="line">bus         虚拟机磁盘使用的总线类型，为了使虚拟机达到好的性能，这里使用virtio</span><br><span class="line">cache       虚拟机磁盘的cache类型</span><br><span class="line">--network</span><br><span class="line">bridge      指定桥接网卡</span><br><span class="line">model       网卡模式，这里也是使用性能更好的virtio</span><br><span class="line">--graphics  图形参数</span><br></pre></td></tr></table></figure>
<h3 id="vnc-连接虚拟机"><a href="#vnc-连接虚拟机" class="headerlink" title="vnc 连接虚拟机"></a>vnc 连接虚拟机</h3><p>通过在windows下使用vnc - viewer来连接172.16.57.24: 5902，并输入设置的密码，即可进行安装。</p>
<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆虚拟机</span></span><br><span class="line">一般制作一个常用的虚拟机模板，下次安装可以直接来克隆这个模板。</span><br><span class="line">virt-clone --connect</span><br><span class="line"><span class="symbol">qemu:</span>/<span class="regexp">//system</span> --original=tomcat_01 --name=tomcat_02 --file=<span class="regexp">//var</span><span class="regexp">/lib/libvirt</span><span class="regexp">/images/tomcat</span>_02.img</span><br><span class="line">--original  克隆的虚拟机对象</span><br><span class="line">--name      克隆的新虚拟机名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加磁盘</span></span><br><span class="line"><span class="comment"># 一般虚拟机的磁盘结构为系统盘加数据盘，当系统发生故障时，可以重新建一个系统盘，而数据盘不会丢失。 添加磁盘操作:</span></span><br><span class="line">cd /var/<span class="class"><span class="keyword">lib</span>/<span class="title">libvirt</span>/<span class="title">images</span>/</span></span><br><span class="line"><span class="comment"># 创建一块100G的磁盘</span></span><br><span class="line">qemu-img create -f raw test_add.img <span class="number">100</span>G</span><br><span class="line"><span class="comment"># 添加到虚拟机</span></span><br><span class="line">virsh attach -disk tomcat_01 /var/<span class="class"><span class="keyword">lib</span>/<span class="title">libvirt</span>/<span class="title">images</span>/<span class="title">test_add</span>.<span class="title">img</span> <span class="title">vdb</span> --<span class="title">cache</span> <span class="title">none</span></span></span><br><span class="line"><span class="comment"># 动态添加磁盘</span></span><br><span class="line"><span class="comment"># 备份xml文件</span></span><br><span class="line">virsh dumpxml tomcat_01&gt;tomcat_01.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将最新的虚拟机配置重定向到其配置文件中</span></span><br><span class="line">virsh define tomcat_01.xml</span><br><span class="line"><span class="comment"># 这样，新增的磁盘就不会丢了。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># virsh命令的一些操作</span></span><br><span class="line">Autostart   自动开始一个域</span><br><span class="line">Create      从一个 XML 文件创建一个域</span><br><span class="line">Define      从一个 XML 文件定义（但不开始）一个域</span><br><span class="line">edit        编辑某个域的 XML 配置</span><br><span class="line">shutdown    关闭一个域 </span><br><span class="line">start       开始一个（以前定义的）非活跃的域</span><br><span class="line">reboot      重新启动一个域</span><br><span class="line">suspend     挂起一个域</span><br><span class="line">resume      重新恢复一个域</span><br><span class="line">vncdisplay  vnc 显示</span><br></pre></td></tr></table></figure>
<h3 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">qemu</span>-img <span class="meta">info</span> /<span class="meta">opt</span>/CentOS6.<span class="number">5</span>-x86_64.raw</span><br></pre></td></tr></table></figure>
<h3 id="导入系统镜像"><a href="#导入系统镜像" class="headerlink" title="导入系统镜像"></a>导入系统镜像</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果是光盘就需要拷贝 我这边是使用的centos6.5</span></span><br><span class="line">dd <span class="keyword">if</span>=<span class="string">/dev/cdrom</span> of=<span class="string">/opt/CentOS-6.5-x86_64.ios</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟机</span></span><br><span class="line">virt-install <span class="params">--name</span> CentOS6.5 \</span><br><span class="line"><span class="params">--virt-type</span> kvm \</span><br><span class="line"><span class="params">--ram</span> 512 \</span><br><span class="line"><span class="params">--cdrom=/opt/CentOS-6</span>.5-x86_64.ios \</span><br><span class="line"><span class="params">--disk</span> path=<span class="string">/opt/CentOS6.5-x86_64.raw</span> \</span><br><span class="line"><span class="params">--network</span> network=default \</span><br><span class="line"><span class="params">--graphics</span> vnc,listen=0.0.0.0 \</span><br><span class="line"><span class="params">--noautoconsole</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看虚拟机列表</span></span><br><span class="line">virsh list <span class="params">--all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动虚拟机</span></span><br><span class="line">virsh start CentOS6.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有虚拟机列表</span></span><br><span class="line">virsh list <span class="params">--all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟机网络基本设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装电源服务</span></span><br><span class="line">yum -y install acpid</span><br><span class="line"><span class="string">/etc/init.d/acpid</span> start</span><br><span class="line">chkconfig acpid on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网桥</span></span><br><span class="line"><span class="comment"># 把br0添加到eth0</span></span><br><span class="line">brctl addbr br0</span><br><span class="line">brctl addif br0 eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一台虚拟机使用刚才创建的网桥</span></span><br><span class="line">virt-install <span class="params">--name</span> CentOS7.2 <span class="params">--virt-type</span> kvm <span class="params">--ram</span> 1024 <span class="params">--cdrom=/opt/CentOS7</span>.2-x86_64.ios <span class="params">--disk</span> path=<span class="string">/opt/CentOS7.2.raw</span> <span class="params">--network</span> bridge=br0 <span class="params">--graphics</span> vnc,listen=0.0.0.0 <span class="params">--noautoconsole</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>云计算</category>
      </categories>
  </entry>
  <entry>
    <title>Docker安装</title>
    <url>/2020/05/Docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a href="/2020/05/Docker/" title="Docker概念及原理">Docker概念及原理</a>
<h2 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">sudo yum -y remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新系统</span></span><br><span class="line">yum -y <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装所需包</span></span><br><span class="line">yum -y <span class="keyword">install</span> yum-utils device-mapper-persistent-<span class="keyword">data</span> lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增 Docker 仓库。</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">  <span class="comment">--add-repo \</span></span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Docker CE.</span></span><br><span class="line">yum -y <span class="keyword">install</span> docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment">### 创建 /etc/docker 目录。</span></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment">### 设置 daemon。</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://pe80e41t.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker 启动服务</span></span><br><span class="line">systemctl <span class="keyword">start</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir -p /etc/systemd/system/docker.service.d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker compose install</span></span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)"</span> -o /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/docker-compose</span><br><span class="line">sudo chmod +x /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/docker-compose</span><br><span class="line">sudo <span class="keyword">ln</span> -s /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/docker-compose /usr/<span class="keyword">bin</span>/docker-compose</span><br><span class="line">docker-compose <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<h3 id="重启-Docker"><a href="#重启-Docker" class="headerlink" title="重启 Docker"></a>重启 Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="使用脚本安装"><a href="#使用脚本安装" class="headerlink" title="使用脚本安装"></a>使用脚本安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure>
<h3 id="Docker-镜像加速"><a href="#Docker-镜像加速" class="headerlink" title="Docker 镜像加速"></a>Docker 镜像加速</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">cat <span class="params">&lt;&lt;'EOF' &gt;</span><span class="meta-keyword">/etc/</span>docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://pe80e41t.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl reload docker</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果重启报错，查看这个文件是不是已经注册了 registry</span></span><br><span class="line">cat <span class="meta-keyword">/etc/</span>systemd<span class="meta-keyword">/system/</span>docker.service.d/docker-options.conf</span><br><span class="line"></span><br><span class="line">rm -rf <span class="meta-keyword">/etc/</span>docker/daemon.json</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="简易-docker-安装脚本（Centos版-包含基本主机配置）"><a href="#简易-docker-安装脚本（Centos版-包含基本主机配置）" class="headerlink" title="简易 docker 安装脚本（Centos版,包含基本主机配置）"></a>简易 docker 安装脚本（Centos版,包含基本主机配置）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'GEOF'</span>&gt;docker_install.sh</span><br><span class="line"><span class="function"><span class="title">log</span></span>()&#123;</span><br><span class="line"><span class="comment"># 注释</span></span><br><span class="line"><span class="comment"># log 1 ，使用方法（会将 注释打印出来）</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[0;32m ------<span class="variable">$1</span>、`sed -n "</span>/\&lt;<span class="built_in">log</span> <span class="variable">$1</span>\&gt;/&#123;x;p&#125;;h<span class="string">" <span class="variable">$0</span>`\t------- \e[m"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主机名</span></span><br><span class="line"><span class="built_in">log</span> 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"127.0.0.1   localhost</span></span><br><span class="line"><span class="string">::1         localhost</span></span><br><span class="line"><span class="string">192.168.0.72 k8sn-1</span></span><br><span class="line"><span class="string">192.168.0.73 k8sn-2"</span>&gt;/etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改时区</span></span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line"><span class="built_in">log</span> 2</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line"><span class="built_in">log</span> 3</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">"s/^SELINUX=enforcing/SELINUX=disabled/g"</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 swap</span></span><br><span class="line"><span class="built_in">log</span> 4</span><br><span class="line">swapoff -a;sed -i <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置dns</span></span><br><span class="line"><span class="built_in">log</span> 5</span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;/etc/resolv.conf</span><br><span class="line">nameserver 202.106.0.20</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置镜像源</span></span><br><span class="line"><span class="built_in">log</span> 6</span><br><span class="line">rm  /etc/yum.repos.d/* -rf</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-$(grep -o <span class="string">"release ."</span> /etc/redhat-release |awk <span class="string">'&#123;print $2&#125;'</span>).repo</span><br><span class="line"><span class="comment">#yum -y install epel-release</span></span><br><span class="line">yum -y install wget</span><br><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line">yum -y update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 ntp</span></span><br><span class="line"><span class="built_in">log</span> 7</span><br><span class="line">yum install chrony -y</span><br><span class="line">sed -i <span class="string">"/^server/d"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp1.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp2.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"/#allow/s/#//"</span> /etc/chrony.conf</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd.service;systemctl start chronyd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker</span></span><br><span class="line"><span class="built_in">log</span> 8</span><br><span class="line">yum -y install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum -y install docker-ce-18.06.2.ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 docker</span></span><br><span class="line"><span class="built_in">log</span> 9</span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://pe80e41t.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line"><span class="built_in">log</span> 10</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 docker 版本</span></span><br><span class="line"><span class="built_in">log</span> 11</span><br><span class="line">docker --version</span><br><span class="line">GEOF</span><br></pre></td></tr></table></figure>
<h3 id="使用-daocloud-加速"><a href="#使用-daocloud-加速" class="headerlink" title="使用 daocloud 加速"></a>使用 daocloud 加速</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>kubernetes管理</title>
    <url>/2020/05/Kubernetes%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://kubernetes.io/zh/docs/home/" target="_blank" rel="noopener"> Kubernetes 官网 </a></li>
<li><a href="/2020/05/Kubernetes/" title="kubernetes入门">kubernetes入门</a></li>
<li><a href="/2020/05/Kubernetes%E5%AE%89%E8%A3%85/" title="kubernetes安装">kubernetes安装</a></li>
<li><a href="/2020/05/Kubernetes%E7%AE%A1%E7%90%86/" title="Kubernetes管理">Kubernetes管理</a></li>
<li><a href="https://docs.traefik.io/" target="_blank" rel="noopener">traefix</a></li>
</ul>
<h2 id="ingress-访问"><a href="#ingress-访问" class="headerlink" title="ingress 访问"></a>ingress 访问</h2><p>nginx -&gt; ingress controler(Traefix) -&gt; ingress route -&gt; service</p>
<h2 id="helm-Controller"><a href="#helm-Controller" class="headerlink" title="helm Controller"></a>helm Controller</h2><ul>
<li><a href="/2020/06/helm%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/" title="helm安装使用">helm安装使用</a>
</li>
</ul>
<h2 id="Service-LB"><a href="#Service-LB" class="headerlink" title="Service LB"></a>Service LB</h2><h2 id="Traefix-LB"><a href="#Traefix-LB" class="headerlink" title="Traefix LB"></a>Traefix LB</h2><h2 id="持久化和存储"><a href="#持久化和存储" class="headerlink" title="持久化和存储"></a>持久化和存储</h2><h2 id="RootFS"><a href="#RootFS" class="headerlink" title="RootFS"></a>RootFS</h2><h2 id="k8s-集群规模"><a href="#k8s-集群规模" class="headerlink" title="k8s 集群规模"></a>k8s 集群规模</h2><p>Kubernetes1.3版本支持多达1000个节点的集群规模。<br>Kubernetes 支持多个容器运行环境: Docker、 containerd、cri-o、 rktlet </p>
<h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><h3 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h3><p>kubectl get pods -A -o wide<br>kubectl describe pods -n test<br>kubectl logs $POD_NAME<br>kubectl exec $POD_NAME env<br>kubectl exec -ti $POD_NAME bash<br>kubectl expose deployment/kubernetes-bootcamp —type=”NodePort” —port 8080<br>kubectl describe service/kubernetes-bootcamp<br>kubectl get pods -l run=kubernetes-bootcamp<br>kubectl label pod $POD_NAME app=v1<br>kubectl delete service -l run=kubernetes-bootcamp</p>
<h3 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pod (应用运行时)</span></span><br><span class="line">PID命名空间：Pod中的不同应用程序可以看到其他应用程序的进程ID；</span><br><span class="line">网络命名空间：Pod中的多个容器能够访问同一个IP和端口范围；</span><br><span class="line">IPC命名空间：Pod中的多个容器能够使用SystemV IPC或POSIX消息队列进行通信；</span><br><span class="line">UTS命名空间：Pod中的多个容器共享一个主机名；</span><br><span class="line">Volumes（共享存储卷）：Pod中的各个容器可以访问在（Pod级别定义的Volumes）；</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建pod</span></span><br><span class="line">kubectl apply -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: private-image-test-1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: uses-private-image</span><br><span class="line">      image: <span class="variable">$PRIVATE_IMAGE_NAME</span></span><br><span class="line">      imagePullPolicy: Always</span><br><span class="line">      <span class="built_in">command</span>: [ <span class="string">"echo"</span>, <span class="string">"SUCCESS"</span> ]</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像管理</span></span><br><span class="line">kubectl create secret docker-registry myregistry --docker-server=192.168.0.69 --docker-username=yanqi --docker-password=yanqi --docker-email=blyanqi@163.com -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">kubectl apply -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: foo</span><br><span class="line">  namespace: <span class="built_in">test</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: foo</span><br><span class="line">      image: 192.168.0.69/youlv/go-meta-auth-service:latest</span><br><span class="line">  imagePullSecrets: <span class="comment"># 设置要pull的镜像库</span></span><br><span class="line">    - name: myregistry</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器运行时类(Runtime Class)</span></span><br><span class="line">kubectl apply -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: node.k8s.io/v1beta1</span><br><span class="line">kind: RuntimeClass</span><br><span class="line">metadata:</span><br><span class="line">  name: myclass  <span class="comment"># 名称</span></span><br><span class="line">  <span class="comment"># RuntimeClass 不是namespace 资源</span></span><br><span class="line">handler: myconfiguration</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器钩子</span></span><br><span class="line">PostStart</span><br><span class="line">PreStop</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pod 和控制器</span></span><br><span class="line">Deployment</span><br><span class="line">StatefulSet</span><br><span class="line">DaemonSet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无状态Deployment</span></span><br><span class="line">- 没有顺序的要求。</span><br><span class="line">- 不用考虑再哪个Node运行。</span><br><span class="line">- 随意扩容缩容。</span><br><span class="line">多个实例可以共享相同的持久化数据。例如：nginx实例，tomcat实例等</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有状态StatefulSet</span></span><br><span class="line">- 集群节点之间的关系。</span><br><span class="line">- 数据不完全一致。</span><br><span class="line">- 实例之间不对等的关系。</span><br><span class="line">- 依靠外部存储的应用。</span><br><span class="line">- 通过dns维持身份</span><br><span class="line">有状态服务 可以说是 需要数据存储功能的服务、或者指多线程类型的服务，队列等。（mysql数据库、kafka、zookeeper等）</span><br><span class="line">每个实例都需要有自己独立的持久化存储。</span><br><span class="line"></span><br><span class="line"><span class="comment"># DaemonSet</span></span><br><span class="line">例如 glusterd、ceph</span><br><span class="line">例如 fluentd、logstash</span><br><span class="line"></span><br><span class="line">kubectl apply -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-elasticsearch</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-logging</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: fluentd-elasticsearch</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: fluentd-elasticsearch</span><br><span class="line">    spec:</span><br><span class="line">      tolerations:</span><br><span class="line">      <span class="comment"># this toleration is to have the daemonset runnable on master nodes</span></span><br><span class="line">      <span class="comment"># remove it if your masters can't run pods</span></span><br><span class="line">      - key: node-role.kubernetes.io/master</span><br><span class="line">        effect: NoSchedule</span><br><span class="line">      containers:</span><br><span class="line">      - name: fluentd-elasticsearch</span><br><span class="line">        image: quay.io/fluentd_elasticsearch/fluentd:v2.5.2</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 200Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 200Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: varlog</span><br><span class="line">          mountPath: /var/<span class="built_in">log</span></span><br><span class="line">        - name: varlibdockercontainers</span><br><span class="line">          mountPath: /var/lib/docker/containers</span><br><span class="line">          readOnly: <span class="literal">true</span></span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: varlog</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/<span class="built_in">log</span></span><br><span class="line">      - name: varlibdockercontainers</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/lib/docker/containers</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用运行时类</span></span><br><span class="line">kubectl apply -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mypod</span><br><span class="line">spec:</span><br><span class="line">  runtimeClassName: myclass</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># Service （网络运行时）</span></span><br><span class="line">kubectl apply -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: my-nginx-svc</span><br><span class="line">  labels: <span class="comment"># 标签</span></span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">  selector: <span class="comment"># 选择带有 app: nginx标签的pod</span></span><br><span class="line">    app: nginx</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment （对应用，网络整合）</span></span><br><span class="line">kubectl apply -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: my-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector: <span class="comment"># 选择要抓取的Pod</span></span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template: <span class="comment"># pod 模板</span></span><br><span class="line">    metadata:</span><br><span class="line">      labels: <span class="comment"># 标签</span></span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.14.2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建方式</span></span><br><span class="line"><span class="comment"># yaml 方式</span></span><br><span class="line">kubectl apply -f</span><br><span class="line">kubectl apply -f a.yaml -f b.yaml <span class="comment"># 分清先后次序</span></span><br><span class="line">kubectl apply -f dir <span class="comment"># 指定目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl 将读取任何后缀为 .yaml，.yml 或者 .json 的文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量操作</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete -f</span><br><span class="line">kubectl delete deployments/my-nginx <span class="comment"># 资源类型/资源名</span></span><br><span class="line">kubectl delete deployment,services -l app=nginx <span class="comment"># 基于标签</span></span><br><span class="line"><span class="comment"># 链式操作</span></span><br><span class="line">kubectl get $(kubectl create -f docs/concepts/cluster-administration/nginx/ -o name | grep service)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">project/k8s/development</span><br><span class="line">├── configmap</span><br><span class="line">│   └── my-configmap.yaml</span><br><span class="line">├── deployment</span><br><span class="line">│   └── my-deployment.yaml</span><br><span class="line">└── pvc</span><br><span class="line">    └── my-pvc.yaml</span><br><span class="line"></span><br><span class="line">kubectl apply -f DIR -R <span class="comment"># 对目录递归操作 --recursive</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用标签对应用分类</span></span><br><span class="line">labels:</span><br><span class="line">  app: guestbook <span class="comment"># 应用类型</span></span><br><span class="line">  tier: frontend <span class="comment"># 应用层级</span></span><br><span class="line">  role: master   <span class="comment"># 应用角色</span></span><br><span class="line">  deploy: A      <span class="comment"># 部署类型 A,B 发布</span></span><br><span class="line"><span class="comment"># 标签的使用可以对资源进行任意维度切分</span></span><br><span class="line"><span class="comment"># 对标签更新</span></span><br><span class="line">kubectl label pods -l app=nginx tier=fe</span><br><span class="line"><span class="comment"># 对注解更新</span></span><br><span class="line">kubectl annotate pods my-nginx-v4-9gw19 description=<span class="string">'my frontend running nginx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对pod 进行 缩扩</span></span><br><span class="line">kubectl scale deployment/my-nginx --replicas=1</span><br><span class="line"><span class="comment"># 自动缩扩</span></span><br><span class="line">kubectl autoscale deployment/my-nginx --min=1 --max=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑资源文件</span></span><br><span class="line">kubectl edit deployment/my-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出资源文件</span></span><br><span class="line">kubectl get deployment my-nginx -o yaml &gt; /tmp/nginx.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制更新</span></span><br><span class="line">kubectl replace -f https://k8s.io/examples/application/nginx/nginx-deployment.yaml --force</span><br></pre></td></tr></table></figure>
<h3 id="集群网络"><a href="#集群网络" class="headerlink" title="集群网络"></a>集群网络</h3><ul>
<li><a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/addons/" target="_blank" rel="noopener">网络插件</a><br>集群网络系统<ul>
<li>容器间通信</li>
<li>Pod 间通信</li>
<li>Pod 和 Service 间通信</li>
<li>外部和 Service 间通信<blockquote>
<p>有很多种方式可以实现这种网络模型,常用的有 flannel（二层），Calico（三层），Canal 结合 Flannel 和 Calico</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">kubectl logs</span><br><span class="line"><span class="comment"># 查看崩溃前的日志</span></span><br><span class="line">kubectl logs --previous</span><br><span class="line"><span class="comment"># 应用日志</span></span><br><span class="line"><span class="comment"># 使用sidecar 日志代理，把日志转发出去</span></span><br></pre></td></tr></table></figure>
<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>Kubelet 将每分钟对容器执行一次垃圾回收，每五分钟对镜像执行一次垃圾回收。</p>
<h4 id="镜像垃圾回收"><a href="#镜像垃圾回收" class="headerlink" title="镜像垃圾回收"></a>镜像垃圾回收</h4><p>image-gc-high-threshold，触发镜像垃圾回收的磁盘使用率百分比。默认值为 85%。<br>image-gc-low-threshold，镜像垃圾回收试图释放资源后达到的磁盘使用率百分比。默认值为 80%。</p>
<h4 id="容器垃圾回收"><a href="#容器垃圾回收" class="headerlink" title="容器垃圾回收"></a>容器垃圾回收</h4><p>minimum-container-ttl-duration，完成的容器在被垃圾回收之前的最小年龄，默认是 0 分钟，这意味着每个完成的容器都会被执行垃圾回收。<br>maximum-dead-containers-per-container，每个容器要保留的旧实例的最大数量。默认值为 1。<br>maximum-dead-containers，要全局保留的旧容器实例的最大数量。默认值是 -1，这意味着没有全局限制。</p>
<h3 id="创建-pod-共享卷"><a href="#创建-pod-共享卷" class="headerlink" title="创建 pod 共享卷"></a>创建 pod 共享卷</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">two-containers</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span> <span class="comment"># 定义卷</span></span><br><span class="line">    <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumeMounts:</span> <span class="comment"># 挂载卷</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">debian-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">debian</span></span><br><span class="line">    <span class="attr">volumeMounts:</span> <span class="comment"># 挂载卷</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/pod-data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">["/bin/sh"]</span></span><br><span class="line">    <span class="attr">args:</span> <span class="string">["-c",</span> <span class="string">"echo Hello from the debian container &gt; /pod-data/index.html"</span><span class="string">]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-nfs"><a href="#使用-nfs" class="headerlink" title="使用 nfs"></a>使用 nfs</h3><h4 id><a href="#" class="headerlink" title=" "></a> </h4><h4 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h4><h4 id="容器挂载-nfs"><a href="#容器挂载-nfs" class="headerlink" title="容器挂载 nfs"></a>容器挂载 nfs</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">deployment.kubernetes.io/revision:</span> <span class="string">"5"</span></span><br><span class="line">    <span class="attr">field.cattle.io/creatorId:</span> <span class="string">user-prfbt</span></span><br><span class="line">    <span class="attr">field.cattle.io/publicEndpoints:</span> <span class="string">'[&#123;"addresses":["192.168.0.73"],"port":80,"protocol":"HTTP","serviceName":"test:ingress-ccac484d66e6ce270678942b93af0576","ingressName":"test:mynginx","hostname":"mynginx.test.192.168.0.73.xip.io","path":"/test","allNodes":true&#125;]'</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">"2020-06-07T00:41:35Z"</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">36</span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment"># 标签</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">    <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">deployment-test-mynginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mynginx</span> <span class="comment"># 名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span> <span class="comment"># 命名空间</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/apis/apps/v1/namespaces/test/deployments/mynginx</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">d03e2a14-6280-4d33-af0a-b6c9eacf837f</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span> <span class="comment">#副本数</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 选择器</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">deployment-test-mynginx</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="comment"># 更新策略</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">cattle.io/timestamp:</span> <span class="string">"2020-06-11T10:59:46Z"</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">deployment-test-mynginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span> <span class="comment"># 容器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.69</span><span class="string">/youlv/mynginx:0.1</span> <span class="comment"># 镜像源</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">mynginx</span> <span class="comment"># 容器名称</span></span><br><span class="line">        <span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">        <span class="attr">securityContext:</span> <span class="comment"># 安全设置</span></span><br><span class="line">          <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">capabilities:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">runAsNonRoot:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">stdin:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">tty:</span> <span class="literal">true</span> <span class="comment"># 终端</span></span><br><span class="line">        <span class="attr">volumeMounts:</span> <span class="comment"># 卷挂载</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html/</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">vol1</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">nginx/www</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/localtime</span> <span class="comment"># 本地时间设置</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">vol3</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span> <span class="comment"># dns策略</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span> <span class="comment"># 重启策略</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span> <span class="comment"># 定义卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">vol1</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span> <span class="comment"># 使用pvc</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">nfs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/localtime</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">vol3</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>Serverless使用</title>
    <url>/2020/05/Serverless%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="conceptual"><a href="#conceptual" class="headerlink" title="conceptual"></a>conceptual</h2><ul>
<li>云函数</li>
<li>云数据库</li>
<li>云存储</li>
</ul>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul>
<li>nodejs</li>
<li>vuejs</li>
</ul>
<h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><p><a href>unicloud</a></p>
<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p>创建APP uni-app<br>创建服务空间 </p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>golang基金抓取</title>
    <url>/2020/05/golang%E5%9F%BA%E9%87%91%E6%8A%93%E5%8F%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>此程序是用来跑基金排名的程序，能输出基金的持仓情况。<br>用于您的投资参考。。。<br>第一次运行速度有点慢，需要请求数据，耐心等待。。。<br>需要chrome 浏览器支持<br>./main [option] chromepath<br> -gain int<br>       输入年化收益百分比：1-100之间 (default 10)</p>
</blockquote>
<h2 id="main-程序"><a href="#main-程序" class="headerlink" title="main 程序"></a>main 程序</h2><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"encoding/base64"</span></span><br><span class="line">	<span class="string">"flag"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/PuerkitoBio/goquery"</span></span><br><span class="line">	<span class="string">"github.com/robertkrimen/otto"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">	<span class="string">"os/exec"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个URL类</span></span><br><span class="line"><span class="keyword">type</span> Url <span class="keyword">struct</span> &#123;</span><br><span class="line">	id    <span class="keyword">uint</span></span><br><span class="line">	url   <span class="keyword">string</span></span><br><span class="line">	name  <span class="keyword">string</span></span><br><span class="line">	stats <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义保存排名类</span></span><br><span class="line"><span class="keyword">type</span> Ranking <span class="keyword">struct</span> &#123;</span><br><span class="line">	id         <span class="keyword">int</span></span><br><span class="line">	code       <span class="keyword">string</span></span><br><span class="line">	name       <span class="keyword">string</span></span><br><span class="line">	date       <span class="keyword">string</span></span><br><span class="line">	dwjz       <span class="keyword">float64</span></span><br><span class="line">	ljjz       <span class="keyword">float64</span></span><br><span class="line">	day        <span class="keyword">float64</span></span><br><span class="line">	week       <span class="keyword">float64</span></span><br><span class="line">	month      <span class="keyword">float64</span></span><br><span class="line">	threemouth <span class="keyword">float64</span></span><br><span class="line">	sixmouth   <span class="keyword">float64</span></span><br><span class="line">	year       <span class="keyword">float64</span></span><br><span class="line">	twoyear    <span class="keyword">float64</span></span><br><span class="line">	threeyear  <span class="keyword">float64</span></span><br><span class="line">	lastyear   <span class="keyword">float64</span></span><br><span class="line">	create     <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置chrome 执行文件路径</span></span><br><span class="line"><span class="keyword">var</span> driverpath <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 命令行选项</span></span><br><span class="line">	flag.Usage = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Fprintf(os.Stderr, <span class="string">" 此程序是用来跑基金排名的程序，能输出基金的持仓情况。\n用于您的投资参考。。。"</span>+</span><br><span class="line">			<span class="string">"\n第一次运行速度有点慢，需要请求数据，耐心等待。。。\n"</span>+</span><br><span class="line">			<span class="string">"需要chrome 浏览器支持\n"</span>+</span><br><span class="line">			<span class="string">" %s [option] chromepath \n"</span>, os.Args[<span class="number">0</span>])</span><br><span class="line">		flag.PrintDefaults()</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> level = flag.Int(<span class="string">"gain"</span>, <span class="number">10</span>, <span class="string">"输入年化收益百分比：1-100之间"</span>)</span><br><span class="line">	flag.Parse()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 采集目录</span></span><br><span class="line">	fundList := <span class="built_in">make</span>([]Url, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">	fundList[<span class="number">0</span>] = Url&#123;</span><br><span class="line">		id:    <span class="number">1</span>,</span><br><span class="line">		url:   <span class="string">"http://fund.eastmoney.com/data/fundranking.html#tall;c0;r;s3nzf;pn7000;ddesc;qsd20190517;qed20200517;qdii;zq;gg;gzbd;gzfs;bbzt;sfbb"</span>,</span><br><span class="line">		name:  <span class="string">"所有排名"</span>,</span><br><span class="line">		stats: <span class="literal">true</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fundList[<span class="number">1</span>] = Url&#123;</span><br><span class="line">		id:    <span class="number">2</span>,</span><br><span class="line">		url:   <span class="string">"http://fund.eastmoney.com/data/fundranking.html#thh;c0;r;szzf;pn3000;ddesc;qsd20190515;qed20200515;qdii;zq;gg;gzbd;gzfs;bbzt;sfbb"</span>,</span><br><span class="line">		name:  <span class="string">"混合排名"</span>,</span><br><span class="line">		stats: <span class="literal">true</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fundList[<span class="number">2</span>] = Url&#123;</span><br><span class="line">		id:    <span class="number">3</span>,</span><br><span class="line">		url:   <span class="string">"http://fund.eastmoney.com/data/fundranking.html#tqdii;c0;r;s3nzf;pn200;ddesc;qsd20190517;qed20200517;qdii;zq;gg;gzbd;gzfs;bbzt;sfbb\n"</span>,</span><br><span class="line">		name:  <span class="string">"QDII排名"</span>,</span><br><span class="line">		stats: <span class="literal">true</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输入处理</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">4</span> &amp;&amp; strings.Compare(os.Args[<span class="number">1</span>], <span class="string">"-gain"</span>) == <span class="number">0</span> &amp;&amp; *level &lt;= <span class="number">100</span> &amp;&amp; *level &gt;= <span class="number">1</span> &#123;</span><br><span class="line">		_, err := os.Stat(os.Args[<span class="number">3</span>])</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"chrome 路径不对。"</span>)</span><br><span class="line">			os.Exit(<span class="number">1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		driverpath = os.Args[<span class="number">3</span>]</span><br><span class="line">		<span class="comment">// 第一步 抓取基金排名</span></span><br><span class="line">		dom := rankingFund(fundList[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">		fmt.Printf(<span class="string">"正在为您找出年化收益达到%d%%的优质基金。\n\n基金列表:\n%s\n"</span>, *level, strings.Repeat(<span class="string">"-"</span>, <span class="number">50</span>))</span><br><span class="line">		<span class="comment">// 第二步 过滤出优秀的基金</span></span><br><span class="line">		codelist := topFund(dom, <span class="string">"#dbtable &gt; tbody"</span>, *level)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 第三步 获取基金的持仓</span></span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> codelist &#123;</span><br><span class="line">			url := <span class="string">"http://fund.eastmoney.com/pingzhongdata/"</span> + v + <span class="string">".js"</span></span><br><span class="line">			fmt.Printf(<span class="string">"%s "</span>, v)</span><br><span class="line">			fmt.Println(spiderFundStats(url, v))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		flag.Usage()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// encoding</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EncodeData</span><span class="params">(d <span class="keyword">string</span>)</span> <span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	s = base64.StdEncoding.EncodeToString([]<span class="keyword">byte</span>(d))</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// decoding</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DecodeData</span><span class="params">(d <span class="keyword">string</span>)</span> <span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	dtext, _ := base64.StdEncoding.DecodeString(d)</span><br><span class="line">	s = <span class="keyword">string</span>(dtext)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行采集结果缓存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacheResult</span><span class="params">(url Url)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	year := time.Now().Format(<span class="string">"2006"</span>)</span><br><span class="line">	month := time.Now().Format(<span class="string">"01"</span>)</span><br><span class="line">	day := time.Now().Format(<span class="string">"02"</span>)</span><br><span class="line">	filename := fmt.Sprintf(<span class="string">"fund-%s-%s-%s"</span>, year, month, day)</span><br><span class="line">	_, err := os.Stat(filename)</span><br><span class="line">	<span class="comment">// 结果不存在重新抓取</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		text := spider(url.url)</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(text) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			ioutil.WriteFile(filename, []<span class="keyword">byte</span>(EncodeData(text)), os.ModePerm)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> text</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 直接读取缓存</span></span><br><span class="line">	cachedata, _ := ioutil.ReadFile(filename)</span><br><span class="line">	<span class="keyword">return</span> DecodeData(<span class="keyword">string</span>(cachedata))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采集</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spider</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(text <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">//fmt.Println("采集开始", url)</span></span><br><span class="line">	<span class="comment">// 爬虫驱动</span></span><br><span class="line">	<span class="comment">//tbyte, err := exec.Command(`/Applications/Google Chrome.app/Contents/MacOS/Google Chrome`,</span></span><br><span class="line">	tbyte, err := exec.Command(driverpath,</span><br><span class="line">		<span class="string">"--headless"</span>, <span class="string">"--disable-gpu"</span>, <span class="string">"--dump-dom"</span>, url).Output()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	text = <span class="keyword">string</span>(tbyte)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回基金的排名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rankingFund</span><span class="params">(url Url)</span> <span class="params">(dom *goquery.Document)</span></span> &#123;</span><br><span class="line">	text := cacheResult(url)</span><br><span class="line">	dom, _ = goquery.NewDocumentFromReader(strings.NewReader(text))</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤出优秀的基金</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">topFund</span><span class="params">(dom *goquery.Document, tag <span class="keyword">string</span>, num <span class="keyword">int</span>)</span> <span class="params">(dlist []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 排名数据</span></span><br><span class="line">	arrayRanking := <span class="built_in">make</span>([]Ranking, <span class="number">10</span>)</span><br><span class="line">	<span class="comment">//dom.Find("#dbtable &gt; tbody").Children()</span></span><br><span class="line">	dom.Find(tag).Children().Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, selection *goquery.Selection)</span></span> &#123;</span><br><span class="line">		tmp := Ranking&#123;&#125;</span><br><span class="line">		selection.Children().Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, selection *goquery.Selection)</span></span> &#123;</span><br><span class="line">			<span class="comment">//fmt.Printf("%s,%s\t", i, selection.Text())</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">switch</span> i &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				v, _ := strconv.Atoi(selection.Text())</span><br><span class="line">				tmp.id = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				tmp.code = selection.Text()</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				tmp.name = selection.Text()</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				tmp.date = selection.Text()</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.dwjz = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.ljjz = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.day = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.week = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.month = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.threemouth = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.sixmouth = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.year = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.twoyear = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.threeyear = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.lastyear = v</span><br><span class="line">			<span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">				v, _ := strconv.ParseFloat(strings.Replace(selection.Text(), <span class="string">"%"</span>, <span class="string">""</span>, <span class="number">1</span>), <span class="number">32</span>)</span><br><span class="line">				tmp.create = v</span><br><span class="line">				<span class="comment">//case 17:</span></span><br><span class="line">				<span class="comment">//	v9, _ := strconv.ParseFloat(strings.Replace(selection.Text(), "%", "", 1), 32)</span></span><br><span class="line">				<span class="comment">//	tmp.month = v9</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		arrayRanking = <span class="built_in">append</span>(arrayRanking, tmp)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, v1 := <span class="keyword">range</span> arrayRanking &#123;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="keyword">if</span> v1.create == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> v1.threeyear == <span class="number">0</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> v1.twoyear == <span class="number">0</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> v1.year == <span class="number">0</span> &#123;</span><br><span class="line">						<span class="keyword">if</span> v1.sixmouth &gt; v1.threemouth+<span class="number">2</span> &amp;&amp; v1.threemouth &gt; <span class="keyword">float64</span>(num)/<span class="number">5</span> &#123;</span><br><span class="line">							dlist = <span class="built_in">append</span>(dlist, v1.code)</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">continue</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> v1.year &gt; v1.sixmouth+<span class="number">5</span> &amp;&amp; v1.threemouth &gt; <span class="keyword">float64</span>(num)/<span class="number">5</span> &#123;</span><br><span class="line">						dlist = <span class="built_in">append</span>(dlist, v1.code)</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">continue</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> v1.twoyear &gt; v1.year+<span class="number">10</span> &amp;&amp; v1.year &gt;= <span class="keyword">float64</span>(num) &#123;</span><br><span class="line">					dlist = <span class="built_in">append</span>(dlist, v1.code)</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> v1.threeyear &gt; v1.twoyear+<span class="number">10</span> &amp;&amp; v1.twoyear &gt; v1.year+<span class="number">10</span> &amp;&amp; v1.year &gt;= <span class="keyword">float64</span>(num) &#123;</span><br><span class="line">				dlist = <span class="built_in">append</span>(dlist, v1.code)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> v1.create &gt; v1.threeyear+<span class="number">10</span> &amp;&amp; v1.threeyear &gt; v1.twoyear+<span class="number">10</span> &amp;&amp; v1.twoyear &gt; v1.year+<span class="number">10</span> &amp;&amp; v1.year &gt;= <span class="keyword">float64</span>(num) &#123;</span><br><span class="line">			dlist = <span class="built_in">append</span>(dlist, v1.code)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存基金信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacheFundStats</span><span class="params">(url <span class="keyword">string</span>, vcode <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	year := time.Now().Format(<span class="string">"2006"</span>)</span><br><span class="line">	month := time.Now().Format(<span class="string">"01"</span>)</span><br><span class="line">	<span class="comment">//day := time.Now().Format("02")</span></span><br><span class="line">	os.MkdirAll(<span class="string">"fundstats"</span>, os.ModePerm)</span><br><span class="line">	filename := fmt.Sprintf(<span class="string">"fundstats/%s-%s-%s"</span>, vcode, year, month)</span><br><span class="line">	_, err := os.Stat(filename)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		text := spider(url)</span><br><span class="line">		ioutil.WriteFile(filename, []<span class="keyword">byte</span>(EncodeData(text)), os.ModePerm)</span><br><span class="line">		<span class="keyword">return</span> text</span><br><span class="line">	&#125;</span><br><span class="line">	cachedata, _ := ioutil.ReadFile(filename)</span><br><span class="line">	<span class="keyword">return</span> DecodeData(<span class="keyword">string</span>(cachedata))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找去基金的持仓情况</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spiderFundStats</span><span class="params">(url <span class="keyword">string</span>, vcode <span class="keyword">string</span>)</span> <span class="params">(name <span class="keyword">string</span>, arrStr1 []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	textdata := cacheFundStats(url, vcode)</span><br><span class="line">	<span class="comment">// 采集数据</span></span><br><span class="line">	dom, _ := goquery.NewDocumentFromReader(strings.NewReader(textdata))</span><br><span class="line">	text := dom.Find(<span class="string">"body"</span>).Text()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回的是一个js文件，使用 otto js 解析器获取里面的值</span></span><br><span class="line">	vm := otto.New()</span><br><span class="line">	vm.Run(text)</span><br><span class="line">	v, _ := vm.Get(<span class="string">"stockCodes"</span>)</span><br><span class="line">	n, _ := vm.Get(<span class="string">"fS_name"</span>)</span><br><span class="line">	name = n.String()</span><br><span class="line">	arrStr := strings.Split(v.String(), <span class="string">","</span>)</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> arrStr &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(v) == <span class="number">7</span> &#123;</span><br><span class="line">			<span class="comment">// 返回值里面多加一个数字，需要去掉</span></span><br><span class="line">			arrStr1 = <span class="built_in">append</span>(arrStr1, v[:<span class="number">6</span>])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="attribute">CGO_ENABLED</span>=0 <span class="attribute">GOOS</span>=windows <span class="attribute">GOARCH</span>=amd64 go build main.go</span><br><span class="line"><span class="comment"># linux</span></span><br><span class="line"><span class="attribute">CGO_ENABLED</span>=0 <span class="attribute">GOOS</span>=windows <span class="attribute">GOARCH</span>=amd64 go build main.go</span><br><span class="line"><span class="comment"># mac</span></span><br><span class="line"><span class="attribute">CGO_ENABLED</span>=0 <span class="attribute">GOOS</span>=darwin <span class="attribute">GOARCH</span>=amd64 go build main.go</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>投资</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos安装配置</title>
    <url>/2020/05/Nacos%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://nacos.io/en-us/docs/quick-start.html" target="_blank" rel="noopener">Nacos docs</a></p>
<h2 id="conceptual"><a href="#conceptual" class="headerlink" title="conceptual"></a>conceptual</h2><ul>
<li>配置中心<ul>
<li>发布配置</li>
<li>获取最新配置</li>
<li>更新通知<blockquote>
<p>spring cloud,apollo,nacos</p>
</blockquote>
</li>
</ul>
</li>
<li>服务发现</li>
<li>服务治理</li>
<li>动态配置管理</li>
<li>动态DNS服务</li>
<li>服务和元数据管理</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://nacos.io/zh-cn/docs/quick-start-docker.html" target="_blank" rel="noopener">Nacos docker</a></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 安装</span></span><br><span class="line">git clone https:<span class="comment">//github.com/nacos-group/nacos-docker.git</span></span><br><span class="line">cd nacos-docker/example</span><br><span class="line"></span><br><span class="line"><span class="meta"># docker-compose 配置 docker-compose.yml</span></span><br><span class="line">cat <span class="params">&lt;&lt;'EOF' &gt;</span>docker-compose.yml</span><br><span class="line"><span class="symbol">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  nacos:</span></span><br><span class="line"><span class="symbol">    image:</span> nacos/nacos-server:latest</span><br><span class="line"><span class="symbol">    container_name:</span> nacos-standalone-mysql</span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - PREFER_HOST_MODE=hostname</span><br><span class="line">      - MODE=standalone</span><br><span class="line">      - SPRING_DATASOURCE_PLATFORM=mysql</span><br><span class="line">      - MYSQL_SERVICE_HOST=mysql</span><br><span class="line">      - MYSQL_SERVICE_DB_NAME=nacos_dev</span><br><span class="line">      - MYSQL_SERVICE_PORT=<span class="number">3306</span></span><br><span class="line">      - MYSQL_SERVICE_USER=nacos</span><br><span class="line">      - MYSQL_SERVICE_PASSWORD=nacos<span class="meta">#123</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/data/</span>nacos-volume<span class="meta-keyword">/standalone-logs/</span>:<span class="meta-keyword">/home/</span>nacos/logs</span><br><span class="line">      - ./init.d/custom.properties:<span class="meta-keyword">/home/</span>nacos/init.d/custom.properties</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"8848:8848"</span></span><br><span class="line">      - <span class="string">"9555:9555"</span></span><br><span class="line"><span class="symbol">    depends_on:</span></span><br><span class="line">      - mysql</span><br><span class="line"><span class="symbol">    restart:</span> on-failure</span><br><span class="line"><span class="symbol">  mysql:</span></span><br><span class="line"><span class="symbol">    container_name:</span> mysql</span><br><span class="line"><span class="symbol">    image:</span> nacos/nacos-mysql:<span class="number">5.7</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - MYSQL_ROOT_PASSWORD=root</span><br><span class="line">      - MYSQL_DATABASE=nacos_dev</span><br><span class="line">      - MYSQL_USER=nacos</span><br><span class="line">      - MYSQL_PASSWORD=nacos<span class="meta">#123</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="meta-keyword">/data/</span>nacos-volume/mysql:<span class="meta-keyword">/var/</span>lib/mysql</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"3306:3306"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta"># 启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="meta"># 启动日志</span></span><br><span class="line">tail <span class="number">-200</span>f <span class="meta-keyword">/data/</span>nacos-volume<span class="meta-keyword">/standalone-logs/</span>start.out</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看</span></span><br><span class="line">curl http:<span class="comment">//192.168.0.70:8848/nacos</span></span><br><span class="line"><span class="meta"># user nacos，pwd nacos</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nacos</tag>
        <tag>配置中心</tag>
        <tag>服务发现</tag>
      </tags>
  </entry>
  <entry>
    <title>LVM逻辑卷管理</title>
    <url>/2020/05/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="conceptual"><a href="#conceptual" class="headerlink" title="conceptual"></a>conceptual</h2><ul>
<li>LVM是逻辑盘卷管理（Logical Volume Manager）</li>
<li>物理卷(PV) （磁盘分区）</li>
<li>卷组(VG) （多个磁盘分区组成卷组）</li>
<li>逻辑卷(LV) （在卷组上划分分区）</li>
</ul>
<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 物理卷 PV</span></span><br><span class="line">pvdisplay -v</span><br><span class="line"><span class="meta"># v verbose</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 卷组 VG</span></span><br><span class="line">vgdisplay</span><br><span class="line"></span><br><span class="line"><span class="meta"># 显示更多(VG,PV,LV)</span></span><br><span class="line">vgdisplay -v</span><br></pre></td></tr></table></figure>
<h2 id="新创建-LVM"><a href="#新创建-LVM" class="headerlink" title="新创建(LVM)"></a>新创建(LVM)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建磁盘分区</span></span><br><span class="line">fdisk /dev/vdc</span><br><span class="line">&gt; n p w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建物理分区</span></span><br><span class="line">pvcreate /dev/vdc1</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件系统，使扩容生效。</span></span><br><span class="line">xfs_growfs /dev/centos/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否生效</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>
<h2 id="扩展-LVM"><a href="#扩展-LVM" class="headerlink" title="扩展(LVM)"></a>扩展(LVM)</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看新加磁盘</span></span><br><span class="line"><span class="attr">fdisk</span> <span class="string">-l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建磁盘分区</span></span><br><span class="line"><span class="attr">fdisk</span> <span class="string">/dev/vdc</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="string">n p w</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建物理分区</span></span><br><span class="line"><span class="attr">pvcreate</span> <span class="string">/dev/vdc1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入卷组</span></span><br><span class="line"><span class="attr">vgextend</span> <span class="string">centos /dev/vdc1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定量加入逻辑卷</span></span><br><span class="line"><span class="attr">lvextend</span> <span class="string">-L +10G /dev/centos/root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件系统，使扩容生效。</span></span><br><span class="line"><span class="attr">xfs_growfs</span> <span class="string">/dev/centos/root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否生效</span></span><br><span class="line"><span class="attr">df</span> <span class="string">-h</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>配置国内镜像源</title>
    <url>/2020/05/%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学镜像源</a></li>
<li><a href="https://developer.aliyun.com/mirror/" target="_blank" rel="noopener">Ali 镜像源</a></li>
<li><a href="http://get.daocloud.io/" target="_blank" rel="noopener">Daocloud 镜像源</a></li>
</ul>
<h2 id="删除所有源"><a href="#删除所有源" class="headerlink" title="删除所有源"></a>删除所有源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm  /etc/yum.repos.d/* -rf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新缓存</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看源</span></span><br><span class="line">yum repolist all</span><br></pre></td></tr></table></figure>
<h2 id="centos-镜像源"><a href="#centos-镜像源" class="headerlink" title="centos 镜像源"></a>centos 镜像源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Aliyun 源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两个源有时候访问不通</span></span><br><span class="line">sed -i <span class="string">"/cloud.aliyuncs.com/s/^/#/"</span> /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line">sed -i <span class="string">"/.aliyuncs.com/s/^/#/"</span> /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>
<h2 id="ubuntu-镜像源"><a href="#ubuntu-镜像源" class="headerlink" title="ubuntu 镜像源"></a>ubuntu 镜像源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/apt/sources.list</span><br><span class="line"><span class="comment"># http://archive.ubuntu.com/</span></span><br><span class="line"><span class="comment"># mirrors.aliyun.com</span></span><br><span class="line">sed -i <span class="string">'s/archive.ubuntu.com/mirrors.aliyun.com/'</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<h2 id="docker-镜像源"><a href="#docker-镜像源" class="headerlink" title="docker 镜像源"></a>docker 镜像源</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//mirrors.aliyun.<span class="keyword">com</span>/docker-<span class="keyword">ce</span>/linux/centos/docker-<span class="keyword">ce</span>.repo -O /etc/yum.repos.d/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure>
<h2 id="docker-registry-源"><a href="#docker-registry-源" class="headerlink" title="docker registry 源"></a>docker registry 源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://pe80e41t.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 reload</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl reload docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># github 加速</span></span><br><span class="line">http://tool.chinaz.com/dns?<span class="built_in">type</span>=1&amp;host=github.com&amp;ip=</span><br></pre></td></tr></table></figure>
<h2 id="debian-源"><a href="#debian-源" class="headerlink" title="debian 源"></a>debian 源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># debian 8源</span></span><br><span class="line">cat&lt;&lt;EOF &gt;/etc/apt/sources.list</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ jessie main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ jessie main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'deb http://mirrors.aliyun.com/debian/ jessie main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/debian/ jessie main non-free contrib</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib'</span> &gt;/etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment">#  debian 9源</span></span><br><span class="line">cat&lt;&lt;<span class="string">'EOF'</span> &gt;./sources.list</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>开源镜像: <a href="http://npm.taobao.org/mirrors" target="_blank" rel="noopener">http://npm.taobao.org/mirrors</a><br>Node.js 镜像: <a href="http://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/node</a><br>alinode 镜像: <a href="http://npm.taobao.org/mirrors/alinode" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/alinode</a><br>phantomjs 镜像: <a href="http://npm.taobao.org/mirrors/phantomjs" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/phantomjs</a><br>ChromeDriver 镜像: <a href="http://npm.taobao.org/mirrors/chromedriver" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/chromedriver</a><br>OperaDriver 镜像: <a href="http://npm.taobao.org/mirrors/operadriver" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/operadriver</a><br>Selenium 镜像: <a href="http://npm.taobao.org/mirrors/selenium" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/selenium</a><br>Node.js 文档镜像: <a href="http://npm.taobao.org/mirrors/node/latest/docs/api/index.html" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/node/latest/docs/api/index.html</a><br>NPM 镜像: <a href="https://npm.taobao.org/mirrors/npm/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/npm/</a><br>electron 镜像: <a href="https://npm.taobao.org/mirrors/electron/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/electron/</a><br>node-inspector 镜像: <a href="https://npm.taobao.org/mirrors/node-inspector/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node-inspector/</a></p>
]]></content>
      <categories>
        <category>OTHER</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2020/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据结构概念"><a href="#数据结构概念" class="headerlink" title="数据结构概念"></a>数据结构概念</h2><ul>
<li>什么是数据？<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">数据(<span class="class"><span class="keyword">data</span>) 是事实或观察的结果，是对客观事物的逻辑归纳，是用于表示客观事物的未经加工的原始素材。</span></span><br><span class="line">数据 是科学实验、检验、统计等所获得的和用于科学研究、技术设计、查证、决策等的数值。</span><br></pre></td></tr></table></figure></li>
<li><p>问题求解方法</p>
<ul>
<li>感觉、经验</li>
<li>占卜、求神</li>
<li>逻辑、数学推理、实验</li>
<li>工程、计算</li>
<li>模型、模拟、仿真</li>
<li>哲学</li>
</ul>
</li>
<li><p>不可解问题</p>
<ul>
<li>无解</li>
<li>不可分问题</li>
<li>熵无限大问题</li>
<li>悖论<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列举两个经典的悖论</span></span><br><span class="line">(理发师)我只给村里不给自己理发的人理发</span><br><span class="line">A 集合（村里的人）</span><br><span class="line"><span class="keyword">B </span>集合（村里不给自己理发的人）</span><br><span class="line">c 理发师（我）</span><br><span class="line"><span class="comment"># 悖论产生的原因（集合内元素产生递归的行为）</span></span><br><span class="line">当 c 属于 A</span><br><span class="line">且 c 属于 <span class="keyword">B</span></span><br><span class="line"><span class="keyword">B </span>又是 A 的真子集</span><br><span class="line">结论：理发师不能属于<span class="keyword">B</span></span><br><span class="line"><span class="keyword"># </span>理发师产生了递归的行为，因此集合内元素不能产生递归行为。</span><br><span class="line"></span><br><span class="line">一尺之棰，日取其半，万世不竭</span><br><span class="line"><span class="comment"># 悖论产生的原因（降维，信息丢失导致）</span></span><br><span class="line">一尺之锤 理应是多维对象。被抽象数学中的线后变成了一维</span><br><span class="line">日取其半 </span><br><span class="line">万世不竭 因为维度降低，信息有丢失。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>什么是问题？</p>
<blockquote>
<p>问题求解的过程是从未知到已知过程，熵在不断减小。熵趋近于0，则问题有解。<br>下降的过程叫梯度<br>数学问题-&gt;明确到明确过程</p>
</blockquote>
</li>
<li><p>熵</p>
<blockquote>
<p>指混乱程度</p>
</blockquote>
</li>
<li><p>分类问题用判断</p>
</li>
<li>求因、证明问题 用公理、数学证明</li>
<li>构建问题用流程和算法</li>
</ul>
<blockquote>
<p>计算的边界： 有穷，能行问题。</p>
</blockquote>
<ul>
<li>什么是抽象？<blockquote>
<p>从众多的具体事物中，抽取共同的、本质的属性，舍弃个别的、非本质的属性，从而形成概念。<br>算法 + 数据结构 = 程序</p>
</blockquote>
</li>
</ul>
<h3 id="算法复杂度-从低到高"><a href="#算法复杂度-从低到高" class="headerlink" title="算法复杂度(从低到高)"></a>算法复杂度(从低到高)</h3><blockquote>
<p>问题求解的规模，大 O 是指主导部分。<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">O</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">O</span><span class="params">(log(n)</span></span>)</span><br><span class="line"><span class="function"><span class="title">O</span><span class="params">(n)</span></span></span><br><span class="line"><span class="function"><span class="title">O</span><span class="params">(nlog(n)</span></span>)</span><br><span class="line"><span class="function"><span class="title">O</span><span class="params">(n^<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">O</span><span class="params">(n^<span class="number">3</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">O</span><span class="params">(<span class="number">2</span>^n)</span></span></span><br><span class="line">n! 举例(用随机数随机组合成一个已知顺序数)</span><br></pre></td></tr></table></figure></p>
<ul>
<li>程序实现的好坏<ul>
<li>是否可读</li>
<li>是否有冗余语句</li>
<li>健壮性</li>
<li>可维护性</li>
</ul>
</li>
<li>python 算法计量<ul>
<li>timeit 模块<br><a href="https://wiki.python.org/moin/TimeComplexity" target="_blank" rel="noopener">python 容器操作的算法复杂度</a></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="划分1"><a href="#划分1" class="headerlink" title="划分1"></a>划分1</h3><ul>
<li>数据的逻辑结构<ul>
<li>集合</li>
<li>线性结构</li>
<li>树形结构<blockquote>
<p>DNS (互联网中最大的树结构）</p>
</blockquote>
</li>
<li>图形结构<blockquote>
<p>万维网（互联网中最大的图结构）</p>
</blockquote>
</li>
</ul>
</li>
<li>数据存储结构<ul>
<li>顺序存储</li>
<li>链式存储</li>
<li>索引存储</li>
<li>哈希存储</li>
</ul>
</li>
<li>常用算法<ul>
<li>检索</li>
<li>插入</li>
<li>删除</li>
<li>更新</li>
<li>排序</li>
</ul>
</li>
</ul>
<h3 id="划分2"><a href="#划分2" class="headerlink" title="划分2"></a>划分2</h3><ul>
<li>数据的逻辑结构<ul>
<li>集合</li>
<li>线性结构<ul>
<li>数组</li>
<li>栈</li>
<li>队列</li>
<li>链表</li>
</ul>
</li>
<li>树形结构<ul>
<li>二叉树</li>
<li>完全二叉树</li>
<li>平衡二叉树</li>
<li>二叉查找树</li>
<li>红黑树</li>
<li>B 树<ul>
<li>B-</li>
<li>B+</li>
<li>B*</li>
</ul>
</li>
<li>LSM树</li>
</ul>
</li>
<li>图形结构</li>
</ul>
</li>
<li>数据存储结构<ul>
<li>顺序存储</li>
<li>链式存储</li>
<li>索引存储</li>
<li>哈希存储</li>
</ul>
</li>
<li>常用算法<ul>
<li>检索</li>
<li>插入</li>
<li>删除</li>
<li>更新</li>
<li>排序<ul>
<li>选择排序</li>
<li>冒泡排序</li>
<li>快速排序</li>
<li>归并排序</li>
<li>希尔排序</li>
<li>堆排序</li>
<li>计数排序</li>
<li>桶排序</li>
<li>基数排序</li>
</ul>
</li>
</ul>
</li>
<li>二分查找</li>
<li>贪心算法</li>
<li>回溯算法</li>
<li>剪枝算法</li>
<li>动态规划</li>
<li>朴素贝叶斯</li>
<li>推荐算法</li>
<li>最小生成树算法</li>
<li>最短路径算法</li>
</ul>
<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">括号匹配，次序反转</span><br><span class="line">十进制转二进制，通过取余反转得到</span><br><span class="line">表达式转换，</span><br><span class="line">中缀 <span class="selector-tag">a</span> + b</span><br><span class="line">前缀 +ab</span><br><span class="line">后缀 ab+</span><br><span class="line">中缀转后缀表达式，利用栈</span><br><span class="line">后缀计算值，利用栈</span><br><span class="line">后缀表达式传值</span><br></pre></td></tr></table></figure>
<h3 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h3><blockquote>
<p>使用场景：处理资源速度慢于资源输入速度</p>
</blockquote>
<h3 id="递归-recursion"><a href="#递归-recursion" class="headerlink" title="递归 recursion"></a>递归 recursion</h3><blockquote>
<p>横向解决大规模问题<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">递归三定律</span><br><span class="line">    有结束条件</span><br><span class="line">    问题规模逐步减小</span><br><span class="line">    调用自身</span><br><span class="line">递归应用</span><br><span class="line">    任意进制转换</span><br><span class="line">    分形图</span><br></pre></td></tr></table></figure></p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">冒泡排序：两两交换</span><br><span class="line">选择排序：全表扫描，最大&#x2F;小 交换</span><br><span class="line">插入排序：新项和扫描过的子列表比对</span><br><span class="line">希尔排序：子列表进行插入排序</span><br><span class="line">归并排序：分治算法排序</span><br><span class="line">快速排序：找中值，按中值分裂</span><br></pre></td></tr></table></figure>
<h2 id="树结构"><a href="#树结构" class="headerlink" title="树结构"></a>树结构</h2><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">链表-&gt;二叉树-&gt;二叉查找树-&gt;特殊的二叉查找树（自平衡的二叉查找树）</span><br><span class="line"></span><br><span class="line">二分：有序数据，(min+max)/<span class="number">2</span>,二叉树查找树（左小，右大），时间复杂度是树的深度</span><br><span class="line">最优二叉树-赫夫曼树</span><br><span class="line">平衡二叉树-AVL树</span><br><span class="line"></span><br><span class="line">红黑树</span><br><span class="line">每个节点不是红色就是黑色</span><br><span class="line">不能出现连在一起的红色节点</span><br><span class="line">根节点是黑色（根节点入度为零）</span><br><span class="line">红色节点的两个叶子节点都是黑色，叶子节点都是黑色</span><br><span class="line">左旋：条件-&gt;</span><br><span class="line">右旋：条件-&gt;</span><br><span class="line">变颜色</span><br><span class="line"></span><br><span class="line">构建红黑树</span><br><span class="line">所有插入的点默认为红色</span><br><span class="line">按照二叉查找树插入</span><br><span class="line">插入节点后，不满足红黑树规则</span><br><span class="line">变颜色（父，叔节点都为红）：把父节点，叔节点变成黑色，把祖父节点变红色</span><br><span class="line">旋转（父，叔节点为红，黑）：右边都是红色，进行左旋</span><br><span class="line">旋转（父，叔节点为红，黑）：左边都是红色，进行右旋，要进行变颜色，父节点变黑色，祖父节点变红色</span><br></pre></td></tr></table></figure>
<h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前序遍历：根，左，右</span><br><span class="line">中序遍历：左，根，右</span><br><span class="line">后序遍历：左，右，根</span><br></pre></td></tr></table></figure>
<h3 id="树的应用"><a href="#树的应用" class="headerlink" title="树的应用"></a>树的应用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件系统</span><br><span class="line">html文档 dom 处理</span><br><span class="line">DNS域名体系</span><br><span class="line">语法树（解析树）</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><blockquote>
<p>树是特殊的图<br><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">图 <span class="keyword">Graph</span></span><br><span class="line">    顶点 Vertex</span><br><span class="line">    边 Edge</span><br><span class="line">    权重 Weight</span><br><span class="line">图的表示</span><br><span class="line">    邻接矩阵</span><br><span class="line">    邻接表：链表</span><br><span class="line"></span><br><span class="line">六度分隔理论</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="优化问题"><a href="#优化问题" class="headerlink" title="优化问题"></a>优化问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">移位操作应用</span><br><span class="line">    可以做倍数：左移位</span><br><span class="line">    可以做取余：与操作</span><br><span class="line">    可以做布尔运算：判断奇偶</span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">二进制编码</span><br><span class="line">补码作用：利用溢出，我们可以将减法变成加法</span><br><span class="line"><span class="number">-1</span> + <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1001</span> #原码 <span class="number">-1</span>       <span class="number">111</span> <span class="number">1</span> #补码 <span class="number">-1</span> 的补码（反码+<span class="number">1</span>），<span class="number">-1</span> 的反码 <span class="number">1110</span> </span><br><span class="line">+     <span class="number">0001</span> #原码  <span class="number">1</span>       <span class="number">0001</span> #原码</span><br><span class="line">---</span><br><span class="line">       <span class="number">1010</span> # <span class="number">-2</span>            <span class="number">10000</span> # 等于<span class="number">0</span> <span class="number">1</span>溢出</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>个字节能表示的最大整数是<span class="number">2</span>^<span class="number">8</span><span class="number">-1</span> =<span class="number">255</span></span><br><span class="line"><span class="number">1</span>个字节能表示的最大负数是-(<span class="number">2</span>^<span class="number">8</span>)/<span class="number">2</span> = <span class="number">-128</span></span><br><span class="line"><span class="number">1</span>个字节能表示的最大正数是 <span class="number">2</span>^<span class="number">8</span>/<span class="number">2</span><span class="number">-1</span> = <span class="number">127</span></span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编码符号表示</span></span><br><span class="line"><span class="attr">ascii</span> <span class="string">8bit</span></span><br><span class="line"><span class="attr">unicode16</span> <span class="string">16bit # 可以表示全世界所有的文字</span></span><br><span class="line"><span class="attr">unicode32</span> <span class="string">32bit</span></span><br><span class="line"><span class="attr">utf8</span> <span class="string">8-32bit</span></span><br><span class="line"><span class="attr">base64</span>  <span class="string"># 全都转换成 8bit  可显示的字符，便于传输，有病毒利用 base64 传输，禁用 base64 可以防止病毒传输</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hashcode</span> <span class="string">把字符串转成数字</span></span><br></pre></td></tr></table></figure>
<h3 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据结构</span><br><span class="line">大话数据结构</span><br><span class="line">算法入门经典</span><br><span class="line">算法导论</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>Consul安装配置</title>
    <url>/2020/05/Consul%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href>consul</a></li>
</ul>
<h2 id="Consul-conceptual"><a href="#Consul-conceptual" class="headerlink" title="Consul conceptual"></a>Consul conceptual</h2><ul>
<li>微服务</li>
<li>服务网格</li>
<li>服务发现</li>
<li>服务间调用</li>
<li>限流</li>
<li>熔断</li>
<li>监控</li>
</ul>
<h2 id="Consul-集群安装"><a href="#Consul-集群安装" class="headerlink" title="Consul 集群安装"></a>Consul 集群安装</h2><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><h2 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h2><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>kong安装配置</title>
    <url>/2020/05/kong%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://docs.konghq.com/" target="_blank" rel="noopener">Kong docs </a></li>
</ul>
<h2 id="kong-consul"><a href="#kong-consul" class="headerlink" title="kong consul"></a>kong consul</h2><ul>
<li>nginx</li>
<li>lua</li>
<li><p>API网关</p>
<ul>
<li>请求接入</li>
<li>业务聚合</li>
<li>中介策略</li>
<li>统一管理</li>
</ul>
</li>
<li><p>OpenResty</p>
</li>
</ul>
<h2 id="kong-安装"><a href="#kong-安装" class="headerlink" title="kong 安装"></a>kong 安装</h2><ul>
<li><a href="https://docs.konghq.com/install/docker/" target="_blank" rel="noopener">Docker Installation</a><ul>
<li>DB mode 数据库模式</li>
<li>DB-less mode 无数据库模式</li>
</ul>
</li>
<li><a href="https://docs.konghq.com/2.0.x/kong-for-kubernetes/install/" target="_blank" rel="noopener">kubernetes Installation</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create a Docker network</span></span><br><span class="line">docker network create kong-net</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start your database</span></span><br><span class="line">docker run -d --name kong-database \</span><br><span class="line">               --network=kong-net \</span><br><span class="line">               -p 9042:9042 \</span><br><span class="line">               cassandra:3</span><br><span class="line"></span><br><span class="line"><span class="comment"># PostgreSQL container</span></span><br><span class="line">docker run -d --name kong-database \</span><br><span class="line">               --network=kong-net \</span><br><span class="line">               -p 5432:5432 \</span><br><span class="line">               -e <span class="string">"POSTGRES_USER=kong"</span> \</span><br><span class="line">               -e <span class="string">"POSTGRES_DB=kong"</span> \</span><br><span class="line">               -e <span class="string">"POSTGRES_PASSWORD=kong"</span> \</span><br><span class="line">               postgres:9.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare your database</span></span><br><span class="line">docker run --rm \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">"KONG_DATABASE=postgres"</span> \</span><br><span class="line">     -e <span class="string">"KONG_PG_HOST=kong-database"</span> \</span><br><span class="line">     -e <span class="string">"KONG_PG_PASSWORD=kong"</span> \</span><br><span class="line">     -e <span class="string">"KONG_CASSANDRA_CONTACT_POINTS=kong-database"</span> \</span><br><span class="line">     kong:latest kong migrations bootstrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start Kong</span></span><br><span class="line">docker run -d --name kong \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">"KONG_DATABASE=postgres"</span> \</span><br><span class="line">     -e <span class="string">"KONG_PG_HOST=kong-database"</span> \</span><br><span class="line">     -e <span class="string">"KONG_PG_PASSWORD=kong"</span> \</span><br><span class="line">     -e <span class="string">"KONG_CASSANDRA_CONTACT_POINTS=kong-database"</span> \</span><br><span class="line">     -e <span class="string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> \</span><br><span class="line">     -e <span class="string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> \</span><br><span class="line">     -e <span class="string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span> \</span><br><span class="line">     -e <span class="string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span> \</span><br><span class="line">     -e <span class="string">"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl"</span> \</span><br><span class="line">     -p 8000:8000 \</span><br><span class="line">     -p 8443:8443 \</span><br><span class="line">     -p 127.0.0.1:8001:8001 \</span><br><span class="line">     -p 127.0.0.1:8444:8444 \</span><br><span class="line">     kong:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Kong</span></span><br><span class="line">curl -i http://localhost:8001/</span><br></pre></td></tr></table></figure>
<h2 id="API-接口"><a href="#API-接口" class="headerlink" title="API 接口"></a>API 接口</h2><h2 id="UI管理-konga"><a href="#UI管理-konga" class="headerlink" title="UI管理 konga"></a>UI管理 konga</h2><ul>
<li><a href="https://github.com/pantsel/konga" target="_blank" rel="noopener">konga</a></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>gitlab迁移</title>
    <url>/2020/05/Gitlab%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://github.com/gitlabhq" target="_blank" rel="noopener">gitlib</a></li>
<li><a href="/2020/05/Gitlab/" title="Gitlab管理">Gitlab管理</a></li>
<li>
</li>
</ul>
<h1 id="docker-方式迁移"><a href="#docker-方式迁移" class="headerlink" title="docker 方式迁移"></a>docker 方式迁移</h1>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line"><span class="comment"># docker container exec -it d0ff23550e14 bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 compose 目录</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/root/gitlab-container</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份</span></span><br><span class="line">docker-compose run <span class="params">--rm</span> gitlab app<span class="function">:rake</span> gitlab<span class="function">:backup</span><span class="function">:create</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看备份</span></span><br><span class="line"><span class="keyword">ls</span> <span class="string">/data/volumn-docker/gitlab/backups/</span></span><br></pre></td></tr></table></figure>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 授权备份文件</span></span><br><span class="line">chmod 777 /data/volumn-docker/gitlab/backups/1590004949_gitlab_backup.tar</span><br><span class="line"></span><br><span class="line">docker-compose <span class="builtin-name">run</span> --rm gitlab app:rake gitlab:backup:restore <span class="attribute">BACKUP</span>=1590023823_2020_05_21_12.10.6</span><br><span class="line"><span class="comment"># 两次 entry yes</span></span><br></pre></td></tr></table></figure>
<h3 id="gitlab-版本不一致处理"><a href="#gitlab-版本不一致处理" class="headerlink" title="gitlab 版本不一致处理"></a>gitlab 版本不一致处理</h3><blockquote>
<p>把镜像导出来，在新环境中导入进去。</p>
</blockquote>
<a href="/2020/05/Docker/" title="Docker使用">Docker使用</a>
<hr>
<h1 id="daemon-方式迁移"><a href="#daemon-方式迁移" class="headerlink" title="daemon 方式迁移"></a>daemon 方式迁移</h1><h2 id="一、备份"><a href="#一、备份" class="headerlink" title="一、备份"></a>一、备份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭 nginx</span></span><br><span class="line">gitlab-ctl stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份</span></span><br><span class="line">gitlab-rake gitlab:backup:create</span><br><span class="line">---</span><br><span class="line">Dumping database ... </span><br><span class="line">Dumping PostgreSQL database gitlabhq_production ... [DONE]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping repositories ...</span><br><span class="line"> ...</span><br><span class="line"> * stool/wx-azf-app.wiki ...  [SKIPPED]</span><br><span class="line"> * go-meta/go-meta-web ... [DONE]</span><br><span class="line"> * go-meta/go-meta-web.wiki ...  [SKIPPED]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping uploads ... </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping builds ... </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping artifacts ... </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping pages ... </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping lfs objects ... </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Dumping container registry images ... </span><br><span class="line">[DISABLED]</span><br><span class="line">Creating backup archive: 1589946460_2020_05_20_10.2.1_gitlab_backup.tar ... <span class="keyword">done</span></span><br><span class="line">Uploading backup archive to remote storage  ... skipped</span><br><span class="line">Deleting tmp directories ... <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Deleting old backups ... skipping</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 /var/opt/gitlab/backups 生成备份文件</span></span><br><span class="line">ls /var/opt/gitlab/backups</span><br><span class="line">---</span><br><span class="line">-rw------- 1 git git 372561920 May 20 11:47 1589946460_2020_05_20_10.2.1_gitlab_backup.tar</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份配置文件</span></span><br><span class="line">cp /etc/gitlab/gitlab.rb gitlab.rb`date <span class="string">"+%F"</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份nginx配置文件</span></span><br><span class="line">cp /var/opt/gitlab/nginx/conf/gitlab-http.conf gitlab-http.conf`date <span class="string">"+%F"</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份邮件配置</span></span><br><span class="line">cp /etc/postfix/main.cf main.cf`date <span class="string">"+%F"</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># [可修改备份文件目录]</span></span><br><span class="line">gitlab_rails[<span class="string">'backup_path'</span>] = <span class="string">"/var/opt/gitlab/backups"</span></span><br></pre></td></tr></table></figure>
<h2 id="二、将文件复制到新机器"><a href="#二、将文件复制到新机器" class="headerlink" title="二、将文件复制到新机器"></a>二、将文件复制到新机器</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制相关文件到新服务器</span></span><br><span class="line">scp <span class="regexp">/var/</span>opt<span class="regexp">/gitlab/</span>backups<span class="regexp">/*_gitlab_backup.tar newserver:/</span>var<span class="regexp">/opt/gi</span>tlab<span class="regexp">/backups/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权</span></span><br><span class="line">chmod <span class="number">777</span> <span class="regexp">/var/</span>opt<span class="regexp">/gitlab/</span>backups<span class="regexp">/*_gitlab_backup.tar</span></span><br></pre></td></tr></table></figure>
<h2 id="三、恢复"><a href="#三、恢复" class="headerlink" title="三、恢复"></a>三、恢复</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭 nginx</span></span><br><span class="line">gitlab-ctl <span class="keyword">stop</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止相关数据连接服务</span></span><br><span class="line">gitlab-ctl <span class="keyword">stop</span> unicorn</span><br><span class="line">gitlab-ctl <span class="keyword">stop</span> sidekiq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将备份文件复制到 new server：/var/opt/gitlab/backups/ 下</span></span><br><span class="line"><span class="comment"># 文件日期串</span></span><br><span class="line">gitlab-rake gitlab:<span class="keyword">backup</span>:<span class="keyword">restore</span> <span class="keyword">BACKUP</span>=文件日期串</span><br><span class="line"><span class="comment"># 两次 entry yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动相关数据连接服务</span></span><br><span class="line">gitlab-ctl <span class="keyword">start</span> unicorn</span><br><span class="line">gitlab-ctl <span class="keyword">start</span> sidekiq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 nginx</span></span><br><span class="line">gitlab-ctl <span class="keyword">start</span> nginx</span><br></pre></td></tr></table></figure>
<h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭 nginx</span></span><br><span class="line"><span class="string">gitlab-ctl</span> <span class="string">stop</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="string">gitlab-rake</span> <span class="string">gitlab:backup:create</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停服务</span></span><br><span class="line"><span class="string">gitlab-ctl</span> <span class="string">stop</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">ok: down: gitaly:</span> <span class="string">0s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: gitlab-monitor:</span> <span class="string">0s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: gitlab-workhorse:</span> <span class="string">0s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: logrotate:</span> <span class="string">1s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: nginx:</span> <span class="string">0s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: node-exporter:</span> <span class="string">1s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: postgres-exporter:</span> <span class="string">0s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: postgresql:</span> <span class="string">0s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: prometheus:</span> <span class="string">0s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: redis:</span> <span class="string">0s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: redis-exporter:</span> <span class="string">0s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: sidekiq:</span> <span class="string">0s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="attr">ok: down: unicorn:</span> <span class="string">1s,</span> <span class="string">normally</span> <span class="string">up</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<h2 id="安装升级包"><a href="#安装升级包" class="headerlink" title="安装升级包"></a>安装升级包</h2>
<h2 id="启动-gitlab"><a href="#启动-gitlab" class="headerlink" title="启动 gitlab"></a>启动 gitlab</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置并启动</span></span><br><span class="line"><span class="string">gitlab-ctl</span> <span class="string">reconfigure</span></span><br><span class="line"><span class="string">gitlab-ctl</span> <span class="string">restart</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动gitlab</span></span><br><span class="line"><span class="string">gitlab-ctl</span> <span class="string">start</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">ok: run: gitaly:</span> <span class="string">(pid</span> <span class="number">22544</span><span class="string">)</span> <span class="string">1s</span></span><br><span class="line"><span class="attr">ok: run: gitlab-monitor:</span> <span class="string">(pid</span> <span class="number">22546</span><span class="string">)</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">ok: run: gitlab-workhorse:</span> <span class="string">(pid</span> <span class="number">22552</span><span class="string">)</span> <span class="string">1s</span></span><br><span class="line"><span class="attr">ok: run: logrotate:</span> <span class="string">(pid</span> <span class="number">22566</span><span class="string">)</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">ok: run: nginx:</span> <span class="string">(pid</span> <span class="number">22578</span><span class="string">)</span> <span class="string">1s</span></span><br><span class="line"><span class="attr">ok: run: node-exporter:</span> <span class="string">(pid</span> <span class="number">22583</span><span class="string">)</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">ok: run: postgres-exporter:</span> <span class="string">(pid</span> <span class="number">22588</span><span class="string">)</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">ok: run: postgresql:</span> <span class="string">(pid</span> <span class="number">22593</span><span class="string">)</span> <span class="string">1s</span></span><br><span class="line"><span class="attr">ok: run: prometheus:</span> <span class="string">(pid</span> <span class="number">22601</span><span class="string">)</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">ok: run: redis:</span> <span class="string">(pid</span> <span class="number">22609</span><span class="string">)</span> <span class="string">1s</span></span><br><span class="line"><span class="attr">ok: run: redis-exporter:</span> <span class="string">(pid</span> <span class="number">22613</span><span class="string">)</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">ok: run: sidekiq:</span> <span class="string">(pid</span> <span class="number">22618</span><span class="string">)</span> <span class="string">0s</span></span><br><span class="line"><span class="attr">ok: run: unicorn:</span> <span class="string">(pid</span> <span class="number">22625</span><span class="string">)</span> <span class="string">1s</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>容器技术原理</title>
    <url>/2020/05/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="namespace-隔离"><a href="#namespace-隔离" class="headerlink" title="namespace 隔离"></a>namespace 隔离</h2><h2 id="分层文件系统-overlay"><a href="#分层文件系统-overlay" class="headerlink" title="分层文件系统 overlay"></a>分层文件系统 overlay</h2>]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>linux-kernel</title>
    <url>/2020/05/linux-kernel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.kernel.org/doc/html/latest/" target="_blank" rel="noopener">kernel</a><br><a href="https://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html" target="_blank" rel="noopener">Linux系统调用列表</a><br><a href="https://cmake.org/cmake/help/latest/" target="_blank" rel="noopener">cmake</a></p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>寄存器<br>汇编指令<br>编译与反编译<br>用户态<br>内核态<br>进程<br>ELF<br>系统调用</p>
<h3 id="系统概念"><a href="#系统概念" class="headerlink" title="系统概念"></a>系统概念</h3><p>bootloader<br>进程调度<br>内存管理<br>IO 通信<br>文件系统<br>网络管理</p>
<h3 id="kernel-source-directory"><a href="#kernel-source-directory" class="headerlink" title="kernel source directory"></a>kernel source directory</h3><hr>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">linux-<span class="number">5.6</span>.<span class="number">13</span>/</span><br><span class="line">├── COPYING</span><br><span class="line">├── CREDITS</span><br><span class="line">├── Documentation</span><br><span class="line">├── Kbuild</span><br><span class="line">├── Kconfig</span><br><span class="line">├── LICENSES</span><br><span class="line">├── MAINTAINERS</span><br><span class="line">├── Makefile</span><br><span class="line">├── README</span><br><span class="line">├── arch            <span class="comment"># 体系结构相关的代码，例如arm, x86等等。</span></span><br><span class="line">├── block           <span class="comment"># 提供块设备的层次。</span></span><br><span class="line">├── certs           <span class="comment"># </span></span><br><span class="line">├── crypto          <span class="comment"># 加密、解密相关的库函数</span></span><br><span class="line">├── drivers         <span class="comment"># 设备驱动</span></span><br><span class="line">├── fs              <span class="comment"># VFS子系统</span></span><br><span class="line">├── <span class="keyword">include</span>         <span class="comment"># 内核头文件，需要提供给外部模块（例如用户空间代码）使用</span></span><br><span class="line">├── init            <span class="comment"># Linux系统启动初始化相关的代码</span></span><br><span class="line">├── ipc             <span class="comment"># IPC（进程间通信）子系统</span></span><br><span class="line">├── kernel          <span class="comment"># Linux内核的核心代码，包含了3.2小节所描述的进程调度子系统，以及和进程调度相关的模块。</span></span><br><span class="line">├── <span class="class"><span class="keyword">lib</span>             <span class="comment"># 实现需要在内核中使用的库函数</span></span></span><br><span class="line">├── mm              <span class="comment"># 内存管理子系统</span></span><br><span class="line">├── net             <span class="comment"># 不包括网络设备驱动的网络子系统</span></span><br><span class="line">├── samples         <span class="comment"># 示例代码</span></span><br><span class="line">├── scripts         <span class="comment"># 用于内核编译的配置文件、脚本等。</span></span><br><span class="line">├── security        <span class="comment"># 提供安全特性（SELinux）</span></span><br><span class="line">├── sound           <span class="comment"># 音频相关的驱动及子系统，可以看作“音频子系统”。</span></span><br><span class="line">├── tools           <span class="comment"># 一些常用工具，如性能剖析、自测试等</span></span><br><span class="line">├── usr             <span class="comment"># 用于生成initramfs的代码</span></span><br><span class="line">└── virt            <span class="comment"># 提供虚拟机技术（KVM等）的支持</span></span><br></pre></td></tr></table></figure>
<h3 id="kernel-实现功能"><a href="#kernel-实现功能" class="headerlink" title="kernel 实现功能"></a>kernel 实现功能</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>系统调用接口</span><br><span class="line"><span class="bullet">* </span>进程管理</span><br><span class="line"><span class="bullet">    * </span>调度策略</span><br><span class="line"><span class="bullet">    * </span>架构特定的调度</span><br><span class="line"><span class="bullet">    * </span>架构独立的调度</span><br><span class="line"><span class="bullet">    * </span>系统调用接口</span><br><span class="line"><span class="bullet">* </span>内存管理</span><br><span class="line"><span class="bullet">    * </span>架构相关管理</span><br><span class="line"><span class="bullet">    * </span>架构独立管理</span><br><span class="line"><span class="bullet">    * </span>系统调用接口</span><br><span class="line"><span class="bullet">* </span>虚拟文件系统</span><br><span class="line"><span class="bullet">* </span>网络堆栈</span><br><span class="line"><span class="bullet">    * </span>网络设备驱动</span><br><span class="line"><span class="bullet">    * </span>设备独立接口</span><br><span class="line"><span class="bullet">    * </span>网络协议</span><br><span class="line"><span class="bullet">    * </span>协议独立接口</span><br><span class="line"><span class="bullet">    * </span>系统调用接口</span><br><span class="line"><span class="bullet">* </span>设备驱动程序</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
  </entry>
  <entry>
    <title>Linux操作系统原理</title>
    <url>/2020/05/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2020/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E5%A4%8D%E6%9D%82%E6%8C%87%E4%BB%A4%E9%9B%86" target="_blank" rel="noopener">CISC 复杂指令集</a></p>
<ul>
<li>X86架构 (<a href="http://www.zhaoxin.com/" target="_blank" rel="noopener">兆芯</a>)<ul>
<li><a href="https://zh.wikipedia.org/wiki/X86" target="_blank" rel="noopener">X86</a></li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/%E7%B2%BE%E7%AE%80%E6%8C%87%E4%BB%A4%E9%9B%86" target="_blank" rel="noopener">RISC 精简指令集</a></p>
<ul>
<li>ARM架构 (<a href="https://e.huawei.com/cn/solutions/hic" target="_blank" rel="noopener">华为</a>)<ul>
<li><a href="https://zh.wikipedia.org/wiki/ARM%E6%9E%B6%E6%A7%8B" target="_blank" rel="noopener">ARM</a></li>
</ul>
</li>
<li>MIPS架构(<a href="http://www.loongson.cn/index.html" target="_blank" rel="noopener">龙芯</a>)<ul>
<li><a href="https://zh.wikipedia.org/wiki/MIPS%E6%9E%B6%E6%A7%8B" target="_blank" rel="noopener">MIPS</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h2><ul>
<li>CPU</li>
<li>MEMORY</li>
<li>DISK</li>
<li><p>IO</p>
<ul>
<li>GPU</li>
<li>NET</li>
</ul>
</li>
<li><p>主板</p>
<ul>
<li>北桥<ul>
<li>CPU</li>
<li>MEMORY</li>
<li>GPU</li>
<li>PCIE</li>
</ul>
</li>
<li>南桥<ul>
<li>DISK</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="hello-world-工作流程"><a href="#hello-world-工作流程" class="headerlink" title="hello world 工作流程"></a>hello world 工作流程</h2><p><a href="https://yangwang.hk/?p=281" target="_blank" rel="noopener">引用：用机器码写hello world</a></p>
<p>加电 -&gt; BIOS -&gt; 读取第一扇区 -&gt; bootloader -&gt; 操作系统</p>
<ul>
<li>加电</li>
<li>BIOS<ul>
<li>电池</li>
<li>只读 ROM</li>
</ul>
</li>
<li><p>第一扇区</p>
<ul>
<li>MBR（ Master Boot Record，主引导记录 ）<ul>
<li>466字节的引导程序</li>
<li>64字节的分区表<blockquote>
<p>为什么一块硬盘上最多只能有四个主分区的原因——第五个主分区放不下…</p>
</blockquote>
</li>
<li>2字节的校验位</li>
</ul>
</li>
</ul>
</li>
<li><p>实模式</p>
</li>
<li><p>保护模式</p>
<ul>
<li>286架构<blockquote>
<p>段寄存器保存的数据不再是内存物理地址，而是称作选择器（selector）</p>
<ul>
<li>选择器<ul>
<li>高13位指向描述符表</li>
<li>最低的两位数据定义了请求的权限，从0到3，0是最高权限，3是最低权限；</li>
<li>剩下的一位表示是使用全局描述符表（GDT）还是局部描述符表（LDT）。</li>
</ul>
</li>
<li>全局描述表（GDT Global Descriptor Table)</li>
</ul>
</blockquote>
</li>
<li>386架构 （CPU开创的分页内存管理）<ul>
<li>页目（page directory）</li>
<li>页表（page table）<blockquote>
<p>CR3寄存器保存了进程的页目的物理地址。页目与页表中每4字节为一个单元，是一个32位的值，当页目项第0位为1时，表明页表已经在物理内存中；当页表项第0位为1时，表明访问的数据已经在内存中。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>0x7c00</p>
<blockquote>
<p>8086设计出了20位的寻址总线(16位集群器寻20位地址)<br>16位最大是65536，也就是64kb。2^20=1MB。</p>
</blockquote>
</li>
<li>段寄存器（16位）一级<ul>
<li>段地址</li>
</ul>
</li>
<li><p>指针寄存器（4位）二级</p>
<ul>
<li>偏移地址</li>
</ul>
</li>
<li><p>显示器</p>
<ul>
<li>点距<blockquote>
<p>像素之间的距离</p>
</blockquote>
</li>
<li><p>分辨率</p>
<blockquote>
<p>显示分辨率（屏幕分辨率）是屏幕图像的精密度，是指显示器所能显示的像素有多少。</p>
</blockquote>
<ul>
<li>ppi（像素每英寸）</li>
<li>dpi（点每英寸）用于打印机    </li>
</ul>
</li>
<li>频率<blockquote>
<p>刷新率指每秒钟出现新图像的数量</p>
</blockquote>
</li>
</ul>
</li>
<li>显卡<blockquote>
<p>控制像素点显示，显卡有一块内存，叫显存。只需要把字符写入显存，显卡就会帮助我们将他显示在屏幕上。</p>
</blockquote>
</li>
<li>内存映射(会把显存映射到内存)</li>
<li>显示字符<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">086</span>下<span class="number">0X00000</span><span class="number">-0X9FFFF</span>是留给普通内存的，后面的<span class="number">0XF0000</span>-FFFFF则是存放BIOS的芯片。</span><br><span class="line">中间<span class="number">0XA0000</span>-EFFFFF的<span class="number">320</span>k字节，则由各种外围设备提供，比如显卡。</span><br><span class="line">显存的范围是<span class="number">0xB8000</span><span class="number">-0XBFFF</span></span><br><span class="line">显卡在启动后，会自动的被初始化为<span class="number">80</span>×<span class="number">25</span>的文本模式，一共两千个字符。</span><br><span class="line"><span class="number">0xB8000</span>就对应屏幕的左上角第一个字符，然后是往右依次类推</span><br><span class="line"></span><br><span class="line">一个字符并不是占用一个字节，而是两个。</span><br><span class="line">第一个字节是字符的ASCII，第二个字节指定了字符的显示属性，比如颜色，是否闪烁。</span><br><span class="line">颜色分为前景色和背景色（前四bit，后四bit）</span><br><span class="line">前四：K RGB K,控制是否闪烁</span><br><span class="line">后四：I RGB I,控制颜色深浅</span><br><span class="line"></span><br><span class="line">屏幕黑色时，显存里是空格。</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
  </entry>
  <entry>
    <title>计算机语言编译过程</title>
    <url>/2020/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><a href="/2020/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" title="计算机组成原理">计算机组成原理</a>
<h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><blockquote>
<p>不同的指令集对应不同的汇编器</p>
</blockquote>
<ul>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-assembly/index.html" target="_blank" rel="noopener">Linux 汇编语言开发指南</a></li>
</ul>
<h2 id="C-语言编译过程"><a href="#C-语言编译过程" class="headerlink" title="C 语言编译过程"></a>C 语言编译过程</h2><ul>
<li>预处理<ul>
<li>处理预编译指令，例如 #define，#if，#ifdefine 等。</li>
<li>将 #include 包含文件插入到该预编译指令的位置</li>
<li>删除所有的注析 // 、/**/</li>
</ul>
</li>
<li>编译<ul>
<li>把预处理过的代码编译成汇编代码</li>
</ul>
</li>
<li>汇编<ul>
<li>把汇编代码编译成目标代码</li>
</ul>
</li>
<li>链接<ul>
<li>把目标代码链接成可执行文件</li>
</ul>
</li>
</ul>
<h2 id="以-nginx-代码为例，使用-gcc-编译器了解一下编译过程。"><a href="#以-nginx-代码为例，使用-gcc-编译器了解一下编译过程。" class="headerlink" title="以 nginx 代码为例，使用 gcc 编译器了解一下编译过程。"></a>以 nginx 代码为例，使用 gcc 编译器了解一下编译过程。</h2><h3 id="下载-nginx-代码"><a href="#下载-nginx-代码" class="headerlink" title="下载 nginx 代码"></a>下载 nginx 代码</h3><p><a href="http://nginx.org/download/nginx-1.17.10.tar.gz" target="_blank" rel="noopener">nginx 源码</a></p>
<h3 id="使用-gcc-编译器-gcc-version-4-8-5"><a href="#使用-gcc-编译器-gcc-version-4-8-5" class="headerlink" title="使用 gcc 编译器 (gcc version 4.8.5)"></a>使用 gcc 编译器 (gcc version 4.8.5)</h3><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">gcc -v # 显示编译过程</span><br><span class="line">gcc -### # 选项和命令不执行</span><br><span class="line">gcc -E # 预处理</span><br><span class="line">gcc -S # 编译成汇编代码</span><br><span class="line">gcc -c # 编译、汇编，不链接</span><br></pre></td></tr></table></figure>
<h3 id="gcc-编译过程"><a href="#gcc-编译过程" class="headerlink" title="gcc 编译过程"></a>gcc 编译过程</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.17.10.tar.gz</span><br><span class="line">tar -zxf nginx-1.17.10.tar.gz</span><br><span class="line"><span class="built_in">cd</span> /root/nginx-1.17.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先执行 configure 配置一下整个环境。因为要生成一些文件</span></span><br><span class="line">./configure --prefix=/opt/nginx</span><br><span class="line"><span class="built_in">cd</span> /src/core</span><br><span class="line"><span class="comment"># 备份一下源码</span></span><br><span class="line">cp nginx.c nginx.c.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># -I 用于预处理时，指定头文件</span></span><br><span class="line">gcc -I/root/nginx-1.17.10/src/core \</span><br><span class="line">-I../../objs/ \</span><br><span class="line">-I../../src/os/unix/ \</span><br><span class="line">-E nginx.c</span><br><span class="line"></span><br><span class="line">gcc -I/root/nginx-1.17.10/src/core -I../../objs/ -I../../src/os/unix/ -E nginx.c &gt;nginx1.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预处理前后的对比</span></span><br><span class="line">gcc -I/root/nginx-1.17.10/src/core -I../../objs/ -I../../src/os/unix/ -E nginx.c |less -N</span><br><span class="line">less -N nginx.c.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">gcc -S nginx1.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 汇编</span></span><br><span class="line">gcc -c nginx1.s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接</span></span><br><span class="line">gcc nginx1.o -o nginx1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译后文件大小(行)</span></span><br><span class="line">1590 nginx.c.bak    <span class="comment"># 源码</span></span><br><span class="line">13535 nginx1.c      <span class="comment"># 预处理后代码，把所有需要的头文件都 include 进来</span></span><br><span class="line">3726 nginx1.s       <span class="comment"># 编译后汇编代码</span></span><br><span class="line">139 nginx1.o        <span class="comment"># 编译成目标文件</span></span><br></pre></td></tr></table></figure>
<h2 id="linux-可执行文件介绍"><a href="#linux-可执行文件介绍" class="headerlink" title="linux 可执行文件介绍"></a>linux 可执行文件介绍</h2><blockquote>
<p>ELF 是Executable and Linking Format的缩写，即可执行和可链接的格式，是Unix/Linux系统ABI (Application Binary Interface)规范的一部分。</p>
</blockquote>
<h3 id="usr-include-elf-h"><a href="#usr-include-elf-h" class="headerlink" title="/usr/include/elf.h"></a>/usr/include/elf.h</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 定义了ELF文件的数据类型</span><br><span class="line"> <span class="number">30</span> <span class="comment">/* Type for a 16-bit quantity.  */</span></span><br><span class="line">  <span class="number">31</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>16_t Elf32_Half;</span><br><span class="line">  <span class="number">32</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>16_t Elf64_Half;</span><br><span class="line">  <span class="number">33</span> </span><br><span class="line">  <span class="number">34</span> <span class="comment">/* Types for signed and unsigned 32-bit quantities.  */</span></span><br><span class="line">  <span class="number">35</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>32_t Elf32_Word;</span><br><span class="line">  <span class="number">36</span> <span class="keyword">typedef</span> <span class="built_in">int</span>32_t  Elf32_Sword;</span><br><span class="line">  <span class="number">37</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>32_t Elf64_Word;</span><br><span class="line">  <span class="number">38</span> <span class="keyword">typedef</span> <span class="built_in">int</span>32_t  Elf64_Sword;</span><br><span class="line">  <span class="number">39</span> </span><br><span class="line">  <span class="number">40</span> <span class="comment">/* Types for signed and unsigned 64-bit quantities.  */</span></span><br><span class="line">  <span class="number">41</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>64_t Elf32_Xword;</span><br><span class="line">  <span class="number">42</span> <span class="keyword">typedef</span> <span class="built_in">int</span>64_t  Elf32_Sxword;</span><br><span class="line">  <span class="number">43</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>64_t Elf64_Xword;</span><br><span class="line">  <span class="number">44</span> <span class="keyword">typedef</span> <span class="built_in">int</span>64_t  Elf64_Sxword;</span><br><span class="line">  <span class="number">45</span> </span><br><span class="line">  <span class="number">46</span> <span class="comment">/* Type of addresses.  */</span></span><br><span class="line">  <span class="number">47</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>32_t Elf32_Addr;</span><br><span class="line">  <span class="number">48</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>64_t Elf64_Addr;</span><br><span class="line">  <span class="number">49</span> </span><br><span class="line">  <span class="number">50</span> <span class="comment">/* Type of file offsets.  */</span></span><br><span class="line">  <span class="number">51</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>32_t Elf32_Off;</span><br><span class="line">  <span class="number">52</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>64_t Elf64_Off;</span><br><span class="line">  <span class="number">53</span> </span><br><span class="line">  <span class="number">54</span> <span class="comment">/* Type for section indices, which are 16-bit quantities.  */</span></span><br><span class="line">  <span class="number">55</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>16_t Elf32_Section;</span><br><span class="line">  <span class="number">56</span> <span class="keyword">typedef</span> <span class="built_in">uint</span>16_t Elf64_Section;</span><br><span class="line">  <span class="number">57</span> </span><br><span class="line">  <span class="number">58</span> <span class="comment">/* Type for version symbol information.  */</span></span><br><span class="line">  <span class="number">59</span> <span class="keyword">typedef</span> Elf32_Half Elf32_Versym;</span><br><span class="line">  <span class="number">60</span> <span class="keyword">typedef</span> Elf64_Half Elf64_Versym;</span><br><span class="line"></span><br><span class="line"># 定义了可执行文件头部--结构体</span><br><span class="line">  <span class="number">67</span> <span class="keyword">typedef</span> struct</span><br><span class="line">  <span class="number">68</span> &#123;</span><br><span class="line">  <span class="number">69</span>   unsigned char e_ident[EI_NIDENT];     <span class="comment">/* Magic number and other info */</span></span><br><span class="line">  <span class="number">70</span>   Elf32_Half    e_type;                 <span class="comment">/* Object file type */</span></span><br><span class="line">  <span class="number">71</span>   Elf32_Half    e_machine;              <span class="comment">/* Architecture */</span></span><br><span class="line">  <span class="number">72</span>   Elf32_Word    e_version;              <span class="comment">/* Object file version */</span></span><br><span class="line">  <span class="number">73</span>   Elf32_Addr    e_entry;                <span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  <span class="number">74</span>   Elf32_Off     e_phoff;                <span class="comment">/* Program header table file offset */</span></span><br><span class="line">  <span class="number">75</span>   Elf32_Off     e_shoff;                <span class="comment">/* Section header table file offset */</span></span><br><span class="line">  <span class="number">76</span>   Elf32_Word    e_flags;                <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  <span class="number">77</span>   Elf32_Half    e_ehsize;               <span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  <span class="number">78</span>   Elf32_Half    e_phentsize;            <span class="comment">/* Program header table entry size */</span></span><br><span class="line">  <span class="number">79</span>   Elf32_Half    e_phnum;                <span class="comment">/* Program header table entry count */</span></span><br><span class="line">  <span class="number">80</span>   Elf32_Half    e_shentsize;            <span class="comment">/* Section header table entry size */</span></span><br><span class="line">  <span class="number">81</span>   Elf32_Half    e_shnum;                <span class="comment">/* Section header table entry count */</span></span><br><span class="line">  <span class="number">82</span>   Elf32_Half    e_shstrndx;             <span class="comment">/* Section header string table index */</span></span><br><span class="line">  <span class="number">83</span> &#125; Elf32_Ehdr;</span><br><span class="line">  <span class="number">84</span> </span><br><span class="line">  <span class="number">85</span> <span class="keyword">typedef</span> struct</span><br><span class="line">  <span class="number">86</span> &#123;</span><br><span class="line">  <span class="number">87</span>   unsigned char e_ident[EI_NIDENT];     <span class="comment">/* Magic number and other info */</span></span><br><span class="line">  <span class="number">88</span>   Elf64_Half    e_type;                 <span class="comment">/* Object file type */</span></span><br><span class="line">  <span class="number">89</span>   Elf64_Half    e_machine;              <span class="comment">/* Architecture */</span></span><br><span class="line">  <span class="number">90</span>   Elf64_Word    e_version;              <span class="comment">/* Object file version */</span></span><br><span class="line">  <span class="number">91</span>   Elf64_Addr    e_entry;                <span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  <span class="number">92</span>   Elf64_Off     e_phoff;                <span class="comment">/* Program header table file offset */</span></span><br><span class="line">  <span class="number">93</span>   Elf64_Off     e_shoff;                <span class="comment">/* Section header table file offset */</span></span><br><span class="line">  <span class="number">94</span>   Elf64_Word    e_flags;                <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  <span class="number">95</span>   Elf64_Half    e_ehsize;               <span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  <span class="number">96</span>   Elf64_Half    e_phentsize;            <span class="comment">/* Program header table entry size */</span></span><br><span class="line">  <span class="number">97</span>   Elf64_Half    e_phnum;                <span class="comment">/* Program header table entry count */</span></span><br><span class="line">  <span class="number">98</span>   Elf64_Half    e_shentsize;            <span class="comment">/* Section header table entry size */</span></span><br><span class="line">  <span class="number">99</span>   Elf64_Half    e_shnum;                <span class="comment">/* Section header table entry count */</span></span><br><span class="line"> <span class="number">100</span>   Elf64_Half    e_shstrndx;             <span class="comment">/* Section header string table index */</span></span><br><span class="line"> <span class="number">101</span> &#125; Elf64_Ehdr;</span><br><span class="line"></span><br><span class="line"># 解释了数值表示的意义</span><br><span class="line"> <span class="number">160</span> <span class="comment">/* Legal values for e_type (object file type).  */</span></span><br><span class="line"> <span class="number">161</span> </span><br><span class="line"> <span class="number">162</span> #define ET_NONE         <span class="number">0</span>               <span class="comment">/* No file type */</span></span><br><span class="line"> <span class="number">163</span> #define ET_REL          <span class="number">1</span>               <span class="comment">/* Relocatable file */</span></span><br><span class="line"> <span class="number">164</span> #define ET_EXEC         <span class="number">2</span>               <span class="comment">/* Executable file */</span></span><br><span class="line"> <span class="number">165</span> #define ET_DYN          <span class="number">3</span>               <span class="comment">/* Shared object file */</span></span><br><span class="line"> <span class="number">166</span> #define ET_CORE         <span class="number">4</span>               <span class="comment">/* Core file */</span></span><br><span class="line"> <span class="number">167</span> #define ET_NUM          <span class="number">5</span>               <span class="comment">/* Number of defined types */</span></span><br><span class="line"> <span class="number">168</span> #define ET_LOOS         <span class="number">0xfe00</span>          <span class="comment">/* OS-specific range start */</span></span><br><span class="line"> <span class="number">169</span> #define ET_HIOS         <span class="number">0xfeff</span>          <span class="comment">/* OS-specific range end */</span></span><br><span class="line"> <span class="number">170</span> #define ET_LOPROC       <span class="number">0xff00</span>          <span class="comment">/* Processor-specific range start */</span></span><br><span class="line"> <span class="number">171</span> #define ET_HIPROC       <span class="number">0xffff</span>          <span class="comment">/* Processor-specific range end */</span></span><br></pre></td></tr></table></figure>
<h3 id="通过-readelf-命令了解-linux-可执行文件"><a href="#通过-readelf-命令了解-linux-可执行文件" class="headerlink" title="通过 readelf 命令了解 linux 可执行文件"></a>通过 readelf 命令了解 linux 可执行文件</h3><ul>
<li>section<blockquote>
<p>目标代码文件的内容是由section组成的,.text，.bss，.data这些指示，都指的是section。</p>
<ul>
<li>section header table</li>
</ul>
</blockquote>
</li>
<li>segment<blockquote>
<p>可执行文件的内容是由segment组成的。</p>
<ul>
<li>program header table</li>
</ul>
</blockquote>
</li>
<li>Magic number<blockquote>
<p>Magic number一般是指硬写到代码里的整数常量，数值是编程者自己指定的，其他人不知道数值有什么具体意义，表示不明觉厉，就称作magic number。</p>
</blockquote>
</li>
<li>Magic number 作用<blockquote>
<p>file命令是一个很神奇的命令。它能够根据文件中魔数来判断文件类型。这比根据后缀来判断文件类型要靠谱一点。比如，即使把一张位图文件后缀名改为.jpg，file命令依然大公无私地告诉你它是一张bmp图片。<br>ELF文件头会写入一个magic number，检查这个数和自己预想的是否一致可以判断文件是否损坏。<br>在缓冲区数组旁放一个magic number（称作canary金丝雀），通过检查是否一致可检测缓冲区溢出攻击。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看segment 和 section 对应关系</span></span><br><span class="line"><span class="attr">readelf</span> <span class="string">-l /usr/bin/sleep</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反编译</span></span><br><span class="line"><span class="attr">readelf</span> <span class="string">-S nginx1.o</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h2 id="反汇编工具-objdump"><a href="#反汇编工具-objdump" class="headerlink" title="反汇编工具 objdump"></a>反汇编工具 objdump</h2><blockquote>
<p>objdump是用查看目标文件或者可执行的目标文件的构成</p>
</blockquote>
<ul>
<li><p>符号表</p>
<blockquote>
<p>在计算机科学中，符号表是一种用于语言翻译器（例如编译器和解释器）中的数据结构。<br>在符号表中，程序源代码中的每个标识符都和它的声明或使用信息绑定在一起，比如其数据类型、作用域以及内存地址。<br>散列表是用来实现符号表的一种常用技术。<br>编译器可能会使用一个很大的符号表来包含所有的符号，或是针对不同的作用域使用层次结构的多个独立的符号表。</p>
</blockquote>
</li>
<li><p>文件头</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">objdump</span> <span class="string">-f</span> <span class="string">nginx1.o</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">nginx1.o:</span>     <span class="string">file</span> <span class="string">format</span> <span class="string">elf64-x86-64</span></span><br><span class="line"><span class="attr">architecture:</span> <span class="string">i386:x86-64,</span> <span class="attr">flags 0x00000011:</span></span><br><span class="line"><span class="string">HAS_RELOC,</span> <span class="string">HAS_SYMS</span></span><br><span class="line"><span class="string">start</span> <span class="string">address</span> <span class="number">0x0000000000000000</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机语言编译</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2020/05/Nginx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.kancloud.cn/digest/understandingnginx/202599" target="_blank" rel="noopener">理解 nginx 源码</a></p>
<h2 id="nginx-代码结构"><a href="#nginx-代码结构" class="headerlink" title="nginx 代码结构"></a>nginx 代码结构</h2><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── core  <span class="meta"># Nginx的核心源代码，包括常用数据结构的以及Nginx 内核实现的核心代码；</span></span><br><span class="line">├── <span class="keyword">event</span> <span class="meta"># Nginx事件驱动模型，以及定时器的实现相关代码；</span></span><br><span class="line">├── http  <span class="meta"># Nginx 实现http 服务器相关的代码；</span></span><br><span class="line">├── mail  <span class="meta"># Nginx 实现邮件代理服务器相关的代码；</span></span><br><span class="line">├── misc  <span class="meta"># 辅助代码，测试C++头 的兼容性，以及对Google_PerfTools 的支持；</span></span><br><span class="line">├── os    <span class="meta"># 不同体系统结构所提供的系统函数的封装，提供对外统一的系统调用接口；</span></span><br><span class="line">└── stream <span class="meta">#</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>多语言helloworld示例</title>
    <url>/2020/05/%E5%A4%9A%E8%AF%AD%E8%A8%80helloworld%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="多语言helloworld示例"><a href="#多语言helloworld示例" class="headerlink" title="多语言helloworld示例"></a>多语言helloworld示例</h1><p><a href="https://www.runoob.com/w3cnote/hello-world-programs-of-24-programing-language.html" target="_blank" rel="noopener">runoob 示例</a></p>
<h3 id="python-示例"><a href="#python-示例" class="headerlink" title="python 示例"></a>python 示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="C-示例"><a href="#C-示例" class="headerlink" title="C 示例"></a>C 示例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">include <span class="string">"stdio.h"</span> <span class="comment">// 头文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;  <span class="comment">// 入口函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>) <span class="comment">// 输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-示例-1"><a href="#C-示例-1" class="headerlink" title="C++ 示例"></a>C++ 示例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">// 命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123; <span class="comment">// 类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123; <span class="comment">// 入口函数</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>); <span class="comment">// 输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="golang-示例"><a href="#golang-示例" class="headerlink" title="golang 示例"></a>golang 示例</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">// 命名空间</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span> <span class="comment">// 输出包</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello World"</span>) <span class="comment">// 输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>hello world</tag>
        <tag>指令集</tag>
      </tags>
  </entry>
  <entry>
    <title>Java环境准备</title>
    <url>/2020/05/Java%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>
</li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Java虚拟机<br>字节码</p>
<h2 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h2><ul>
<li><a href="https://www.oracle.com/java/" target="_blank" rel="noopener">Java</a></li>
<li><a href="https://docs.oracle.com/en/java/javase/14/" target="_blank" rel="noopener">JDK docs</a></li>
</ul>
<h3 id="下载-JDK-包"><a href="#下载-JDK-包" class="headerlink" title="下载 JDK 包"></a>下载 JDK 包</h3><ul>
<li><a href="https://www.oracle.com/java/technologies/javase-jdk14-downloads.html" target="_blank" rel="noopener">Oracle JDK</a></li>
<li><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">JDK download</a></li>
<li><a href="https://openjdk.java.net/" target="_blank" rel="noopener">OPENJDK</a></li>
</ul>
<h3 id="JAVA-开发工具"><a href="#JAVA-开发工具" class="headerlink" title="JAVA 开发工具"></a>JAVA 开发工具</h3><ul>
<li><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">Eclipse</a></li>
<li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">Idea</a></li>
</ul>
<h3 id="编译工具"><a href="#编译工具" class="headerlink" title="编译工具"></a>编译工具</h3><ul>
<li><a href>Maven</a></li>
<li><a href>Grdle</a></li>
</ul>
<h3 id="Java-框架"><a href="#Java-框架" class="headerlink" title="Java 框架"></a>Java 框架</h3><p><a href="https://spring.io/" target="_blank" rel="noopener">Spring family</a></p>
<h3 id="配置三个变量"><a href="#配置三个变量" class="headerlink" title="配置三个变量"></a>配置三个变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_HOME <span class="comment"># 安装java目录</span></span><br><span class="line">CLASSPATH <span class="comment"># java 类库</span></span><br><span class="line">PATH      <span class="comment"># java 可执行路径</span></span><br></pre></td></tr></table></figure>
<h3 id="hello-world-示例"><a href="#hello-world-示例" class="headerlink" title="hello world 示例"></a>hello world 示例</h3><p>新建一个 Helloworld.class 文件<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java 类声明</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 入口函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// java 输出语句</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>markdown数学公式</title>
    <url>/2020/05/markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h2><p>行内公式：将公式插入到本行内，一个美元符，$xyz$</p>
<p>独行公式：将公式插入到新的一行内，并且居中，两个美元符，<script type="math/tex">xyz</script></p>
<h2 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h2><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>表示</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>上标符号</td>
<td>^</td>
<td>$x^4$</td>
</tr>
<tr>
<td>下标符号</td>
<td>_</td>
<td>$x_1$</td>
</tr>
<tr>
<td>组合符号</td>
<td>{}</td>
<td>${16}<em>{8}O{2+}</em>{2}$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h2><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>表示</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>汉字形式</td>
<td>\mbox{}</td>
<td>$V_{\mbox{初始}}$</td>
</tr>
<tr>
<td>字体控制</td>
<td>\displaystyle</td>
<td>$\displaystyle \frac{x+y}{y+z}$</td>
</tr>
<tr>
<td>下划线符号</td>
<td>\underline</td>
<td>$\underline{x+y}$</td>
</tr>
<tr>
<td>标签</td>
<td>\tag{数字}</td>
<td>$\tag{12}$</td>
</tr>
<tr>
<td>上大括号</td>
<td>\overbrace{算式}</td>
<td>$\overbrace{a+b+c+d}^{2.0}$</td>
</tr>
<tr>
<td>下大括号</td>
<td>\underbrace{算式}</td>
<td>$a+\underbrace{b+c}_{1.0}+d$</td>
</tr>
<tr>
<td>上位符号</td>
<td>\stacrel{上位符号}{基位符号}</td>
<td>$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>表示</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>两个quad空格</td>
<td>\qquad</td>
<td>$x \qquad y$</td>
</tr>
<tr>
<td>quad空格</td>
<td>\quad</td>
<td>$x \quad y$</td>
</tr>
<tr>
<td>大空格</td>
<td>符号\</td>
<td>$x \ y$</td>
</tr>
<tr>
<td>中空格</td>
<td>符号\:</td>
<td>$x : y$</td>
</tr>
<tr>
<td>小空格</td>
<td>符号\,</td>
<td>$x , y$</td>
</tr>
<tr>
<td>没有空格</td>
<td>符号``</td>
<td>$xy$</td>
</tr>
<tr>
<td>紧贴</td>
<td>符号!</td>
<td>$x ! y$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h2><div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>表示</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>括号</td>
<td>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</td>
<td>$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</td>
</tr>
<tr>
<td>中括号</td>
<td>[]</td>
<td>$[x+y]$</td>
</tr>
<tr>
<td>大括号</td>
<td>{ }</td>
<td>${x+y}$</td>
</tr>
<tr>
<td>自适应括号</td>
<td>\left</td>
<td>$\left(x\right)$</td>
</tr>
<tr>
<td>自适应括号</td>
<td>\right</td>
<td>$\left(x{yz}\right)$</td>
</tr>
<tr>
<td>组合公式</td>
<td>{上位公式 \choose 下位公式}</td>
<td>${n+1 \choose k}={n \choose k}+{n \choose k-1}$</td>
</tr>
<tr>
<td>组合公式</td>
<td>{上位公式 \atop 下位公式}</td>
<td>$\sum{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A{k0}A{k_1}\cdots$</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>$\sum<em>{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A</em>{k<em>0}A</em>{k_1}\cdots$</p>
</blockquote>
<h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>符号</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>加法运算</td>
<td>+</td>
<td>$x+y=z$</td>
</tr>
<tr>
<td>减法运算</td>
<td>-</td>
<td>$x-y=z$</td>
</tr>
<tr>
<td>加减运算</td>
<td>\pm</td>
<td>$x \pm y=z$</td>
</tr>
<tr>
<td>减甲运算</td>
<td>\mp</td>
<td>$x \mp y=z$</td>
</tr>
<tr>
<td>乘法运算</td>
<td>\times</td>
<td>$x \times y=z$</td>
</tr>
<tr>
<td>点乘运算</td>
<td>\cdot</td>
<td>$x \cdot y=z$</td>
</tr>
<tr>
<td>星乘运算</td>
<td>\ast</td>
<td>$x \ast y=z$</td>
</tr>
<tr>
<td>除法运算</td>
<td>\div</td>
<td>$x \div y=z$</td>
</tr>
<tr>
<td>斜法运算</td>
<td>/</td>
<td>$x/y=z$</td>
</tr>
<tr>
<td>分式表示</td>
<td>\frac{分子}{分母}</td>
<td>$\frac{x+y}{y+z}$</td>
</tr>
<tr>
<td>分式表示</td>
<td>{分子} \voer {分母}</td>
<td>${x+y} \over {y+z}$</td>
</tr>
<tr>
<td>绝对值表示</td>
<td></td>
<td>$x+y$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h2><div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>符号</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>平均数运算</td>
<td>\overline{算式}</td>
<td>$\overline{xyz}$</td>
</tr>
<tr>
<td>开二次方运算</td>
<td>\sqrt</td>
<td>$\sqrt x$</td>
</tr>
<tr>
<td>开方运算</td>
<td>\sqrt[开方数]{被开方数}</td>
<td>$\sqrt[3]{x+y}$</td>
</tr>
<tr>
<td>对数运算</td>
<td>\log</td>
<td>$\log(x)$</td>
</tr>
<tr>
<td>极限运算</td>
<td>\lim</td>
<td>$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</td>
</tr>
<tr>
<td>极限运算</td>
<td>\displaystyle \lim</td>
<td>$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</td>
</tr>
<tr>
<td>求和运算</td>
<td>\sum</td>
<td>$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</td>
</tr>
<tr>
<td>求和运算</td>
<td>\displaystyle \sum</td>
<td>$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</td>
</tr>
<tr>
<td>积分运算</td>
<td>\int</td>
<td>$\int^{\infty}_{0}{xdx}$</td>
</tr>
<tr>
<td>积分运算</td>
<td>\displaystyle \int</td>
<td>$\displaystyle \int^{\infty}_{0}{xdx}$</td>
</tr>
<tr>
<td>微分运算</td>
<td>\partial</td>
<td>$\frac{\partial x}{\partial y}$</td>
</tr>
<tr>
<td>矩阵表示</td>
<td>\begin{matrix} \end{matrix}</td>
<td>$\left[ \begin{matrix} 1 &amp; 2 &amp; 3 \cdots \vdots 4 &amp; 5 &amp; 6 \end{matrix} \right]$</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>\ddots \cdots</p>
</blockquote>
<h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><div class="table-container">
<table>
<thead>
<tr>
<th>逻辑运算</th>
<th>符号</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>等于运算</td>
<td>=</td>
<td>$x+y=z$</td>
</tr>
<tr>
<td>大于运算</td>
<td>&gt;</td>
<td>$x+y&gt;z$</td>
</tr>
<tr>
<td>小于运算</td>
<td>&lt;</td>
<td>$x+y&lt;z$</td>
</tr>
<tr>
<td>大于等于运算</td>
<td>\geq</td>
<td>$x+y \geq z$</td>
</tr>
<tr>
<td>小于等于运算</td>
<td>\leq</td>
<td>$x+y \leq z$</td>
</tr>
<tr>
<td>不等于运算</td>
<td>\neq</td>
<td>$x+y \neq z$</td>
</tr>
<tr>
<td>不大于等于运算</td>
<td>\ngeq</td>
<td>$x+y \ngeq z$</td>
</tr>
<tr>
<td>不大于等于运算</td>
<td>\not\geq</td>
<td>$x+y \not\geq z$</td>
</tr>
<tr>
<td>不小于等于运算</td>
<td>\nleq</td>
<td>$x+y \nleq z$</td>
</tr>
<tr>
<td>不小于等于运算</td>
<td>\not\leq</td>
<td>$x+y \not\leq z$</td>
</tr>
<tr>
<td>约等于运算</td>
<td>\approx</td>
<td>$x+y \approx z$</td>
</tr>
<tr>
<td>恒定等于运算</td>
<td>\equiv</td>
<td>$x+y \equiv z$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><div class="table-container">
<table>
<thead>
<tr>
<th>数学运算</th>
<th>符号</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>属于运算</td>
<td>\in</td>
<td>$x \in y$</td>
</tr>
<tr>
<td>不属于运算</td>
<td>\notin</td>
<td>$x \notin y$</td>
</tr>
<tr>
<td>不属于运算</td>
<td>\not\in</td>
<td>$x \not\in y$</td>
</tr>
<tr>
<td>子集运算</td>
<td>\subset</td>
<td>$x \subset y$</td>
</tr>
<tr>
<td>子集运算</td>
<td>\supset</td>
<td>$x \supset y$</td>
</tr>
<tr>
<td>真子集运算</td>
<td>\subseteq</td>
<td>$x \subseteq y$</td>
</tr>
<tr>
<td>非真子集运算</td>
<td>\subsetneq</td>
<td>$x \subsetneq y$</td>
</tr>
<tr>
<td>真子集运算</td>
<td>\supseteq</td>
<td>$x \supseteq y$</td>
</tr>
<tr>
<td>非真子集运算</td>
<td>\supsetneq</td>
<td>$x \supsetneq y$</td>
</tr>
<tr>
<td>非子集运算</td>
<td>\not\subset</td>
<td>$x \not\subset y$</td>
</tr>
<tr>
<td>非子集运算</td>
<td>\not\supset</td>
<td>$x \not\supset y$</td>
</tr>
<tr>
<td>并集运算</td>
<td>\cup</td>
<td>$x \cup y$</td>
</tr>
<tr>
<td>交集运算</td>
<td>\cap</td>
<td>$x \cap y$</td>
</tr>
<tr>
<td>差集运算</td>
<td>\setminus</td>
<td>$x \setminus y$</td>
</tr>
<tr>
<td>同或运算</td>
<td>\bigodot</td>
<td>$x \bigodot y$</td>
</tr>
<tr>
<td>同与运算</td>
<td>\bigotimes</td>
<td>$x \bigotimes y$</td>
</tr>
<tr>
<td>实数集合</td>
<td>\mathbb{R}</td>
<td>\mathbb{R}</td>
</tr>
<tr>
<td>自然数集合</td>
<td>\mathbb{Z}</td>
<td>\mathbb{Z}</td>
</tr>
<tr>
<td>空集</td>
<td>\emptyset</td>
<td>$\emptyset$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><div class="table-container">
<table>
<thead>
<tr>
<th>学名</th>
<th>符号</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td>无穷</td>
<td>\infty</td>
<td>$\infty$</td>
</tr>
<tr>
<td>虚数</td>
<td>\imath</td>
<td>$\imath$</td>
</tr>
<tr>
<td>虚数</td>
<td>\jmath</td>
<td>$\jmath$</td>
</tr>
<tr>
<td>数学符号</td>
<td>符号\hat{a}</td>
<td>$\hat{a}$</td>
</tr>
<tr>
<td>数学符号</td>
<td>符号\check{a}</td>
<td>$\check{a}$</td>
</tr>
<tr>
<td>数学符号</td>
<td>符号\breve{a}</td>
<td>$\breve{a}$</td>
</tr>
<tr>
<td>数学符号</td>
<td>符号\tilde{a}</td>
<td>$\tilde{a}$</td>
</tr>
<tr>
<td>数学符号</td>
<td>符号\bar{a}</td>
<td>$\bar{a}$</td>
</tr>
<tr>
<td>矢量符号</td>
<td>符号\vec{a}</td>
<td>$\vec{a}$</td>
</tr>
<tr>
<td>数学符号</td>
<td>符号\acute{a}</td>
<td>$\acute{a}$</td>
</tr>
<tr>
<td>数学符号</td>
<td>符号\grave{a}</td>
<td>$\grave{a}$</td>
</tr>
<tr>
<td>数学符号</td>
<td>符号\mathring{a}</td>
<td>$\mathring{a}$</td>
</tr>
<tr>
<td>一阶导数符号</td>
<td>符号\dot{a}</td>
<td>$\dot{a}$</td>
</tr>
<tr>
<td>二阶导数符号</td>
<td>符号\ddot{a}</td>
<td>$\ddot{a}$</td>
</tr>
<tr>
<td>上箭头</td>
<td>\uparrow</td>
<td>$\uparrow$</td>
</tr>
<tr>
<td>上箭头</td>
<td>\Uparrow</td>
<td>$\Uparrow$</td>
</tr>
<tr>
<td>下箭头</td>
<td>\downarrow</td>
<td>$\downarrow$</td>
</tr>
<tr>
<td>下箭头</td>
<td>\Downarrow</td>
<td>$\Downarrow$</td>
</tr>
<tr>
<td>左箭头</td>
<td>\leftarrow</td>
<td>$\leftarrow$</td>
</tr>
<tr>
<td>左箭头</td>
<td>\Leftarrow</td>
<td>$\Leftarrow$</td>
</tr>
<tr>
<td>右箭头</td>
<td>\rightarrow</td>
<td>$\rightarrow$</td>
</tr>
<tr>
<td>右箭头</td>
<td>\Rightarrow</td>
<td>$\Rightarrow$</td>
</tr>
<tr>
<td>底端对齐的省略号</td>
<td>\ldots</td>
<td>$1,2,\ldots,n$</td>
</tr>
<tr>
<td>中线对齐的省略号</td>
<td>\cdots</td>
<td>$x_1^2 + x_2^2 + \cdots + x_n^2$</td>
</tr>
<tr>
<td>竖直对齐的省略号</td>
<td>\vdots</td>
<td>$\vdots$</td>
</tr>
<tr>
<td>斜对齐的省略号</td>
<td>\ddots</td>
<td>$\ddots$</td>
</tr>
</tbody>
</table>
</div>
<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><div class="table-container">
<table>
<thead>
<tr>
<th>字母</th>
<th>实现</th>
<th>字母</th>
<th>实现</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>A</td>
<td>α</td>
<td>\alhpa</td>
</tr>
<tr>
<td>B</td>
<td>B</td>
<td>β</td>
<td>\beta</td>
</tr>
<tr>
<td>Γ</td>
<td>\Gamma</td>
<td>γ</td>
<td>\gamma</td>
</tr>
<tr>
<td>Δ</td>
<td>\Delta</td>
<td>δ</td>
<td>\delta</td>
</tr>
<tr>
<td>E</td>
<td>E</td>
<td>ϵ</td>
<td>\epsilon</td>
</tr>
<tr>
<td>Z</td>
<td>Z</td>
<td>ζ</td>
<td>\zeta</td>
</tr>
<tr>
<td>H</td>
<td>H</td>
<td>η</td>
<td>\eta</td>
</tr>
<tr>
<td>Θ</td>
<td>\Theta</td>
<td>θ</td>
<td>\theta</td>
</tr>
<tr>
<td>I</td>
<td>I</td>
<td>ι</td>
<td>\iota</td>
</tr>
<tr>
<td>K</td>
<td>K</td>
<td>κ</td>
<td>\kappa</td>
</tr>
<tr>
<td>Λ</td>
<td>\Lambda</td>
<td>λ</td>
<td>\lambda</td>
</tr>
<tr>
<td>M</td>
<td>M</td>
<td>μ</td>
<td>\mu</td>
</tr>
<tr>
<td>N</td>
<td>N</td>
<td>ν</td>
<td>\nu</td>
</tr>
<tr>
<td>Ξ</td>
<td>\Xi</td>
<td>ξ</td>
<td>\xi</td>
</tr>
<tr>
<td>O</td>
<td>O</td>
<td>ο</td>
<td>\omicron</td>
</tr>
<tr>
<td>Π</td>
<td>\Pi</td>
<td>π</td>
<td>\pi</td>
</tr>
<tr>
<td>P</td>
<td>P</td>
<td>ρ</td>
<td>\rho</td>
</tr>
<tr>
<td>Σ</td>
<td>\Sigma</td>
<td>σ</td>
<td>\sigma</td>
</tr>
<tr>
<td>T</td>
<td>T</td>
<td>τ</td>
<td>\tau</td>
</tr>
<tr>
<td>Υ</td>
<td>\Upsilon</td>
<td>υ</td>
<td>\upsilon</td>
</tr>
<tr>
<td>Φ</td>
<td>\Phi</td>
<td>ϕ</td>
<td>\phi</td>
</tr>
<tr>
<td>X</td>
<td>X</td>
<td>χ</td>
<td>\chi</td>
</tr>
<tr>
<td>Ψ</td>
<td>\Psi</td>
<td>ψ</td>
<td>\psi</td>
</tr>
<tr>
<td>Ω</td>
<td>\v</td>
<td>ω</td>
<td>\omega</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学公式</tag>
      </tags>
  </entry>
  <entry>
    <title>python环境准备</title>
    <url>/2020/05/Python%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://www.python.org/" target="_blank" rel="noopener">Python</a></li>
<li><a href="https://www.python.org/doc/" target="_blank" rel="noopener">Python docs</a><blockquote>
<p>练习时使用最新版，部署时尽量不要使用最新版。很多开发库没跟上。</p>
<p>对于初学者建议不要选用太多自动化的工具。云里雾里遇到问题就歇菜。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>数据分析，直接选用 anaconda</p>
<p>数据分析也常用 jupter 工具</p>
<ul>
<li><a href="https://www.anaconda.com/products/individual#Downloads" target="_blank" rel="noopener">Anaconda</a></li>
<li><a href="https://jupyter.org/install" target="_blank" rel="noopener">jupter</a></li>
</ul>
</blockquote>
<ul>
<li><a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">包管理工具 pip</a></li>
</ul>
<blockquote>
<p>交互工具选用 ipython<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="安装-Python-3-8-2"><a href="#安装-Python-3-8-2" class="headerlink" title="安装 Python 3.8.2"></a>安装 Python 3.8.2</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//www.<span class="keyword">python</span>.org/ftp/<span class="keyword">python</span>/<span class="number">3.8</span>.<span class="number">2</span>/Python-<span class="number">3.8</span>.<span class="number">2</span>.tgz</span><br><span class="line">tar -zxf Python-<span class="number">3.8</span>.<span class="number">2</span>.tgz </span><br><span class="line"><span class="keyword">cd</span> Python-<span class="number">3.8</span>.<span class="number">2</span></span><br><span class="line">./configure  --prefix /usr/local/<span class="keyword">python</span></span><br><span class="line"><span class="keyword">make</span> -<span class="keyword">j</span> $(/proc/cpuinfo |<span class="keyword">grep</span> cores|wc -<span class="keyword">l</span>)</span><br><span class="line"><span class="keyword">make</span> install</span><br><span class="line"></span><br><span class="line"># 配置国内镜像源</span><br><span class="line"><span class="built_in">mkdir</span> ~/.pip</span><br><span class="line"><span class="keyword">cat</span> &lt;&lt;<span class="string">'EOF'</span> &gt;~/.pip/pip.<span class="keyword">conf</span> </span><br><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = http://pypi.douban.<span class="keyword">com</span>/simple</span><br><span class="line">extra-<span class="built_in">index</span>-url=http<span class="variable">s:</span>//mirrors.aliyun.<span class="keyword">com</span>/pypi/simple</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 配置虚拟环境</span><br><span class="line">/usr/local/<span class="keyword">python</span>/bin/pip3 install --upgrade pip</span><br><span class="line">/usr/local/<span class="keyword">python</span>/bin/pip3 install virtualenv</span><br><span class="line">/usr/local/<span class="keyword">python</span>/bin/virtualenv demo</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">". demo/bin/activate"</span> &gt;&gt;~/.bash_profile</span><br><span class="line">. demo/bin/activate</span><br><span class="line">pip install django</span><br><span class="line"></span><br><span class="line"><span class="keyword">python</span> --<span class="keyword">version</span></span><br><span class="line"># <span class="keyword">verbose</span> (跟踪导入的语句 trace import statements)</span><br><span class="line"><span class="keyword">python</span> -v</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Rancher安装配置</title>
    <url>/2020/05/Rancher%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://docs.rancher.cn/rancher2x/quick-start.html" target="_blank" rel="noopener"> rander 2.x 新文档 </a></li>
</ul>
<h2 id="Rancher-2-X-docker-安装"><a href="#Rancher-2-X-docker-安装" class="headerlink" title="Rancher 2.X docker 安装"></a>Rancher 2.X docker 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载最新的镜像</span></span><br><span class="line">docker pull rancher/rancher</span><br><span class="line">docker image ls</span><br><span class="line"><span class="comment"># 查看镜像详情</span></span><br><span class="line">docker inspect rancher/rancher:latest</span><br><span class="line">---</span><br><span class="line"> <span class="string">"Volumes"</span>: &#123;</span><br><span class="line">                <span class="string">"/var/lib/rancher"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"/var/log/auditlog"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"WorkingDir"</span>: <span class="string">"/var/lib/rancher"</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 创建 pvc</span></span><br><span class="line">mkdir -p /docker_volume/rancher_home/rancher</span><br><span class="line">mkdir -p /docker_volume/rancher_home/auditlog</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run -d --restart=unless-stopped -p 80:80 -p 443:443 \</span><br><span class="line">-v /docker_volume/rancher_home/rancher:/var/lib/rancher \</span><br><span class="line">-v /docker_volume/rancher_home/auditlog:/var/<span class="built_in">log</span>/auditlog \</span><br><span class="line">--name rancher rancher/rancher  </span><br><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker container ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://192.168.0.61</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 admin 密码</span></span><br><span class="line">admin@123456.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择页面底部 设置语言</span></span><br></pre></td></tr></table></figure>
<h2 id="docker-compose-启动"><a href="#docker-compose-启动" class="headerlink" title="docker-compose 启动"></a>docker-compose 启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir rancher;<span class="built_in">cd</span> rancher</span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span>&gt;docker-compose.yml</span><br><span class="line">version: <span class="string">"3.7"</span></span><br><span class="line">services:</span><br><span class="line">  rancher:</span><br><span class="line">    container_name: rancher</span><br><span class="line">    image: rancher/rancher</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">    - /data/rancher_home/rancher:/var/lib/rancher </span><br><span class="line">    - /data/rancher_home/auditlog:/var/<span class="built_in">log</span>/auditlog</span><br><span class="line">    ports:</span><br><span class="line">    - 80:80</span><br><span class="line">    - 443:443</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">docker-compose stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置</span></span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="导入现有的-kubernetes-集群"><a href="#导入现有的-kubernetes-集群" class="headerlink" title="导入现有的 kubernetes 集群"></a>导入现有的 kubernetes 集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加集群 -&gt; 导入现有集群 -&gt; 名称 -&gt; 导入命令 -&gt; 完成 </span></span><br><span class="line"><span class="comment"># 需要 kubernetes 管理员权限，已经有了无需执行</span></span><br><span class="line">kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user [USER_ACCOUNT]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 kubernetes 集群执行</span></span><br><span class="line"><span class="comment"># 有证书</span></span><br><span class="line">kubectl apply -f https://192.168.0.61/v3/import/d2nkw8bzktbzrtsnfcdbxdzjbxqpbn8gwbhntxcpprwpf7jq9t9689.yaml</span><br><span class="line"><span class="comment"># 绕过证书检查</span></span><br><span class="line">curl --insecure -sfL https://192.168.0.61/v3/import/d2nkw8bzktbzrtsnfcdbxdzjbxqpbn8gwbhntxcpprwpf7jq9t9689.yaml | kubectl apply -f -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会在kubernetes 上所有节点上创建 </span></span><br><span class="line">cattle-node-agent</span><br><span class="line"><span class="comment"># 在 master 上创建两个 pod</span></span><br><span class="line">cattle-cluster-agent</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>Harbor安装配置</title>
    <url>/2020/05/Harbor%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://github.com/goharbor/harbor/blob/master/docs/README.md" target="_blank" rel="noopener">Harbor docs</a></li>
<li><a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener">Docker engine install</a></li>
<li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Docker compose install</a></li>
</ul>
<h2 id="安装需求"><a href="#安装需求" class="headerlink" title="安装需求"></a>安装需求</h2><a href="/2020/05/%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/" title="配置国内镜像源">配置国内镜像源</a>
<a href="/2020/05/Docker%E5%AE%89%E8%A3%85/" title="Docker安装">Docker安装</a>
<a href="/2020/05/Dockerfile/" title="docker容器制作">docker容器制作</a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker engine Version 17.06.0-ce+ or higher</span></span><br><span class="line"></span><br><span class="line">docker version</span><br><span class="line">---</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.8</span><br><span class="line"> API version:       1.39 (downgraded from 1.40)</span><br><span class="line"> Go version:        go1.12.17</span><br><span class="line"> Git commit:        afacb8b</span><br><span class="line"> Built:             Wed Mar 11 01:27:04 2020</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.7</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.8</span><br><span class="line">  Git commit:       2d0083d</span><br><span class="line">  Built:            Thu Jun 27 17:26:28 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker Compose Version 1.18.0 or higher</span></span><br><span class="line"></span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># Openssl Latest is preferred</span></span><br></pre></td></tr></table></figure>
<h2 id="harbor-下载"><a href="#harbor-下载" class="headerlink" title="harbor 下载"></a><a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">harbor 下载</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxf harbor-offline-installer-v2.0.0.tgz</span><br><span class="line"><span class="built_in">cd</span> harbor</span><br><span class="line">cp harbor.yml.tmpl harbor.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 harbor.yml</span></span><br><span class="line">hostname 本机IP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 ssl 先注释</span></span><br><span class="line">https:</span><br><span class="line">  port: 443</span><br><span class="line">  certificate: /your/certificate/path</span><br><span class="line">  private_key: /your/private/key/path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">./prepare </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">docker-compose stop </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新部署</span></span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h3 id="安装-17-个镜像，启动了10个容器"><a href="#安装-17-个镜像，启动了10个容器" class="headerlink" title="安装 17 个镜像，启动了10个容器"></a>安装 17 个镜像，启动了10个容器</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">goharbor/chartmuseum-photon    <span class="comment">#</span></span><br><span class="line">goharbor/redis-photon          <span class="comment">#</span></span><br><span class="line">goharbor/trivy-adapter-photon  <span class="comment">#</span></span><br><span class="line">goharbor/clair-adapter-photon  <span class="comment">#</span></span><br><span class="line">goharbor/clair-photon          <span class="comment">#</span></span><br><span class="line">goharbor/notary-server-photon  </span><br><span class="line">goharbor/notary-signer-photon  </span><br><span class="line">goharbor/harbor-registryctl    </span><br><span class="line">goharbor/registry-photon       </span><br><span class="line">goharbor/nginx-photon          </span><br><span class="line">goharbor/harbor-<span class="built_in">log</span>            </span><br><span class="line">goharbor/harbor-jobservice     </span><br><span class="line">goharbor/harbor-core           </span><br><span class="line">goharbor/harbor-portal         </span><br><span class="line">goharbor/harbor-db             </span><br><span class="line">goharbor/<span class="built_in">prepare</span></span><br></pre></td></tr></table></figure>
<h3 id="Harbor-目录结构"><a href="#Harbor-目录结构" class="headerlink" title="Harbor 目录结构"></a>Harbor 目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/data/</span><br><span class="line">├── ca_download</span><br><span class="line">├── database <span class="comment"># pg 数据库</span></span><br><span class="line">│   ├── base</span><br><span class="line">│   ├── global</span><br><span class="line">│   ├── pg_clog</span><br><span class="line">│   ├── pg_commit_ts</span><br><span class="line">│   ├── pg_dynshmem</span><br><span class="line">│   ├── pg_hba.conf</span><br><span class="line">│   ├── pg_ident.conf</span><br><span class="line">│   ├── pg_logical</span><br><span class="line">│   ├── pg_multixact</span><br><span class="line">│   ├── pg_notify</span><br><span class="line">│   ├── pg_replslot</span><br><span class="line">│   ├── pg_serial</span><br><span class="line">│   ├── pg_snapshots</span><br><span class="line">│   ├── pg_stat</span><br><span class="line">│   ├── pg_stat_tmp</span><br><span class="line">│   ├── pg_subtrans</span><br><span class="line">│   ├── pg_tblspc</span><br><span class="line">│   ├── pg_twophase</span><br><span class="line">│   ├── PG_VERSION</span><br><span class="line">│   ├── pg_xlog</span><br><span class="line">│   ├── postgresql.auto.conf</span><br><span class="line">│   ├── postgresql.conf</span><br><span class="line">│   ├── postmaster.opts</span><br><span class="line">│   └── postmaster.pid</span><br><span class="line">├── job_logs</span><br><span class="line">├── redis</span><br><span class="line">│   └── dump.rdb</span><br><span class="line">├── registry <span class="comment">#仓库</span></span><br><span class="line">└── secret <span class="comment">#密码</span></span><br><span class="line">    ├── core</span><br><span class="line">    ├── keys</span><br><span class="line">    └── registry</span><br></pre></td></tr></table></figure>
<h3 id="web-管理"><a href="#web-管理" class="headerlink" title="web 管理"></a>web 管理</h3><p><a href="http://192.168.1.71/" target="_blank" rel="noopener">http://192.168.1.71/</a><br>默认用户名密码<br>admin,Harbor12345</p>
<h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><blockquote>
<p>登录后</p>
<ul>
<li>创建一个项目 newproject,分配大小。（ -1 不限制）</li>
<li>创建一个用户 new,New@1234</li>
<li>到项目中授权新用户为项目管理员</li>
<li>项目角色<ul>
<li>项目管理员</li>
<li>开发</li>
<li>维护</li>
<li>访客</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="客户端使用-配置docker信任"><a href="#客户端使用-配置docker信任" class="headerlink" title="客户端使用,配置docker信任"></a>客户端使用,配置docker信任</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"insecure-registries"</span>: [<span class="string">"192.168.1.61:81"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl reload docker</span><br></pre></td></tr></table></figure>
<h3 id="制作上传镜像"><a href="#制作上传镜像" class="headerlink" title="制作上传镜像"></a>制作上传镜像</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 制作镜像</span><br><span class="line">docker tag busybox <span class="number">192.168</span><span class="number">.0</span><span class="number">.61</span>:<span class="number">81</span>/newproject/busybox:<span class="number">0.1</span></span><br><span class="line"># 将当前容器打为镜像 (docker commit 当前运行的容器名 新镜像名:版本号)</span><br><span class="line">docker commit busybox <span class="number">192.168</span><span class="number">.0</span><span class="number">.61</span>:<span class="number">81</span>/newproject/busybox:<span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"># 登录镜像库</span><br><span class="line">docker login <span class="number">192.168</span><span class="number">.0</span><span class="number">.61</span>:<span class="number">81</span></span><br><span class="line"># 上传镜像</span><br><span class="line">docker push <span class="number">192.168</span><span class="number">.0</span><span class="number">.61</span>:<span class="number">81</span>/newproject/busybox:<span class="number">0.1</span></span><br></pre></td></tr></table></figure>
<h3 id="docker-login-镜像库"><a href="#docker-login-镜像库" class="headerlink" title="docker login 镜像库"></a>docker login 镜像库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login 192.168.1.71:80</span><br><span class="line">docker <span class="built_in">logout</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 secret</span></span><br><span class="line">cat /root/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"auths"</span>: &#123;</span><br><span class="line">        <span class="string">"192.168.1.71:80"</span>: &#123;</span><br><span class="line">            <span class="string">"auth"</span>: <span class="string">"YWRtaW46SGFyYm9yMTIzNDU="</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"wm7z6zxl.mirror.aliyuncs.com"</span>: &#123;</span><br><span class="line">            <span class="string">"auth"</span>: <span class="string">"YWRtaWdfadfaYm9yMTIzNDU="</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /root/.docker/config.json |base64 -w 0</span></span><br><span class="line"><span class="comment"># 在 kubernetes secret 中配置</span></span><br><span class="line">data:</span><br><span class="line">  .dockerconfigjson:</span><br></pre></td></tr></table></figure>
<h3 id="kubernetes-中使用-harbor"><a href="#kubernetes-中使用-harbor" class="headerlink" title="kubernetes 中使用 harbor"></a>kubernetes 中使用 harbor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl run nginx-test --image=192.168.1.71:80/project1/nginx:1.2 --port=80 --replicas=1 -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s 使用 secret</span></span><br><span class="line">kubectl create secret docker-registry registry-secret --namespace=default \</span><br><span class="line">--docker-server=192.168.1.71:80 --docker-username=<span class="built_in">test</span> \</span><br><span class="line">--docker-password=<span class="built_in">test</span>@123 --docker-email=<span class="built_in">test</span>@163.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get secret  -n <span class="built_in">test</span></span><br><span class="line">kubectl delete secret registry-secret</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模板文件中加入</span></span><br><span class="line">spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: 10.1.210.35/project1/nginx:latest  <span class="comment">#镜像地址</span></span><br><span class="line">        ports:</span><br><span class="line">          - containerPort: 80</span><br><span class="line">      imagePullSecrets:        <span class="comment">#使用的secret</span></span><br><span class="line">       - name: registry-secret</span><br></pre></td></tr></table></figure>
<h2 id="配置-https"><a href="#配置-https" class="headerlink" title="配置 https"></a>配置 https</h2><p>需要申请证书，也可以自签名证书。自签名证书不受信任，需要在浏览器端添加证书信任。</p>
<h3 id="生成根证书"><a href="#生成根证书" class="headerlink" title="生成根证书"></a>生成根证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果使用ip 则将所有 yourdomain.com 改成 IP （文件名称是可以随意的）</span></span><br><span class="line"><span class="comment"># 生成CA证书私钥</span></span><br><span class="line">openssl genrsa -out ca.key 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成CA根证书</span></span><br><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650 \</span><br><span class="line"> -subj <span class="string">"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=yourdomain.com"</span> \</span><br><span class="line"> -key ca.key \</span><br><span class="line"> -out ca.crt</span><br></pre></td></tr></table></figure>
<h3 id="生成服务器证书"><a href="#生成服务器证书" class="headerlink" title="生成服务器证书"></a>生成服务器证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">openssl genrsa -out yourdomain.com.key 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对根证书签名</span></span><br><span class="line">openssl req -sha512 -new \</span><br><span class="line">    -subj <span class="string">"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=yourdomain.com"</span> \</span><br><span class="line">    -key yourdomain.com.key \</span><br><span class="line">    -out yourdomain.com.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个x509 v3扩展文件（可以简写）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"subjectAltName = IP:192.168.0.69"</span> &gt; v3.ext</span><br><span class="line">or</span><br><span class="line">cat &gt; v3.ext &lt;&lt;-EOF</span><br><span class="line">authorityKeyIdentifier=keyid,issuer</span><br><span class="line">basicConstraints=CA:FALSE</span><br><span class="line">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="line">extendedKeyUsage = serverAuth</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1=yourdomain.com</span><br><span class="line">DNS.2=yourdomain</span><br><span class="line">DNS.3=hostname</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用v3.ext文件为您的Harbor主机生成证书</span></span><br><span class="line">openssl x509 -req -sha512 -days 3650 \</span><br><span class="line">    -extfile v3.ext \</span><br><span class="line">    -CA ca.crt -CAkey ca.key -CAcreateserial \</span><br><span class="line">    -<span class="keyword">in</span> yourdomain.com.csr \</span><br><span class="line">    -out yourdomain.com.crt</span><br></pre></td></tr></table></figure>
<h3 id="提供证书给Harbor和Docker"><a href="#提供证书给Harbor和Docker" class="headerlink" title="提供证书给Harbor和Docker"></a>提供证书给Harbor和Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器证书复制到 Harbor</span></span><br><span class="line">cp yourdomain.com.crt /data/cert/</span><br><span class="line">cp yourdomain.com.key /data/cert/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把crt 转成 cert 给 docker 使用</span></span><br><span class="line">openssl x509 -inform PEM -<span class="keyword">in</span> yourdomain.com.crt -out yourdomain.com.cert</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将服务器证书，密钥和CA文件复制到Harbor主机上的Docker证书文件夹中。</span></span><br><span class="line">cp yourdomain.com.cert /etc/docker/certs.d/yourdomain.com/</span><br><span class="line">cp yourdomain.com.key /etc/docker/certs.d/yourdomain.com/</span><br><span class="line">cp ca.crt /etc/docker/certs.d/yourdomain.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制到 work docker 节点中</span></span><br><span class="line">scp ca.crt mycert.cert mycert.key 192.168.0.73:/etc/docker/certs.d/192.168.0.69/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">/etc/docker/certs.d/</span><br><span class="line">    └── yourdomain.com:port</span><br><span class="line">       ├── yourdomain.com.cert  &lt;-- Server certificate signed by CA</span><br><span class="line">       ├── yourdomain.com.key   &lt;-- Server key signed by CA</span><br><span class="line">       └── ca.crt               &lt;-- Certificate authority that signed the registry certificate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 docker</span></span><br><span class="line">systemctl reload docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 ssl 配置加上 vim harbor.yml</span></span><br><span class="line">https:</span><br><span class="line">  port: 443</span><br><span class="line">  certificate: /your/certificate/path</span><br><span class="line">  private_key: /your/private/key/path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker-compose down -v</span><br><span class="line"><span class="comment"># 重新生成配置文件</span></span><br><span class="line">./prepare</span><br><span class="line"><span class="comment"># 启动 harbor</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">docker login yourdomain.com</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>l2tpvpn安装</title>
    <url>/2020/05/l2tpvpn%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Script for automatic setup of an IPsec VPN server on CentOS/RHEL 6 and 7.</span></span><br><span class="line"><span class="comment"># Works on any dedicated server or virtual private server (VPS) except OpenVZ.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># DO NOT RUN THIS SCRIPT ON YOUR PC OR MAC!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The latest version of this script is available at:</span></span><br><span class="line"><span class="comment"># https://github.com/hwdsl2/setup-ipsec-vpn</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Copyright (C) 2015-2019 Lin Song &lt;linsongui@gmail.com&gt;</span></span><br><span class="line"><span class="comment"># Based on the work of Thomas Sarlandie (Copyright 2012)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This work is licensed under the Creative Commons Attribution-ShareAlike 3.0</span></span><br><span class="line"><span class="comment"># Unported License: http://creativecommons.org/licenses/by-sa/3.0/</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Attribution required: please include my name in any derivative and let me</span></span><br><span class="line"><span class="comment"># know how you have improved it!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your own values for these variables</span></span><br><span class="line"><span class="comment"># - IPsec pre-shared key, VPN username and password</span></span><br><span class="line"><span class="comment"># - All values MUST be placed inside 'single quotes'</span></span><br><span class="line"><span class="comment"># - DO NOT use these special characters within values: \ " '</span></span><br><span class="line"></span><br><span class="line">YOUR_IPSEC_PSK=<span class="string">'112233'</span></span><br><span class="line">YOUR_USERNAME=<span class="string">'yanqi'</span></span><br><span class="line">YOUR_PASSWORD=<span class="string">'yanqi123'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Important notes:   https://git.io/vpnnotes</span></span><br><span class="line"><span class="comment"># Setup VPN clients: https://git.io/vpnclients</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================================================</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">SYS_DT=$(date +%F-%T)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">exiterr</span></span>()  &#123; <span class="built_in">echo</span> <span class="string">"Error: <span class="variable">$1</span>"</span> &gt;&amp;2; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"><span class="function"><span class="title">exiterr2</span></span>() &#123; exiterr <span class="string">"'yum install' failed."</span>; &#125;</span><br><span class="line"><span class="function"><span class="title">conf_bk</span></span>() &#123; /bin/cp -f <span class="string">"<span class="variable">$1</span>"</span> <span class="string">"<span class="variable">$1</span>.old-<span class="variable">$SYS_DT</span>"</span> 2&gt;/dev/null; &#125;</span><br><span class="line"><span class="function"><span class="title">bigecho</span></span>() &#123; <span class="built_in">echo</span>; <span class="built_in">echo</span> <span class="string">"## <span class="variable">$1</span>"</span>; <span class="built_in">echo</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_ip</span></span>() &#123;</span><br><span class="line">  IP_REGEX=<span class="string">'^(([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\.)&#123;3&#125;([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])$'</span></span><br><span class="line">  <span class="built_in">printf</span> <span class="string">'%s'</span> <span class="string">"<span class="variable">$1</span>"</span> | tr -d <span class="string">'\n'</span> | grep -Eq <span class="string">"<span class="variable">$IP_REGEX</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">vpnsetup</span></span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! grep -qs -e <span class="string">"release 6"</span> -e <span class="string">"release 7"</span> /etc/redhat-release; <span class="keyword">then</span></span><br><span class="line">  exiterr <span class="string">"This script only supports CentOS/RHEL 6 and 7."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /proc/user_beancounters ]; <span class="keyword">then</span></span><br><span class="line">  exiterr <span class="string">"OpenVZ VPS is not supported. Try OpenVPN: github.com/Nyr/openvpn-install"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$(id -u)</span>"</span> != 0 ]; <span class="keyword">then</span></span><br><span class="line">  exiterr <span class="string">"Script must be run as root. Try 'sudo sh <span class="variable">$0</span>'"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">def_iface=$(route 2&gt;/dev/null | grep -m 1 <span class="string">'^default'</span> | grep -o <span class="string">'[^ ]*$'</span>)</span><br><span class="line">[ -z <span class="string">"<span class="variable">$def_iface</span>"</span> ] &amp;&amp; def_iface=$(ip -4 route list 0/0 2&gt;/dev/null | grep -m 1 -Po <span class="string">'(?&lt;=dev )(\S+)'</span>)</span><br><span class="line">def_state=$(cat <span class="string">"/sys/class/net/<span class="variable">$def_iface</span>/operstate"</span> 2&gt;/dev/null)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$def_state</span>"</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$def_state</span>"</span> != <span class="string">"down"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">"<span class="variable">$def_iface</span>"</span> <span class="keyword">in</span></span><br><span class="line">    wl*)</span><br><span class="line">      exiterr <span class="string">"Wireless interface '<span class="variable">$def_iface</span>' detected. DO NOT run this script on your PC or Mac!"</span></span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">  NET_IFACE=<span class="string">"<span class="variable">$def_iface</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  eth0_state=$(cat <span class="string">"/sys/class/net/eth0/operstate"</span> 2&gt;/dev/null)</span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$eth0_state</span>"</span> ] || [ <span class="string">"<span class="variable">$eth0_state</span>"</span> = <span class="string">"down"</span> ]; <span class="keyword">then</span></span><br><span class="line">    exiterr <span class="string">"Could not detect the default network interface."</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  NET_IFACE=eth0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[ -n <span class="string">"<span class="variable">$YOUR_IPSEC_PSK</span>"</span> ] &amp;&amp; VPN_IPSEC_PSK=<span class="string">"<span class="variable">$YOUR_IPSEC_PSK</span>"</span></span><br><span class="line">[ -n <span class="string">"<span class="variable">$YOUR_USERNAME</span>"</span> ] &amp;&amp; VPN_USER=<span class="string">"<span class="variable">$YOUR_USERNAME</span>"</span></span><br><span class="line">[ -n <span class="string">"<span class="variable">$YOUR_PASSWORD</span>"</span> ] &amp;&amp; VPN_PASSWORD=<span class="string">"<span class="variable">$YOUR_PASSWORD</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$VPN_IPSEC_PSK</span>"</span> ] &amp;&amp; [ -z <span class="string">"<span class="variable">$VPN_USER</span>"</span> ] &amp;&amp; [ -z <span class="string">"<span class="variable">$VPN_PASSWORD</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  bigecho <span class="string">"VPN credentials not set by user. Generating random PSK and password..."</span></span><br><span class="line">  VPN_IPSEC_PSK=$(LC_CTYPE=C tr -dc <span class="string">'A-HJ-NPR-Za-km-z2-9'</span> &lt; /dev/urandom | head -c 20)</span><br><span class="line">  VPN_USER=vpnuser</span><br><span class="line">  VPN_PASSWORD=$(LC_CTYPE=C tr -dc <span class="string">'A-HJ-NPR-Za-km-z2-9'</span> &lt; /dev/urandom | head -c 16)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$VPN_IPSEC_PSK</span>"</span> ] || [ -z <span class="string">"<span class="variable">$VPN_USER</span>"</span> ] || [ -z <span class="string">"<span class="variable">$VPN_PASSWORD</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  exiterr <span class="string">"All VPN credentials must be specified. Edit the script and re-enter them."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">printf</span> <span class="string">'%s'</span> <span class="string">"<span class="variable">$VPN_IPSEC_PSK</span> <span class="variable">$VPN_USER</span> <span class="variable">$VPN_PASSWORD</span>"</span> | LC_ALL=C grep -q <span class="string">'[^ -~]\+'</span>; <span class="keyword">then</span></span><br><span class="line">  exiterr <span class="string">"VPN credentials must not contain non-ASCII characters."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$VPN_IPSEC_PSK</span> <span class="variable">$VPN_USER</span> <span class="variable">$VPN_PASSWORD</span>"</span> <span class="keyword">in</span></span><br><span class="line">  *[\\\"\<span class="string">']*)</span></span><br><span class="line"><span class="string">    exiterr "VPN credentials must not contain these special characters: \\ \" '</span><span class="string">"</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string">esac</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "</span>VPN setup <span class="keyword">in</span> progress... Please be patient.<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Create and change to working dir</span></span><br><span class="line"><span class="string">mkdir -p /opt/src</span></span><br><span class="line"><span class="string">cd /opt/src || exit 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "</span>Installing packages required <span class="keyword">for</span> setup...<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">yum -y install wget bind-utils openssl \</span></span><br><span class="line"><span class="string">  iptables iproute gawk grep sed net-tools || exiterr2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "</span>Trying to auto discover IP of this server...<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cat &lt;&lt;'EOF'</span></span><br><span class="line"><span class="string">In case the script hangs here for more than a few minutes,</span></span><br><span class="line"><span class="string">press Ctrl-C to abort. Then edit it and manually enter IP.</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># In case auto IP discovery fails, enter server's public IP here.</span></span><br><span class="line"><span class="string">PUBLIC_IP=<span class="variable">$&#123;VPN_PUBLIC_IP:-''&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[ -z "</span><span class="variable">$PUBLIC_IP</span><span class="string">" ] &amp;&amp; PUBLIC_IP=<span class="variable">$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">check_ip "</span><span class="variable">$PUBLIC_IP</span><span class="string">" || PUBLIC_IP=<span class="variable">$(wget -t 3 -T 15 -qO- http://ipv4.icanhazip.com)</span></span></span><br><span class="line"><span class="string">check_ip "</span><span class="variable">$PUBLIC_IP</span><span class="string">" || exiterr "</span>Cannot detect this server<span class="string">'s public IP. Edit the script and manually enter it."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "Adding the EPEL repository..."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">epel_url="https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E '</span>%&#123;rhel&#125;<span class="string">').noarch.rpm"</span></span><br><span class="line"><span class="string">yum -y install epel-release || yum -y install "$epel_url" || exiterr2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "Installing packages required for the VPN..."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">REPO1='</span>--enablerepo=epel<span class="string">'</span></span><br><span class="line"><span class="string">REPO2='</span>--enablerepo=*server-optional*<span class="string">'</span></span><br><span class="line"><span class="string">REPO3='</span>--enablerepo=*releases-optional*<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">yum -y install nss-devel nspr-devel pkgconfig pam-devel \</span></span><br><span class="line"><span class="string">  libcap-ng-devel libselinux-devel curl-devel \</span></span><br><span class="line"><span class="string">  flex bison gcc make ppp || exiterr2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">yum "$REPO1" -y install xl2tpd || exiterr2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if grep -qs "release 6" /etc/redhat-release; then</span></span><br><span class="line"><span class="string">  yum -y remove libevent-devel</span></span><br><span class="line"><span class="string">  yum "$REPO2" "$REPO3" -y install libevent2-devel fipscheck-devel || exiterr2</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  yum -y install systemd-devel iptables-services || exiterr2</span></span><br><span class="line"><span class="string">  yum "$REPO2" "$REPO3" -y install libevent-devel fipscheck-devel || exiterr2</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">case "$(uname -r)" in</span></span><br><span class="line"><span class="string">  4.1[456]*)</span></span><br><span class="line"><span class="string">    if grep -qs "release 6" /etc/redhat-release; then</span></span><br><span class="line"><span class="string">      L2TP_VER=1.3.12</span></span><br><span class="line"><span class="string">      l2tp_dir="xl2tpd-$L2TP_VER"</span></span><br><span class="line"><span class="string">      l2tp_file="$l2tp_dir.tar.gz"</span></span><br><span class="line"><span class="string">      l2tp_url="https://github.com/xelerance/xl2tpd/archive/v$L2TP_VER.tar.gz"</span></span><br><span class="line"><span class="string">      yum "$REPO2" "$REPO3" -y install libpcap-devel || exiterr2</span></span><br><span class="line"><span class="string">      wget -t 3 -T 30 -nv -O "$l2tp_file" "$l2tp_url" || exit 1</span></span><br><span class="line"><span class="string">      /bin/rm -rf "/opt/src/$l2tp_dir"</span></span><br><span class="line"><span class="string">      tar xzf "$l2tp_file" &amp;&amp; /bin/rm -f "$l2tp_file"</span></span><br><span class="line"><span class="string">      cd "$l2tp_dir" &amp;&amp; make -s 2&gt;/dev/null &amp;&amp; PREFIX=/usr make -s install</span></span><br><span class="line"><span class="string">      cd /opt/src || exit 1</span></span><br><span class="line"><span class="string">      /bin/rm -rf "/opt/src/$l2tp_dir"</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    ;;</span></span><br><span class="line"><span class="string">esac</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "Installing Fail2Ban to protect SSH..."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">yum "$REPO1" -y install fail2ban || exiterr2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "Compiling and installing Libreswan..."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SWAN_VER=3.27</span></span><br><span class="line"><span class="string">swan_file="libreswan-$SWAN_VER.tar.gz"</span></span><br><span class="line"><span class="string">swan_url1="https://github.com/libreswan/libreswan/archive/v$SWAN_VER.tar.gz"</span></span><br><span class="line"><span class="string">swan_url2="https://download.libreswan.org/$swan_file"</span></span><br><span class="line"><span class="string">if ! &#123; wget -t 3 -T 30 -nv -O "$swan_file" "$swan_url1" || wget -t 3 -T 30 -nv -O "$swan_file" "$swan_url2"; &#125;; then</span></span><br><span class="line"><span class="string">  exit 1</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">/bin/rm -rf "/opt/src/libreswan-$SWAN_VER"</span></span><br><span class="line"><span class="string">tar xzf "$swan_file" &amp;&amp; /bin/rm -f "$swan_file"</span></span><br><span class="line"><span class="string">cd "libreswan-$SWAN_VER" || exit 1</span></span><br><span class="line"><span class="string">cat &gt; Makefile.inc.local &lt;&lt;'</span>EOF<span class="string">'</span></span><br><span class="line"><span class="string">WERROR_CFLAGS =</span></span><br><span class="line"><span class="string">USE_DNSSEC = false</span></span><br><span class="line"><span class="string">USE_DH31 = false</span></span><br><span class="line"><span class="string">USE_GLIBC_KERN_FLIP_HEADERS = true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">NPROCS=$(grep -c ^processor /proc/cpuinfo)</span></span><br><span class="line"><span class="string">[ -z "$NPROCS" ] &amp;&amp; NPROCS=1</span></span><br><span class="line"><span class="string">make "-j$((NPROCS+1))" -s base &amp;&amp; make -s install-base</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cd /opt/src || exit 1</span></span><br><span class="line"><span class="string">/bin/rm -rf "/opt/src/libreswan-$SWAN_VER"</span></span><br><span class="line"><span class="string">if ! /usr/local/sbin/ipsec --version 2&gt;/dev/null | grep -qF "$SWAN_VER"; then</span></span><br><span class="line"><span class="string">  exiterr "Libreswan $SWAN_VER failed to build."</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "Creating VPN configuration..."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">L2TP_NET=$&#123;VPN_L2TP_NET:-'</span>192.168.42.0/24<span class="string">'&#125;</span></span><br><span class="line"><span class="string">L2TP_LOCAL=$&#123;VPN_L2TP_LOCAL:-'</span>192.168.42.1<span class="string">'&#125;</span></span><br><span class="line"><span class="string">L2TP_POOL=$&#123;VPN_L2TP_POOL:-'</span>192.168.42.10-192.168.42.250<span class="string">'&#125;</span></span><br><span class="line"><span class="string">XAUTH_NET=$&#123;VPN_XAUTH_NET:-'</span>192.168.43.0/24<span class="string">'&#125;</span></span><br><span class="line"><span class="string">XAUTH_POOL=$&#123;VPN_XAUTH_POOL:-'</span>192.168.43.10-192.168.43.250<span class="string">'&#125;</span></span><br><span class="line"><span class="string">DNS_SRV1=$&#123;VPN_DNS_SRV1:-'</span>8.8.8.8<span class="string">'&#125;</span></span><br><span class="line"><span class="string">DNS_SRV2=$&#123;VPN_DNS_SRV2:-'</span>8.8.4.4<span class="string">'&#125;</span></span><br><span class="line"><span class="string">DNS_SRVS="\"$DNS_SRV1 $DNS_SRV2\""</span></span><br><span class="line"><span class="string">[ -n "$VPN_DNS_SRV1" ] &amp;&amp; [ -z "$VPN_DNS_SRV2" ] &amp;&amp; DNS_SRVS="$DNS_SRV1"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Create IPsec config</span></span><br><span class="line"><span class="string">conf_bk "/etc/ipsec.conf"</span></span><br><span class="line"><span class="string">cat &gt; /etc/ipsec.conf &lt;&lt;EOF</span></span><br><span class="line"><span class="string">version 2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">config setup</span></span><br><span class="line"><span class="string">  virtual-private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!$L2TP_NET,%v4:!$XAUTH_NET</span></span><br><span class="line"><span class="string">  protostack=netkey</span></span><br><span class="line"><span class="string">  interfaces=%defaultroute</span></span><br><span class="line"><span class="string">  uniqueids=no</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">conn shared</span></span><br><span class="line"><span class="string">  left=%defaultroute</span></span><br><span class="line"><span class="string">  leftid=$PUBLIC_IP</span></span><br><span class="line"><span class="string">  right=%any</span></span><br><span class="line"><span class="string">  encapsulation=yes</span></span><br><span class="line"><span class="string">  authby=secret</span></span><br><span class="line"><span class="string">  pfs=no</span></span><br><span class="line"><span class="string">  rekey=no</span></span><br><span class="line"><span class="string">  keyingtries=5</span></span><br><span class="line"><span class="string">  dpddelay=30</span></span><br><span class="line"><span class="string">  dpdtimeout=120</span></span><br><span class="line"><span class="string">  dpdaction=clear</span></span><br><span class="line"><span class="string">  ike=aes256-sha2,aes128-sha2,aes256-sha1,aes128-sha1,aes256-sha2;modp1024,aes128-sha1;modp1024</span></span><br><span class="line"><span class="string">  phase2alg=aes_gcm-null,aes128-sha1,aes256-sha1,aes256-sha2_512,aes128-sha2,aes256-sha2</span></span><br><span class="line"><span class="string">  sha2-truncbug=yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">conn l2tp-psk</span></span><br><span class="line"><span class="string">  auto=add</span></span><br><span class="line"><span class="string">  leftprotoport=17/1701</span></span><br><span class="line"><span class="string">  rightprotoport=17/%any</span></span><br><span class="line"><span class="string">  type=transport</span></span><br><span class="line"><span class="string">  phase2=esp</span></span><br><span class="line"><span class="string">  also=shared</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">conn xauth-psk</span></span><br><span class="line"><span class="string">  auto=add</span></span><br><span class="line"><span class="string">  leftsubnet=0.0.0.0/0</span></span><br><span class="line"><span class="string">  rightaddresspool=$XAUTH_POOL</span></span><br><span class="line"><span class="string">  modecfgdns=$DNS_SRVS</span></span><br><span class="line"><span class="string">  leftxauthserver=yes</span></span><br><span class="line"><span class="string">  rightxauthclient=yes</span></span><br><span class="line"><span class="string">  leftmodecfgserver=yes</span></span><br><span class="line"><span class="string">  rightmodecfgclient=yes</span></span><br><span class="line"><span class="string">  modecfgpull=yes</span></span><br><span class="line"><span class="string">  xauthby=file</span></span><br><span class="line"><span class="string">  ike-frag=yes</span></span><br><span class="line"><span class="string">  ikev2=never</span></span><br><span class="line"><span class="string">  cisco-unity=yes</span></span><br><span class="line"><span class="string">  also=shared</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Specify IPsec PSK</span></span><br><span class="line"><span class="string">conf_bk "/etc/ipsec.secrets"</span></span><br><span class="line"><span class="string">cat &gt; /etc/ipsec.secrets &lt;&lt;EOF</span></span><br><span class="line"><span class="string">%any  %any  : PSK "$VPN_IPSEC_PSK"</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Create xl2tpd config</span></span><br><span class="line"><span class="string">conf_bk "/etc/xl2tpd/xl2tpd.conf"</span></span><br><span class="line"><span class="string">cat &gt; /etc/xl2tpd/xl2tpd.conf &lt;&lt;EOF</span></span><br><span class="line"><span class="string">[global]</span></span><br><span class="line"><span class="string">port = 1701</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[lns default]</span></span><br><span class="line"><span class="string">ip range = $L2TP_POOL</span></span><br><span class="line"><span class="string">local ip = $L2TP_LOCAL</span></span><br><span class="line"><span class="string">require chap = yes</span></span><br><span class="line"><span class="string">refuse pap = yes</span></span><br><span class="line"><span class="string">require authentication = yes</span></span><br><span class="line"><span class="string">name = l2tpd</span></span><br><span class="line"><span class="string">pppoptfile = /etc/ppp/options.xl2tpd</span></span><br><span class="line"><span class="string">length bit = yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Set xl2tpd options</span></span><br><span class="line"><span class="string">conf_bk "/etc/ppp/options.xl2tpd"</span></span><br><span class="line"><span class="string">cat &gt; /etc/ppp/options.xl2tpd &lt;&lt;EOF</span></span><br><span class="line"><span class="string">+mschap-v2</span></span><br><span class="line"><span class="string">ipcp-accept-local</span></span><br><span class="line"><span class="string">ipcp-accept-remote</span></span><br><span class="line"><span class="string">noccp</span></span><br><span class="line"><span class="string">auth</span></span><br><span class="line"><span class="string">mtu 1280</span></span><br><span class="line"><span class="string">mru 1280</span></span><br><span class="line"><span class="string">proxyarp</span></span><br><span class="line"><span class="string">lcp-echo-failure 4</span></span><br><span class="line"><span class="string">lcp-echo-interval 30</span></span><br><span class="line"><span class="string">connect-delay 5000</span></span><br><span class="line"><span class="string">ms-dns $DNS_SRV1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ -z "$VPN_DNS_SRV1" ] || [ -n "$VPN_DNS_SRV2" ]; then</span></span><br><span class="line"><span class="string">cat &gt;&gt; /etc/ppp/options.xl2tpd &lt;&lt;EOF</span></span><br><span class="line"><span class="string">ms-dns $DNS_SRV2</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Create VPN credentials</span></span><br><span class="line"><span class="string">conf_bk "/etc/ppp/chap-secrets"</span></span><br><span class="line"><span class="string">cat &gt; /etc/ppp/chap-secrets &lt;&lt;EOF</span></span><br><span class="line"><span class="string">"$VPN_USER" l2tpd "$VPN_PASSWORD" *</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">conf_bk "/etc/ipsec.d/passwd"</span></span><br><span class="line"><span class="string">VPN_PASSWORD_ENC=$(openssl passwd -1 "$VPN_PASSWORD")</span></span><br><span class="line"><span class="string">cat &gt; /etc/ipsec.d/passwd &lt;&lt;EOF</span></span><br><span class="line"><span class="string">$VPN_USER:$VPN_PASSWORD_ENC:xauth-psk</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "Updating sysctl settings..."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if ! grep -qs "hwdsl2 VPN script" /etc/sysctl.conf; then</span></span><br><span class="line"><span class="string">  conf_bk "/etc/sysctl.conf"</span></span><br><span class="line"><span class="string">  if [ "$(getconf LONG_BIT)" = "64" ]; then</span></span><br><span class="line"><span class="string">    SHM_MAX=68719476736</span></span><br><span class="line"><span class="string">    SHM_ALL=4294967296</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    SHM_MAX=4294967295</span></span><br><span class="line"><span class="string">    SHM_ALL=268435456</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">cat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Added by hwdsl2 VPN script</span></span><br><span class="line"><span class="string">kernel.msgmnb = 65536</span></span><br><span class="line"><span class="string">kernel.msgmax = 65536</span></span><br><span class="line"><span class="string">kernel.shmmax = $SHM_MAX</span></span><br><span class="line"><span class="string">kernel.shmall = $SHM_ALL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.accept_source_route = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.accept_redirects = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.send_redirects = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.rp_filter = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.default.accept_source_route = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.default.accept_redirects = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.default.send_redirects = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.default.rp_filter = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.$NET_IFACE.send_redirects = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.$NET_IFACE.rp_filter = 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">net.core.wmem_max = 12582912</span></span><br><span class="line"><span class="string">net.core.rmem_max = 12582912</span></span><br><span class="line"><span class="string">net.ipv4.tcp_rmem = 10240 87380 12582912</span></span><br><span class="line"><span class="string">net.ipv4.tcp_wmem = 10240 87380 12582912</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "Updating IPTables rules..."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Check if rules need updating</span></span><br><span class="line"><span class="string">ipt_flag=0</span></span><br><span class="line"><span class="string">IPT_FILE="/etc/sysconfig/iptables"</span></span><br><span class="line"><span class="string">if ! grep -qs "hwdsl2 VPN script" "$IPT_FILE" \</span></span><br><span class="line"><span class="string">   || ! iptables -t nat -C POSTROUTING -s "$L2TP_NET" -o "$NET_IFACE" -j MASQUERADE 2&gt;/dev/null \</span></span><br><span class="line"><span class="string">   || ! iptables -t nat -C POSTROUTING -s "$XAUTH_NET" -o "$NET_IFACE" -m policy --dir out --pol none -j MASQUERADE 2&gt;/dev/null; then</span></span><br><span class="line"><span class="string">  ipt_flag=1</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Add IPTables rules for VPN</span></span><br><span class="line"><span class="string">if [ "$ipt_flag" = "1" ]; then</span></span><br><span class="line"><span class="string">  service fail2ban stop &gt;/dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string">  iptables-save &gt; "$IPT_FILE.old-$SYS_DT"</span></span><br><span class="line"><span class="string">  iptables -I INPUT 1 -p udp --dport 1701 -m policy --dir in --pol none -j DROP</span></span><br><span class="line"><span class="string">  iptables -I INPUT 2 -m conntrack --ctstate INVALID -j DROP</span></span><br><span class="line"><span class="string">  iptables -I INPUT 3 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span></span><br><span class="line"><span class="string">  iptables -I INPUT 4 -p udp -m multiport --dports 500,4500 -j ACCEPT</span></span><br><span class="line"><span class="string">  iptables -I INPUT 5 -p udp --dport 1701 -m policy --dir in --pol ipsec -j ACCEPT</span></span><br><span class="line"><span class="string">  iptables -I INPUT 6 -p udp --dport 1701 -j DROP</span></span><br><span class="line"><span class="string">  iptables -I FORWARD 1 -m conntrack --ctstate INVALID -j DROP</span></span><br><span class="line"><span class="string">  iptables -I FORWARD 2 -i "$NET_IFACE" -o ppp+ -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span></span><br><span class="line"><span class="string">  iptables -I FORWARD 3 -i ppp+ -o "$NET_IFACE" -j ACCEPT</span></span><br><span class="line"><span class="string">  iptables -I FORWARD 4 -i ppp+ -o ppp+ -s "$L2TP_NET" -d "$L2TP_NET" -j ACCEPT</span></span><br><span class="line"><span class="string">  iptables -I FORWARD 5 -i "$NET_IFACE" -d "$XAUTH_NET" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span></span><br><span class="line"><span class="string">  iptables -I FORWARD 6 -s "$XAUTH_NET" -o "$NET_IFACE" -j ACCEPT</span></span><br><span class="line"><span class="string">  # Uncomment if you wish to disallow traffic between VPN clients themselves</span></span><br><span class="line"><span class="string">  # iptables -I FORWARD 2 -i ppp+ -o ppp+ -s "$L2TP_NET" -d "$L2TP_NET" -j DROP</span></span><br><span class="line"><span class="string">  # iptables -I FORWARD 3 -s "$XAUTH_NET" -d "$XAUTH_NET" -j DROP</span></span><br><span class="line"><span class="string">  iptables -A FORWARD -j DROP</span></span><br><span class="line"><span class="string">  iptables -t nat -I POSTROUTING -s "$XAUTH_NET" -o "$NET_IFACE" -m policy --dir out --pol none -j MASQUERADE</span></span><br><span class="line"><span class="string">  iptables -t nat -I POSTROUTING -s "$L2TP_NET" -o "$NET_IFACE" -j MASQUERADE</span></span><br><span class="line"><span class="string">  echo "# Modified by hwdsl2 VPN script" &gt; "$IPT_FILE"</span></span><br><span class="line"><span class="string">  iptables-save &gt;&gt; "$IPT_FILE"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "Creating basic Fail2Ban rules..."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ ! -f /etc/fail2ban/jail.local ] ; then</span></span><br><span class="line"><span class="string">cat &gt; /etc/fail2ban/jail.local &lt;&lt;'</span>EOF<span class="string">'</span></span><br><span class="line"><span class="string">[ssh-iptables]</span></span><br><span class="line"><span class="string">enabled  = true</span></span><br><span class="line"><span class="string">filter   = sshd</span></span><br><span class="line"><span class="string">action   = iptables[name=SSH, port=ssh, protocol=tcp]</span></span><br><span class="line"><span class="string">logpath  = /var/log/secure</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bigecho "Enabling services on boot..."</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if grep -qs "release 6" /etc/redhat-release; then</span></span><br><span class="line"><span class="string">  chkconfig iptables on</span></span><br><span class="line"><span class="string">  chkconfig fail2ban on</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  systemctl --now mask firewalld 2&gt;/dev/null</span></span><br><span class="line"><span class="string">  systemctl enable iptables fail2ban 2&gt;/dev/null</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if ! grep -qs "hwdsl2 VPN script" /etc/rc.local; then</span></span><br><span class="line"><span class="string">  if [ -f /etc/rc.local ]; then</span></span><br><span class="line"><span class="string">    conf_bk "/etc/rc.local"</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo '</span><span class="comment">#!/bin/sh' &gt; /etc/rc.local</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">cat &gt;&gt; /etc/rc.local &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Added by hwdsl2 VPN script</span></span><br><span class="line">(sleep 15</span><br><span class="line">modprobe -q pppol2tp</span><br><span class="line">service ipsec restart</span><br><span class="line">service xl2tpd restart</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward)&amp;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">bigecho <span class="string">"Starting services..."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Restore SELinux contexts</span></span><br><span class="line">restorecon /etc/ipsec.d/*db 2&gt;/dev/null</span><br><span class="line">restorecon /usr/<span class="built_in">local</span>/sbin -Rv 2&gt;/dev/null</span><br><span class="line">restorecon /usr/<span class="built_in">local</span>/libexec/ipsec -Rv 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reload sysctl.conf</span></span><br><span class="line">sysctl -e -q -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update file attributes</span></span><br><span class="line">chmod +x /etc/rc.local</span><br><span class="line">chmod 600 /etc/ipsec.secrets* /etc/ppp/chap-secrets* /etc/ipsec.d/passwd*</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apply new IPTables rules</span></span><br><span class="line">iptables-restore &lt; <span class="string">"<span class="variable">$IPT_FILE</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fix xl2tpd on CentOS 7, if kernel module "l2tp_ppp" is unavailable</span></span><br><span class="line"><span class="keyword">if</span> grep -qs <span class="string">"release 7"</span> /etc/redhat-release; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> ! modprobe -q l2tp_ppp; <span class="keyword">then</span></span><br><span class="line">    sed -i <span class="string">'/^ExecStartPre/s/^/#/'</span> /usr/lib/systemd/system/xl2tpd.service</span><br><span class="line">    systemctl daemon-reload</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Restart services</span></span><br><span class="line">mkdir -p /run/pluto</span><br><span class="line">modprobe -q pppol2tp</span><br><span class="line">service fail2ban restart 2&gt;/dev/null</span><br><span class="line">service ipsec restart 2&gt;/dev/null</span><br><span class="line">service xl2tpd restart 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line"></span><br><span class="line">================================================</span><br><span class="line"></span><br><span class="line">IPsec VPN server is now ready <span class="keyword">for</span> use!</span><br><span class="line"></span><br><span class="line">Connect to your new VPN with these details:</span><br><span class="line"></span><br><span class="line">Server IP: <span class="variable">$PUBLIC_IP</span></span><br><span class="line">IPsec PSK: <span class="variable">$VPN_IPSEC_PSK</span></span><br><span class="line">Username: <span class="variable">$VPN_USER</span></span><br><span class="line">Password: <span class="variable">$VPN_PASSWORD</span></span><br><span class="line"></span><br><span class="line">Write these down. You<span class="string">'ll need them to connect!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Important notes:   https://git.io/vpnnotes</span></span><br><span class="line"><span class="string">Setup VPN clients: https://git.io/vpnclients</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">================================================</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Defer setup until we have the complete script</span></span><br><span class="line"><span class="string">vpnsetup "$@"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exit 0</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>frp内网穿透</title>
    <url>/2020/05/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">Frp</a></p>
<h2 id="获取包"><a href="#获取包" class="headerlink" title="获取包"></a>获取包</h2><p>git clone <a href="https://github.com/fatedier/frp.git" target="_blank" rel="noopener">https://github.com/fatedier/frp.git</a></p>
<h3 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一键安装脚本</span></span><br><span class="line">wget --no-check-certificate https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/clangcn/</span>onekey-install-shell<span class="regexp">/master/</span>frps<span class="regexp">/install-frps.sh -O ./i</span>nstall-frps.sh</span><br><span class="line"><span class="comment"># 安装位置：/usr/local/frps/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一路回车，就可以安装成功。</span></span><br></pre></td></tr></table></figure>
<h4 id="Congratulations-frps-install-completed"><a href="#Congratulations-frps-install-completed" class="headerlink" title="Congratulations, frps install completed!"></a>Congratulations, frps install completed!</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">You Server IP      :</span> <span class="number">11.84</span><span class="number">.8</span><span class="number">.4</span></span><br><span class="line"><span class="attr">Bind port          :</span> <span class="number">7000</span></span><br><span class="line"><span class="attr">KCP support        :</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">vhost http port    :</span> <span class="number">80</span></span><br><span class="line"><span class="attr">vhost https port   :</span> <span class="number">443</span></span><br><span class="line"><span class="attr">Dashboard port     :</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">token              :</span> <span class="string">TrVhUVLCoZltnuLA</span></span><br><span class="line"><span class="attr">tcp_mux            :</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">Max Pool count     :</span> <span class="number">50</span></span><br><span class="line"><span class="attr">Log level          :</span> <span class="string">info</span></span><br><span class="line"><span class="attr">Log max days       :</span> <span class="number">3</span></span><br><span class="line"><span class="attr">Log file           :</span> <span class="string">enable</span></span><br><span class="line"><span class="string">==============================================</span></span><br><span class="line"><span class="attr">frps Dashboard     :</span> <span class="string">http://11.84.8.4:6443/</span></span><br><span class="line"><span class="attr">Dashboard user     :</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">Dashboard password :</span> <span class="string">JFvEzm</span></span><br><span class="line"><span class="string">==============================================</span></span><br><span class="line"></span><br><span class="line"><span class="attr">frps status manage :</span> <span class="string">frps</span> <span class="string">&#123;start|stop|restart|status|config|version&#125;</span></span><br><span class="line"><span class="attr">Example:</span></span><br><span class="line">  <span class="attr">start:</span> <span class="string">frps</span> <span class="string">start</span></span><br><span class="line">   <span class="attr">stop:</span> <span class="string">frps</span> <span class="string">stop</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">frps</span> <span class="string">restart</span></span><br></pre></td></tr></table></figure>
<h4 id="配置服务端"><a href="#配置服务端" class="headerlink" title="配置服务端"></a>配置服务端</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">启动 frps：</span><br><span class="line"><span class="string">./frps</span> -c <span class="string">./frps.ini</span></span><br></pre></td></tr></table></figure>
<h3 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h3><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/fatedier/frp.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x；</span></span><br><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line">[common]</span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x <span class="comment"># 服务端IP</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span>    <span class="comment"># 服务端端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh 配置样例</span></span><br><span class="line">[ssh]</span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span> <span class="comment">#服务端转发端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 客户端frpc：</span></span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 ssh 访问内网机器，假设用户名为 test：</span></span><br><span class="line">ssh <span class="attr">-oPort=6000</span> test@x.x.x.x</span><br></pre></td></tr></table></figure>
<h4 id="squid-配置样例"><a href="#squid-配置样例" class="headerlink" title="squid 配置样例"></a>squid 配置样例</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">frpc.ini </span><br><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x # 服务端IP</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[squid]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8000</span><br><span class="line">remote_port = 8809</span><br><span class="line">use_compression = <span class="literal">true</span></span><br><span class="line">use_encryption = <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="gitlab-配置样例"><a href="#gitlab-配置样例" class="headerlink" title="gitlab 配置样例"></a>gitlab 配置样例</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">11.84</span>.<span class="number">8.4</span> <span class="comment"># 服务端IP</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[gitlab]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">443</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">443</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>webvirtmgr安装</title>
    <url>/2020/05/Webvirtmgr%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CentOS-7-x-安装"><a href="#CentOS-7-x-安装" class="headerlink" title="CentOS 7.x 安装"></a>CentOS 7.x 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y install http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm</span><br><span class="line"><span class="comment"># if this doesn't work, use yum install epel-release</span></span><br><span class="line">sudo yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx</span><br><span class="line">sudo yum -y install gcc python-devel</span><br><span class="line">sudo pip install numpy</span><br></pre></td></tr></table></figure>
<h2 id="Install-python-requirements-and-setup-Django-environment"><a href="#Install-python-requirements-and-setup-Django-environment" class="headerlink" title="Install python requirements and setup Django environment"></a>Install python requirements and setup Django environment</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/retspen/webvirtmgr.git</span><br><span class="line"><span class="built_in">cd</span> webvirtmgr</span><br><span class="line">pyvenv webvirt</span><br><span class="line">. webvirt/bin/activate</span><br><span class="line">sudo pip install -r requirements.txt <span class="comment"># or python-pip (RedHat, Fedora, CentOS, OpenSuse)</span></span><br><span class="line">./manage.py syncdb</span><br><span class="line">./manage.py collectstatic</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Adding additional superusers</span></span><br><span class="line">$ ./manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<h2 id="Setup-Nginx"><a href="#Setup-Nginx" class="headerlink" title="Setup Nginx"></a>Setup Nginx</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> mv webvirtmgr /var/www/         ( CentOS, RedHat, Fedora, Ubuntu )</span><br><span class="line"> </span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;/etc/nginx/conf.d/webvirtmgr.conf</span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="variable">$hostname</span>;</span><br><span class="line">    <span class="comment">#access_log /var/log/nginx/webvirtmgr_access_log;</span></span><br><span class="line">    <span class="attribute">location</span> /static/ &#123;</span><br><span class="line">            <span class="attribute">root</span> /var/www/webvirtmgr/webvirtmgr; <span class="comment"># or /srv instead of /var</span></span><br><span class="line">            <span class="attribute">expires</span> max;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*\.(js|css)$</span> &#123;</span><br><span class="line">               <span class="attribute">proxy_pass</span> http://127.0.0.1:8000;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:8000;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-for <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">600</span>;</span><br><span class="line">            <span class="attribute">client_max_body_size</span> <span class="number">1024M</span>; <span class="comment"># Set higher depending on your needs</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="attribute">sudo</span> service nginx restart</span><br><span class="line">sudo chown -R nginx:nginx /var/www/webvirtmgr</span><br></pre></td></tr></table></figure>
<h3 id="Setup-Supervisor"><a href="#Setup-Supervisor" class="headerlink" title="Setup Supervisor"></a>Setup Supervisor</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:webvirtmgr]</span></span><br><span class="line"><span class="attr">command</span>=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py</span><br><span class="line"><span class="attr">directory</span>=/var/www/webvirtmgr</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">logfile</span>=/var/log/supervisor/webvirtmgr.log</span><br><span class="line"><span class="attr">log_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">user</span>=nginx</span><br><span class="line"><span class="section">[program:webvirtmgr-console]</span></span><br><span class="line"><span class="attr">command</span>=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console</span><br><span class="line"><span class="attr">directory</span>=/var/www/webvirtmgr</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/supervisor/webvirtmgr-console.log</span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">user</span>=nginx</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  chkconfig supervisord on</span><br><span class="line">sudo service supervisord stop</span><br><span class="line">sudo service supervisord start</span><br></pre></td></tr></table></figure>
<h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/webvirtmgr</span><br><span class="line">sudo git pull</span><br><span class="line">sudo ./manage.py collectstatic</span><br><span class="line">sudo service supervisord restart</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">./manage.py runserver 0:8000</span><br></pre></td></tr></table></figure>
<h3 id="使用tcp方式连接libvirtd"><a href="#使用tcp方式连接libvirtd" class="headerlink" title="使用tcp方式连接libvirtd"></a>使用tcp方式连接libvirtd</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">vim /etc/libvirt/libvirtd.conf</span><br><span class="line"></span><br><span class="line">listen_tls = 0</span><br><span class="line">listen_tcp = 1</span><br><span class="line">tcp_port = <span class="string">"16509"</span> <span class="comment">#tcp端口</span></span><br><span class="line">listen_addr = <span class="string">"0.0.0.0"</span> <span class="comment">#监听IP</span></span><br><span class="line">unix_sock_ro_perms = <span class="string">"0777"</span></span><br><span class="line">unix_sock_rw_perms = <span class="string">"0770"</span></span><br><span class="line">auth_tcp = <span class="string">"none"</span></span><br><span class="line">max_clients = 1024 <span class="comment">#最大连接书</span></span><br><span class="line">min_workers = 100</span><br><span class="line">max_workers = 200</span><br><span class="line">max_requests = 20</span><br><span class="line">max_client_requests = 50</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>gitlab安装</title>
    <url>/2020/05/Gitlab%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://github.com/gitlabhq" target="_blank" rel="noopener">gitlib</a></li>
<li><a href="/2020/05/Gitlab/" title="Gitlab管理">Gitlab管理</a></li>
<li></li>
<li><a href="https://docs.gitlab.com/omnibus/docker/" target="_blank" rel="noopener">gitlab hub</a></li>
</ul>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="docker-compose-方式安装（社区版）"><a href="#docker-compose-方式安装（社区版）" class="headerlink" title="docker-compose 方式安装（社区版）"></a>docker-compose 方式安装（社区版）</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.8'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitlab</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitlab/gitlab-ce</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./data/gitlab/log:/var/log/gitlab:z</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./data/gitlab/opt:/var/opt/gitlab:z</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./data/gitlab/etc:/etc/gitlab:z</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">     <span class="bullet">-</span> <span class="number">8443</span><span class="string">:443</span></span><br></pre></td></tr></table></figure>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">docker-compose stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置</span></span><br><span class="line">docker-compose down</span><br><span class="line">rm /data/gitlab -rf</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理员密码</span></span><br><span class="line">admin@example.com,admin@123.com</span><br></pre></td></tr></table></figure>
<h3 id="GitLab服务器IP地址设置"><a href="#GitLab服务器IP地址设置" class="headerlink" title="GitLab服务器IP地址设置"></a>GitLab服务器IP地址设置</h3><p>修改hosts 执行外网ip</p>
<h2 id="docker-方式安装-sameersbn-docker-gitlab"><a href="#docker-方式安装-sameersbn-docker-gitlab" class="headerlink" title="docker 方式安装 (sameersbn/docker-gitlab)"></a>docker 方式安装 (sameersbn/docker-gitlab)</h2><p><a href="https://github.com/sameersbn/docker-gitlab/blob/master/README.md#installation" target="_blank" rel="noopener">docker-gitlab docs</a></p>
<ul>
<li><a href="/2020/05/Docker/" title="Docker安装">Docker安装</a>
</li>
</ul>
<h3 id="下载镜像（sameersbn-gitlab）"><a href="#下载镜像（sameersbn-gitlab）" class="headerlink" title="下载镜像（sameersbn/gitlab）"></a>下载镜像（sameersbn/gitlab）</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull sameersbn/gitlab</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull sameersbn/postgresql</span></span><br><span class="line"><span class="attr">or</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull sameersbn/mysql</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull sameersbn/redis</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">gitlab-container</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">gitlab-container</span></span><br><span class="line"><span class="attr">wget</span> <span class="string">https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml</span></span><br></pre></td></tr></table></figure>
<h3 id="简易配置-yml-文件-docker-compose-yml"><a href="#简易配置-yml-文件-docker-compose-yml" class="headerlink" title="简易配置 yml 文件 docker-compose.yml"></a>简易配置 yml 文件 docker-compose.yml</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建本地数据卷目录</span></span><br><span class="line">mkdir /data/volumn-docker/gitlab -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">DATADIR=<span class="string">"/data/volumn-docker/gitlab"</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;docker-compose.yml</span><br><span class="line">version: <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    <span class="comment"># restart=always 配置容器退出后自动重启</span></span><br><span class="line">    restart: always</span><br><span class="line">    image: sameersbn/redis:latest</span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="variable">$DATADIR</span>/redis:/var/lib/redis:Z</span><br><span class="line"></span><br><span class="line">  postgresql:</span><br><span class="line">    restart: always</span><br><span class="line">    image: sameersbn/postgresql:latest</span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="variable">$DATADIR</span>/dbs:/var/lib/postgresql:Z</span><br><span class="line">    environment:</span><br><span class="line">    - DB_USER=gitlab</span><br><span class="line">    - DB_PASS=gitlab<span class="comment">#123</span></span><br><span class="line">    - DB_NAME=gitlabhq_production</span><br><span class="line">    - DB_EXTENSION=pg_trgm</span><br><span class="line"></span><br><span class="line">  gitlab:</span><br><span class="line">    restart: always</span><br><span class="line">    image: sameersbn/gitlab:latest</span><br><span class="line">    depends_on:</span><br><span class="line">    - redis</span><br><span class="line">    - postgresql</span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">"8088:80"</span></span><br><span class="line">    - <span class="string">"2222:22"</span></span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="variable">$DATADIR</span>:/home/git/data:Z</span><br><span class="line">    environment:</span><br><span class="line">    <span class="comment"># - DEBUG=false</span></span><br><span class="line">    <span class="comment"># postgresql 配置</span></span><br><span class="line">    - DB_ADAPTER=postgresql</span><br><span class="line">    - DB_HOST=postgresql</span><br><span class="line">    - DB_PORT=5432</span><br><span class="line">    - DB_USER=gitlab</span><br><span class="line">    - DB_PASS=gitlab<span class="comment">#123</span></span><br><span class="line">    - DB_NAME=gitlabhq_production</span><br><span class="line"></span><br><span class="line">    <span class="comment"># redis 配置</span></span><br><span class="line">    - REDIS_HOST=redis</span><br><span class="line">    - REDIS_PORT=6379</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 端口配置</span></span><br><span class="line">    - GITLAB_PORT=80</span><br><span class="line">    - GITLAB_SSH_PORT=22</span><br><span class="line"></span><br><span class="line">    <span class="comment"># CI 所使用的加密密钥</span></span><br><span class="line">    - GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alphanumeric-string</span><br><span class="line">    <span class="comment"># Session 加密密钥</span></span><br><span class="line">    - GITLAB_SECRETS_SECRET_KEY_BASE=long-and-random-alphanumeric-string</span><br><span class="line">    <span class="comment"># 数据库2FA密钥</span></span><br><span class="line">    - GITLAB_SECRETS_OTP_KEY_BASE=long-and-random-alphanumeric-string</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="VERBOSE-配置"><a href="#VERBOSE-配置" class="headerlink" title="VERBOSE 配置"></a>VERBOSE 配置</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">DATADIR</span>=<span class="string">"/data/volumn-docker/gitlab"</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;docker-compose.yml</span><br><span class="line">version: <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    # <span class="attribute">restart</span>=always 配置容器退出后自动重启</span><br><span class="line">    restart: always</span><br><span class="line">    image: sameersbn/redis:latest</span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="variable">$DATADIR</span>/redis:/var/lib/redis:Z</span><br><span class="line">    - /etc/localtime:/etc/localtime:ro</span><br><span class="line"></span><br><span class="line">  #postgresql:</span><br><span class="line">  #  restart: always</span><br><span class="line">  #  image: sameersbn/postgresql:latest</span><br><span class="line">  #  volumes:</span><br><span class="line">  #  - <span class="variable">$DATADIR</span>/dbs:/var/lib/postgresql:Z</span><br><span class="line">  #  environment:</span><br><span class="line">  #  - <span class="attribute">DB_USER</span>=gitlab</span><br><span class="line">  #  - <span class="attribute">DB_PASS</span>=xxxx</span><br><span class="line">  #  - <span class="attribute">DB_NAME</span>=gitlabhq_production</span><br><span class="line">  #  - <span class="attribute">DB_EXTENSION</span>=pg_trgm</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    restart: always</span><br><span class="line">    image: sameersbn/mysql:latest</span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="variable">$DATADIR</span>/dbs:/var/lib/mysql:Z</span><br><span class="line">    - /etc/localtime:/etc/localtime:ro</span><br><span class="line">    environment:</span><br><span class="line">    - <span class="attribute">DB_USER</span>=gitlab</span><br><span class="line">    - <span class="attribute">DB_PASS</span>=xxxx</span><br><span class="line">    - <span class="attribute">DB_NAME</span>=gitlabhq_production</span><br><span class="line"></span><br><span class="line">  gitlab:</span><br><span class="line">    restart: always</span><br><span class="line">    #image: sameersbn/gitlab:latest</span><br><span class="line">    image: sameersbn/gitlab:8.14.4</span><br><span class="line">    depends_on:</span><br><span class="line">    - redis</span><br><span class="line">    - mysql</span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">"8088:80"</span></span><br><span class="line">    - <span class="string">"2222:22"</span></span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="variable">$DATADIR</span>:/home/git/data:Z</span><br><span class="line">    - /etc/localtime:/etc/localtime:ro</span><br><span class="line"></span><br><span class="line">    environment:</span><br><span class="line">    - <span class="attribute">DEBUG</span>=<span class="literal">false</span></span><br><span class="line">    - <span class="attribute">TZ</span>=Asia/Shanghai</span><br><span class="line">    - <span class="attribute">GITLAB_TIMEZONE</span>=Beijing</span><br><span class="line">    - <span class="attribute">GITLAB_BACKUPS</span>=daily</span><br><span class="line">    - <span class="attribute">PATH</span>=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">    </span><br><span class="line">    #</span><br><span class="line">    - <span class="attribute">GITLAB_VERSION</span>=8.14.4</span><br><span class="line">    - <span class="attribute">RUBY_VERSION</span>=2.3</span><br><span class="line">    - <span class="attribute">GOLANG_VERSION</span>=1.6.3</span><br><span class="line">    - <span class="attribute">GITLAB_SHELL_VERSION</span>=4.0.3</span><br><span class="line">    - <span class="attribute">GITLAB_WORKHORSE_VERSION</span>=1.1.1</span><br><span class="line"></span><br><span class="line">    # Email 配置</span><br><span class="line">    - <span class="attribute">GITLAB_ROOT_EMAIL</span>=yuzhigang@uhetrip.com</span><br><span class="line">    - <span class="attribute">GITLAB_EMAIL</span>=xxxx@uhetrip.com</span><br><span class="line">    - <span class="attribute">GITLAB_EMAIL_DISPLAY_NAME</span>=Gitlab_Local</span><br><span class="line">    - <span class="attribute">GITLAB_EMAIL_ENABLED</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    # Gitlab 配置</span><br><span class="line">    - <span class="attribute">RAILS_ENV</span>=production</span><br><span class="line">    - <span class="attribute">GITLAB_USER</span>=git</span><br><span class="line">    - <span class="attribute">GITLAB_HOME</span>=/home/git</span><br><span class="line">    - <span class="attribute">GITLAB_LOG_DIR</span>=/var/log/gitlab</span><br><span class="line">    - <span class="attribute">GITLAB_CACHE_DIR</span>=/etc/docker-gitlab</span><br><span class="line">    - <span class="attribute">GITLAB_INSTALL_DIR</span>=/home/git/gitlab</span><br><span class="line">    - <span class="attribute">GITLAB_SHELL_INSTALL_DIR</span>=/home/git/gitlab-shell</span><br><span class="line">    - <span class="attribute">GITLAB_WORKHORSE_INSTALL_DIR</span>=/home/git/gitlab-workhorse</span><br><span class="line">    - <span class="attribute">GITLAB_DATA_DIR</span>=/home/git/data</span><br><span class="line">    - <span class="attribute">GITLAB_BUILD_DIR</span>=/etc/docker-gitlab/build</span><br><span class="line">    - <span class="attribute">GITLAB_RUNTIME_DIR</span>=/etc/docker-gitlab/runtime</span><br><span class="line"></span><br><span class="line">    # mysql 配置</span><br><span class="line">    - <span class="attribute">DB_ADAPTER</span>=mysql2</span><br><span class="line">    - <span class="attribute">DB_HOST</span>=mysql</span><br><span class="line">    - <span class="attribute">DB_PORT</span>=3306</span><br><span class="line">    - <span class="attribute">DB_USER</span>=gitlab</span><br><span class="line">    - <span class="attribute">DB_PASS</span>=xxxx</span><br><span class="line">    - <span class="attribute">DB_NAME</span>=gitlabhq_production</span><br><span class="line">    - <span class="attribute">DB_ENCODING</span>=utf8</span><br><span class="line"></span><br><span class="line">    # SMTP</span><br><span class="line">    - <span class="attribute">SMTP_ENABLED</span>=<span class="literal">true</span></span><br><span class="line">    - <span class="attribute">SMTP_DOMAIN</span>=mail.126.com</span><br><span class="line">    - <span class="attribute">SMTP_HOST</span>=smtp.126.com</span><br><span class="line">    - <span class="attribute">SMTP_PORT</span>=465</span><br><span class="line">    - <span class="attribute">SMTP_USER</span>=xxxx@126.com</span><br><span class="line">    - <span class="attribute">SMTP_PASS</span>=xxxx</span><br><span class="line">    - <span class="attribute">SMTP_STARTTLS</span>=<span class="literal">true</span></span><br><span class="line">    - <span class="attribute">SMTP_TLS</span>=<span class="literal">true</span></span><br><span class="line">    - <span class="attribute">SMTP_AUTHENTICATION</span>=login</span><br><span class="line"></span><br><span class="line">    # redis 配置</span><br><span class="line">    - <span class="attribute">REDIS_HOST</span>=redis</span><br><span class="line">    - <span class="attribute">REDIS_PORT</span>=6379</span><br><span class="line"></span><br><span class="line">    # 端口配置</span><br><span class="line">    - <span class="attribute">GITLAB_HOST</span>=localserver.com</span><br><span class="line">    - <span class="attribute">GITLAB_PORT</span>=80</span><br><span class="line">    - <span class="attribute">GITLAB_SSH_PORT</span>=22</span><br><span class="line">    - <span class="attribute">GITLAB_HTTPS</span>=<span class="literal">false</span></span><br><span class="line">    - <span class="attribute">SSL_SELF_SIGNED</span>=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    # CI 所使用的加密密钥</span><br><span class="line">    - <span class="attribute">GITLAB_SECRETS_DB_KEY_BASE</span>=long-and-random-alphanumeric-string</span><br><span class="line">    # Session 加密密钥</span><br><span class="line">    - <span class="attribute">GITLAB_SECRETS_SECRET_KEY_BASE</span>=long-and-random-alphanumeric-string</span><br><span class="line">    # 数据库2FA密钥</span><br><span class="line">    - <span class="attribute">GITLAB_SECRETS_OTP_KEY_BASE</span>=long-and-random-alphanumeric-string</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 运行</span></span><br><span class="line">docker-compose up</span><br><span class="line"></span><br><span class="line"><span class="meta"># 后台运行</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="meta"># 配置发生改变加 --remove-orphans </span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="meta"># 停止 </span></span><br><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure>
<h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Whoops, GitLab is taking too much time to respond.</span></span><br><span class="line"><span class="meta"># 服务没完全起来，等一会就ok。或者查看一下日志</span></span><br><span class="line">docker logs -f ContainerID</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Daemon-方式安装-Centos7环境"><a href="#Daemon-方式安装-Centos7环境" class="headerlink" title="Daemon 方式安装 (Centos7环境)"></a>Daemon 方式安装 (Centos7环境)</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装配置依赖包"><a href="#安装配置依赖包" class="headerlink" title="安装配置依赖包"></a>安装配置依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br></pre></td></tr></table></figure>
<h3 id="打开防火墙"><a href="#打开防火墙" class="headerlink" title="打开防火墙"></a>打开防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure>
<h3 id="安装postfix"><a href="#安装postfix" class="headerlink" title="安装postfix"></a>安装postfix</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>
<h3 id="配置postfix"><a href="#配置postfix" class="headerlink" title="配置postfix"></a>配置postfix</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">fatal: parameter inet_interfaces: <span class="literal">no</span> local<span class="built_in"> interface </span>found <span class="keyword">for</span> ::1</span><br><span class="line">vim /etc/postfix/main.cf</span><br><span class="line">inet_interfaces = all</span><br></pre></td></tr></table></figure>
<h2 id="GitLab-安装"><a href="#GitLab-安装" class="headerlink" title="GitLab 安装"></a>GitLab 安装</h2><h3 id="添加-GitLab-安装库"><a href="#添加-GitLab-安装库" class="headerlink" title="添加 GitLab 安装库"></a>添加 GitLab 安装库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span><br><span class="line">EXTERNAL_URL=<span class="string">"http://gitlab.example.com"</span>;yum install -y gitlab-ee</span><br></pre></td></tr></table></figure>
<h3 id="gitlab服务列表"><a href="#gitlab服务列表" class="headerlink" title="gitlab服务列表"></a>gitlab服务列表</h3><ul>
<li>gitaly</li>
<li>gitlab-monitor</li>
<li>gitlab-workhorse</li>
<li>logrotate</li>
<li>nginx</li>
<li>node-exporter</li>
<li>postgres-exporter</li>
<li>postgresql</li>
<li>prometheus</li>
<li>redis</li>
<li>redis-exporter</li>
<li>sidekiq</li>
<li>unicorn</li>
</ul>
<h3 id="gitlab-配置文件"><a href="#gitlab-配置文件" class="headerlink" title="gitlab 配置文件"></a>gitlab 配置文件</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 设置访问url</span></span><br><span class="line">cat /etc/gitlab/gitlab.rb</span><br><span class="line">external_url <span class="string">'http://192.168.88.201'</span></span><br><span class="line"><span class="meta"># 修改url后需要重新reconfigure</span></span><br><span class="line"><span class="meta"># 重新配置(配置完成会启动各服务)</span></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"><span class="meta"># 访问</span></span><br><span class="line">http:<span class="comment">//192.168.88.201/</span></span><br><span class="line"><span class="meta"># 会提示更改新的账号密码，如下： </span></span><br><span class="line">root,<span class="number">5</span>th9ol</span><br></pre></td></tr></table></figure>
<h3 id="管理、配置gitlab"><a href="#管理、配置gitlab" class="headerlink" title="管理、配置gitlab"></a>管理、配置gitlab</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动所有gitlab组件：</span></span><br><span class="line">gitlab-ctl start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止所有gitlab组件：</span></span><br><span class="line">gitlab-ctl stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启所有gitlab组件：</span></span><br><span class="line">gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理员密码忘了：</span></span><br><span class="line">登录GitLab的Rails控制台</span><br><span class="line">gitlab-rails<span class="built_in"> console </span>production</span><br><span class="line">user = User.where(id: 1).first()</span><br><span class="line">user.password = 12345678</span><br><span class="line">user.<span class="attribute">password_confirmation</span>=12345678</span><br><span class="line">user.save!</span><br></pre></td></tr></table></figure>
<h3 id="备份计划："><a href="#备份计划：" class="headerlink" title="备份计划："></a>备份计划：</h3><p>备份GitLab repositories and GitLab metadata<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加入计划任务：</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> * * * <span class="regexp">/opt/gi</span>tlab<span class="regexp">/bin/gi</span>tlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure></p>
<h3 id="恢复gitlab："><a href="#恢复gitlab：" class="headerlink" title="恢复gitlab："></a>恢复gitlab：</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@puppet backups</span>]<span class="meta"># pwd</span></span><br><span class="line">/<span class="keyword">var</span>/opt/gitlab/backups</span><br><span class="line"></span><br><span class="line">[<span class="meta">root@puppet backups</span>]<span class="meta"># ls</span></span><br><span class="line"><span class="number">1406691018</span>_gitlab_backup.tar</span><br><span class="line"></span><br><span class="line">b.停止unicorn和sidekiq，保证数据库没有新的连接，不会有写数据情况</span><br><span class="line">[<span class="meta">root@puppet backups</span>]<span class="meta"># gitlab-ctl stop unicorn</span></span><br><span class="line">ok: down: unicorn: <span class="number">0</span>s, normally up</span><br><span class="line"></span><br><span class="line">[<span class="meta">root@puppet backups</span>]<span class="meta"># gitlab-ctl stop sidekiq</span></span><br><span class="line">ok: down: sidekiq: <span class="number">0</span>s, normally up</span><br><span class="line"></span><br><span class="line">c.恢复数据，<span class="number">1406691018</span>为备份文件的时间戳</span><br><span class="line">[<span class="meta">root@puppet backups</span>]<span class="meta"># gitlab-rake gitlab:backup:restore BACKUP=1406691018</span></span><br></pre></td></tr></table></figure>
<h3 id="目前使用http方式，没有使用ssh"><a href="#目前使用http方式，没有使用ssh" class="headerlink" title="目前使用http方式，没有使用ssh"></a>目前使用http方式，没有使用ssh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面用管理员 root 创建一个普通用户 yanqi,</span></span><br><span class="line"><span class="comment"># 从邮件中登录修改密码 yanqi , 5th9ol</span></span><br><span class="line"><span class="comment"># 然后使用yanqi创建一个git仓库girl，</span></span><br><span class="line">new project:<span class="string">"websystem"</span></span><br><span class="line"><span class="comment"># 最后在客户机下向新建的仓库里上传一个代码文件。</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"alarm_machine@163.com"</span></span><br></pre></td></tr></table></figure>
<h3 id="pycharm-配置gitlab"><a href="#pycharm-配置gitlab" class="headerlink" title="pycharm 配置gitlab"></a>pycharm 配置gitlab</h3><p><a href="http://192.168.88.201/yanqi/websystem.git" target="_blank" rel="noopener">http://192.168.88.201/yanqi/websystem.git</a><br><a href="http://www.cnblogs.com/derekchen/p/5873010.html" target="_blank" rel="noopener">参考配置</a></p>
<h3 id="linux-使用-gitlab"><a href="#linux-使用-gitlab" class="headerlink" title="linux 使用 gitlab"></a>linux 使用 gitlab</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">git</span> <span class="string">clone http://192.168.88.201/yanqi/websystem.git</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">websystem</span></span><br><span class="line"><span class="attr">git</span> <span class="string">pull</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>周易名言</title>
    <url>/2020/05/%E5%91%A8%E6%98%93%E5%90%8D%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="吉凶悔吝-周而复始"><a href="#吉凶悔吝-周而复始" class="headerlink" title="吉凶悔吝 周而复始"></a>吉凶悔吝 周而复始</h3><h4 id="修身"><a href="#修身" class="headerlink" title="修身"></a>修身</h4><ul>
<li>天行健，君子以自强不息。<blockquote>
<p>语出《易传》中的《象传》。意思是:宇宙不停运转，人应效法天地，永远不断地前进。</p>
</blockquote>
</li>
<li>地势坤，君子以厚德载物。<blockquote>
<p>意为大地的气势宽厚和顺，君子应增厚美德，容载万物。一个人要能承受自己能力以内，要自己权衡。</p>
</blockquote>
</li>
<li>君子以反身修德。<blockquote>
<p>出自《易经 蹇卦》,原文应是“山上有水,蹇,君子以反身修德”。意思是说君子在面对挫折、困难(蹇)的时候,应该反躬自问,修养品德。</p>
</blockquote>
</li>
<li><p>君子以自昭明德。</p>
</li>
<li><p>君子以顺德，积小以高大。</p>
</li>
<li>君子以见善则迁，有过则改。</li>
<li>见险而能止，智矣哉。</li>
<li>君子上交不谄，下交不渎。</li>
<li>君子以慎言语，节饮食。</li>
<li>君子以俭德辟难，不可荣以禄。</li>
<li>君子以独立不惧，遁世无闷。</li>
<li>君子藏器于身，待时而动。</li>
<li>君子以惩忿窒欲。</li>
<li>君子之道，或出或处，或默或语。</li>
<li>君子以非礼弗履。</li>
<li>君子以言有物而行有恒。</li>
<li>君子以思不出其位。</li>
<li>君子以恐惧修省。</li>
<li>君子以正位凝命。</li>
<li>君子敬以直内，义以方外，敬义立而德不孤。</li>
<li>君子以向晦入宴息。</li>
<li>君子以立不易方。</li>
<li>君子以果行育德。</li>
<li>君子以多识前言往行以畜其德。</li>
<li>君子以致命遂志。</li>
<li>君子以朋友讲习。</li>
<li>君子以思患而豫防之。</li>
<li>君子以同而异。</li>
<li>君子以行过乎恭，丧过乎哀，用过乎俭。</li>
</ul>
<h4 id="齐家"><a href="#齐家" class="headerlink" title="齐家"></a>齐家</h4><ul>
<li>方以类聚，物以群分。</li>
<li>积善之家，必有余庆；积不善之家，必有余殃。</li>
<li>德薄而位尊，知小而谋大，力小而任重，鲜不及矣。</li>
<li>仁者见之谓之仁，知者见之谓之知。</li>
<li>穷则变，变则通，通则久。</li>
<li>居上位而不骄，在下位而不忧。故乾乾因其时而惕，虽危而无咎矣。</li>
</ul>
<h4 id="平天下"><a href="#平天下" class="headerlink" title="平天下"></a>平天下</h4><ul>
<li>天地之道，恒久而不已也。</li>
<li>形而上者谓之道。形而下者谓之器。</li>
<li>几事不密则害成。</li>
<li>遏恶扬善，顺天休命。</li>
<li>知周乎万物，而道济天下。</li>
</ul>
<p>不易乎世，不成乎名；遁世无闷，不见是而无闷；乐则行之，忧则违之，确乎其不可拔。</p>
<p>探赜索隐，钩深致远。</p>
<p>劳尔不伐，有功而不德，厚之至也！</p>
<p>乐天知名，故不忧。</p>
<p>君子知微知彰，知柔知刚，万夫之望。</p>
<p>虎视眈眈，其欲逐逐。</p>
<p>尺蠖之屈，以求信也。龙蛇之蛰，以存身也。</p>
<p>本乎天者亲上，本乎地者亲下。</p>
<p>二人同心，其利断金。同心之言，其臭如兰。</p>
<p>谦谦君子，卑以自牧也。</p>
<p>蒙以正养，圣功也。</p>
<p>书不尽言，言不尽意。</p>
<p>尺蠖之屈，以求信也；龙蛇之蛰，以存身也。</p>
<p>神而明之，存乎其人；默而成之，不言而信，存乎德行。</p>
<p>括囊无咎无誉，盖言慎也。</p>
<p>庸言之信，庸行之谨，闲邪存其诚，善世而不伐，德博而化。</p>
<p>汤武革命，顺乎天而应乎人。</p>
<p>乐天知命，故不忧。</p>
<p>日中则昃，月盈则食。天地盈虚，与时消息。而况于人乎？况于鬼神乎？</p>
<p>时止则止，时行则行，动静不失其时，其道光明。</p>
<p>困而不失其所亨，其唯君子乎！</p>
<p>备物致用，立成器以为天下利，莫大乎圣人。</p>
<p>物不可穷也，故受之以未济。</p>
<p>谦也者，致恭以存其位者也。</p>
<p>同声相应，同气相求。</p>
<p>慢藏诲盗，冶容诲淫。</p>
<p>刚健笃实辉光，日新其德。</p>
]]></content>
      <categories>
        <category>OTHER</category>
      </categories>
  </entry>
  <entry>
    <title>DevOps</title>
    <url>/2020/05/DevOps/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li><p>软件开发的生命周期</p>
<ul>
<li>规划和需求分析</li>
<li>需求定义</li>
<li>产品架构设计</li>
<li>产品开发与构建</li>
<li>产品测试</li>
<li>生产部署和维护</li>
</ul>
</li>
<li><p>软件构建生命周期</p>
<ul>
<li>构建环境初始化</li>
<li>代码预处理</li>
<li>代码编译</li>
<li>测试代码预编译</li>
<li>测试代码编译</li>
<li>单元测试</li>
<li>打包</li>
<li>继承测试环境准备</li>
<li>集成测试</li>
<li>撤销集成测试环境</li>
<li>安装</li>
<li>发布</li>
</ul>
</li>
<li>事件驱动<ul>
<li>问题左移,尽量把问题留在dev阶段</li>
</ul>
</li>
<li>测试驱动开发流程</li>
</ul>
<h2 id="常规-DEVOPS-流程"><a href="#常规-DEVOPS-流程" class="headerlink" title="常规 DEVOPS 流程"></a>常规 DEVOPS 流程</h2><p>源代码托管 gitlab<br>CI持续集成工具 jenkins<br>自动发布工具 ansible</p>
<h2 id="容器化-DEVOPS-流程"><a href="#容器化-DEVOPS-流程" class="headerlink" title="容器化 DEVOPS 流程"></a>容器化 DEVOPS 流程</h2><p>源代码托管 gitlab<br>CI持续集成工具jenkins<br>镜像仓库 harbor<br>自动发布工具 docker-composer | Kubernetes Deployment</p>
<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><ul>
<li>微服务 ks-apiserver ks-apigateway<ul>
<li>服务治理</li>
<li>灰度发布</li>
<li>熔断 Istio</li>
<li>限流</li>
<li>智能路由 Ingress</li>
</ul>
</li>
</ul>
<p>CI 持续集成（Continuous Integration）<br>CD 持续部署（Continuous Delivery）<br>CD 持续部署（Continuous Deployment）</p>
<ul>
<li>CI/CD Jenkins<ul>
<li>代码仓库<ul>
<li>git</li>
<li>SVN</li>
<li>BitBucket</li>
</ul>
</li>
<li>镜像仓库管理<ul>
<li>Harbor</li>
</ul>
</li>
<li>镜像迁移</li>
<li>源码到镜像 Source-to-Image</li>
<li>安全扫描</li>
<li>流水线 Pipeline<ul>
<li>checkout</li>
<li>UT test SonarQube</li>
<li>Publish</li>
</ul>
</li>
<li>部署<ul>
<li>蓝绿部署（将两个版本同时在线）</li>
<li>金丝雀发布（将一部分真实流量引入一个新版本进行测试）</li>
<li>流量镜像（将生产流量镜像拷贝到测试集群或者新的版本中）</li>
</ul>
</li>
</ul>
</li>
<li>应用管理 OpenPitrix<ul>
<li>应用发布</li>
<li>应用部署</li>
<li>版本控制</li>
<li>应用仓库管理<ul>
<li>OpenPitrix</li>
</ul>
</li>
</ul>
</li>
<li>监控&amp;日志&amp;告警 Prometheus<ul>
<li>系统及服务监控 Metrics-server</li>
<li>系统及服务日志 Elasticsearch Fluent Bit</li>
<li>告警管理 Alert Notification</li>
</ul>
</li>
<li>安全<ul>
<li>用户管理 ks-account</li>
<li>角色管理</li>
<li>第三方登录认证</li>
<li>密钥管理</li>
</ul>
</li>
</ul>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ul>
<li></li>
<li></li>
<li></li>
<li><a href="/2020/05/Jenkins/" title="Jenkins安装配置">Jenkins安装配置</a></li>
<li><a href="/2020/05/Ansible%E4%BD%BF%E7%94%A8/" title="Ansible使用">Ansible使用</a></li>
<li><a href="/2020/05/Docker/" title="Docker">Docker</a></li>
<li></li>
<li><a href="/2020/06/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85DevOps%E7%8E%AF%E5%A2%83/" title="安装配置DevOps环境">安装配置DevOps环境</a></li>
<li><a href="/2020/05/Harbor%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/" title="Harbor安装配">Harbor安装配</a></li>
</ul>
]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>仿hexo的golang实现</title>
    <url>/2020/05/%E4%BB%BFhexo%E7%9A%84golang%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>^^最近想写一下博客。顺便把自己的文档给整理一下。<br>gitee pages 提供静态页的空间。把这个过程也纪录一下。<br>选择 gitee 主要原因是国内访问比较快。<br>githup pages 需要的话导出一份放上去就可以很方便。</p>
<p>实现功能</p>
<pre><code>1、通过模板生成静态页
2、定义网站结构，一次性生成
3、把 markdown文件保存到 md 目录，用来生成文章
4、定义文章结构，把文章生成后加到list页面里。
</code></pre><p>实现完之后三步搞定</p>
<pre><code>1、执行命令生成网站
2、对 md 目录下的文章自动生成
3、发布到 gitee
</code></pre><p>最后写个 deply.sh 一键发布</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><h4 id="发布的目录结构"><a href="#发布的目录结构" class="headerlink" title="发布的目录结构"></a>发布的目录结构</h4><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">blog #类似hexo public</span><br><span class="line">	|-&gt; artcles </span><br><span class="line">		|-&gt; modules #把文章分类</span><br><span class="line">			|-&gt; artcle</span><br><span class="line">	|-&gt; static # 静态文件</span><br><span class="line">		|-&gt; css</span><br><span class="line">		|-&gt; js</span><br><span class="line">		|-&gt; images</span><br></pre></td></tr></table></figure>
<h4 id="待发布的目录结构"><a href="#待发布的目录结构" class="headerlink" title="待发布的目录结构"></a>待发布的目录结构</h4><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">blog</span><br><span class="line">	|-&gt; templates</span><br><span class="line">		|-&gt; static       	<span class="comment">#存放静态文件</span></span><br><span class="line">            |-&gt; css</span><br><span class="line">            |-&gt; js</span><br><span class="line">            |-&gt; images</span><br><span class="line">		|-&gt; nav.tpl 		<span class="comment">#导航条</span></span><br><span class="line">		|-&gt; index.tpl 		<span class="comment">#首页</span></span><br><span class="line">		|-&gt; header.tpl 		<span class="comment">#page 头部</span></span><br><span class="line">		|-&gt; content.tpl 	<span class="comment">#page 内容部分</span></span><br><span class="line">		|-&gt; footer.tpl		<span class="comment">#page 尾部</span></span><br><span class="line">		|-&gt; md 				<span class="comment">#用来存放文章</span></span><br><span class="line">            |-&gt;cloud        <span class="comment">#支持文章分类，文章太多后容易查找</span></span><br><span class="line">		|-&gt; <span class="keyword">list</span>.tpl		<span class="comment">#列表页</span></span><br><span class="line">		|-&gt; listcontent.tpl <span class="comment">#列表内容部分 </span></span><br><span class="line">	|-&gt; main.go</span><br><span class="line">	|-&gt; go.mod</span><br></pre></td></tr></table></figure>
<h3 id="主程序-main-go"><a href="#主程序-main-go" class="headerlink" title="主程序 main.go"></a>主程序 main.go</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/PuerkitoBio/goquery"</span> <span class="comment">//用来处理dom</span></span><br><span class="line">	<span class="string">"os/exec"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"path/filepath"</span></span><br><span class="line">	<span class="string">"regexp"</span> <span class="comment">//正则主要是匹配 tab</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"html/template"</span> <span class="comment">// html 模板</span></span><br><span class="line">	<span class="string">"io/ioutil"</span> <span class="comment">// 文件操作</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义网站结构</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	ROOT          = <span class="string">"blog"</span></span><br><span class="line">	TEMP          = <span class="string">"templates"</span></span><br><span class="line">	ARTCLEDIR     = ROOT + <span class="string">"/artcle"</span></span><br><span class="line">	STATICDIR     = ROOT + <span class="string">"/static"</span></span><br><span class="line">	TEMPMD        = TEMP + <span class="string">"/md"</span></span><br><span class="line">	TEMPSTATICDIR = TEMP + <span class="string">"/static"</span></span><br><span class="line">	INDEX         = ROOT + <span class="string">"/index.html"</span></span><br><span class="line">	LIST          = <span class="string">"/list.html"</span></span><br><span class="line">	TEMPLATES     = <span class="string">"templates"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面名称</span></span><br><span class="line"><span class="keyword">type</span> Page <span class="keyword">struct</span> &#123;</span><br><span class="line">	title <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签颜色 color</span></span><br><span class="line"><span class="keyword">type</span> tagColor <span class="keyword">struct</span> &#123;</span><br><span class="line">	colorn <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文章的属性</span></span><br><span class="line"><span class="keyword">type</span> Artcle <span class="keyword">struct</span> &#123;</span><br><span class="line">	name     <span class="keyword">string</span></span><br><span class="line">	date     <span class="keyword">string</span></span><br><span class="line">	catagory <span class="keyword">string</span></span><br><span class="line">	tag      <span class="keyword">string</span></span><br><span class="line">	tagColor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件列表--感觉这点golang不如python好操作</span></span><br><span class="line"><span class="keyword">var</span> fileList []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> staticfileList []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> mdfileList []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序入口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 生成blog</span></span><br><span class="line">	TpltoBlog()</span><br><span class="line">	<span class="comment">// 把 static 拷贝到blog</span></span><br><span class="line">	staticToBlog()</span><br><span class="line">	<span class="comment">// 把文章发表出去，对md进行处理</span></span><br><span class="line">	mdHandler2()</span><br><span class="line">	<span class="comment">//遍历 artcle 目录，把生成 html 文章 加到list.html中</span></span><br><span class="line">	htmlToList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把html 加入list.html中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">htmlToList</span><span class="params">()</span></span> &#123;</span><br><span class="line">	GetAllFile(ARTCLEDIR)</span><br><span class="line">	<span class="keyword">for</span> _, f := <span class="keyword">range</span> fileList &#123;</span><br><span class="line">		fmt.Println(f)</span><br><span class="line">		addList(f)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 md 底下的文件（废弃）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mdHandler</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 遍历一下目录</span></span><br><span class="line">	files, _ := ioutil.ReadDir(TEMPMD)</span><br><span class="line">	<span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">		filename := file.Name()</span><br><span class="line">		<span class="keyword">if</span> file.IsDir() &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 处理 md to html</span></span><br><span class="line">			<span class="keyword">if</span> strings.Contains(filename, <span class="string">".md"</span>) &#123;</span><br><span class="line">				<span class="comment">//fmt.Println(filename)</span></span><br><span class="line">				htmlfilename := strings.Replace(filename, <span class="string">".md"</span>, <span class="string">".html"</span>, <span class="number">-1</span>)</span><br><span class="line">				fmt.Println(TEMPMD+<span class="string">"/"</span>+filename, TEMPMD+<span class="string">"/"</span>+htmlfilename)</span><br><span class="line">                <span class="comment">// 通过外部命令实现</span></span><br><span class="line">				cmd := exec.Command(<span class="string">"./mdtohtml"</span>, <span class="string">"-css"</span>, <span class="string">"blog/static/css/base.css"</span>, TEMPMD+<span class="string">"/"</span>+filename, TEMPMD+<span class="string">"/"</span>+htmlfilename)</span><br><span class="line">				cmd.Run()</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 md 底下的文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mdHandler2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 生成 md 文件列表</span></span><br><span class="line">	getMD(<span class="string">"templates/md"</span>)</span><br><span class="line">	<span class="keyword">for</span> _, file := <span class="keyword">range</span> mdfileList &#123;</span><br><span class="line">		<span class="keyword">if</span> strings.Contains(file, <span class="string">".md"</span>) &#123;</span><br><span class="line">			htmlfilename := strings.Replace(file, <span class="string">".md"</span>, <span class="string">".html"</span>, <span class="number">-1</span>)</span><br><span class="line">			fmt.Println(file, htmlfilename)</span><br><span class="line">			cmd := exec.Command(<span class="string">"./mdtohtml"</span>, <span class="string">"-css"</span>, <span class="string">"blog/static/css/base.css"</span>, file, htmlfilename)</span><br><span class="line">			cmd.Run()</span><br><span class="line">			_, err := os.Stat(htmlfilename)</span><br><span class="line">			<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> strings.Contains(htmlfilename, <span class="string">".html"</span>) &#123;</span><br><span class="line">					fmt.Println(htmlfilename)</span><br><span class="line">					HtmltoBlog(htmlfilename) <span class="comment">// 对 html 的进行处理</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 md</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMD</span><span class="params">(filename <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	files, _ := ioutil.ReadDir(filename)</span><br><span class="line">	<span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">		f := file.Name()</span><br><span class="line">		<span class="keyword">if</span> file.IsDir() &#123;</span><br><span class="line">			<span class="comment">//fmt.Println(filename + "/" + f)</span></span><br><span class="line">			getMD(filename + <span class="string">"/"</span> + f)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//fmt.Println(f)</span></span><br><span class="line">		mdfileList = <span class="built_in">append</span>(mdfileList, filename+<span class="string">"/"</span>+f)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理md底下html文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">htmlHandler</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 遍历一下目录</span></span><br><span class="line">	files, _ := ioutil.ReadDir(TEMPMD)</span><br><span class="line">	<span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">		filename := file.Name()</span><br><span class="line">		<span class="keyword">if</span> file.IsDir() &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// html to modules(/blog/artcle/*)</span></span><br><span class="line">			<span class="keyword">if</span> strings.Contains(filename, <span class="string">".html"</span>) &#123;</span><br><span class="line">				fmt.Println(filename)</span><br><span class="line">				HtmltoBlog(filename) <span class="comment">// 对 html 的进行处理</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 static 拷贝到blog</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">staticToBlog</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> tempfile <span class="keyword">string</span></span><br><span class="line">	staticToList(TEMPSTATICDIR)</span><br><span class="line">	<span class="keyword">for</span> _, f := <span class="keyword">range</span> staticfileList &#123;</span><br><span class="line">		tempfile = strings.Replace(f, <span class="string">"templates/"</span>, <span class="string">"blog/"</span>, <span class="number">-1</span>)</span><br><span class="line">		fmt.Println(f, tempfile)</span><br><span class="line">		t, _ := ioutil.ReadFile(f)</span><br><span class="line">		ioutil.WriteFile(tempfile, t, os.ModePerm)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找静态文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">staticToList</span><span class="params">(pathname <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	files, _ := ioutil.ReadDir(pathname)</span><br><span class="line">	<span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">		filename := file.Name()</span><br><span class="line">		<span class="comment">//fmt.Println(filename)</span></span><br><span class="line">		<span class="keyword">if</span> file.IsDir() &#123;</span><br><span class="line">			staticToList(pathname + <span class="string">"/"</span> + filename)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			staticfileList = <span class="built_in">append</span>(staticfileList, pathname+<span class="string">"/"</span>+filename)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetAllFile</span><span class="params">(pathname <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	rd, err := ioutil.ReadDir(pathname)</span><br><span class="line">	<span class="keyword">for</span> _, fi := <span class="keyword">range</span> rd &#123;</span><br><span class="line">		<span class="keyword">if</span> fi.IsDir() &#123;</span><br><span class="line">			<span class="comment">//fmt.Printf("[%s]\n", pathname+"/"+fi.Name())</span></span><br><span class="line">			GetAllFile(pathname + <span class="string">"/"</span> + fi.Name())</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> fi.Name() != <span class="string">"list.html"</span> &#123;</span><br><span class="line">				<span class="comment">//fmt.Println(pathname + "/" + fi.Name())</span></span><br><span class="line">				fileList = <span class="built_in">append</span>(fileList, pathname+<span class="string">"/"</span>+fi.Name())</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据模板生成html</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TpltoBlog</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建目录和文件</span></span><br><span class="line">	os.MkdirAll(ARTCLEDIR+<span class="string">"/bigdata"</span>, os.ModePerm)</span><br><span class="line">	os.MkdirAll(ARTCLEDIR+<span class="string">"/cloud"</span>, os.ModePerm)</span><br><span class="line">	os.MkdirAll(STATICDIR+<span class="string">"/css"</span>, os.ModePerm)</span><br><span class="line">	os.Mkdir(STATICDIR+<span class="string">"/images"</span>, os.ModePerm)</span><br><span class="line">	os.Mkdir(STATICDIR+<span class="string">"/scripts"</span>, os.ModePerm)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成模块</span></span><br><span class="line">	ArtcleDir := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">"bigdata"</span>: <span class="string">"大数据"</span>,</span><br><span class="line">		<span class="string">"cloud"</span>:   <span class="string">"云计算"</span>,</span><br><span class="line">		<span class="string">"devops"</span>:  <span class="string">"DevOps"</span>,</span><br><span class="line">		<span class="string">"develop"</span>: <span class="string">"开发技术"</span>,</span><br><span class="line">		<span class="string">"pmp"</span>:     <span class="string">"PMP"</span>,</span><br><span class="line">		<span class="string">"system"</span>:  <span class="string">"系统管理"</span>,</span><br><span class="line">		<span class="string">"lookfor"</span>: <span class="string">"速查表"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	ArtcleMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> dir, name := <span class="keyword">range</span> ArtcleDir &#123;</span><br><span class="line">		os.MkdirAll(ARTCLEDIR+<span class="string">"/"</span>+dir, os.ModePerm)</span><br><span class="line">		ArtcleMap[ARTCLEDIR+<span class="string">"/"</span>+dir+LIST] = name</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成主页</span></span><br><span class="line">	t1, _ := template.ParseFiles(<span class="string">"templates/index.tpl"</span>, <span class="string">"templates/header.tpl"</span>, <span class="string">"templates/nav.tpl"</span>, <span class="string">"templates/content.tpl"</span>, <span class="string">"templates/footer.tpl"</span>)</span><br><span class="line">	<span class="comment">// p := Page&#123;"主页"&#125;</span></span><br><span class="line">	indexFile1, _ := os.Create(INDEX)</span><br><span class="line">	t1.Execute(indexFile1, ArtcleMap)</span><br><span class="line">	indexFile1.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成列表页</span></span><br><span class="line">	t2, _ := template.ParseFiles(<span class="string">"templates/list.tpl"</span>, <span class="string">"templates/header.tpl"</span>, <span class="string">"templates/nav.tpl"</span>, <span class="string">"templates/listcontent.tpl"</span>, <span class="string">"templates/footer.tpl"</span>)</span><br><span class="line">	<span class="comment">// p1 := Page&#123;"列表"&#125;</span></span><br><span class="line">	<span class="keyword">for</span> dir, _ := <span class="keyword">range</span> ArtcleDir &#123;</span><br><span class="line">		fmt.Println(ARTCLEDIR + <span class="string">"/"</span> + dir + LIST)</span><br><span class="line">		listFile, err := os.Create(ARTCLEDIR + <span class="string">"/"</span> + dir + LIST)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 把对列表页进行html渲染</span></span><br><span class="line">		t2.Execute(listFile, ArtcleMap)</span><br><span class="line">		listFile.Close()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生成 404 页面</span></span><br><span class="line">	t404, _ := template.ParseFiles(<span class="string">"templates/404.tpl"</span>)</span><br><span class="line">	p := Page&#123;<span class="string">"404"</span>&#125;</span><br><span class="line">	indexFile404, _ := os.Create(ROOT + <span class="string">"/404.html"</span>)</span><br><span class="line">	t404.Execute(indexFile404, p)</span><br><span class="line">	indexFile404.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> ArtcleMap &#123;</span><br><span class="line">		fmt.Println(k, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把文章添加到列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addList</span><span class="params">(filename <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获取目录</span></span><br><span class="line">	listDir := filepath.Dir(filename)</span><br><span class="line">	listFile := listDir + <span class="string">"/list.html"</span></span><br><span class="line">	fmt.Println(listDir, listFile, filename)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断有没有 list.html</span></span><br><span class="line">	_, err := os.Stat(listFile)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 获取文件</span></span><br><span class="line">	text, _ := ioutil.ReadFile(filename)</span><br><span class="line">	r := regexp.MustCompile(<span class="string">`&lt;!--(.*)--&gt;`</span>)</span><br><span class="line">	b := r.FindAllStringSubmatch(<span class="keyword">string</span>(text), <span class="number">-1</span>)</span><br><span class="line">	atl := Artcle&#123;&#125;</span><br><span class="line">    <span class="comment">// 定义文章分类的颜色</span></span><br><span class="line">	Color := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="number">1</span>: <span class="string">"rgba(0,0,255,0.8)"</span>,</span><br><span class="line">		<span class="number">2</span>: <span class="string">"rgba(255,0,0,0.8)"</span>,</span><br><span class="line">		<span class="number">3</span>: <span class="string">"rgba(0,255,0,0.8)"</span>,</span><br><span class="line">		<span class="number">4</span>: <span class="string">"rgba(100,100,100,0.8)"</span>,</span><br><span class="line">		<span class="number">5</span>: <span class="string">"rgba(125,200,120,0.8)"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	atl.colorn = <span class="number">5</span></span><br><span class="line">	atl.tag = <span class="string">"其他"</span></span><br><span class="line">	atl.date = <span class="string">"2010-02-08"</span></span><br><span class="line">	<span class="comment">// 查找 html 标签信息</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> b &#123;</span><br><span class="line">		<span class="comment">//fmt.Println(v)</span></span><br><span class="line">		tmp := v[<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">if</span> strings.Contains(tmp, <span class="string">"title:"</span>) &#123;</span><br><span class="line">			atl.name = purhcontent(<span class="string">"title:"</span>, tmp)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> strings.Contains(tmp, <span class="string">"tag:"</span>) &#123;</span><br><span class="line">			atl.tag = purhcontent(<span class="string">"tag:"</span>, tmp)</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(atl.tag) &lt; <span class="number">1</span> &#123;</span><br><span class="line">				atl.tag = <span class="string">"其他"</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> strings.Contains(tmp, <span class="string">"date:"</span>) &#123;</span><br><span class="line">			atl.date = purhcontent(<span class="string">"date:"</span>, tmp)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> strings.Contains(tmp, <span class="string">"catagory:"</span>) &#123;</span><br><span class="line">			atl.catagory = purhcontent(<span class="string">"catagory:"</span>, tmp)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> strings.Contains(tmp, <span class="string">"color:"</span>) &#123;</span><br><span class="line">			atl.colorn, err = strconv.Atoi(purhcontent(<span class="string">"color:"</span>, tmp))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 对列表页进行生成</span></span><br><span class="line">	domname := <span class="string">".list dl"</span></span><br><span class="line">	htmltag := <span class="string">`&lt;dd&gt;&lt;a href="`</span> + atl.name + <span class="string">`.html"&gt;`</span> + atl.name +</span><br><span class="line">		<span class="string">`&lt;/a&gt;&lt;span class="tag"&gt;&lt;span style="background-color: `</span> +</span><br><span class="line">		Color[atl.colorn] + <span class="string">` !important;"&gt;`</span> + atl.tag + <span class="string">`&lt;/span&gt;&lt;span&gt;`</span> +</span><br><span class="line">		atl.date + <span class="string">`&lt;/span&gt;&lt;/span&gt;&lt;/dd&gt;`</span></span><br><span class="line">	fmt.Println(domname, htmltag)</span><br><span class="line">	artcleTolist(listFile, domname, htmltag)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对md 标签进行操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HtmltoBlog</span><span class="params">(filename <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	newDir := ARTCLEDIR + <span class="string">"/"</span></span><br><span class="line">	<span class="comment">// md 下的 html 进行处理，并分类保存到 blog 下</span></span><br><span class="line">	text, _ := ioutil.ReadFile(filename)</span><br><span class="line">	r := regexp.MustCompile(<span class="string">`&lt;!--(.*)--&gt;`</span>)</span><br><span class="line">	b := r.FindAllStringSubmatch(<span class="keyword">string</span>(text), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">	atl := Artcle&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> b &#123;</span><br><span class="line">		<span class="comment">//fmt.Println(v)</span></span><br><span class="line">		tmp := v[<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">if</span> strings.Contains(tmp, <span class="string">"title:"</span>) &#123;</span><br><span class="line">			atl.name = purhcontent(<span class="string">"title:"</span>, tmp)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> strings.Contains(tmp, <span class="string">"tag:"</span>) &#123;</span><br><span class="line">			atl.tag = purhcontent(<span class="string">"tag:"</span>, tmp)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> strings.Contains(tmp, <span class="string">"date:"</span>) &#123;</span><br><span class="line">			atl.date = purhcontent(<span class="string">"date:"</span>, tmp)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> strings.Contains(tmp, <span class="string">"catagory:"</span>) &#123;</span><br><span class="line">			atl.catagory = purhcontent(<span class="string">"catagory:"</span>, tmp)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	oldFile := filename</span><br><span class="line">	newFile := newDir + atl.catagory + <span class="string">"/"</span> + atl.name + <span class="string">".html"</span></span><br><span class="line">	fmt.Println(oldFile)</span><br><span class="line">	fmt.Println(newFile)</span><br><span class="line">	os.Rename(oldFile, newFile)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入key提取value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">purhcontent</span><span class="params">(k <span class="keyword">string</span>, v <span class="keyword">string</span>)</span> <span class="params">(value <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	tmp := v</span><br><span class="line">	<span class="keyword">if</span> strings.Contains(tmp, k) &#123;</span><br><span class="line">		v1 := strings.Split(tmp, <span class="string">":"</span>)</span><br><span class="line">		value = strings.TrimSpace(v1[<span class="number">1</span>])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 list.html 插入文章节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">artcleTolist</span><span class="params">(filename, domname, htmltag <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	f, err := os.OpenFile(filename, os.O_RDONLY, os.ModePerm)</span><br><span class="line">	<span class="keyword">defer</span> f.Close()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 从文件中转doc</span></span><br><span class="line">	doc, err := goquery.NewDocumentFromReader(f)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 查找 dom 节点</span></span><br><span class="line">	s := doc.Find(domname)</span><br><span class="line">	<span class="comment">// 文章已经存在就不添加</span></span><br><span class="line">	tmps, _ := s.Html()</span><br><span class="line">	<span class="keyword">if</span> strings.Contains(tmps, htmltag) &#123;</span><br><span class="line">		<span class="comment">//fmt.Println("匹配到了")</span></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	s = s.AppendHtml(htmltag)</span><br><span class="line">	<span class="comment">// 将doc 转 html</span></span><br><span class="line">	html, _ := doc.Html()</span><br><span class="line">	f1, _ := os.OpenFile(filename, os.O_WRONLY, os.ModePerm)</span><br><span class="line">	<span class="keyword">defer</span> f1.Close()</span><br><span class="line">	f1.WriteString(html)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="需要使用-markdown-to-html-的模块"><a href="#需要使用-markdown-to-html-的模块" class="headerlink" title="需要使用 markdown to html 的模块"></a>需要使用 markdown to html 的模块</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Blackfriday Markdown Processor</span></span><br><span class="line"><span class="comment">// Available at http://github.com/russross/blackfriday</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright © 2011 Russ Ross &lt;russ@russross.com&gt;.</span></span><br><span class="line"><span class="comment">// Distributed under the Simplified BSD License.</span></span><br><span class="line"><span class="comment">// See README.md for details.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Example front-end for command-line use</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"flag"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/russross/blackfriday"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">	<span class="string">"runtime/pprof"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DEFAULT_TITLE = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// parse command-line options</span></span><br><span class="line">	<span class="keyword">var</span> page, toc, toconly, xhtml, latex, smartypants, latexdashes, fractions <span class="keyword">bool</span></span><br><span class="line">	<span class="keyword">var</span> css, cpuprofile <span class="keyword">string</span></span><br><span class="line">	<span class="keyword">var</span> repeat <span class="keyword">int</span></span><br><span class="line">	flag.BoolVar(&amp;page, <span class="string">"page"</span>, <span class="literal">false</span>,</span><br><span class="line">		<span class="string">"Generate a standalone HTML page (implies -latex=false)"</span>)</span><br><span class="line">	flag.BoolVar(&amp;toc, <span class="string">"toc"</span>, <span class="literal">false</span>,</span><br><span class="line">		<span class="string">"Generate a table of contents (implies -latex=false)"</span>)</span><br><span class="line">	flag.BoolVar(&amp;toconly, <span class="string">"toconly"</span>, <span class="literal">false</span>,</span><br><span class="line">		<span class="string">"Generate a table of contents only (implies -toc)"</span>)</span><br><span class="line">	flag.BoolVar(&amp;xhtml, <span class="string">"xhtml"</span>, <span class="literal">true</span>,</span><br><span class="line">		<span class="string">"Use XHTML-style tags in HTML output"</span>)</span><br><span class="line">	flag.BoolVar(&amp;latex, <span class="string">"latex"</span>, <span class="literal">false</span>,</span><br><span class="line">		<span class="string">"Generate LaTeX output instead of HTML"</span>)</span><br><span class="line">	flag.BoolVar(&amp;smartypants, <span class="string">"smartypants"</span>, <span class="literal">true</span>,</span><br><span class="line">		<span class="string">"Apply smartypants-style substitutions"</span>)</span><br><span class="line">	flag.BoolVar(&amp;latexdashes, <span class="string">"latexdashes"</span>, <span class="literal">true</span>,</span><br><span class="line">		<span class="string">"Use LaTeX-style dash rules for smartypants"</span>)</span><br><span class="line">	flag.BoolVar(&amp;fractions, <span class="string">"fractions"</span>, <span class="literal">true</span>,</span><br><span class="line">		<span class="string">"Use improved fraction rules for smartypants"</span>)</span><br><span class="line">	flag.StringVar(&amp;css, <span class="string">"css"</span>, <span class="string">""</span>,</span><br><span class="line">		<span class="string">"Link to a CSS stylesheet (implies -page)"</span>)</span><br><span class="line">	flag.StringVar(&amp;cpuprofile, <span class="string">"cpuprofile"</span>, <span class="string">""</span>,</span><br><span class="line">		<span class="string">"Write cpu profile to a file"</span>)</span><br><span class="line">	flag.IntVar(&amp;repeat, <span class="string">"repeat"</span>, <span class="number">1</span>,</span><br><span class="line">		<span class="string">"Process the input multiple times (for benchmarking)"</span>)</span><br><span class="line">	flag.Usage = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Fprintf(os.Stderr, <span class="string">"Blackfriday Markdown Processor v"</span>+blackfriday.VERSION+</span><br><span class="line">			<span class="string">"\nAvailable at http://github.com/russross/blackfriday\n\n"</span>+</span><br><span class="line">			<span class="string">"Copyright © 2011 Russ Ross &lt;russ@russross.com&gt;\n"</span>+</span><br><span class="line">			<span class="string">"Distributed under the Simplified BSD License\n"</span>+</span><br><span class="line">			<span class="string">"See website for details\n\n"</span>+</span><br><span class="line">			<span class="string">"Usage:\n"</span>+</span><br><span class="line">			<span class="string">"  %s [options] [inputfile [outputfile]]\n\n"</span>+</span><br><span class="line">			<span class="string">"Options:\n"</span>,</span><br><span class="line">			os.Args[<span class="number">0</span>])</span><br><span class="line">		flag.PrintDefaults()</span><br><span class="line">	&#125;</span><br><span class="line">	flag.Parse()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// enforce implied options</span></span><br><span class="line">	<span class="keyword">if</span> css != <span class="string">""</span> &#123;</span><br><span class="line">		css = <span class="string">"/"</span> + css</span><br><span class="line">		page = <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> page &#123;</span><br><span class="line">		latex = <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> toconly &#123;</span><br><span class="line">		toc = <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> toc &#123;</span><br><span class="line">		latex = <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// turn on profiling?</span></span><br><span class="line">	<span class="keyword">if</span> cpuprofile != <span class="string">""</span> &#123;</span><br><span class="line">		f, err := os.Create(cpuprofile)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Fprintln(os.Stderr, err)</span><br><span class="line">		&#125;</span><br><span class="line">		pprof.StartCPUProfile(f)</span><br><span class="line">		<span class="keyword">defer</span> pprof.StopCPUProfile()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// read the input</span></span><br><span class="line">	<span class="keyword">var</span> input []<span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	args := flag.Args()</span><br><span class="line">	<span class="keyword">switch</span> <span class="built_in">len</span>(args) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">		<span class="comment">//if input, err = ioutil.ReadAll(os.Stdin); err != nil &#123;</span></span><br><span class="line">		<span class="comment">//	fmt.Fprintln(os.Stderr, "Error reading from Stdin:", err)</span></span><br><span class="line">		<span class="comment">//	os.Exit(-1)</span></span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">		flag.Usage()</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">if</span> input, err = ioutil.ReadFile(args[<span class="number">0</span>]); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Fprintln(os.Stderr, <span class="string">"Error reading from"</span>, args[<span class="number">0</span>], <span class="string">":"</span>, err)</span><br><span class="line">			os.Exit(<span class="number">-1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		flag.Usage()</span><br><span class="line">		os.Exit(<span class="number">-1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// set up options</span></span><br><span class="line">	extensions := <span class="number">0</span></span><br><span class="line">	extensions |= blackfriday.EXTENSION_NO_INTRA_EMPHASIS</span><br><span class="line">	extensions |= blackfriday.EXTENSION_TABLES</span><br><span class="line">	extensions |= blackfriday.EXTENSION_FENCED_CODE</span><br><span class="line">	extensions |= blackfriday.EXTENSION_AUTOLINK</span><br><span class="line">	extensions |= blackfriday.EXTENSION_STRIKETHROUGH</span><br><span class="line">	extensions |= blackfriday.EXTENSION_SPACE_HEADERS</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> renderer blackfriday.Renderer</span><br><span class="line">	<span class="keyword">if</span> latex &#123;</span><br><span class="line">		<span class="comment">// render the data into LaTeX</span></span><br><span class="line">		renderer = blackfriday.LatexRenderer(<span class="number">0</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// render the data into HTML</span></span><br><span class="line">		htmlFlags := <span class="number">0</span></span><br><span class="line">		<span class="keyword">if</span> xhtml &#123;</span><br><span class="line">			htmlFlags |= blackfriday.HTML_USE_XHTML</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> smartypants &#123;</span><br><span class="line">			htmlFlags |= blackfriday.HTML_USE_SMARTYPANTS</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> fractions &#123;</span><br><span class="line">			htmlFlags |= blackfriday.HTML_SMARTYPANTS_FRACTIONS</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> latexdashes &#123;</span><br><span class="line">			htmlFlags |= blackfriday.HTML_SMARTYPANTS_LATEX_DASHES</span><br><span class="line">		&#125;</span><br><span class="line">		title := <span class="string">""</span></span><br><span class="line">		<span class="keyword">if</span> page &#123;</span><br><span class="line">			htmlFlags |= blackfriday.HTML_COMPLETE_PAGE</span><br><span class="line">			title = getTitle(input)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> toconly &#123;</span><br><span class="line">			htmlFlags |= blackfriday.HTML_OMIT_CONTENTS</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> toc &#123;</span><br><span class="line">			htmlFlags |= blackfriday.HTML_TOC</span><br><span class="line">		&#125;</span><br><span class="line">		renderer = blackfriday.HtmlRenderer(htmlFlags, title, css)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// parse and render</span></span><br><span class="line">	<span class="keyword">var</span> output []<span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; repeat; i++ &#123;</span><br><span class="line">		output = blackfriday.Markdown(input, renderer, extensions)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// output the result</span></span><br><span class="line">	<span class="keyword">var</span> out *os.File</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">2</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> out, err = os.Create(args[<span class="number">1</span>]); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Fprintf(os.Stderr, <span class="string">"Error creating %s: %v"</span>, args[<span class="number">1</span>], err)</span><br><span class="line">			os.Exit(<span class="number">-1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">defer</span> out.Close()</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		out = os.Stdout</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> _, err = out.Write(output); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Fprintln(os.Stderr, <span class="string">"Error writing output:"</span>, err)</span><br><span class="line">		os.Exit(<span class="number">-1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// try to guess the title from the input buffer</span></span><br><span class="line"><span class="comment">// just check if it starts with an &lt;h1&gt; element and use that</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTitle</span><span class="params">(input []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// skip blank lines</span></span><br><span class="line">	<span class="keyword">for</span> i &lt; <span class="built_in">len</span>(input) &amp;&amp; (input[i] == <span class="string">'\n'</span> || input[i] == <span class="string">'\r'</span>) &#123;</span><br><span class="line">		i++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(input) &#123;</span><br><span class="line">		<span class="keyword">return</span> DEFAULT_TITLE</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> input[i] == <span class="string">'\r'</span> &amp;&amp; i+<span class="number">1</span> &lt; <span class="built_in">len</span>(input) &amp;&amp; input[i+<span class="number">1</span>] == <span class="string">'\n'</span> &#123;</span><br><span class="line">		i++</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// find the first line</span></span><br><span class="line">	start := i</span><br><span class="line">	<span class="keyword">for</span> i &lt; <span class="built_in">len</span>(input) &amp;&amp; input[i] != <span class="string">'\n'</span> &amp;&amp; input[i] != <span class="string">'\r'</span> &#123;</span><br><span class="line">		i++</span><br><span class="line">	&#125;</span><br><span class="line">	line1 := input[start:i]</span><br><span class="line">	<span class="keyword">if</span> input[i] == <span class="string">'\r'</span> &amp;&amp; i+<span class="number">1</span> &lt; <span class="built_in">len</span>(input) &amp;&amp; input[i+<span class="number">1</span>] == <span class="string">'\n'</span> &#123;</span><br><span class="line">		i++</span><br><span class="line">	&#125;</span><br><span class="line">	i++</span><br><span class="line"></span><br><span class="line">	<span class="comment">// check for a prefix header</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(line1) &gt;= <span class="number">3</span> &amp;&amp; line1[<span class="number">0</span>] == <span class="string">'#'</span> &amp;&amp; (line1[<span class="number">1</span>] == <span class="string">' '</span> || line1[<span class="number">1</span>] == <span class="string">'\t'</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> strings.TrimSpace(<span class="keyword">string</span>(line1[<span class="number">2</span>:]))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// check for an underlined header</span></span><br><span class="line">	<span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(input) || input[i] != <span class="string">'='</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> DEFAULT_TITLE</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i &lt; <span class="built_in">len</span>(input) &amp;&amp; input[i] == <span class="string">'='</span> &#123;</span><br><span class="line">		i++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i &lt; <span class="built_in">len</span>(input) &amp;&amp; (input[i] == <span class="string">' '</span> || input[i] == <span class="string">'\t'</span>) &#123;</span><br><span class="line">		i++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(input) || (input[i] != <span class="string">'\n'</span> &amp;&amp; input[i] != <span class="string">'\r'</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> DEFAULT_TITLE</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> strings.TrimSpace(<span class="keyword">string</span>(line1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="部署脚本-deploy-sh"><a href="#部署脚本-deploy-sh" class="headerlink" title="部署脚本 deploy.sh"></a>部署脚本 deploy.sh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go run main.go</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git add ./*</span><br><span class="line">git commit -m <span class="string">"file update"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>GO</category>
      </categories>
      <tags>
        <tag>goquery</tag>
        <tag>markdown转html</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome-headless</title>
    <url>/2020/05/chrome-headless/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="MAC-系统中"><a href="#MAC-系统中" class="headerlink" title="MAC 系统中"></a>MAC 系统中</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/Applications/Google</span>\ Chrome.app/Contents/MacOS</span><br><span class="line">ln -s <span class="string">./Google</span>\ Chrome <span class="string">./chrome</span></span><br><span class="line"><span class="string">./chrome</span> <span class="params">--headless</span> <span class="params">--disable-gpu</span> <span class="params">--dump-dom</span> http:<span class="string">//www.baidu.com</span></span><br><span class="line"><span class="params">--headless</span> 不显示窗体</span><br><span class="line"><span class="params">--disable-gpu</span> 关闭GPU</span><br><span class="line"><span class="params">--dump-dom</span> 把 dom 元素输出来</span><br></pre></td></tr></table></figure>
<h3 id="chrome-相关"><a href="#chrome-相关" class="headerlink" title="chrome 相关"></a>chrome 相关</h3><ul>
<li><a href="https://www.chromium.org/" target="_blank" rel="noopener">Chromium</a><ul>
<li>Chromium是由Google主导开发的网页浏览器。</li>
</ul>
</li>
<li>CDB<ul>
<li>chrome debug protocol，简称cdp。一个让devtools和浏览器内核交换数据的通道</li>
</ul>
</li>
<li><a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noopener">devtools</a><ul>
<li>对chrome 进行调试的工具。</li>
</ul>
</li>
<li><a href="https://github.com/chromedp" target="_blank" rel="noopener">chromedb</a><ul>
<li>golang语言中利用CDB驱动浏览器包。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>cdp</tag>
      </tags>
  </entry>
  <entry>
    <title>万台服务器运维</title>
    <url>/2020/05/%E4%B8%87%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1万台服务器的计算量和成本核算"><a href="#1万台服务器的计算量和成本核算" class="headerlink" title="1万台服务器的计算量和成本核算"></a>1万台服务器的计算量和成本核算</h2><p>按照当前主流的机架两U服务器来配置(参考 Dell R740)</p>
<blockquote>
<p>需要单独 1000台 来做 Ceph 云存储</p>
</blockquote>
<pre><code>* 单 4210 CPU 10核 20线程
* 内存 320G
* 磁盘 SSD 500G
</code></pre><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">整体计算量：</span><br><span class="line">CPU cores = <span class="number">10000</span> * <span class="number">40</span>核 = <span class="number">40</span>w 核心</span><br><span class="line">Memory    = <span class="number">10000</span> * <span class="number">320</span>G = <span class="number">3</span> PB</span><br><span class="line">本地 Disk  = <span class="number">10000</span> * <span class="number">500</span>G = <span class="number">4.7</span> PB</span><br><span class="line">云盘       = <span class="number">1000</span> * <span class="number">96</span>T = <span class="number">96</span> PB</span><br><span class="line"></span><br><span class="line">每台虚机按（ <span class="number">4</span>cores，<span class="number">32</span>G，<span class="number">200</span>GB ） 可以约开 <span class="number">10</span>w台虚拟机</span><br><span class="line"><span class="number">4</span>C * <span class="number">10</span>w = <span class="number">40</span>w 核心</span><br><span class="line"><span class="number">32</span>G * <span class="number">10</span>w = <span class="number">3</span> PB</span><br><span class="line">(系统盘)<span class="number">40</span>G * <span class="number">10</span>w = <span class="number">4</span> PB</span><br><span class="line">(云盘)<span class="number">200</span>G * <span class="number">10</span>w = <span class="number">19</span> PB * <span class="number">3</span> 两个副本 = <span class="number">57</span> PB &lt; 云盘 <span class="number">96</span> PB</span><br><span class="line"></span><br><span class="line">机房成本核算：</span><br><span class="line">一个<span class="number">42</span>U机柜大概可以放<span class="number">12</span>台设备。</span><br><span class="line"><span class="number">11000</span>台/<span class="number">12</span> = <span class="number">916</span> 机柜</span><br><span class="line">机柜托管费用大约<span class="number">5000</span>一年</span><br><span class="line"><span class="number">916</span> * <span class="number">5000</span> = <span class="number">458</span>w/年</span><br><span class="line"></span><br><span class="line"><span class="number">11000</span>台物理服务器成本：</span><br><span class="line"><span class="number">11000</span>台 * <span class="number">5</span>w = <span class="number">5.5</span> 亿</span><br><span class="line"></span><br><span class="line">网络设备计算：</span><br><span class="line">  业务端：万兆以太网交换机</span><br><span class="line">    <span class="number">11000</span>/<span class="number">46</span> * <span class="number">2</span> = <span class="number">480</span> 台 * <span class="number">3</span>w = <span class="number">1440</span>w</span><br><span class="line">  管理端：千兆以太网交换机</span><br><span class="line">    <span class="number">11000</span>/<span class="number">46</span>     = <span class="number">240</span> 台 * <span class="number">2</span>k = <span class="number">48</span>w</span><br><span class="line"></span><br><span class="line">按照阿里云的报价计算：</span><br><span class="line">按月计费：</span><br><span class="line">（ <span class="number">4</span>cores，<span class="number">32</span>G，<span class="number">200</span>GB ） ~= <span class="number">800</span> 元/月 </span><br><span class="line"><span class="number">800</span> * <span class="number">100000</span> * <span class="number">12</span>月 = <span class="number">9.6</span>亿/年</span><br><span class="line"></span><br><span class="line">按使用量(<span class="number">1.68</span>/时)计费：</span><br><span class="line">（ <span class="number">4</span>cores，<span class="number">32</span>G，<span class="number">200</span>GB ） ~= <span class="number">1200</span>元/月  </span><br><span class="line"><span class="number">1200</span> * <span class="number">100000</span> * <span class="number">12</span>月 = <span class="number">14.4</span> 亿/年</span><br><span class="line"></span><br><span class="line">带宽费用：略</span><br><span class="line"></span><br><span class="line">人力成本： 百台/人</span><br><span class="line"><span class="number">11000</span>/<span class="number">100</span> = <span class="number">110</span> 人 * <span class="number">20</span>w(平均年薪) = <span class="number">2200</span>w</span><br><span class="line"></span><br><span class="line">运维复杂度估算：</span><br><span class="line">AN: application类别数量</span><br><span class="line">LN: application层级</span><br><span class="line">SN: 服务器数量</span><br><span class="line">E: 调整因子</span><br><span class="line">OPCOMPLEX:运维复杂度</span><br></pre></td></tr></table></figure>
<p>承载的服务量<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">web 服务计算量：</span><br><span class="line">依照 <span class="number">163.</span>com首页 计算 <span class="number">128</span>kb静态页请求</span><br><span class="line"><span class="number">10</span>GB带宽跑满可以接受 <span class="number">9960</span>个/秒</span><br></pre></td></tr></table></figure></p>
<h2 id="备份和容灾设计"><a href="#备份和容灾设计" class="headerlink" title="备份和容灾设计"></a>备份和容灾设计</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备份采用同城双节点，对数据进行实时备份。</span><br><span class="line">同城机房容灾需要使用专线来保证数据完整。进行热数据实时迁移减小数据量。</span><br><span class="line"></span><br><span class="line">异地节点进行容灾。异步数据同步，主要数据进行同步。</span><br></pre></td></tr></table></figure>
<h2 id="云计算设计"><a href="#云计算设计" class="headerlink" title="云计算设计"></a>云计算设计</h2><h3 id="5000台搭建-openstack-集群"><a href="#5000台搭建-openstack-集群" class="headerlink" title="5000台搭建 openstack 集群"></a>5000台搭建 openstack 集群</h3><ul>
<li><a href="/2020/05/OpenStack/" title="OpenStack原理">OpenStack原理</a></li>
<li><a href="/2020/05/OpenStack%E5%AE%89%E8%A3%85/" title="OpenStack安装">OpenStack安装</a>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">架构分析</span><br></pre></td></tr></table></figure>
<h3 id="4000台搭建-kubernetes-容器云"><a href="#4000台搭建-kubernetes-容器云" class="headerlink" title="4000台搭建 kubernetes 容器云"></a>4000台搭建 kubernetes 容器云</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1000-台配置成裸金属"><a href="#1000-台配置成裸金属" class="headerlink" title="1000 台配置成裸金属"></a>1000 台配置成裸金属</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="技术人员组成-110-人"><a href="#技术人员组成-110-人" class="headerlink" title="技术人员组成(110 人)"></a>技术人员组成(110 人)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="技术人员管理"><a href="#技术人员管理" class="headerlink" title="技术人员管理"></a>技术人员管理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>计算量</tag>
        <tag>成本核算</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis使用</title>
    <url>/2020/05/Redis%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://redis.io/documentation" target="_blank" rel="noopener"> Redis docs </a></li>
<li><a href="http://www.redis.cn/" target="_blank" rel="noopener"> redis cn </a></li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>key</li>
<li><p>value</p>
</li>
<li><p>type</p>
<ul>
<li>String</li>
<li>Hash</li>
<li>List</li>
<li>Set</li>
<li>Sorted Set</li>
<li>bitmaps</li>
<li>hyperloglogs</li>
<li>geospatial</li>
</ul>
</li>
<li><p>复制</p>
</li>
<li>LUA</li>
<li>LRU</li>
<li>事务</li>
<li>持久化</li>
<li>哨兵</li>
<li>自动分区</li>
<li>高可用</li>
</ul>
<h2 id="redis-集群演化"><a href="#redis-集群演化" class="headerlink" title="redis 集群演化"></a>redis 集群演化</h2><p>单机版<br>主从复制（数据备份）<br>哨兵（主的挂了，把从变主）<br>集群<br>  槽位<br>  crc16 hash<br>  master 节点<br>  slave 节点<br>  meet 操作<br>  指派槽位<br>  node</p>
<p>持久化<br>删除策略<br>逐出算法<br>主从复制<br>缓存与数据库一致性问题</p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>cluster nodes<br>redis-cli —cluster</p>
<h2 id="实战项目-Retwis"><a href="#实战项目-Retwis" class="headerlink" title="实战项目 Retwis"></a>实战项目 Retwis</h2><p>timeline<br>mention</p>
<p>用户<br>post</p>
<p>数据表设计<br>注册登录</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>NFS安装配置</title>
    <url>/2020/05/NFS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">配置文件 <span class="regexp">/etc/</span>exports</span><br><span class="line">NFS 进程</span><br><span class="line">rpc.portmap <span class="comment"># portmap进程的主要功能是把RPC程序号转化为Internet的端口号。</span></span><br><span class="line"></span><br><span class="line">rpc.mountd</span><br><span class="line">rpc.nfsd</span><br><span class="line">rpc.statd</span><br><span class="line">rpc.lockd</span><br><span class="line">rpc.rquotad</span><br></pre></td></tr></table></figure>
<h2 id="安装-NFS-server"><a href="#安装-NFS-server" class="headerlink" title="安装 NFS server"></a>安装 NFS server</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">-y install nfs-utils</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">restart nfs</span></span><br><span class="line"><span class="comment"># 重新载入配置</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">reload nfs</span></span><br></pre></td></tr></table></figure>
<h2 id="配置-NFS-server"><a href="#配置-NFS-server" class="headerlink" title="配置 NFS server"></a>配置 NFS server</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1. </span><br><span class="line">mkdir /data</span><br><span class="line"><span class="comment"># 默认登录进来使用 nfsnobody 用户</span></span><br><span class="line">chmod 777 /data/nfs</span><br><span class="line"></span><br><span class="line">2. <span class="builtin-name">set</span><span class="built_in"> config </span></span><br><span class="line"><span class="comment"># directory machine1(option11,option12)</span></span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;/etc/exports</span><br><span class="line">/data/nfs 192.168.0.0/255.255.255.0(rw,sync)</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># optinos</span></span><br><span class="line">ro : read only</span><br><span class="line">rw : read <span class="keyword">and</span> write</span><br><span class="line">no_root_squash : 使用 nobody 作为客户端用户</span><br><span class="line">no_subtree_check : </span><br><span class="line">sync : write is complete</span><br></pre></td></tr></table></figure>
<h2 id="通过-host-deny-限制访问"><a href="#通过-host-deny-限制访问" class="headerlink" title="通过 host deny 限制访问"></a>通过 host deny 限制访问</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">/etc/hosts.deny</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># service: host [or network/netmask] , host [or network/netmask]</span></span><br><span class="line"><span class="string">/etc/hosts.allow</span></span><br><span class="line"><span class="attr">portmap:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> <span class="string">,</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>
<h2 id="检查-nfs-是否启动"><a href="#检查-nfs-是否启动" class="headerlink" title="检查 nfs 是否启动"></a>检查 nfs 是否启动</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>exportfs -v</span><br><span class="line"><span class="variable">$ </span>rpcinfo -p</span><br></pre></td></tr></table></figure>
<h2 id="client-配置"><a href="#client-配置" class="headerlink" title="client 配置"></a>client 配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 nfs client</span></span><br><span class="line"><span class="string">yum</span> <span class="string">-y</span> <span class="string">install</span> <span class="string">nfs-utils</span></span><br><span class="line"><span class="comment"># 查看可以挂载的目录</span></span><br><span class="line"><span class="string">showmount</span> <span class="string">-e</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.105</span></span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line"><span class="comment"># 只读挂载</span></span><br><span class="line"><span class="string">mount</span> <span class="string">-r</span> <span class="string">-t</span> <span class="string">nfs</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.105</span><span class="string">:/data/nfs</span> <span class="string">/mnt</span> </span><br><span class="line"><span class="comment"># 可写挂载</span></span><br><span class="line"><span class="string">mount</span> <span class="string">-w</span> <span class="string">-t</span> <span class="string">nfs</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.105</span><span class="string">:/data/nfs</span> <span class="string">/mnt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入 /etc/fstab（指定端口）</span></span><br><span class="line"><span class="string">localhost:/home</span>  <span class="string">/mnt/home</span>  <span class="string">nfs</span>  <span class="string">rw,hard,intr,port=250,mountport=251</span>  <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;'EOF'</span> <span class="string">&gt;&gt;/etc/fstab</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.105</span><span class="string">:/data/nfs</span>  <span class="string">/mnt</span>    <span class="string">nfs</span>          <span class="string">rw</span>            <span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h2 id="NFS-优化"><a href="#NFS-优化" class="headerlink" title="NFS 优化"></a>NFS 优化</h2><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置块大小提供传输速度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 网络数据包大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 输入队列大小</span></span><br><span class="line">echo <span class="number">262144</span> &gt; <span class="regexp">/proc/sys</span><span class="regexp">/net/core</span><span class="regexp">/rmem_default</span></span><br><span class="line"><span class="regexp">echo 262144 &gt; /proc</span><span class="regexp">/sys/net</span><span class="regexp">/core/rmem</span>_max</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>mac命令行操作</title>
    <url>/2020/05/mac%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://support.apple.com/zh-cn/guide/terminal/trmlshtcts/mac" target="_blank" rel="noopener">命令行快捷键</a><br><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">新建窗口（new）:<span class="keyword">Command</span>-N</span><br><span class="line">使用相同命令新建窗口:Control-<span class="keyword">Command</span>-N</span><br><span class="line">新建标签页（tab）：<span class="keyword">Command</span>-T</span><br><span class="line">使用相同命令新建标签页（tab）：Control-<span class="keyword">Command</span>-T</span><br><span class="line">显示或隐藏标签页栏：Shift-<span class="keyword">Command</span>-T</span><br><span class="line">显示所有标签页或退出标签页概览：Shift-<span class="keyword">Command</span>-反斜杠 (\)</span><br><span class="line">新建命令：Shift-<span class="keyword">Command</span>-N</span><br><span class="line">新建远程连接：Shift-<span class="keyword">Command</span>-K</span><br><span class="line">显示或隐藏检查器(inspect)：<span class="keyword">Command</span>-I</span><br><span class="line"></span><br><span class="line">编辑标题：Shift-<span class="keyword">Command</span>-I</span><br><span class="line">编辑背景颜色：<span class="keyword">Option</span>-<span class="keyword">Command</span>-I</span><br><span class="line">放大字体：<span class="keyword">Command</span>-加号键 (+)</span><br><span class="line">缩小字体：<span class="keyword">Command</span>-减号键 (–)</span><br><span class="line">下一个窗口：<span class="keyword">Command</span>-重音符键 (`)</span><br><span class="line">上一个窗口：<span class="keyword">Command</span>-Shift-波浪符号 (~)</span><br><span class="line">下一个标签页：Control-Tab</span><br><span class="line">上一个标签页：Control-Shift-Tab</span><br><span class="line"></span><br><span class="line">将窗口拆分为两个面板：<span class="keyword">Command</span>-D</span><br><span class="line">关闭拆分面板：Shift-<span class="keyword">Command</span>-D</span><br><span class="line"></span><br><span class="line">关闭标签页：<span class="keyword">Command</span>-W</span><br><span class="line">关闭窗口：Shift-<span class="keyword">Command</span>-W</span><br><span class="line"></span><br><span class="line">关闭其他标签页：<span class="keyword">Option</span>-<span class="keyword">Command</span>-W</span><br><span class="line">全部关闭：<span class="keyword">Option</span>-Shift-<span class="keyword">Command</span>-W</span><br><span class="line"></span><br><span class="line">滚动到顶部：<span class="keyword">Command</span>-Home</span><br><span class="line">滚动到底部：<span class="keyword">Command</span>-End</span><br><span class="line"></span><br><span class="line">上一页：<span class="keyword">Command</span>-Page Up</span><br><span class="line">下一页：<span class="keyword">Command</span>-Page Down</span><br><span class="line">上一行：<span class="keyword">Option</span>-<span class="keyword">Command</span>-Page Up</span><br><span class="line">下一行：<span class="keyword">Option</span>-<span class="keyword">Command</span>-Page Down</span><br></pre></td></tr></table></figure></p>
<h3 id="MAC-命令行翻墙"><a href="#MAC-命令行翻墙" class="headerlink" title="MAC 命令行翻墙"></a>MAC 命令行翻墙</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">lsof -i :1086</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;~/.bash_profile</span><br><span class="line">alias <span class="attribute">proxy</span>=<span class="string">'export all_proxy=socks5://127.0.0.1:1086'</span></span><br><span class="line">alias <span class="attribute">unproxy</span>=<span class="string">'unset all_proxy'</span></span><br><span class="line">EOF</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line">proxy</span><br><span class="line">curl ip.sb</span><br><span class="line"></span><br><span class="line">unproxy</span><br></pre></td></tr></table></figure>
<h3 id="MAC-alfred"><a href="#MAC-alfred" class="headerlink" title="MAC alfred"></a>MAC alfred</h3><p>sudo mdutil -a -i on 打开索引试试<br>spotlight 把无关的内容关掉</p>
<ul>
<li><a href="https://www.iterm2.com/downloads.html" target="_blank" rel="noopener">iterm2</a></li>
</ul>
<h3 id="MAC-iterm2"><a href="#MAC-iterm2" class="headerlink" title="MAC iterm2"></a>MAC iterm2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调出 alfred alt+ space</span></span><br><span class="line">iterm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全屏 command + enter</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程连接 command + O</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建窗口 command + N</span></span><br><span class="line"><span class="comment"># 新建Tab command + T</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭窗口|Tab command + W</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭所有窗口 alt + command + W</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送消息到所有 窗口 alt + command + I 重复取消</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 水平分割 command + D</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直分割 shift + command + D</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换窗口 alt + command + up|down</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件目录颜色显示</span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;<span class="variable">$HOME</span>/.bash_profile</span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">"ls -l -G"</span></span><br><span class="line"><span class="built_in">alias</span> ls=<span class="string">"ls -G"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件上传下载</span></span><br><span class="line"><span class="comment"># 本地 brew install lrzsz</span></span><br><span class="line"><span class="comment"># iTerm2 的设置界面 Perference-&gt; Profiles -&gt; Default -&gt; Advanced -&gt; Triggers </span></span><br><span class="line">Regular expression: /*/*B0100</span><br><span class="line">Action: Run Silent Coprocess</span><br><span class="line">Parameters: /usr/<span class="built_in">local</span>/bin/iterm2-send-zmodem.sh</span><br><span class="line"></span><br><span class="line">Regular expression: /*/*B00000000000000</span><br><span class="line">Action: Run Silent Coprocess</span><br><span class="line">Parameters: /usr/<span class="built_in">local</span>/bin/iterm2-recv-zmodem.sh</span><br><span class="line"><span class="comment"># 远程 yum -y install lrzsz</span></span><br><span class="line"><span class="comment"># 登录到远程机器</span></span><br><span class="line">sz file <span class="comment"># 下载文件</span></span><br></pre></td></tr></table></figure>
<h3 id="iterm2-lrzsz"><a href="#iterm2-lrzsz" class="headerlink" title="iterm2 lrzsz"></a>iterm2 lrzsz</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1.安装支持rz和sz命令的lrzsz：brew <span class="keyword">install</span> lrzsz</span><br><span class="line"></span><br><span class="line">等了挺长时间的。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在本地/usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/目录下保存iterm2-send-zmodem.sh 和iterm2-recv-zmodem.sh两个脚本</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>设置一下两个脚本的权限，一般 chmod <span class="number">777</span> 就行了</span><br><span class="line"></span><br><span class="line">chmod <span class="number">777</span> /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/iterm2-*</span><br><span class="line"><span class="number">4.</span>设置Iterm2的Tirgger特性，<span class="keyword">profiles</span>-&gt;<span class="keyword">default</span>-&gt;editProfiles-&gt;<span class="keyword">Advanced</span>中的Tirgger</span><br><span class="line"></span><br><span class="line">添加两条<span class="keyword">trigger</span>，分别设置 Regular expression，<span class="keyword">Action</span>，<span class="keyword">Parameters</span>，Instant如下：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>第一条</span><br><span class="line">        Regular expression: rz waiting <span class="keyword">to</span> receive.\*\*B0100</span><br><span class="line">        <span class="keyword">Action</span>: Run Silent Coprocess</span><br><span class="line">        <span class="keyword">Parameters</span>: /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/iterm2-send-zmodem.sh</span><br><span class="line">        Instant: checked</span><br><span class="line"><span class="number">2.</span>第二条</span><br><span class="line">        Regular expression: \*\*B00000000000000</span><br><span class="line">        <span class="keyword">Action</span>: Run Silent Coprocess</span><br><span class="line">        <span class="keyword">Parameters</span>: /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/iterm2-recv-zmodem.sh</span><br><span class="line">        Instant: checked</span><br></pre></td></tr></table></figure>
<h4 id="iterm2-recv-zmodem-sh"><a href="#iterm2-recv-zmodem-sh" class="headerlink" title="iterm2-recv-zmodem.sh"></a>iterm2-recv-zmodem.sh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">osascript -e <span class="string">'tell application "iTerm2" to version'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NAME</span> = <span class="string">"iTerm"</span> ]]; <span class="keyword">then</span></span><br><span class="line">	FILE=$(osascript -e <span class="string">'tell application "iTerm" to activate'</span> -e <span class="string">'tell application "iTerm" to set thefile to choose folder with prompt "Choose a folder to place received files in"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	FILE=$(osascript -e <span class="string">'tell application "iTerm2" to activate'</span> -e <span class="string">'tell application "iTerm2" to set thefile to choose folder with prompt "Choose a folder to place received files in"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FILE</span> = <span class="string">""</span> ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> Cancelled.</span><br><span class="line">	<span class="comment"># Send ZModem cancel</span></span><br><span class="line">	<span class="built_in">echo</span> -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">	sleep 1</span><br><span class="line">	<span class="built_in">echo</span></span><br><span class="line">	<span class="built_in">echo</span> \<span class="comment"># Cancelled transfer</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">cd</span> <span class="string">"<span class="variable">$FILE</span>"</span></span><br><span class="line">	/usr/<span class="built_in">local</span>/bin/rz -E -e -b --bufsize 4096</span><br><span class="line">	sleep 1</span><br><span class="line">	<span class="built_in">echo</span></span><br><span class="line">	<span class="built_in">echo</span></span><br><span class="line">	<span class="built_in">echo</span> \<span class="comment"># Sent \-\&gt; $FILE</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h4 id="iterm2-send-zmodem-sh"><a href="#iterm2-send-zmodem-sh" class="headerlink" title="iterm2-send-zmodem.sh"></a>iterm2-send-zmodem.sh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">osascript -e <span class="string">'tell application "iTerm2" to version'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NAME</span> = <span class="string">"iTerm"</span> ]]; <span class="keyword">then</span></span><br><span class="line">	FILE=`osascript -e <span class="string">'tell application "iTerm" to activate'</span> -e <span class="string">'tell application "iTerm" to set thefile to choose file with prompt "Choose a file to send"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	FILE=`osascript -e <span class="string">'tell application "iTerm2" to activate'</span> -e <span class="string">'tell application "iTerm2" to set thefile to choose file with prompt "Choose a file to send"'</span> -e <span class="string">"do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FILE</span> = <span class="string">""</span> ]]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> Cancelled.</span><br><span class="line">	<span class="comment"># Send ZModem cancel</span></span><br><span class="line">	<span class="built_in">echo</span> -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">	sleep 1</span><br><span class="line">	<span class="built_in">echo</span></span><br><span class="line">	<span class="built_in">echo</span> \<span class="comment"># Cancelled transfer</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	/usr/<span class="built_in">local</span>/bin/sz <span class="string">"<span class="variable">$FILE</span>"</span> -e -b</span><br><span class="line">	sleep 1</span><br><span class="line">	<span class="built_in">echo</span></span><br><span class="line">	<span class="built_in">echo</span> \<span class="comment"># Received $FILE</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="mac-中删除-git认证"><a href="#mac-中删除-git认证" class="headerlink" title="mac 中删除 git认证"></a>mac 中删除 git认证</h3><blockquote>
<p>应用程序 -&gt; 实用工具 -&gt; 双击钥匙串 -&gt; 右上角搜索 xxxx<br>-&gt; 右击删除</p>
</blockquote>
<h3 id="google-hosts"><a href="#google-hosts" class="headerlink" title="google hosts"></a>google hosts</h3><p><a href="https://github.com/googlehosts/hosts/blob/master/hosts-files/hosts" target="_blank" rel="noopener">https://github.com/googlehosts/hosts/blob/master/hosts-files/hosts</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Homebrew使用</title>
    <url>/2020/05/Homebrew%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">Homebrew</a></p>
<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>macOS（或 Linux）缺失的软件包的管理器<br>使用 Homebrew 安装 Apple（或您的 Linux 系统）没有预装但 你需要的东西。<br>Homebrew 会将软件包安装到独立目录，并将其文件软链接至 /usr/local 。<br>Homebrew 不会将文件安装到它本身目录之外，所以您可将 Homebrew 安装到任意位置。<br>使用 brew cask 安装 macOS 应用程序、字体和插件以及其他非开源软件。</p>
<h3 id="Install-Homebrew"><a href="#Install-Homebrew" class="headerlink" title="Install Homebrew"></a>Install Homebrew</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ruby 写的管理包管理工具</span></span><br><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br></pre></td></tr></table></figure>
<h3 id="using"><a href="#using" class="headerlink" title="using"></a>using</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install wget</span><br><span class="line">把软件包安装到 /usr/<span class="built_in">local</span>/Cellar</span><br><span class="line">将可执行文件链接到 /usr/<span class="built_in">local</span>/bin/ 下</span><br><span class="line"></span><br><span class="line">brew edit wget</span><br><span class="line"></span><br><span class="line">brew cask create foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包管理</span></span><br><span class="line">brew install node</span><br><span class="line">brew uninstall &lt;packageName&gt;</span><br><span class="line">brew search &lt;packageName&gt;</span><br><span class="line">brew list</span><br><span class="line">brew info &lt;packageName&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">xcode-select --install</span><br><span class="line">brew upgrade</span><br></pre></td></tr></table></figure>
<h3 id="mac使用brew-update无反应-更新慢解决办法"><a href="#mac使用brew-update无反应-更新慢解决办法" class="headerlink" title="mac使用brew update无反应,更新慢解决办法"></a>mac使用brew update无反应,更新慢解决办法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建议使用阿里云镜像</span></span><br><span class="line"><span class="comment">#mac使用brew update无反应,更新慢解决办法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用中科大的镜像</span></span><br><span class="line"><span class="comment">#替换默认源</span></span><br><span class="line"><span class="comment">#第一步，替换brew.git</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span> || <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Homebrew</span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二步：替换homebrew-core.git</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#最后使用</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure>
<h3 id="阿里云源"><a href="#阿里云源" class="headerlink" title="阿里云源"></a>阿里云源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换brew.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line"><span class="comment"># 替换homebrew-core.git:</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line"><span class="comment"># 应用生效</span></span><br><span class="line">brew update</span><br><span class="line"><span class="comment"># 替换homebrew-bottles:</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重置brew.git:</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"><span class="comment"># 重置homebrew-core.git:</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Django框架使用</title>
    <url>/2020/05/Django%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><ul>
<li><a href="https://docs.djangoproject.com/zh-hans/3.0/" target="_blank" rel="noopener"> Django </a></li>
</ul>
<h2 id="概念-Concepts"><a href="#概念-Concepts" class="headerlink" title="概念 Concepts"></a>概念 Concepts</h2><ul>
<li>项目 project</li>
<li>模板 template</li>
<li>模型 modules</li>
<li>表单 form</li>
<li>视图 view</li>
<li>管理工具<ul>
<li>django-admin</li>
</ul>
</li>
</ul>
<p>brower -&gt; view -&gt; controller -&gt; models</p>
<h3 id="python3-install"><a href="#python3-install" class="headerlink" title="python3 install"></a>python3 install</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tgz</span><br><span class="line">tar -zxf Python-3.8.2.tgz </span><br><span class="line">cd Python-3.8.2</span><br><span class="line">./configure  <span class="comment">--prefix /usr/local/python</span></span><br><span class="line">make -j $(/proc/cpuinfo |grep cores|wc -l)</span><br><span class="line">make <span class="keyword">install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置国内镜像源</span></span><br><span class="line">mkdir ~/.pip</span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;~/.pip/pip.conf </span><br><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="keyword">index</span>-<span class="keyword">url</span> = <span class="keyword">http</span>://pypi.douban.com/simple</span><br><span class="line">extra-<span class="keyword">index</span>-<span class="keyword">url</span>=https://mirrors.aliyun.com/pypi/simple</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置虚拟环境</span></span><br><span class="line">/usr/<span class="keyword">local</span>/python/<span class="keyword">bin</span>/pip3 <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br><span class="line">/usr/<span class="keyword">local</span>/python/<span class="keyword">bin</span>/pip3 <span class="keyword">install</span> virtualenv</span><br><span class="line">/usr/<span class="keyword">local</span>/python/<span class="keyword">bin</span>/virtualenv djangodemo</span><br><span class="line"></span><br><span class="line">echo <span class="string">". djangodemo/bin/activate"</span> &gt;&gt;~/.bash_profile</span><br><span class="line">. djangodemo/<span class="keyword">bin</span>/<span class="keyword">activate</span></span><br><span class="line">pip <span class="keyword">install</span> django</span><br><span class="line">django-<span class="keyword">admin</span> <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<h3 id="创建了一个项目"><a href="#创建了一个项目" class="headerlink" title="创建了一个项目"></a>创建了一个项目</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">django-admin startproject -h</span><br><span class="line">django-admin startproject web1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置数据库</span></span><br><span class="line">yum -y install mariadb mariadb-devel</span><br><span class="line">systemctl start mariadb</span><br><span class="line">pip install mysqlclient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">mysql -uroot -p <span class="string">"create database web1"</span></span><br><span class="line">CREATE DATABASE `web1`<span class="built_in"> DEFAULT </span>CHARACTER <span class="builtin-name">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim web1/setting.py</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">"HOST"</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'web1'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: 3306,</span><br><span class="line">    <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">        <span class="string">'init_command'</span>: <span class="string">'SET default_storage_engine=INNODB'</span>,</span><br><span class="line">        <span class="string">'autocommit'</span>: <span class="literal">True</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许所有主机访问，默认为空，返回 400</span></span><br><span class="line">ALLOWED_HOSTS=[<span class="string">"*"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步数据库</span></span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建管理员账号</span></span><br><span class="line">python manage.py createsuperuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># admin 模块位置</span></span><br><span class="line">lib/python3.8/site-packages/django/contrib/admin/</span><br><span class="line"><span class="attribute">DEBUG</span>=<span class="literal">True</span></span><br><span class="line">导致 admin 模块的静态文件加载不到</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">python manage.py runserver 0:8000</span><br></pre></td></tr></table></figure>
<h3 id="Django-目录结构"><a href="#Django-目录结构" class="headerlink" title="Django 目录结构"></a>Django 目录结构</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">web1  <span class="meta"># 项目目录</span></span><br><span class="line">web1/manage.py <span class="meta"># 项目管理工具</span></span><br><span class="line">web1/web1  <span class="meta"># </span></span><br><span class="line">web1<span class="meta-keyword">/web1/</span>__init__.py <span class="meta"># 告诉 Python 这个目录应该被认为是一个 Python 包。</span></span><br><span class="line">web1<span class="meta-keyword">/web1/</span>asgi.py     <span class="meta"># ASGI 兼容的Web服务器上的入口</span></span><br><span class="line">web1<span class="meta-keyword">/web1/</span>settings.py <span class="meta"># Django 项目的配置文件</span></span><br><span class="line">web1<span class="meta-keyword">/web1/</span>urls.py     <span class="meta"># Django 项目的 URL 声明 ，路由</span></span><br><span class="line">web1<span class="meta-keyword">/web1/</span>wsgi.py     <span class="meta"># WSGI 兼容的Web服务器上的入口</span></span><br></pre></td></tr></table></figure>
<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> web1</span><br><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> startapp polls</span><br><span class="line"></span><br><span class="line">polls/</span><br><span class="line">├── admin.<span class="keyword">py</span></span><br><span class="line">├── apps.<span class="keyword">py</span></span><br><span class="line">├── __init__.<span class="keyword">py</span></span><br><span class="line">├── migrations</span><br><span class="line">│   └── __init__.<span class="keyword">py</span></span><br><span class="line">├── models.<span class="keyword">py</span></span><br><span class="line">├── tests.<span class="keyword">py</span> </span><br><span class="line">├── urls.<span class="keyword">py</span>  # 路由</span><br><span class="line">└── views.<span class="keyword">py</span> # 视图</span><br></pre></td></tr></table></figure>
<ul>
<li><p>创建项目</p>
<ul>
<li>创建应用<ul>
<li>编写视图</li>
<li>配置路由</li>
<li>配置模型</li>
<li>生成迁移文件<ul>
<li>查看迁移文件</li>
</ul>
</li>
<li>执行迁移</li>
<li>通过 shell 调试</li>
</ul>
</li>
</ul>
</li>
<li><p>后台创建</p>
<ul>
<li>创建后台用户</li>
<li>通过 admin 文件向后台注册表</li>
</ul>
</li>
<li><p>编写多视图</p>
</li>
<li>使用模板来渲染视图</li>
<li>404 页面处理</li>
<li>为 url 添加命名空间</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Kubernetes</title>
    <url>/2020/05/Kubernetes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://kubernetes.io/zh/docs/home/" target="_blank" rel="noopener"> Kubernetes 官网 </a></li>
<li><a href="/2020/05/Kubernetes/" title="kubernetes入门">kubernetes入门</a></li>
<li><a href="/2020/05/Kubernetes%E5%AE%89%E8%A3%85/" title="kubernetes安装">kubernetes安装</a></li>
<li><a href="/2020/05/Kubernetes%E7%AE%A1%E7%90%86/" title="Kubernetes管理">Kubernetes管理</a></li>
<li><a href="https://docs.traefik.io/" target="_blank" rel="noopener">traefix</a></li>
</ul>
<h2 id="应用部署发展"><a href="#应用部署发展" class="headerlink" title="应用部署发展"></a>应用部署发展</h2><ul>
<li><p>传统部署时代：<br>早期，组织在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题。例如，如果在物理服务器上运行多个应用程序，则可能会出现一个应用程序占用大部分资源的情况，结果可能导致其他应用程序的性能下降。一种解决方案是在不同的物理服务器上运行每个应用程序，但是由于资源利用不足而无法扩展，并且组织维护许多物理服务器的成本很高。</p>
</li>
<li><p>虚拟化部署时代：<br>作为解决方案，引入了虚拟化功能，它允许您在单个物理服务器的 CPU 上运行多个虚拟机（VM）。虚拟化功能允许应用程序在 VM 之间隔离，并提供安全级别，因为一个应用程序的信息不能被另一应用程序自由地访问。</p>
</li>
</ul>
<p>因为虚拟化可以轻松地添加或更新应用程序、降低硬件成本等等，所以虚拟化可以更好地利用物理服务器中的资源，并可以实现更好的可伸缩性。</p>
<p>每个 VM 是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统。</p>
<ul>
<li>容器部署时代：<br>容器类似于 VM，但是它们具有轻量级的隔离属性，可以在应用程序之间共享操作系统（OS）。因此，容器被认为是轻量级的。容器与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等。由于它们与基础架构分离，因此可以跨云和 OS 分发进行移植。</li>
</ul>
<p>容器因具有许多优势而变得流行起来。下面列出了容器的一些好处：</p>
<ul>
<li>敏捷应用程序的创建和部署：<br>与使用 VM 镜像相比，提高了容器镜像创建的简便性和效率。</li>
<li>持续开发、集成和部署：<br>通过快速简单的回滚(由于镜像不可变性)，提供可靠且频繁的容器镜像构建和部署。<br>关注开发与运维的分离：在构建/发布时而不是在部署时创建应用程序容器镜像，从而将应用程序与基础架构分离。<br>可观察性不仅可以显示操作系统级别的信息和指标，还可以显示应用程序的运行状况和其他指标信号。</li>
<li>跨开发、测试和生产的环境一致性：<br>在便携式计算机上与在云中相同地运行。</li>
<li>云和操作系统分发的可移植性：<br>可在 Ubuntu、RHEL、CoreOS、本地、Google Kubernetes Engine 和其他任何地方运行。<br>以应用程序为中心的管理：提高抽象级别，从在虚拟硬件上运行 OS 到使用逻辑资源在 OS 上运行应用程序。</li>
<li>松散耦合、分布式、弹性、解放的微服务：<br>应用程序被分解成较小的独立部分，并且可以动态部署和管理 - 而不是在一台大型单机上整体运行。</li>
<li>资源隔离：<br>可预测的应用程序性能。</li>
<li>资源利用：<br>高效率和高密度。</li>
</ul>
<h2 id="Kubernetes-概念"><a href="#Kubernetes-概念" class="headerlink" title="Kubernetes 概念"></a>Kubernetes 概念</h2><p>Kubernetes 是一个可移植的、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。Kubernetes 拥有一个庞大且快速增长的生态系统。Kubernetes 的服务、支持和工具广泛可用。</p>
<p>Kubernetes 提供：</p>
<ul>
<li>服务发现和负载均衡<br>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果到容器的流量很大，Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</li>
<li>存储编排<br>Kubernetes 允许您自动挂载您选择的存储系统，例如本地存储、公共云提供商等。</li>
<li>自动部署和回滚<br>您可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态更改为所需状态。例如，您可以自动化 Kubernetes 来为您的部署创建新容器，删除现有容器并将它们的所有资源用于新容器。</li>
<li>自动二进制打包<br>Kubernetes 允许您指定每个容器所需 CPU 和内存（RAM）。当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。</li>
<li>自我修复<br>Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</li>
<li>密钥与配置管理<br>Kubernetes 允许您存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。您可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</li>
</ul>
<h2 id="Kubernetes-组件"><a href="#Kubernetes-组件" class="headerlink" title="Kubernetes 组件"></a>Kubernetes 组件</h2><p>A Kubernetes cluster consists of 集群由一组被称作节点的机器组成。这些节点上运行 Kubernetes 所管理的容器化应用。集群具有至少一个工作节点和至少一个主节点。</p>
<ul>
<li><p>控制平面组件（Control Plane Components）<br>控制平面的组件对集群做出全局决策(比如调度)，以及检测和响应集群事件。</p>
<ul>
<li>kube-apiserver<br>主节点上负责提供 Kubernetes API 服务的组件；它是 Kubernetes 控制面的前端。</li>
<li>etcd<br>etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</li>
<li>kube-scheduler<br>主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。</li>
<li>kube-controller-manager<br>在主节点上运行控制器的组件。<br>这些控制器包括:<ul>
<li>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。</li>
<li>副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。</li>
<li>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)。</li>
<li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌.</li>
</ul>
</li>
</ul>
</li>
<li><p>Node 组件</p>
<ul>
<li>kubelet<br>一个在集群中每个节点上运行的代理。它保证容器都运行在 Pod 中。</li>
<li>kube-proxy<br>kube-proxy 是集群中每个节点上运行的网络代理,实现 Kubernetes Service 概念的一部分。</li>
</ul>
</li>
<li><p>容器运行环境(Container Runtime)<br>Kubernetes 支持多个容器运行环境: Docker、 containerd、cri-o、 rktlet 以及任何实现 Kubernetes CRI (容器运行环境接口)。</p>
</li>
<li><p>插件(Addons)<br>插件使用 Kubernetes 资源 (DaemonSet, Deployment等) 实现集群功能。因为这些提供集群级别的功能，所以插件的命名空间资源属于 kube-system 命名空间。</p>
</li>
<li><p>DNS<br>集群 DNS 还是一个 DNS 服务器，它为 Kubernetes 服务提供 DNS 记录。</p>
</li>
<li><p>容器资源监控</p>
</li>
<li>用户界面(Dashboard)</li>
<li>集群层面日志</li>
</ul>
<h2 id="API-版本"><a href="#API-版本" class="headerlink" title="API 版本"></a>API 版本</h2><ul>
<li>Alpha 测试版<br>可能是有缺陷的。启用该功能可能会带来隐含的问题，默认情况是关闭的。<br>支持的功能可能在没有通知的情况下随时删除。</li>
<li>Beta 测试版本<br>代码已经测试过。启用该功能被认为是安全的，功能默认已启用。<br>所有已支持的功能不会被删除，细节可能会发生变化。</li>
<li>Stable 稳定版本<br>版本名称是 vX，其中 X 是整数。</li>
</ul>
<h2 id="Kubernetes-对象"><a href="#Kubernetes-对象" class="headerlink" title="Kubernetes 对象"></a>Kubernetes 对象</h2><p>基本的 Kubernetes 对象包括<br>Pod<br>Service<br>Volume<br>Namespace</p>
<p>Kubernetes 也包含大量的被称作 Controller 的高级抽象。<br>Deployment（无状态服务）<br>DaemonSet（每个node上都会运行一个）<br>StatefulSet（有状态服务）<br>ReplicaSet<br>Job</p>
<h2 id="管理集群"><a href="#管理集群" class="headerlink" title="管理集群"></a>管理集群</h2><p>更新集群<br>备份集群<br>恢复集群<br>添加节点<br>删除节点 kubectl drain；kubectl uncordon</p>
<p>集群资源配额<br>—enable-admission-plugins=<br>limits.cpu    限制cpu使用量上限<br>limits.memory    限制内存使用量上限<br>requests.cpu    Across all pods in a non-terminal state, the sum of CPU requests cannot exceed this value.<br>requests.memory    Across all pods in a non-terminal state, the sum of memory requests cannot exceed this value.</p>
<ul>
<li><p>资源配置示例</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">List</span></span><br><span class="line"><span class="attr">items:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ResourceQuota</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pods-high</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">hard:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">"1000"</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">200Gi</span></span><br><span class="line">      <span class="attr">pods:</span> <span class="string">"10"</span></span><br><span class="line">    <span class="attr">scopeSelector:</span></span><br><span class="line">      <span class="attr">matchExpressions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator :</span> <span class="string">In</span></span><br><span class="line">        <span class="attr">scopeName:</span> <span class="string">PriorityClass</span></span><br><span class="line">        <span class="attr">values:</span> <span class="string">["high"]</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ResourceQuota</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pods-medium</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">hard:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">"10"</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">20Gi</span></span><br><span class="line">      <span class="attr">pods:</span> <span class="string">"10"</span></span><br><span class="line">    <span class="attr">scopeSelector:</span></span><br><span class="line">      <span class="attr">matchExpressions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator :</span> <span class="string">In</span></span><br><span class="line">        <span class="attr">scopeName:</span> <span class="string">PriorityClass</span></span><br><span class="line">        <span class="attr">values:</span> <span class="string">["medium"]</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ResourceQuota</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pods-low</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">hard:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">"5"</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">10Gi</span></span><br><span class="line">      <span class="attr">pods:</span> <span class="string">"10"</span></span><br><span class="line">    <span class="attr">scopeSelector:</span></span><br><span class="line">      <span class="attr">matchExpressions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">operator :</span> <span class="string">In</span></span><br><span class="line">        <span class="attr">scopeName:</span> <span class="string">PriorityClass</span></span><br><span class="line">        <span class="attr">values:</span> <span class="string">["low"]</span></span><br></pre></td></tr></table></figure>
<p>kubectl create -f ./quota.yml<br>kubectl describe quota</p>
</li>
<li><p>为pod指定资源配额</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">high-priority</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">high-priority</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ubuntu</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">["/bin/sh"]</span></span><br><span class="line">    <span class="attr">args:</span> <span class="string">["-c",</span> <span class="string">"while true; do echo hello; sleep 10;done"</span><span class="string">]</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">"10Gi"</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">"500m"</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">"10Gi"</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">"500m"</span></span><br><span class="line">  <span class="attr">priorityClassName:</span> <span class="string">high</span> <span class="comment"># 指定配额</span></span><br></pre></td></tr></table></figure>
<p>kubectl create -f ./high-priority-pod.yml</p>
</li>
<li><p>为命名空间指定配额</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; compute-resources.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ResourceQuota</span><br><span class="line">metadata:</span><br><span class="line">  name: compute-resources</span><br><span class="line">spec:</span><br><span class="line">  hard:</span><br><span class="line">    requests.cpu: <span class="string">"1"</span></span><br><span class="line">    requests.memory: 1Gi</span><br><span class="line">    limits.cpu: <span class="string">"2"</span></span><br><span class="line">    limits.memory: 2Gi</span><br><span class="line">    requests.nvidia.com/gpu: 4</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>kubectl create namespace myspace<br>kubectl create -f ./compute-resources.yaml —namespace=myspace</p>
</li>
</ul>
<h2 id="集群网络系统"><a href="#集群网络系统" class="headerlink" title="集群网络系统"></a>集群网络系统</h2><p>容器间通信（通过回环地址通信）<br>Pod 间通信（通过pod网络通信）<br>Pod 和 Service 间通信（通过service网络通信）<br>外部和 Service 间通信</p>
<p>每一个 Pod 都有它自己的IP地址。</p>
<h2 id="Kubernetes-的网络模型"><a href="#Kubernetes-的网络模型" class="headerlink" title="Kubernetes 的网络模型"></a>Kubernetes 的网络模型</h2><ul>
<li>Flannel<br>Flannel 是一个非常简单的能够满足 Kubernetes 所需要的重叠网络。已经有许多人报告了使用 Flannel 和 Kubernetes 的成功案例。</li>
<li>OpenVSwitch<br>OpenVSwitch 是一个较为成熟的解决方案，但同时也增加了构建覆盖网络的复杂性，这也得到了几个网络系统的“大商店”的拥护。</li>
<li>Project Calico<br>Calico 提供了高度可扩展的网络和网络解决方案，使用基于与 Internet 相同的 IP 网络原理来连接 Kubernetes Pod。<br>Calico 还通过其分布式防火墙为 Kubernetes Pod 提供了基于意图的细粒度网络安全策略。<br>Calico 还可以和其他的网络解决方案（比如 Flannel、canal 或本机 GCE、AWS、Azure 等）一起以策略实施模式运行。</li>
</ul>
<h2 id="Kubernetes-日志处理"><a href="#Kubernetes-日志处理" class="headerlink" title="Kubernetes 日志处理"></a>Kubernetes 日志处理</h2><p>容器化应用写入 stdout 和 stderr 的任何数据，都会被容器引擎捕获并被重定向到某个位置。<br>如果 pod 在工作节点被驱逐，该 pod 中所有的容器也会被驱逐，包括容器日志。</p>
<ul>
<li>日志轮询 logrotate<br>Kubernetes 当前并不负责轮转日志，而是通过部署工具建立一个解决问题的方案。<br>通过linux 工具实现日志轮询 <a href="https://linux.die.net/man/8/logrotate" target="_blank" rel="noopener">logrotate</a></li>
<li>集群级日志架构<br>在每个节点上运行的节点级日志记录代理。<br>在应用程序的 pod 中，包含专门记录日志的 sidecar 容器。<br>将日志直接从应用程序中推送到日志记录后端。</li>
<li>当前使用的日志解决方案<br>APP container log -&gt; fluentd -&gt; elasticsearch -&gt; kibana</li>
</ul>
<h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><p>镜像<br>容器<br>容器运行时类(Runtime Class)<br>容器生命周期钩子<br>容器环境变量</p>
<h2 id="PODS-管理"><a href="#PODS-管理" class="headerlink" title="PODS 管理"></a>PODS 管理</h2><ul>
<li>pod<br>Pod 是 Kubernetes 应用程序的基本执行单元，即它是 Kubernetes 对象模型中创建或部署的最小和最简单的单元。Pod 表示在 集群 上运行的进程。<br>Pod 封装了应用程序容器（或者在某些情况下封装多个容器）、存储资源、唯一网络 IP 以及控制容器应该如何运行的选项。<br>Pod 表示部署单元：Kubernetes 中应用程序的单个实例，它可能由单个 容器 或少量紧密耦合并共享资源的容器组成。</li>
<li>运行单个容器的 Pod</li>
<li><p>运行多个协同工作的容器的 Pod</p>
</li>
<li><p>pod<br>PID命名空间：Pod中的不同应用程序可以看到其他应用程序的进程ID；<br>网络命名空间：Pod中的多个容器能够访问同一个IP和端口范围；<br>IPC命名空间：Pod中的多个容器能够使用SystemV IPC或POSIX消息队列进行通信；<br>UTS命名空间：Pod中的多个容器共享一个主机名；<br>Volumes（共享存储卷）：Pod中的各个容器可以访问在（Pod级别定义的Volumes）；</p>
</li>
<li><p>Pod 的控制器<br>Deployment<br>StatefulSet<br>DaemonSet</p>
</li>
<li><p>Pod Preset<br>Pod Preset 是一种 API 资源，在 Pod 创建时，用户可以用它将额外的运行时需求信息注入 Pod。<br>在 Pod 创建时，用户可以使用 PodPreset 对象将特定信息注入 Pod 中，这些信息可以包括 secret、 卷、卷挂载和环境变量。</p>
</li>
<li>为特定 Pod 禁用 Pod Preset<br>Pod spec 中添加形如 podpreset.admission.kubernetes.io/exclude: “true” 的注解。</li>
<li><p>启用 Pod Preset<br>启动集群时添加此参数 —extra-config=apiserver.runtime-config=settings.k8s.io/v1alpha1=true。</p>
</li>
<li><p>Pod Preset 示例<br>定义一个Configmap</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">etcd-env-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">number_of_members:</span> <span class="string">"1"</span></span><br><span class="line">  <span class="attr">initial_cluster_state:</span> <span class="string">new</span></span><br><span class="line">  <span class="attr">initial_cluster_token:</span> <span class="string">DUMMY_ETCD_INITIAL_CLUSTER_TOKEN</span></span><br><span class="line">  <span class="attr">discovery_token:</span> <span class="string">DUMMY_ETCD_DISCOVERY_TOKEN</span></span><br><span class="line">  <span class="attr">discovery_url:</span> <span class="string">http://etcd_discovery:2379</span></span><br><span class="line">  <span class="attr">etcdctl_peers:</span> <span class="string">http://etcd:2379</span></span><br><span class="line">  <span class="attr">duplicate_key:</span> <span class="string">FROM_CONFIG_MAP</span></span><br><span class="line">  <span class="attr">REPLACE_ME:</span> <span class="string">"a value"</span></span><br></pre></td></tr></table></figure>
<p>kubectl create -f podpreset/configmap.yaml</p>
</li>
</ul>
<p>定义一个 Preset<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">settings.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PodPreset</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">allow-database</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">role:</span> <span class="string">frontend</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_PORT</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">"6379"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">duplicate_key</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">FROM_ENV</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">expansion</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">$(REPLACE_ME)</span></span><br><span class="line">  <span class="attr">envFrom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">configMapRef:</span> <span class="comment"># 指定 configmap</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">etcd-env-config</span></span><br><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/cache</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">      <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><br>kubectl apply -f podpreset/preset.yaml<br>kubectl get podpreset</p>
<p>在pod中应用 Preset<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">website</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">website</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">frontend</span> <span class="comment"># 通过label 绑定 preset</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">website</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><br>kubectl create -f podpreset/pod.yaml<br>kubectl get pods<br>kubectl get pod website -o yaml<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">website</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">website</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">frontend</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">podpreset.admission.kubernetes.io/podpreset-allow-database:</span> <span class="string">"resource version"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">website</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/cache</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">env:</span> <span class="comment"># 环境变量</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_PORT</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">"6379"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">duplicate_key</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">FROM_ENV</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">expansion</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">$(REPLACE_ME)</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span> <span class="comment"># configmap</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">etcd-env-config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">      <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>Pod 拓扑扩展约束<br>约束 pod 在区域内的调度<br>需要启用功能</li>
</ul>
<p>节点标签<br>一个节点可能具有标签：node=node1,zone=us-east-1a,region=us-east-1</p>
<p>对于 PodAffinity，可以尝试将任意数量的 pod 打包到符合条件的拓扑域中。<br>对于 PodAntiAffinity，只能将一个 pod 调度到单个拓扑域中。</p>
<ul>
<li>自愿干扰和非自愿干扰<br>把这些不可避免的情况称为应用的非自愿干扰。例如：<br>  节点下层物理机的硬件故障<br>  集群管理员错误地删除虚拟机（实例）<br>  云提供商或虚拟机管理程序中的故障导致的虚拟机消失<br>  内核错误<br>  节点由于集群网络隔离从集群中消失<br>  由于节点资源不足导致 pod 被驱逐。</li>
</ul>
<p>称其他情况为自愿干扰<br>    删除 deployment 或其他管理 pod 的控制器<br>    更新了 deployment 的 pod 模板导致 pod 重启<br>    直接删除 pod（例如，因为误操作）<br>    集群管理员操作包括：<br>    排空（drain）节点进行修复或升级。<br>    从集群中排空节点以缩小集群（了解集群自动扩缩）。<br>    从节点中移除一个 pod，以允许其他 pod 使用该节点。</p>
<ul>
<li>PodDisruptionBudget 对象（PDB）<br>PDB 将限制在同一时间因自愿干扰导致的复制应用程序中宕机的 pod 数量。<br>基于定额的应用程序希望确保运行的副本数 永远不会低于仲裁所需的数量。<br>Web 前端可能希望确保提供负载的副本数量永远不会低于总数的某个百分比。<br>3 个 pod 都是 deployment 的一部分，并且共同拥有同一个 PDB，要求 3 个 pod 中至少有 2 个 pod 始终处于可用状态。</li>
</ul>
<p>定义一个 PodDisruptionBudget<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">policy/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PodDisruptionBudget</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zk-pdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">maxUnavailable:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">zookeeper</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>临时容器<br>临时容器与其他容器的不同之处在于，它们缺少对资源或执行的保证，并且永远不会自动重启，因此不适用于构建应用程序。<br>当由于容器崩溃或容器镜像不包含调试实用程序而导致 kubectl exec 无用时，临时容器对于交互式故障排查很有用。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">    <span class="attr">"kind"</span>: <span class="string">"EphemeralContainers"</span>,</span><br><span class="line">    <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"example-pod"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"ephemeralContainers"</span>: [&#123;</span><br><span class="line">        <span class="attr">"command"</span>: [</span><br><span class="line">            <span class="string">"sh"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"image"</span>: <span class="string">"busybox"</span>,</span><br><span class="line">        <span class="attr">"imagePullPolicy"</span>: <span class="string">"IfNotPresent"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"debugger"</span>,</span><br><span class="line">        <span class="attr">"stdin"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"tty"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"terminationMessagePolicy"</span>: <span class="string">"File"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>kubectl apply -f ec.json<br>连接到临时容器<br>kubectl attach -it example-pod -c debugger</p>
</li>
<li><p>Init 容器<br>Init 容器与普通的容器非常像，除了如下两点：<br>  它们总是运行到完成。<br>  每个都必须在下一个启动之前成功完成。</p>
</li>
</ul>
<p>Init 容器示例<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.28</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">['sh',</span> <span class="string">'-c'</span><span class="string">,</span> <span class="string">'echo The app is running! &amp;&amp; sleep 3600'</span><span class="string">]</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-myservice</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.28</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">['sh',</span> <span class="string">'-c'</span><span class="string">,</span> <span class="string">"until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"</span><span class="string">]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-mydb</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.28</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">['sh',</span> <span class="string">'-c'</span><span class="string">,</span> <span class="string">"until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><br>kubectl apply -f myapp.yaml<br>kubectl get -f myapp.yaml<br>kubectl describe -f myapp.yaml</p>
<p>Pod重启导致 Init 容器重新执行。</p>
<ul>
<li><p>Pod 的生命周期<br>下面是 phase 可能的值：<br>挂起（Pending）：Pod 已被 Kubernetes 系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度 Pod 的时间和通过网络下载镜像的时间，这可能需要花点时间。<br>运行中（Running）：该 Pod 已经绑定到了一个节点上，Pod 中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态。<br>成功（Succeeded）：Pod 中的所有容器都被成功终止，并且不会再重启。<br>失败（Failed）：Pod 中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止。<br>未知（Unknown）：因为某些原因无法取得 Pod 的状态，通常是因为与 Pod 所在主机通信失败。</p>
</li>
<li><p>容器探针<br>ExecAction：在容器内执行指定命令。如果命令退出时返回码为 0 则认为诊断成功。<br>TCPSocketAction：对指定端口上的容器的 IP 地址进行 TCP 检查。如果端口打开，则诊断被认为是成功的。<br>HTTPGetAction：对指定的端口和路径上的容器的 IP 地址执行 HTTP Get 请求。如果响应的状态码大于等于200 且小于 400，则诊断被认为是成功的。</p>
</li>
</ul>
<p>Kubelet 可以选择是否执行在容器上运行的三种探针执行和做出反应：<br>livenessProbe：指示容器是否正在运行。如果存活探测失败，则 kubelet 会杀死容器，并且容器将受到其 重启策略 的影响。如果容器不提供存活探针，则默认状态为 Success。<br>readinessProbe：指示容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与 Pod 匹配的所有 Service 的端点中删除该 Pod 的 IP 地址。初始延迟之前的就绪状态默认为 Failure。如果容器不提供就绪探针，则默认状态为 Success。<br>startupProbe: 指示容器中的应用是否已经启动。如果提供了启动探测(startup probe)，则禁用所有其他探测，直到它成功为止。如果启动探测失败，kubelet 将杀死容器，容器服从其重启策略进行重启。如果容器没有提供启动探测，则默认状态为成功Success。</p>
<ul>
<li>POD 重启策略<br>PodSpec 中有一个 restartPolicy 字段，可能的值为 Always、OnFailure 和 Never。默认为 Always。</li>
</ul>
<p>livenessProbe 示例<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">liveness</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-http</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/server</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/liveness</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="comment"># 当没有定义 "host" 时，使用 "PodIP"</span></span><br><span class="line">        <span class="comment"># host: my-host</span></span><br><span class="line">        <span class="comment"># 当没有定义 "scheme" 时，使用 "HTTP" scheme 只允许 "HTTP" 和 "HTTPS"</span></span><br><span class="line">        <span class="comment"># scheme: HTTPS</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">httpHeaders:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">X-Custom-Header</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">Awesome</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">liveness</span></span><br></pre></td></tr></table></figure></p>
<h2 id="pod-控制器"><a href="#pod-控制器" class="headerlink" title="pod 控制器"></a>pod 控制器</h2><ul>
<li><p>ReplicaSet<br>ReplicaSet 是下一代的 Replication Controller。 ReplicaSet 和 Replication Controller 的唯一区别是选择器的支持。ReplicaSet 支持新的基于集合的选择器需求，这在标签用户指南中有描述。而 Replication Controller 仅支持基于相等选择器的需求。<br>ReplicaSet 确保任何时间都有指定数量的 Pod 副本在运行。 然而，Deployment 是一个更高级的概念，它管理 ReplicaSet，并向 Pod 提供声明式的更新以及许多其他有用的功能。 因此，我们建议使用 Deployment 而不是直接使用 ReplicaSet，除非您需要自定义更新业务流程或根本不需要更新。</p>
</li>
<li><p>ReplicationController<br>ReplicationController 确保在任何时候都有特定数量的 pod 副本处于运行状态。 换句话说，ReplicationController 确保一个 pod 或一组同类的 pod 总是可用的。</p>
</li>
<li><p>Deployments<br>一个 Deployment 控制器为 Pods和 ReplicaSets提供描述性的更新方式。<br>Deployment 失败一些因素:<br>  配额不足<br>  就绪探测失败<br>  镜像拉取错误<br>  权限不足<br>  限制范围<br>  应用程序运行时配置错误</p>
</li>
<li><p>StatefulSets<br>StatefulSet 用来管理 Deployment 和扩展一组 Pod，并且能为这些 Pod 提供序号和唯一性保证。<br>StatefulSet 为它们的每个 Pod 维护了一个固定的 ID。<br>StatefulSet 当前需要 headless 服务 来负责 Pod 的网络标识。您需要负责创建此服务。<br>当删除 StatefulSets 时，StatefulSet 不提供任何终止 Pod 的保证。为了实现 StatefulSet 中的 Pod 可以有序和优雅的终止，可以在删除之前将 StatefulSet 缩放为 0。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span> <span class="comment"># headless</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>DaemonSet<br>DaemonSet 确保全部（或者某些）节点上运行一个 Pod 的副本。当有节点加入集群时， 也会为他们新增一个 Pod 。当有节点从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。</p>
</li>
<li><p>垃圾收集<br>Kubernetes 垃圾收集器的作用是删除某些曾经拥有所有者（owner）但现在不再拥有所有者的对象。</p>
</li>
<li><p>已完成资源的 TTL 控制器<br>TTL 控制器提供了一种 TTL 机制来限制已完成执行的资源对象的生命周期。TTL 控制器目前只处理 Job。</p>
</li>
<li><p>CronJob<br>一个 CronJob 对象就像 crontab (cron table) 文件中的一行。它用 Cron 格式进行编写，并周期性地在给定的调度时间执行 Job。</p>
</li>
</ul>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul>
<li><p>Endpoint Slices<br>在 Kubernetes 中，EndpointSlice 包含对一组网络端点的引用。<br>默认情况下，一旦到达100个 Endpoint，该 Endpoint 切片将被视为“已满”。</p>
</li>
<li><p>Service 拓扑<br>Service 拓扑可以让一个服务基于集群的 Node 拓扑进行流量路由。</p>
</li>
<li><p>Service 资源<br>逻辑上的一组 Pod，一种可以访问它们的策略 —— 通常称为微服务。<br>定义 Service</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 选择一组pod</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">MyApp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>定义没有selector 的 Service<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">addresses:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ip:</span> <span class="number">192.0</span><span class="number">.2</span><span class="number">.42</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>iptables 代理模式<br>在 Kubernetes 集群中，每个 Node 运行一个 kube-proxy 进程。kube-proxy 负责为 Service 实现了一种 VIP（虚拟 IP）的形式。<br>它配置 iptables 规则，捕获到达该 Service 的 clusterIP（是虚拟 IP）和 Port 的请求，并重定向到代理端口，代理端口再代理请求到 backend Pod。<br>使用 iptables 处理流量具有较低的系统开销，因为流量由 Linux netfilter 处理，而无需在用户空间和内核空间之间切换。 这种方法也可能更可靠。</p>
</li>
<li><p>IPVS 代理模式<br>在 ipvs 模式下，kube-proxy监视Kubernetes服务和端点，调用 netlink 接口相应地创建 IPVS 规则， 并定期将 IPVS 规则与 Kubernetes 服务和端点同步。 该控制循环可确保　IPVS　状态与所需状态匹配。 访问服务时，IPVS　将流量定向到后端Pod之一。</p>
</li>
<li><p>服务发现</p>
<ul>
<li>环境变量<br>当 Pod 在 Node 上运行时，kubelet 会为每个活跃的 Service 添加一组环境变量。 这会有一个顺序的问题。想了解为何，检查正在运行的 Nginx Pod 的环境变量（Pod 名称将不会相同）<br>kubectl exec my-nginx-3800858182-jr4a2 — printenv | grep SERVICE</li>
<li>DNS<br>支持群集的DNS服务器（例如CoreDNS）监视 Kubernetes API 中的新服务，并为每个服务创建一组 DNS 记录。<br>kubectl get services kube-dns —namespace=kube-system</li>
</ul>
</li>
<li><p>Headless Services<br>有时不需要或不想要负载均衡，以及单独的 Service IP。 遇到这种情况，可以通过指定 Cluster IP（spec.clusterIP）的值为 “None” 来创建 Headless Service。</p>
</li>
<li><p>发布服务<br>对一些应用（如 Frontend）的某些部分，可能希望通过外部Kubernetes 集群外部IP 地址暴露 Service。<br>Kubernetes ServiceTypes 允许指定一个需要的类型的 Service，默认是 ClusterIP 类型。<br>Type 的取值以及行为如下：<br>  ClusterIP：通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部可以访问，这也是默认的 ServiceType。<br>  NodePort：通过每个 Node 上的 IP 和静态端口（NodePort）暴露服务。NodePort 服务会路由到 ClusterIP 服务，这个 ClusterIP 服务会自动创建。通过请求 <NodeIP>:<NodePort>，可以从集群的外部访问一个 NodePort 服务。<br>  LoadBalancer：使用云提供商的负载局衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 NodePort 服务和 ClusterIP 服务。<br>  ExternalName：通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容（例如， foo.bar.example.com）。 没有任何类型代理被创建。</NodePort></NodeIP></p>
<blockquote>
<p>CoreDNS 1.7 或更高版本才能使用 ExternalName 类型。</p>
</blockquote>
</li>
<li><p>LoadBalancer 类型</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">MyApp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9376</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="number">10.0</span><span class="number">.171</span><span class="number">.239</span></span><br><span class="line">  <span class="attr">loadBalancerIP:</span> <span class="number">78.11</span><span class="number">.24</span><span class="number">.19</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span></span><br><span class="line">    <span class="attr">ingress:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ip:</span> <span class="number">146.148</span><span class="number">.47</span><span class="number">.155</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>类型ExternalName</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ExternalName</span></span><br><span class="line">  <span class="attr">externalName:</span> <span class="string">my.database.example.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>外部 IP</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">MyApp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9376</span></span><br><span class="line">  <span class="attr">externalIPs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">80.11</span><span class="number">.12</span><span class="number">.10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Pod 与 Service 的 DNS<br>在集群中定义的每个 Service（包括 DNS 服务器自身）都会被指派一个 DNS 名称。<br>假设在 Kubernetes 集群的 Namespace bar 中，定义了一个Service foo。 运行在Namespace bar 中的一个 Pod，可以简单地通过 DNS 查询 foo 来找到该 Service。 运行在 Namespace quux 中的一个 Pod 可以通过 DNS 查询 foo.bar 找到该 Service。<br>举个例子，一个 Pod 的 hostname 设置为 “foo”，subdomain 设置为 “bar”，在 namespace “my-namespace” 中对应的完全限定域名<br>（FQDN）为 “foo.bar.my-namespace.svc.cluster-domain.example”。</p>
</li>
</ul>
<p>A 记录: 这种名字的形式被指派一个 DNS A 记录。 这会解析成该 Service 的 Cluster IP。<br>“Headless” Service（没有Cluster IP）:它会解析成该 Service 选择的一组 Pod 的 IP。 希望客户端能够使用这一组 IP，否则就使用标准的 round-robin 策略从这一组 IP 中进行选择。<br>SRV 记录: 命名端口需要创建 SRV 记录</p>
<ul>
<li>Pod 的 DNS 设定<br>dnsConfig 字段是可选的，它可以与任何 dnsPolicy 设置一起使用。 但是，当 Pod 的 dnsPolicy 设置为 “None” 时，必须指定 dnsConfig 字段。<br>用户可以在 dnsConfig 字段中指定以下属性：<br>nameservers: 将用作于 Pod 的 DNS 服务器的 IP 地址列表。最多可以指定3个 IP 地址。 当 Pod 的 dnsPolicy 设置为 “None” 时，列表必须至少包含一个IP地址，否则此属性是可选的。列出的服务器将合并到从指定的 DNS 策略生成的基本名称服务器，并删除重复的地址。<br>searches: 用于在 Pod 中查找主机名的 DNS 搜索域的列表。此属性是可选的。指定后，提供的列表将合并到根据所选 DNS 策略生成的基本搜索域名中。 重复的域名将被删除。    Kubernetes最多允许6个搜索域。<br>options: 对象的可选列表，其中每个对象可能具有 name 属性（必需）和 value 属性（可选）。 此属性中的内容将合并到从指定的 DNS 策略生成的选项。 重复的条目将被删除。</li>
</ul>
<p>自定义 dns<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dns-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">dnsPolicy:</span> <span class="string">"None"</span></span><br><span class="line">  <span class="attr">dnsConfig:</span></span><br><span class="line">    <span class="attr">nameservers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line">    <span class="attr">searches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ns1.svc.cluster-domain.example</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my.dns.search.suffix</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ndots</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">"2"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">edns0</span></span><br></pre></td></tr></table></figure><br>创建上面的Pod后，容器 test 会在其 /etc/resolv.conf 文件中获取以下内容：</p>
<p>nameserver 1.2.3.4<br>search ns1.svc.cluster-domain.example my.dns.search.suffix<br>options ndots:2 edns0</p>
<ul>
<li><p>Service 安全<br>  https 自签名证书（除非已经有了一个识别身份的证书）<br>  使用证书配置的 Nginx server<br>  使证书可以访问 Pod 的秘钥</p>
</li>
<li><p>创建证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#create a public private key pair</span></span><br><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /d/tmp/nginx.key -out /d/tmp/nginx.crt -subj <span class="string">"/CN=my-nginx/O=my-nginx"</span></span><br><span class="line"><span class="comment">#convert the keys to base64 encoding</span></span><br><span class="line">cat /d/tmp/nginx.crt | base64</span><br><span class="line">cat /d/tmp/nginx.key | base64</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 secret</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">"v1"</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">"Secret"</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">"nginxsecret"</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">"default"</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">nginx.crt:</span> <span class="string">"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIekNDQWdlZ0F3SUJBZ0lKQUp5M3lQK0pzMlpJTUEwR0NTcUdTSWIzRFFFQkJRVUFNQ1l4RVRBUEJnTlYKQkFNVENHNW5hVzU0YzNaak1SRXdEd1lEVlFRS0V3aHVaMmx1ZUhOMll6QWVGdzB4TnpFd01qWXdOekEzTVRKYQpGdzB4T0RFd01qWXdOekEzTVRKYU1DWXhFVEFQQmdOVkJBTVRDRzVuYVc1NGMzWmpNUkV3RHdZRFZRUUtFd2h1CloybHVlSE4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSjFxSU1SOVdWM0IKMlZIQlRMRmtobDRONXljMEJxYUhIQktMSnJMcy8vdzZhU3hRS29GbHlJSU94NGUrMlN5ajBFcndCLzlYTnBwbQppeW1CL3JkRldkOXg5UWhBQUxCZkVaTmNiV3NsTVFVcnhBZW50VWt1dk1vLzgvMHRpbGhjc3paenJEYVJ4NEo5Ci82UVRtVVI3a0ZTWUpOWTVQZkR3cGc3dlVvaDZmZ1Voam92VG42eHNVR0M2QURVODBpNXFlZWhNeVI1N2lmU2YKNHZpaXdIY3hnL3lZR1JBRS9mRTRqakxCdmdONjc2SU90S01rZXV3R0ljNDFhd05tNnNTSzRqYUNGeGpYSnZaZQp2by9kTlEybHhHWCtKT2l3SEhXbXNhdGp4WTRaNVk3R1ZoK0QrWnYvcW1mMFgvbVY0Rmo1NzV3ajFMWVBocWtsCmdhSXZYRyt4U1FVQ0F3RUFBYU5RTUU0d0hRWURWUjBPQkJZRUZPNG9OWkI3YXc1OUlsYkROMzhIYkduYnhFVjcKTUI4R0ExVWRJd1FZTUJhQUZPNG9OWkI3YXc1OUlsYkROMzhIYkduYnhFVjdNQXdHQTFVZEV3UUZNQU1CQWY4dwpEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBRVhTMW9FU0lFaXdyMDhWcVA0K2NwTHI3TW5FMTducDBvMm14alFvCjRGb0RvRjdRZnZqeE04Tzd2TjB0clcxb2pGSW0vWDE4ZnZaL3k4ZzVaWG40Vm8zc3hKVmRBcStNZC9jTStzUGEKNmJjTkNUekZqeFpUV0UrKzE5NS9zb2dmOUZ3VDVDK3U2Q3B5N0M3MTZvUXRUakViV05VdEt4cXI0Nk1OZWNCMApwRFhWZmdWQTRadkR4NFo3S2RiZDY5eXM3OVFHYmg5ZW1PZ05NZFlsSUswSGt0ejF5WU4vbVpmK3FqTkJqbWZjCkNnMnlwbGQ0Wi8rUUNQZjl3SkoybFIrY2FnT0R4elBWcGxNSEcybzgvTHFDdnh6elZPUDUxeXdLZEtxaUMwSVEKQ0I5T2wwWW5scE9UNEh1b2hSUzBPOStlMm9KdFZsNUIyczRpbDlhZ3RTVXFxUlU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"</span></span><br><span class="line">  <span class="attr">nginx.key:</span> <span class="string">"LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2RhaURFZlZsZHdkbFIKd1V5eFpJWmVEZWNuTkFhbWh4d1NpeWF5N1AvOE9ta3NVQ3FCWmNpQ0RzZUh2dGtzbzlCSzhBZi9WemFhWm9zcApnZjYzUlZuZmNmVUlRQUN3WHhHVFhHMXJKVEVGSzhRSHA3VkpMcnpLUC9QOUxZcFlYTE0yYzZ3MmtjZUNmZitrCkU1bEVlNUJVbUNUV09UM3c4S1lPNzFLSWVuNEZJWTZMMDUrc2JGQmd1Z0ExUE5JdWFubm9UTWtlZTRuMG4rTDQKb3NCM01ZUDhtQmtRQlAzeE9JNHl3YjREZXUraURyU2pKSHJzQmlIT05Xc0RadXJFaXVJMmdoY1kxeWIyWHI2UAozVFVOcGNSbC9pVG9zQngxcHJHclk4V09HZVdPeGxZZmcvbWIvNnBuOUYvNWxlQlkrZStjSTlTMkQ0YXBKWUdpCkwxeHZzVWtGQWdNQkFBRUNnZ0VBZFhCK0xkbk8ySElOTGo5bWRsb25IUGlHWWVzZ294RGQwci9hQ1Zkank4dlEKTjIwL3FQWkUxek1yall6Ry9kVGhTMmMwc0QxaTBXSjdwR1lGb0xtdXlWTjltY0FXUTM5SjM0VHZaU2FFSWZWNgo5TE1jUHhNTmFsNjRLMFRVbUFQZytGam9QSFlhUUxLOERLOUtnNXNrSE5pOWNzMlY5ckd6VWlVZWtBL0RBUlBTClI3L2ZjUFBacDRuRWVBZmI3WTk1R1llb1p5V21SU3VKdlNyblBESGtUdW1vVlVWdkxMRHRzaG9reUxiTWVtN3oKMmJzVmpwSW1GTHJqbGtmQXlpNHg0WjJrV3YyMFRrdWtsZU1jaVlMbjk4QWxiRi9DSmRLM3QraTRoMTVlR2ZQegpoTnh3bk9QdlVTaDR2Q0o3c2Q5TmtEUGJvS2JneVVHOXBYamZhRGR2UVFLQmdRRFFLM01nUkhkQ1pKNVFqZWFKClFGdXF4cHdnNzhZTjQyL1NwenlUYmtGcVFoQWtyczJxWGx1MDZBRzhrZzIzQkswaHkzaE9zSGgxcXRVK3NHZVAKOWRERHBsUWV0ODZsY2FlR3hoc0V0L1R6cEdtNGFKSm5oNzVVaTVGZk9QTDhPTm1FZ3MxMVRhUldhNzZxelRyMgphRlpjQ2pWV1g0YnRSTHVwSkgrMjZnY0FhUUtCZ1FEQmxVSUUzTnNVOFBBZEYvL25sQVB5VWs1T3lDdWc3dmVyClUycXlrdXFzYnBkSi9hODViT1JhM05IVmpVM25uRGpHVHBWaE9JeXg5TEFrc2RwZEFjVmxvcG9HODhXYk9lMTAKMUdqbnkySmdDK3JVWUZiRGtpUGx1K09IYnRnOXFYcGJMSHBzUVpsMGhucDBYSFNYVm9CMUliQndnMGEyOFVadApCbFBtWmc2d1BRS0JnRHVIUVV2SDZHYTNDVUsxNFdmOFhIcFFnMU16M2VvWTBPQm5iSDRvZUZKZmcraEppSXlnCm9RN3hqWldVR3BIc3AyblRtcHErQWlSNzdyRVhsdlhtOElVU2FsbkNiRGlKY01Pc29RdFBZNS9NczJMRm5LQTQKaENmL0pWb2FtZm1nZEN0ZGtFMXNINE9MR2lJVHdEbTRpb0dWZGIwMllnbzFyb2htNUpLMUI3MkpBb0dBUW01UQpHNDhXOTVhL0w1eSt5dCsyZ3YvUHM2VnBvMjZlTzRNQ3lJazJVem9ZWE9IYnNkODJkaC8xT2sybGdHZlI2K3VuCnc1YytZUXRSTHlhQmd3MUtpbGhFZDBKTWU3cGpUSVpnQWJ0LzVPbnlDak9OVXN2aDJjS2lrQ1Z2dTZsZlBjNkQKckliT2ZIaHhxV0RZK2Q1TGN1YSt2NzJ0RkxhenJsSlBsRzlOZHhrQ2dZRUF5elIzT3UyMDNRVVV6bUlCRkwzZAp4Wm5XZ0JLSEo3TnNxcGFWb2RjL0d5aGVycjFDZzE2MmJaSjJDV2RsZkI0VEdtUjZZdmxTZEFOOFRwUWhFbUtKCnFBLzVzdHdxNWd0WGVLOVJmMWxXK29xNThRNTBxMmk1NVdUTThoSDZhTjlaMTltZ0FGdE5VdGNqQUx2dFYxdEYKWSs4WFJkSHJaRnBIWll2NWkwVW1VbGc9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span> <span class="comment"># 使用 nodeport 类型</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 选择 nginx</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span> <span class="comment"># 获取 nginx</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">my-nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">my-nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">volumes:</span> <span class="comment"># 定义 volums</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">        <span class="attr">secret:</span> <span class="comment"># 选择证书</span></span><br><span class="line">          <span class="attr">secretName:</span> <span class="string">nginxsecret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">configmap-volume</span></span><br><span class="line">        <span class="attr">configMap:</span> <span class="comment"># 指定 configmap</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">nginxconfigmap</span></span><br><span class="line">      <span class="attr">containers:</span> <span class="comment"># 指定 容器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginxhttps</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">bprashanth/nginxhttps:1.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/nginx/ssl</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">secret-volume</span>  <span class="comment"># 把secret 挂载到 ssl目录</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/nginx/conf.d</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">configmap-volume</span> <span class="comment"># 把配置文件挂载到 conf.d 目录</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Ingress<br>为了让 Ingress 资源工作，集群必须有一个正在运行的 Ingress 控制器。<br>术语：<br>节点（Node）: Kubernetes 集群中其中一台工作机器，是集群的一部分。<br>集群（Cluster）: 一组运行程序（这些程序是容器化的，被 Kubernetes 管理的）的节点。 在此示例中，和在大多数常见的Kubernetes部署方案，集群中的节点都不会是公共网络。<br>边缘路由器（Edge router）: 在集群中强制性执行防火墙策略的路由器（router）。可以是由云提供商管理的网关，也可以是物理硬件。<br>集群网络（Cluster network）: 一组逻辑或物理的链接，根据 Kubernetes 网络模型 在集群内实现通信。<br>服务（Service）：Kubernetes Service 使用 标签 选择器（selectors）标识的一组 Pod。除非另有说明，否则假定服务只具有在集群网络中可路由的虚拟 IP。</p>
<p>   internet</p>
<pre><code>  |
</code></pre><p>Ingress controller</p>
<pre><code>  |
</code></pre><p> [ Ingress ]<br> —|——-|—<br> [ Services ]</p>
</li>
</ul>
<p>路径类型（大小写敏感）</p>
<ul>
<li><p>Ingress 类</p>
</li>
<li><p>网络策略<br>网络策略（NetworkPolicy）是一种关于 Pod 间及与其他网络端点间所允许的通信规则的规范。<br>隔离和非隔离的 Pod<br>默认情况下，Pod 是非隔离的，它们接受任何来源的流量。</p>
</li>
</ul>
<p>示例：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-network-policy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span> <span class="comment"># 选择pod</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">role:</span> <span class="string">db</span></span><br><span class="line">  <span class="attr">policyTypes:</span> <span class="comment"># 定义入口，出口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ingress</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Egress</span></span><br><span class="line">  <span class="attr">ingress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">from:</span> <span class="comment"># 入口流量源定义</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ipBlock:</span> <span class="comment"># 指定那些ip</span></span><br><span class="line">        <span class="attr">cidr:</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line">        <span class="attr">except:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.17</span><span class="number">.1</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">namespaceSelector:</span> <span class="comment"># 执行命名空间</span></span><br><span class="line">        <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">project:</span> <span class="string">myproject</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">podSelector:</span> <span class="comment"># 指定pod</span></span><br><span class="line">        <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">role:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">egress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">to:</span> <span class="comment"># 出口</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ipBlock:</span> <span class="comment"># 指定ip</span></span><br><span class="line">        <span class="attr">cidr:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 指定端口</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">5978</span></span><br></pre></td></tr></table></figure></p>
<p>默认拒绝所有入口和所有出口流量<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default-deny-all</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">policyTypes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ingress</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Egress</span></span><br></pre></td></tr></table></figure><br>kubectl get NetworkPolicy -A</p>
<ul>
<li><p>Kubelet 管理 hosts文件<br>kubelet 管理 Pod 中每个容器的 hosts 文件，避免 Docker 在容器已经启动之后去 修改 该文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hostAliases:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">"127.0.0.1"</span></span><br><span class="line">  <span class="attr">hostnames:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"foo.local"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"bar.local"</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">"10.1.2.3"</span></span><br><span class="line">  <span class="attr">hostnames:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"foo.remote"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"bar.remote"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ipv6 支持</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ipFamily:</span> <span class="string">IPv6</span> <span class="comment"># this ipFamily: IPv4</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">MyApp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群结构</span></span><br><span class="line">    主机 Node</span><br><span class="line">        Master node</span><br><span class="line">        Work node</span><br><span class="line">    Network</span><br><span class="line">    Storage</span><br><span class="line">    ETCD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群组件</span></span><br><span class="line">controller manager</span><br><span class="line">scheduler</span><br><span class="line">etcd</span><br><span class="line">kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群网络插件</span></span><br><span class="line">Istio（网格）</span><br><span class="line">Calico（三层）</span><br><span class="line">Flannel(二层)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 概念</span></span><br><span class="line">Namespace 项目</span><br><span class="line">pod 容器组 （可以包含多个容器）</span><br><span class="line">deployments (用来部署 pod，指定 pod 策略等)</span><br><span class="line">service 服务（提供 pod 间网络）</span><br><span class="line">Ingress nginx（对 pod 提供应用路由 如:http://pod.com/<span class="built_in">test</span>/）</span><br><span class="line">Image Registries 镜像仓库</span><br><span class="line">PersistentVolume PV 存储卷</span><br><span class="line">PersistentVolumeClaim（PVC)</span><br><span class="line">StorageClass 存储类型</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群管理</span></span><br><span class="line"><span class="comment"># master节点</span></span><br><span class="line">升级(不能降级)</span><br><span class="line">备份/恢复</span><br><span class="line">证书管理</span><br><span class="line">Etcd管理</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群资源限制</span></span><br><span class="line">    不可用节点数限制</span><br><span class="line">    集群API地址授权</span><br><span class="line">    项目资源配额</span><br><span class="line"></span><br><span class="line"><span class="comment"># work节点</span></span><br><span class="line">升级</span><br><span class="line">暂停</span><br><span class="line">驱散</span><br><span class="line"></span><br><span class="line"><span class="comment"># pod 类型</span></span><br><span class="line">Deployment: 部署无状态应用 </span><br><span class="line">DaemonSet: 每台主机部署 1 个Pod</span><br><span class="line">StatefulSet: 部署有状态应用 1 个Pod</span><br><span class="line">CronJob: 定时运行Pod</span><br><span class="line">Job: 一次性运行Pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># pod 卷</span></span><br><span class="line">本地卷</span><br><span class="line">存储卷-&gt;存储类 PVC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级策略</span></span><br><span class="line">滚动</span><br><span class="line">    先启动新Pod，再停止旧Pod。</span><br><span class="line">    先停止旧Pod，再启动新Pod。</span><br><span class="line">直接升级：删除所有Pod，然后重新开始。</span><br><span class="line">自定义</span><br><span class="line">    最大 pod 数量</span><br><span class="line">    可用 pod 数量</span><br><span class="line">pod 准备时间</span><br><span class="line"></span><br><span class="line"><span class="comment"># pod 网络模式</span></span><br><span class="line">NodePort(所有主机端口均可访问)</span><br><span class="line">HostPort(pod所在主机端口能访问)</span><br><span class="line">集群IP(与pod端口相同，集群内能访问)</span><br><span class="line">L4负载均衡(对接公有云负载均衡)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PV 插件</span></span><br><span class="line">公有云 PV 插件</span><br><span class="line"><span class="built_in">local</span></span><br><span class="line">hostpath</span><br><span class="line">NFS</span><br><span class="line"></span><br><span class="line"><span class="comment"># PV 访问模式</span></span><br><span class="line">单机读写</span><br><span class="line">多机读写</span><br><span class="line">多机只读</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储类</span></span><br><span class="line">回收策略</span><br><span class="line">    随工作负载删除</span><br><span class="line">    保留</span><br><span class="line">卷绑定模式</span><br><span class="line">    创建PersistentVolumeClaim后，绑定并提供一个持久卷</span><br><span class="line">    使用PersistentVolumeClaim创建一个Pod后，绑定并提供一个持久卷</span><br><span class="line"></span><br><span class="line">首先创建 Storage Classes -&gt; 创建PersistentVolume -&gt; Add Volume Claim</span><br><span class="line">在 pod 中使用 PersistentVolumeClaim</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">云控制器管理器（cloud controller manager，CCM）</span><br><span class="line">期望状态与当前状态</span><br><span class="line"></span><br><span class="line">集群</span><br><span class="line">    认证</span><br><span class="line"></span><br><span class="line">管理资源</span><br><span class="line">    POD</span><br><span class="line">    Service</span><br><span class="line">    Deployment</span><br><span class="line">    标签来区分集合</span><br><span class="line">    使用标签来进行金丝雀部署</span><br><span class="line">    注解</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>OpenStack安装</title>
    <url>/2020/05/OpenStack%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://www.openstack.org/" target="_blank" rel="noopener"> Openstack 官网 </a></li>
<li><a href="https://docs.openstack.org/install-guide/" target="_blank" rel="noopener">Install 指南</a></li>
<li><a href="https://docs.openstack.org/install-guide/get-started-conceptual-architecture.html" target="_blank" rel="noopener">openstack 架构图</a></li>
<li><a href="https://docs.openstack.org/train/user/" target="_blank" rel="noopener">组件介绍</a></li>
</ul>
<h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">Keystone 认证组件</span><br><span class="line">Glance 镜像组件</span><br><span class="line">placement 资源管理组件(是从Nova中剥离出来的)</span><br><span class="line">------------------------</span><br><span class="line">其他组件</span><br><span class="line"></span><br><span class="line">Nova 计算组件</span><br><span class="line">Netron 网络组件</span><br><span class="line">------------------------</span><br><span class="line">Master Node</span><br><span class="line"></span><br><span class="line">Nova 计算组件</span><br><span class="line">Netron 网络组件</span><br><span class="line">------------------------</span><br><span class="line">Worker Node</span><br></pre></td></tr></table></figure>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>提供5台 linux 系统(Centos 7) 主机</p>
<p>主机IP如下：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">master:<span class="number">192.168</span><span class="number">.0</span><span class="number">.51</span></span><br><span class="line">work1:<span class="number">192.168</span><span class="number">.0</span><span class="number">.52</span></span><br><span class="line">work2:<span class="number">192.168</span><span class="number">.0</span><span class="number">.53</span></span><br></pre></td></tr></table></figure>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h4><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">ssh <span class="number">192.168</span><span class="number">.0</span><span class="number">.51</span> <span class="string">" hostnamectl set-hostname controller"</span></span><br><span class="line">ssh <span class="number">192.168</span><span class="number">.0</span><span class="number">.52</span> <span class="string">" hostnamectl set-hostname work1"</span></span><br><span class="line">ssh <span class="number">192.168</span><span class="number">.0</span><span class="number">.53</span> <span class="string">" hostnamectl set-hostname work2"</span></span><br></pre></td></tr></table></figure>
<h4 id="设置主机名解析"><a href="#设置主机名解析" class="headerlink" title="设置主机名解析"></a>设置主机名解析</h4><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">echo "<span class="number">192.168.0.51</span> controller</span><br><span class="line"><span class="number">192.168.0.52</span> work1</span><br><span class="line"><span class="number">192.168.0.53</span> work2"&gt;&gt;/etc/hosts</span><br></pre></td></tr></table></figure>
<h4 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id <span class="number">192.168</span><span class="number">.0</span><span class="number">.51</span></span><br><span class="line">ssh-copy-id <span class="number">192.168</span><span class="number">.0</span><span class="number">.52</span></span><br><span class="line">ssh-copy-id <span class="number">192.168</span><span class="number">.0</span><span class="number">.53</span></span><br><span class="line"></span><br><span class="line">SSHVerify</span><br></pre></td></tr></table></figure>
<blockquote>
<p>for x in <code>grep -o -.* /etc/hosts</code>;do echo $x; ssh-copy-id $x ;done</p>
</blockquote>
<h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">systemctl</span> <span class="string">stop firewalld</span></span><br><span class="line"><span class="attr">iptables</span> <span class="string">-L -n</span></span><br></pre></td></tr></table></figure>
<h4 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">setenforce <span class="number">0</span></span><br><span class="line">sed -i <span class="string">"s/^SELINUX=enforcing/SELINUX=disabled/g"</span> /etc/selinux/<span class="built_in">config</span></span><br></pre></td></tr></table></figure>
<h4 id="关闭-swap"><a href="#关闭-swap" class="headerlink" title="关闭 swap"></a>关闭 swap</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">swapoff -<span class="selector-tag">a</span> sed -<span class="selector-tag">i</span> <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span><br></pre></td></tr></table></figure>
<h3 id="NTP-配置"><a href="#NTP-配置" class="headerlink" title="NTP 配置"></a>NTP 配置</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">yum install chrony -y</span><br><span class="line"><span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line">sed -i <span class="string">"/^server/d"</span> <span class="regexp">/etc/</span>chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp1.cloud.aliyuncs.com iburst"</span> <span class="regexp">/etc/</span>chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp2.cloud.aliyuncs.com iburst"</span> <span class="regexp">/etc/</span>chrony.conf </span><br><span class="line">sed -i <span class="string">"/#allow/s/#//"</span> <span class="regexp">/etc/</span>chrony.conf</span><br><span class="line">systemctl enable chronyd.service;systemctl start chronyd.service</span><br></pre></td></tr></table></figure>
<h3 id="生成随机密码（安装时使用统一密码）"><a href="#生成随机密码（安装时使用统一密码）" class="headerlink" title="生成随机密码（安装时使用统一密码）"></a>生成随机密码（安装时使用统一密码）</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">openssl <span class="keyword">rand</span> -<span class="keyword">hex</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h3 id="设置-train-版本的源"><a href="#设置-train-版本的源" class="headerlink" title="设置 train 版本的源"></a>设置 train 版本的源</h3><figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">yum install https:<span class="comment">//rdoproject.org/repos/rdo-release.rpm</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 安装所需的yum 库</span></span><br><span class="line">yum -<span class="symbol">y</span> install centos-release-openstack-train</span><br><span class="line">yum repolist</span><br><span class="line">yum upgrade -<span class="symbol">y</span></span><br><span class="line">yum install python-openstackclient -<span class="symbol">y</span></span><br><span class="line">yum install openstack-selinux -<span class="symbol">y</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> mariadb mariadb-<span class="keyword">server</span> python2-PyMySQL -y</span><br><span class="line"> </span><br><span class="line">vim /etc/my.cnf.d/openstack.cnf</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line">bind-address = <span class="number">192.168</span><span class="number">.0</span><span class="number">.51</span></span><br><span class="line"><span class="keyword">default</span>-<span class="keyword">storage</span>-<span class="keyword">engine</span> = <span class="keyword">innodb</span></span><br><span class="line">innodb_file_per_table</span><br><span class="line">max_connections = <span class="number">4096</span></span><br><span class="line"><span class="keyword">collation</span>-<span class="keyword">server</span> = utf8_general_ci</span><br><span class="line"><span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span> = utf8</span><br><span class="line"> </span><br><span class="line">systemctl <span class="keyword">enable</span> mariadb.service</span><br><span class="line">systemctl <span class="keyword">start</span> mariadb.service</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 数据库安装</span></span><br><span class="line"><span class="comment">#validate</span></span><br><span class="line">netstat -ntlp |grep <span class="number">3306</span></span><br><span class="line"> </span><br><span class="line">mysql_secure_installation</span><br><span class="line">n y....</span><br></pre></td></tr></table></figure>
<h3 id="消息队列安装"><a href="#消息队列安装" class="headerlink" title="消息队列安装"></a>消息队列安装</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">安装 rabbitmq</span><br><span class="line">yum install rabbitmq-<span class="keyword">server</span> -y</span><br><span class="line"> </span><br><span class="line">systemctl <span class="keyword">enable</span> rabbitmq-<span class="keyword">server</span>.service</span><br><span class="line">systemctl <span class="keyword">start</span> rabbitmq-<span class="keyword">server</span>.service</span><br><span class="line"> </span><br><span class="line"><span class="meta">#validate</span></span><br><span class="line">netstat -ntlp|grep <span class="number">25672</span></span><br><span class="line"></span><br><span class="line"># 添加用户，设置权限</span><br><span class="line">rabbitmqctl add_user openstack RABBIT_PASS</span><br><span class="line">rabbitmqctl set_permissions openstack ".*" ".*" ".*"</span><br></pre></td></tr></table></figure>
<h3 id="Memcached-安装"><a href="#Memcached-安装" class="headerlink" title="Memcached 安装"></a>Memcached 安装</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install memcached python-memcached -y</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">vim</span> <span class="string">/etc/sysconfig/memcached</span></span><br><span class="line"><span class="attr">OPTIONS</span>=<span class="string">"-l 127.0.0.1,::1,controller"</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">systemctl</span> <span class="string">enable memcached.service</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start memcached.service</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># validate</span></span><br><span class="line"><span class="attr">netstat</span> <span class="string">-ntlp |grep 11211</span></span><br></pre></td></tr></table></figure>
<h3 id="Etcd-安装"><a href="#Etcd-安装" class="headerlink" title="Etcd 安装"></a>Etcd 安装</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum install etcd -y</span><br><span class="line"> </span><br><span class="line">vim /etc/etcd/etcd.conf</span><br><span class="line"> </span><br><span class="line"><span class="comment">#[Member]</span></span><br><span class="line"><span class="attribute">ETCD_DATA_DIR</span>=<span class="string">"/var/lib/etcd/default.etcd"</span></span><br><span class="line"><span class="attribute">ETCD_LISTEN_PEER_URLS</span>=<span class="string">"http://10.0.0.11:2380"</span></span><br><span class="line"><span class="attribute">ETCD_LISTEN_CLIENT_URLS</span>=<span class="string">"http://10.0.0.11:2379"</span></span><br><span class="line"><span class="attribute">ETCD_NAME</span>=<span class="string">"controller"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#[Clustering]</span></span><br><span class="line"><span class="attribute">ETCD_INITIAL_ADVERTISE_PEER_URLS</span>=<span class="string">"http://10.0.0.11:2380"</span></span><br><span class="line"><span class="attribute">ETCD_ADVERTISE_CLIENT_URLS</span>=<span class="string">"http://10.0.0.11:2379"</span></span><br><span class="line"><span class="attribute">ETCD_INITIAL_CLUSTER</span>=<span class="string">"controller=http://10.0.0.11:2380"</span></span><br><span class="line"><span class="attribute">ETCD_INITIAL_CLUSTER_TOKEN</span>=<span class="string">"etcd-cluster-01"</span></span><br><span class="line"><span class="attribute">ETCD_INITIAL_CLUSTER_STATE</span>=<span class="string">"new"</span></span><br><span class="line"> </span><br><span class="line">systemctl <span class="builtin-name">enable</span> etcd</span><br><span class="line">systemctl start etcd</span><br><span class="line"> </span><br><span class="line">netstat -ntlp|grep etcd</span><br></pre></td></tr></table></figure>
<h2 id="Openstack-组件安装"><a href="#Openstack-组件安装" class="headerlink" title="Openstack 组件安装"></a>Openstack 组件安装</h2><h3 id="KEYSTONE"><a href="#KEYSTONE" class="headerlink" title="KEYSTONE"></a>KEYSTONE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> keystone;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> keystone.* <span class="keyword">TO</span> <span class="string">'keystone'</span>@<span class="string">'localhost'</span> \</span><br><span class="line"><span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'KEYSTONE_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> keystone.* <span class="keyword">TO</span> <span class="string">'keystone'</span>@<span class="string">'%'</span> \</span><br><span class="line"><span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'KEYSTONE_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">yum <span class="keyword">install</span> openstack-keystone httpd mod_wsgi -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cp /etc/keystone/keystone.conf /etc/keystone/keystone.conf.bak</span><br><span class="line">grep -v -e <span class="string">"^$"</span> -e <span class="string">"#"</span> /etc/keystone/keystone.conf.bak &gt;/etc/keystone/keystone.conf</span><br><span class="line"> </span><br><span class="line">/etc/keystone/keystone.conf</span><br><span class="line">[<span class="keyword">database</span>]</span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line"><span class="keyword">connection</span> = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span><br><span class="line">[token]</span><br><span class="line"><span class="comment"># token 使用的方式</span></span><br><span class="line">provider = fernet</span><br><span class="line"></span><br><span class="line">初始化身份认证服务的数据库</span><br><span class="line">su -s /<span class="keyword">bin</span>/sh -c <span class="string">"keystone-manage db_sync"</span> keystone</span><br><span class="line"> </span><br><span class="line">查看创建的表</span><br><span class="line"><span class="comment">#validate</span></span><br><span class="line">mysql keystone -e <span class="string">"show tables;"</span></span><br><span class="line"> </span><br><span class="line">// 初始化Fernet <span class="keyword">keys</span></span><br><span class="line">keystone-manage fernet_setup <span class="comment">--keystone-user keystone --keystone-group keystone</span></span><br><span class="line"> </span><br><span class="line">ls /etc/keystone/fernet-<span class="keyword">keys</span>/</span><br><span class="line"> </span><br><span class="line">// 认证设置使用的系统用户，组</span><br><span class="line">keystone-manage credential_setup <span class="comment">--keystone-user keystone --keystone-group keystone</span></span><br><span class="line"> </span><br><span class="line">// 建立身份服务</span><br><span class="line">keystone-manage bootstrap <span class="comment">--bootstrap-password ADMIN_PASS \</span></span><br><span class="line">  <span class="comment">--bootstrap-admin-url http://controller:5000/v3/ \</span></span><br><span class="line">  <span class="comment">--bootstrap-internal-url http://controller:5000/v3/ \</span></span><br><span class="line">  <span class="comment">--bootstrap-public-url http://controller:5000/v3/ \</span></span><br><span class="line">  <span class="comment">--bootstrap-region-id RegionOne</span></span><br><span class="line"> </span><br><span class="line">// Apache 服务配置</span><br><span class="line">vim +<span class="number">95</span> /etc/httpd/conf/httpd.conf</span><br><span class="line">ServerName controller</span><br><span class="line"> </span><br><span class="line"><span class="keyword">ln</span> -s /usr/<span class="keyword">share</span>/keystone/wsgi-keystone.conf /etc/httpd/conf.d/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># systemctl enable httpd.service</span></span><br><span class="line"><span class="comment"># systemctl start httpd.service</span></span><br><span class="line"> </span><br><span class="line">// 设置管理员环境变量</span><br><span class="line"><span class="keyword">export</span> OS_USERNAME=<span class="keyword">admin</span></span><br><span class="line"><span class="keyword">export</span> OS_PASSWORD=ADMIN_PASS</span><br><span class="line"><span class="keyword">export</span> OS_PROJECT_NAME=<span class="keyword">admin</span></span><br><span class="line"><span class="keyword">export</span> OS_USER_DOMAIN_NAME=<span class="keyword">Default</span></span><br><span class="line"><span class="keyword">export</span> OS_PROJECT_DOMAIN_NAME=<span class="keyword">Default</span></span><br><span class="line"><span class="keyword">export</span> OS_AUTH_URL=<span class="keyword">http</span>://controller:<span class="number">5000</span>/v3</span><br><span class="line"><span class="keyword">export</span> OS_IDENTITY_API_VERSION=<span class="number">3</span></span><br><span class="line"> </span><br><span class="line">// 创建服务实体和API端点</span><br><span class="line">创建一个域(<span class="keyword">default</span> 域 默认存在)</span><br><span class="line">openstack <span class="keyword">domain</span> <span class="keyword">create</span> <span class="comment">--description "An Example Domain" example</span></span><br><span class="line"> </span><br><span class="line">创建一个服务， 隶属于 <span class="keyword">default</span> 域</span><br><span class="line">openstack <span class="keyword">project</span> <span class="keyword">create</span> <span class="comment">--domain default --description "Service Project" service</span></span><br><span class="line"> </span><br><span class="line">创建一个项目，隶属于 <span class="keyword">default</span> 域</span><br><span class="line">openstack <span class="keyword">project</span> <span class="keyword">create</span> <span class="comment">--domain default --description "Demo Project" myproject</span></span><br><span class="line"> </span><br><span class="line">创建一个用户，隶属于 <span class="keyword">default</span> 域</span><br><span class="line">openstack <span class="keyword">user</span> <span class="keyword">create</span> <span class="comment">--domain default --password-prompt myuser</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">// 创建一个角色</span><br><span class="line">openstack <span class="keyword">role</span> <span class="keyword">create</span> myrole</span><br><span class="line"> </span><br><span class="line">// 关联项目，用户，角色</span><br><span class="line">openstack <span class="keyword">role</span> <span class="keyword">add</span> <span class="comment">--project myproject --user myuser myrole</span></span><br><span class="line"> </span><br><span class="line">// 删除环境变量</span><br><span class="line">unset OS_AUTH_URL OS_PASSWORD</span><br><span class="line"> </span><br><span class="line">// 获取一个token</span><br><span class="line">// api</span><br><span class="line">openstack <span class="comment">--os-auth-url http://controller:5000/v3 \</span></span><br><span class="line">// 项目域 <span class="comment">--os-project-domain-name Default</span></span><br><span class="line">// 用户域</span><br><span class="line"><span class="comment">--os-user-domain-name Default</span></span><br><span class="line">// 项目名 <span class="comment">--os-project-name admin</span></span><br><span class="line">// 用户名</span><br><span class="line"><span class="comment">--os-username admin token issue</span></span><br><span class="line">// 密码</span><br><span class="line">ADMIN_PASS</span><br><span class="line"> </span><br><span class="line">// 获取<span class="keyword">admin</span> 管理员的token</span><br><span class="line">openstack <span class="comment">--os-auth-url http://controller:5000/v3 \</span></span><br><span class="line">  <span class="comment">--os-project-domain-name Default --os-user-domain-name Default \</span></span><br><span class="line">  <span class="comment">--os-project-name admin --os-username admin token issue</span></span><br><span class="line"> </span><br><span class="line">ADMIN_PASS</span><br><span class="line"> </span><br><span class="line">// 获取一个 myproject 的 token</span><br><span class="line">openstack <span class="comment">--os-auth-url http://controller:5000/v3 \</span></span><br><span class="line">  <span class="comment">--os-project-domain-name Default --os-user-domain-name Default \</span></span><br><span class="line">  <span class="comment">--os-project-name myproject --os-username myuser token issue</span></span><br><span class="line"> </span><br><span class="line"><span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">设置一个管理员的环境变量 <span class="keyword">admin</span>-openrc</span><br><span class="line">echo <span class="string">"export OS_PROJECT_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_USER_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_PROJECT_NAME=admin</span></span><br><span class="line"><span class="string">export OS_USERNAME=admin</span></span><br><span class="line"><span class="string">export OS_PASSWORD=ADMIN_PASS</span></span><br><span class="line"><span class="string">export OS_AUTH_URL=http://controller:5000/v3</span></span><br><span class="line"><span class="string">export OS_IDENTITY_API_VERSION=3</span></span><br><span class="line"><span class="string">export OS_IMAGE_API_VERSION=2"</span> &gt;<span class="keyword">admin</span>-openrc</span><br><span class="line"> </span><br><span class="line">设置一个demo的环境变量 demo-openrc</span><br><span class="line">echo <span class="string">"export OS_PROJECT_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_USER_DOMAIN_NAME=Default</span></span><br><span class="line"><span class="string">export OS_PROJECT_NAME=myproject</span></span><br><span class="line"><span class="string">export OS_USERNAME=myuser</span></span><br><span class="line"><span class="string">export OS_PASSWORD=123456</span></span><br><span class="line"><span class="string">export OS_AUTH_URL=http://controller:5000/v3</span></span><br><span class="line"><span class="string">export OS_IDENTITY_API_VERSION=3</span></span><br><span class="line"><span class="string">export OS_IMAGE_API_VERSION=2"</span>&gt;demo-openrc</span><br><span class="line"> </span><br><span class="line">// 获得一个token</span><br><span class="line">. <span class="keyword">admin</span>-openrc</span><br><span class="line">openstack token issue</span><br><span class="line"> </span><br><span class="line">. demo-openrc</span><br><span class="line">openstack token issue</span><br></pre></td></tr></table></figure>
<h3 id="Glance-安装"><a href="#Glance-安装" class="headerlink" title="Glance 安装"></a>Glance 安装</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> glance;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> glance.* <span class="keyword">TO</span> <span class="string">'glance'</span>@<span class="string">'localhost'</span> \</span><br><span class="line">  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'GLANCE_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> glance.* <span class="keyword">TO</span> <span class="string">'glance'</span>@<span class="string">'%'</span> \</span><br><span class="line">  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'GLANCE_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line">// 注册 glance</span><br><span class="line">. admin-openrc</span><br><span class="line">openstack user <span class="keyword">create</span> <span class="comment">--domain default --password-prompt glance</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">openstack <span class="keyword">role</span> <span class="keyword">add</span> <span class="comment">--project service --user glance admin</span></span><br><span class="line"> </span><br><span class="line">// 创建服务</span><br><span class="line">openstack service <span class="keyword">create</span> <span class="comment">--name glance \</span></span><br><span class="line">  <span class="comment">--description "OpenStack Image" image</span></span><br><span class="line"> </span><br><span class="line">// 创建 <span class="keyword">public</span> 网络 image</span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne image public http://controller:9292</span></span><br><span class="line"> </span><br><span class="line">// 创建 internal 网络 image</span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne image internal http://controller:9292</span></span><br><span class="line"> </span><br><span class="line">// 创建 <span class="keyword">admin</span> 网络 image</span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne image admin http://controller:9292</span></span><br><span class="line"> </span><br><span class="line">yum <span class="keyword">install</span> openstack-glance -y</span><br><span class="line"> </span><br><span class="line">cp /etc/glance/glance-api.conf /etc/glance/glance-api.conf.bak</span><br><span class="line">grep -Ev <span class="string">"^$|#"</span> /etc/glance/glance-api.conf.bak &gt; /etc/glance/glance-api.conf</span><br><span class="line"> </span><br><span class="line">vim /etc/glance/glance-api.conf</span><br><span class="line">[<span class="keyword">database</span>]</span><br><span class="line"><span class="keyword">connection</span> = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri  = <span class="keyword">http</span>://controller:<span class="number">5000</span></span><br><span class="line">auth_url = <span class="keyword">http</span>://controller:<span class="number">5000</span></span><br><span class="line">memcached_servers = controller:<span class="number">11211</span></span><br><span class="line">auth_type = <span class="keyword">password</span></span><br><span class="line">project_domain_name = <span class="keyword">Default</span></span><br><span class="line">user_domain_name = <span class="keyword">Default</span></span><br><span class="line">project_name = service</span><br><span class="line">username = glance</span><br><span class="line"><span class="keyword">password</span> = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">[paste_deploy]</span><br><span class="line">flavor = keystone</span><br><span class="line"> </span><br><span class="line">[glance_store]</span><br><span class="line">stores = <span class="keyword">file</span>,<span class="keyword">http</span></span><br><span class="line">default_store = <span class="keyword">file</span></span><br><span class="line">filesystem_store_datadir = /<span class="keyword">var</span>/lib/glance/images/</span><br><span class="line"> </span><br><span class="line">su -s /<span class="keyword">bin</span>/sh -c <span class="string">"glance-manage db_sync"</span> glance</span><br><span class="line"> </span><br><span class="line"><span class="comment">#validate</span></span><br><span class="line">mysql glance -e <span class="string">"show tables;"</span></span><br><span class="line"> </span><br><span class="line">systemctl <span class="keyword">enable</span> openstack-glance-api.service</span><br><span class="line">systemctl <span class="keyword">start</span> openstack-glance-api.service</span><br><span class="line"> </span><br><span class="line">netstat -nltp |grep <span class="number">9292</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">// 创建一个镜像</span><br><span class="line"> </span><br><span class="line">. <span class="keyword">admin</span>-openrc</span><br><span class="line"> </span><br><span class="line"> wget <span class="keyword">http</span>://download.cirros-cloud.net/<span class="number">0.4</span><span class="number">.0</span>/cirros<span class="number">-0.4</span><span class="number">.0</span>-x86_64-disk.img</span><br><span class="line"> </span><br><span class="line">glance image-<span class="keyword">create</span> <span class="comment">--name "cirros" \</span></span><br><span class="line">  <span class="comment">--file cirros-0.4.0-x86_64-disk.img \</span></span><br><span class="line">  <span class="comment">--disk-format qcow2 --container-format bare \</span></span><br><span class="line">  <span class="comment">--visibility public</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#Invalid OpenStack Identity credentials.</span></span><br><span class="line">配置文件密码错误，修改后重启服务</span><br><span class="line"> </span><br><span class="line">glance image-<span class="keyword">list</span></span><br></pre></td></tr></table></figure>
<h3 id="Placement-安装"><a href="#Placement-安装" class="headerlink" title="Placement 安装"></a>Placement 安装</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> placement;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> placement.* <span class="keyword">TO</span> <span class="string">'placement'</span>@<span class="string">'localhost'</span>  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'PLACEMENT_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> placement.* <span class="keyword">TO</span> <span class="string">'placement'</span>@<span class="string">'%'</span>  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'PLACEMENT_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line">. admin-openrc</span><br><span class="line">openstack user <span class="keyword">create</span> <span class="comment">--domain default --password-prompt placement</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">openstack <span class="keyword">role</span> <span class="keyword">add</span> <span class="comment">--project service --user placement admin</span></span><br><span class="line"> </span><br><span class="line">openstack service <span class="keyword">create</span> <span class="comment">--name placement \</span></span><br><span class="line">  <span class="comment">--description "Placement API" placement</span></span><br><span class="line"> </span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne placement public http://controller:8778</span></span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne placement internal http://controller:8778</span></span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne placement admin http://controller:8778</span></span><br><span class="line"> </span><br><span class="line">yum <span class="keyword">install</span> openstack-placement-api -y</span><br><span class="line">cp /etc/placement/placement.conf /etc/placement/placement.conf.bak</span><br><span class="line">grep -Ev <span class="string">"#|^$"</span> /etc/placement/placement.conf.bak &gt;/etc/placement/placement.conf</span><br><span class="line"> </span><br><span class="line">vim /etc/placement/placement.conf</span><br><span class="line"> </span><br><span class="line">[placement_database]</span><br><span class="line"><span class="keyword">connection</span> = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement</span><br><span class="line"> </span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line"> </span><br><span class="line">[keystone_authtoken]</span><br><span class="line">auth_url = <span class="keyword">http</span>://controller:<span class="number">5000</span>/v3</span><br><span class="line">memcached_servers = controller:<span class="number">11211</span></span><br><span class="line">auth_type = <span class="keyword">password</span></span><br><span class="line">project_domain_name = <span class="keyword">Default</span></span><br><span class="line">user_domain_name = <span class="keyword">Default</span></span><br><span class="line">project_name = service</span><br><span class="line">username = placement</span><br><span class="line"><span class="keyword">password</span> = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">su -s /<span class="keyword">bin</span>/sh -c <span class="string">"placement-manage db sync"</span> placement</span><br><span class="line"> </span><br><span class="line">/usr/lib/python2<span class="number">.7</span>/site-packages/pymysql/cursors.py:<span class="number">170</span>: <span class="keyword">Warning</span>: (<span class="number">1280</span>, u<span class="string">"Name 'alembic_version_pkc' ignored for PRIMARY key."</span>)</span><br><span class="line">  <span class="keyword">result</span> = self._query(<span class="keyword">query</span>)</span><br><span class="line"> </span><br><span class="line">mysql placement -e <span class="string">"show tables;"</span></span><br><span class="line"> </span><br><span class="line">systemctl restart httpd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># httpd 报 403 拒绝访问，可以使用 uwsgi 试试</span></span><br><span class="line"><span class="comment">#pip install -i https://pypi.tuna.tsinghua.edu.cn/simple uwsgi</span></span><br><span class="line"><span class="comment">#uwsgi -d -M --http :8778 --wsgi-file /usr/bin/placement-api --processes 2 --threads 10</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">curl -v <span class="keyword">http</span>://controller:<span class="number">8778</span></span><br><span class="line"><span class="comment">#httpd 报 403 拒绝访问</span></span><br><span class="line">AH01630: <span class="keyword">client</span> denied <span class="keyword">by</span> <span class="keyword">server</span> configuration: /usr/<span class="keyword">bin</span>/placement-api</span><br><span class="line"> </span><br><span class="line"> vim /etc/httpd/conf.d/<span class="number">00</span>-placement-api.conf</span><br><span class="line"> </span><br><span class="line">&lt;<span class="keyword">Directory</span> /usr/<span class="keyword">bin</span>&gt;</span><br><span class="line">    &lt;IfVersion &gt;= <span class="number">2.4</span>&gt;</span><br><span class="line">        Require <span class="keyword">all</span> granted</span><br><span class="line">    &lt;/IfVersion&gt;</span><br><span class="line">    &lt;IfVersion &lt; <span class="number">2.4</span>&gt;</span><br><span class="line">        <span class="keyword">Order</span> <span class="keyword">allow</span>,deny</span><br><span class="line">        <span class="keyword">Allow</span> <span class="keyword">from</span> <span class="keyword">all</span></span><br><span class="line">    &lt;/IfVersion&gt;</span><br><span class="line">&lt;/<span class="keyword">Directory</span>&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">. <span class="keyword">admin</span>-openrc</span><br><span class="line"> </span><br><span class="line">placement-<span class="keyword">status</span> <span class="keyword">upgrade</span> <span class="keyword">check</span></span><br><span class="line"> </span><br><span class="line">pip <span class="keyword">install</span> osc-placement</span><br><span class="line"> </span><br><span class="line">openstack <span class="comment">--os-placement-api-version 1.2 resource class list --sort-column name</span></span><br><span class="line"> </span><br><span class="line">openstack <span class="comment">--os-placement-api-version 1.6 trait list --sort-column name</span></span><br></pre></td></tr></table></figure>
<h3 id="Nova-控制节点安装"><a href="#Nova-控制节点安装" class="headerlink" title="Nova 控制节点安装"></a>Nova 控制节点安装</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> nova_api;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> nova;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> nova_cell0;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_api.* <span class="keyword">TO</span> <span class="string">'nova'</span>@<span class="string">'localhost'</span> \</span><br><span class="line">  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'NOVA_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_api.* <span class="keyword">TO</span> <span class="string">'nova'</span>@<span class="string">'%'</span> \</span><br><span class="line">  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'NOVA_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova.* <span class="keyword">TO</span> <span class="string">'nova'</span>@<span class="string">'localhost'</span> \</span><br><span class="line">  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'NOVA_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova.* <span class="keyword">TO</span> <span class="string">'nova'</span>@<span class="string">'%'</span> \</span><br><span class="line">  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'NOVA_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_cell0.* <span class="keyword">TO</span> <span class="string">'nova'</span>@<span class="string">'localhost'</span> \</span><br><span class="line">  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'NOVA_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova_cell0.* <span class="keyword">TO</span> <span class="string">'nova'</span>@<span class="string">'%'</span> \</span><br><span class="line">  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'NOVA_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">. admin-openrc</span><br><span class="line">// 创建一个nova 用户</span><br><span class="line">openstack user <span class="keyword">create</span> <span class="comment">--domain default --password-prompt nova</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">// 创建一个nova 到 <span class="keyword">admin</span> 角色</span><br><span class="line">openstack <span class="keyword">role</span> <span class="keyword">add</span> <span class="comment">--project service --user nova admin</span></span><br><span class="line"> </span><br><span class="line">// <span class="keyword">Create</span> the nova service entity</span><br><span class="line">openstack service <span class="keyword">create</span> <span class="comment">--name nova \</span></span><br><span class="line">  <span class="comment">--description "OpenStack Compute" compute</span></span><br><span class="line"> </span><br><span class="line">// <span class="keyword">Create</span> the <span class="keyword">Compute</span> API service endpoints</span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne compute public http://controller:8774/v2.1</span></span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne compute internal http://controller:8774/v2.1</span></span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne compute admin http://controller:8774/v2.1</span></span><br><span class="line"> </span><br><span class="line">yum <span class="keyword">install</span> openstack-nova-api openstack-nova-conductor \</span><br><span class="line">  openstack-nova-novncproxy openstack-nova-scheduler -y</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">cp /etc/nova/nova.conf /etc/nova/nova.conf.bak</span><br><span class="line">grep -Ev <span class="string">"^$|#"</span> /etc/nova/nova.conf.bak &gt; /etc/nova/nova.conf</span><br><span class="line"> </span><br><span class="line">vim /etc/nova/nova.conf</span><br><span class="line">[<span class="keyword">DEFAULT</span>]</span><br><span class="line">enabled_apis = osapi_compute,metadata</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller:<span class="number">5672</span>/</span><br><span class="line">my_ip = <span class="number">192.168</span><span class="number">.0</span><span class="number">.51</span></span><br><span class="line">use_neutron = <span class="literal">true</span></span><br><span class="line">firewall_driver = nova.virt.firewall.NoopFirewallDriver</span><br><span class="line"> </span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line"> </span><br><span class="line">[api_database]</span><br><span class="line"><span class="keyword">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api</span><br><span class="line"> </span><br><span class="line">[barbican]</span><br><span class="line">[<span class="keyword">cache</span>]</span><br><span class="line">[cinder]</span><br><span class="line">[<span class="keyword">compute</span>]</span><br><span class="line">[conductor]</span><br><span class="line">[console]</span><br><span class="line">[consoleauth]</span><br><span class="line">[cors]</span><br><span class="line">[<span class="keyword">database</span>]</span><br><span class="line"><span class="keyword">connection</span> = mysql+pymysql://nova:NOVA_DBPASS@controller/nova</span><br><span class="line"> </span><br><span class="line">[devices]</span><br><span class="line">[ephemeral_storage_encryption]</span><br><span class="line">[filter_scheduler]</span><br><span class="line">[glance]</span><br><span class="line">api_servers = <span class="keyword">http</span>://controller:<span class="number">9292</span></span><br><span class="line"> </span><br><span class="line">[guestfs]</span><br><span class="line">[healthcheck]</span><br><span class="line">[hyperv]</span><br><span class="line">[ironic]</span><br><span class="line">[key_manager]</span><br><span class="line">[keystone]</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = <span class="keyword">http</span>://controller:<span class="number">5000</span>/</span><br><span class="line">auth_url = <span class="keyword">http</span>://controller:<span class="number">5000</span>/</span><br><span class="line">memcached_servers = controller:<span class="number">11211</span></span><br><span class="line">auth_type = <span class="keyword">password</span></span><br><span class="line">project_domain_name = <span class="keyword">Default</span></span><br><span class="line">user_domain_name = <span class="keyword">Default</span></span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line"><span class="keyword">password</span> = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">[libvirt]</span><br><span class="line">[metrics]</span><br><span class="line">[mks]</span><br><span class="line">[neutron]</span><br><span class="line">[notifications]</span><br><span class="line">[osapi_v21]</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /<span class="keyword">var</span>/lib/nova/tmp</span><br><span class="line"> </span><br><span class="line">[oslo_messaging_amqp]</span><br><span class="line">[oslo_messaging_kafka]</span><br><span class="line">[oslo_messaging_notifications]</span><br><span class="line">[oslo_messaging_rabbit]</span><br><span class="line">[oslo_middleware]</span><br><span class="line">[oslo_policy]</span><br><span class="line">[pci]</span><br><span class="line">[placement]</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_domain_name = <span class="keyword">Default</span></span><br><span class="line">project_name = service</span><br><span class="line">auth_type = <span class="keyword">password</span></span><br><span class="line">user_domain_name = <span class="keyword">Default</span></span><br><span class="line">auth_url = <span class="keyword">http</span>://controller:<span class="number">5000</span>/v3</span><br><span class="line">username = placement</span><br><span class="line"><span class="keyword">password</span> = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">[powervm]</span><br><span class="line">[privsep]</span><br><span class="line">[profiler]</span><br><span class="line">[<span class="keyword">quota</span>]</span><br><span class="line">[rdp]</span><br><span class="line">[remote_debug]</span><br><span class="line">[scheduler]</span><br><span class="line">[serial_console]</span><br><span class="line">[service_user]</span><br><span class="line">[spice]</span><br><span class="line">[upgrade_levels]</span><br><span class="line">[vault]</span><br><span class="line">[vendordata_dynamic_auth]</span><br><span class="line">[vmware]</span><br><span class="line">[vnc]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">server_listen = $my_ip</span><br><span class="line">server_proxyclient_address = $my_ip</span><br><span class="line"> </span><br><span class="line">[workarounds]</span><br><span class="line">[wsgi]</span><br><span class="line">[xenserver]</span><br><span class="line">[xvp]</span><br><span class="line">[zvm]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">su -s /<span class="keyword">bin</span>/sh -c <span class="string">"nova-manage api_db sync"</span> nova</span><br><span class="line"> </span><br><span class="line">mysql nova_api -e <span class="string">"show tables;"</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">Register</span> the cell0 <span class="keyword">database</span></span><br><span class="line">su -s /<span class="keyword">bin</span>/sh -c <span class="string">"nova-manage cell_v2 map_cell0"</span> nova</span><br><span class="line"> </span><br><span class="line"><span class="keyword">Create</span> the cell1 cell</span><br><span class="line">su -s /<span class="keyword">bin</span>/sh -c <span class="string">"nova-manage cell_v2 create_cell --name=cell1 --verbose"</span> nova</span><br><span class="line"> </span><br><span class="line">Populate the nova <span class="keyword">database</span></span><br><span class="line">su -s /<span class="keyword">bin</span>/sh -c <span class="string">"nova-manage db sync"</span> nova<span class="string">'</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Verify nova cell0 and cell1 are registered correctly</span></span><br><span class="line"><span class="string">su -s /bin/sh -c "nova-manage cell_v2 list_cells" nova</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">#validate</span></span><br><span class="line"><span class="string">mysql nova -e "show tables;"</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">systemctl enable \</span></span><br><span class="line"><span class="string">    openstack-nova-api.service \</span></span><br><span class="line"><span class="string">    openstack-nova-scheduler.service \</span></span><br><span class="line"><span class="string">    openstack-nova-conductor.service \</span></span><br><span class="line"><span class="string">    openstack-nova-novncproxy.service</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">systemctl start \</span></span><br><span class="line"><span class="string">    openstack-nova-api.service \</span></span><br><span class="line"><span class="string">    openstack-nova-scheduler.service \</span></span><br><span class="line"><span class="string">    openstack-nova-conductor.service \</span></span><br><span class="line"><span class="string">    openstack-nova-novncproxy.service</span></span><br></pre></td></tr></table></figure>
<h3 id="Neutron-控制节点安装"><a href="#Neutron-控制节点安装" class="headerlink" title="Neutron 控制节点安装"></a>Neutron 控制节点安装</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> neutron;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> neutron.* <span class="keyword">TO</span> <span class="string">'neutron'</span>@<span class="string">'localhost'</span> \</span><br><span class="line">  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'NEUTRON_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> neutron.* <span class="keyword">TO</span> <span class="string">'neutron'</span>@<span class="string">'%'</span> \</span><br><span class="line">  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'NEUTRON_DBPASS'</span>;</span><br><span class="line"> </span><br><span class="line">. admin-openrc</span><br><span class="line">// <span class="keyword">Create</span> the neutron <span class="keyword">user</span></span><br><span class="line">openstack <span class="keyword">user</span> <span class="keyword">create</span> <span class="comment">--domain default --password-prompt neutron</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">// <span class="keyword">Add</span> the <span class="keyword">admin</span> <span class="keyword">role</span> <span class="keyword">to</span> the neutron <span class="keyword">user</span></span><br><span class="line">openstack <span class="keyword">role</span> <span class="keyword">add</span> <span class="comment">--project service --user neutron admin</span></span><br><span class="line"> </span><br><span class="line">// <span class="keyword">Create</span> the neutron service entity</span><br><span class="line">openstack service <span class="keyword">create</span> <span class="comment">--name neutron \</span></span><br><span class="line">  <span class="comment">--description "OpenStack Networking" network</span></span><br><span class="line"> </span><br><span class="line">// <span class="keyword">Create</span> the Networking service API endpoints</span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne network public http://controller:9696</span></span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne network internal http://controller:9696</span></span><br><span class="line">openstack endpoint <span class="keyword">create</span> <span class="comment">--region RegionOne network admin http://controller:9696</span></span><br><span class="line"> </span><br><span class="line">// linux bridge 支持</span><br><span class="line">lsmod |grep br_netfilter</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"> </span><br><span class="line">sysctl -a |grep <span class="string">"net.bridge.bridge"</span></span><br><span class="line">echo <span class="string">"modprobe br_netfilter"</span> &gt;/etc/sysconfig/modules/br_netfilter.modules</span><br><span class="line"> </span><br><span class="line">sysctl -a |grep net.bridge.bridge-nf-<span class="keyword">call</span>-iptables</span><br><span class="line">sysctl -a |grep net.bridge.bridge-nf-<span class="keyword">call</span>-ip6tables</span><br><span class="line"> </span><br><span class="line">// 选择其中一个网络类型安装</span><br><span class="line">//  非路由模式</span><br><span class="line">Networking <span class="keyword">Option</span> <span class="number">1</span>: Provider networks</span><br><span class="line">// 路由模式</span><br><span class="line">Networking <span class="keyword">Option</span> <span class="number">2</span>: <span class="keyword">Self</span>-service networks</span><br><span class="line"> </span><br><span class="line">// 配置元数据代理</span><br><span class="line">vim /etc/neutron/metadata_agent.ini</span><br><span class="line">[<span class="keyword">DEFAULT</span>]</span><br><span class="line">nova_metadata_host = controller</span><br><span class="line">metadata_proxy_shared_secret = METADATA_SECRET</span><br><span class="line"> </span><br><span class="line">vim /etc/nova/nova.conf</span><br><span class="line">[neutron]</span><br><span class="line">auth_url = <span class="keyword">http</span>://controller:<span class="number">5000</span></span><br><span class="line">auth_type = <span class="keyword">password</span></span><br><span class="line">project_domain_name = <span class="keyword">default</span></span><br><span class="line">user_domain_name = <span class="keyword">default</span></span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line"><span class="keyword">password</span> = NEUTRON_PASS</span><br><span class="line">service_metadata_proxy = <span class="literal">true</span></span><br><span class="line">metadata_proxy_shared_secret = METADATA_SECRET</span><br><span class="line"> </span><br><span class="line"><span class="comment"># ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf \</span></span><br><span class="line">  <span class="comment">--config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># systemctl restart openstack-nova-api.service</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># systemctl enable neutron-server.service \</span></span><br><span class="line">  neutron-linuxbridge-agent.service \</span><br><span class="line">    neutron-dhcp-agent.service \</span><br><span class="line">  neutron-metadata-agent.service</span><br><span class="line"> </span><br><span class="line"><span class="comment"># systemctl start neutron-server.service \</span></span><br><span class="line">  neutron-linuxbridge-agent.service \</span><br><span class="line">    neutron-dhcp-agent.service \</span><br><span class="line">  neutron-metadata-agent.service</span><br><span class="line"> </span><br><span class="line">// 选择路由模式后执行</span><br><span class="line"><span class="comment"># systemctl enable neutron-l3-agent.service</span></span><br><span class="line"><span class="comment"># systemctl start neutron-l3-agent.service</span></span><br><span class="line"> </span><br><span class="line">neutron <span class="keyword">agent</span>-<span class="keyword">list</span></span><br></pre></td></tr></table></figure>
<h3 id="网络类型分为：桥接型，路由型两种，安装方式也不同。"><a href="#网络类型分为：桥接型，路由型两种，安装方式也不同。" class="headerlink" title="网络类型分为：桥接型，路由型两种，安装方式也不同。"></a>网络类型分为：桥接型，路由型两种，安装方式也不同。</h3><h4 id="桥接型"><a href="#桥接型" class="headerlink" title="桥接型"></a>桥接型</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">yum install openstack-neutron openstack-neutron-ml2 \</span><br><span class="line">  openstack-neutron-linuxbridge ebtables -y</span><br><span class="line"> </span><br><span class="line">cp  <span class="regexp">/etc/</span>neutron<span class="regexp">/neutron.conf  /</span>etc<span class="regexp">/neutron/</span>neutron.conf.bak</span><br><span class="line">grep -Ev <span class="string">"#|^$"</span> <span class="regexp">/etc/</span>neutron<span class="regexp">/neutron.conf.bak &gt;/</span>etc<span class="regexp">/neutron/</span>neutron.conf</span><br><span class="line"> </span><br><span class="line">vim <span class="regexp">/etc/</span>neutron/neutron.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">core_plugin = ml2</span><br><span class="line">service_plugins =</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">notify_nova_on_port_status_changes = <span class="literal">true</span></span><br><span class="line">notify_nova_on_port_data_changes = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">[database]</span><br><span class="line">connection = mysql+<span class="string">pymysql:</span><span class="comment">//neutron:NEUTRON_DBPASS@controller/neutron</span></span><br><span class="line"> </span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = <span class="string">http:</span><span class="comment">//controller:5000</span></span><br><span class="line">auth_url = <span class="string">http:</span><span class="comment">//controller:5000</span></span><br><span class="line">memcached_servers = <span class="string">controller:</span><span class="number">11211</span></span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = <span class="keyword">default</span></span><br><span class="line">user_domain_name = <span class="keyword">default</span></span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">[nova]</span><br><span class="line">auth_url = <span class="string">http:</span><span class="comment">//controller:5000</span></span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = <span class="keyword">default</span></span><br><span class="line">user_domain_name = <span class="keyword">default</span></span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">cp <span class="regexp">/etc/</span>neutron<span class="regexp">/plugins/</span>ml2<span class="regexp">/ml2_conf.ini /</span>etc<span class="regexp">/neutron/</span>plugins<span class="regexp">/ml2/</span>ml2_conf.ini.bak</span><br><span class="line">grep -Ev <span class="string">"#|^$"</span> <span class="regexp">/etc/</span>neutron<span class="regexp">/plugins/</span>ml2<span class="regexp">/ml2_conf.ini.bak &gt;/</span>etc<span class="regexp">/neutron/</span>plugins<span class="regexp">/ml2/</span>ml2_conf.ini</span><br><span class="line"> </span><br><span class="line">vim <span class="regexp">/etc/</span>neutron<span class="regexp">/plugins/</span>ml2/ml2_conf.ini</span><br><span class="line">[ml2]</span><br><span class="line">type_drivers = flat,vlan</span><br><span class="line">tenant_network_types =</span><br><span class="line">mechanism_drivers = linuxbridge</span><br><span class="line">extension_drivers = port_security</span><br><span class="line">[ml2_type_flat]</span><br><span class="line">flat_networks = provider</span><br><span class="line">[securitygroup]</span><br><span class="line">enable_ipset = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">cp <span class="regexp">/etc/</span>neutron<span class="regexp">/plugins/</span>ml2<span class="regexp">/linuxbridge_agent.ini /</span>etc<span class="regexp">/neutron/</span>plugins<span class="regexp">/ml2/</span>linuxbridge_agent.ini.bak</span><br><span class="line">grep -Ev <span class="string">"#|^$"</span> <span class="regexp">/etc/</span>neutron<span class="regexp">/plugins/</span>ml2<span class="regexp">/linuxbridge_agent.ini.bak &gt;/</span>etc<span class="regexp">/neutron/</span>plugins<span class="regexp">/ml2/</span>linuxbridge_agent.ini</span><br><span class="line"> </span><br><span class="line">vim <span class="regexp">/etc/</span>neutron<span class="regexp">/plugins/</span>ml2/linuxbridge_agent.ini</span><br><span class="line">[linux_bridge]</span><br><span class="line">physical_interface_mappings = <span class="string">provider:</span>eth0</span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = <span class="literal">false</span></span><br><span class="line">[securitygroup]</span><br><span class="line">enable_security_group = <span class="literal">true</span></span><br><span class="line">firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br><span class="line"> </span><br><span class="line">cp <span class="regexp">/etc/</span>neutron<span class="regexp">/dhcp_agent.ini /</span>etc<span class="regexp">/neutron/</span>dhcp_agent.ini.bak</span><br><span class="line">grep -Ev <span class="string">"#|^$"</span> <span class="regexp">/etc/</span>neutron<span class="regexp">/dhcp_agent.ini.bak &gt;/</span>etc<span class="regexp">/neutron/</span>dhcp_agent.ini</span><br><span class="line">vim <span class="regexp">/etc/</span>neutron/dhcp_agent.ini</span><br><span class="line"> </span><br><span class="line">[DEFAULT]</span><br><span class="line">interface_driver = linuxbridge</span><br><span class="line">dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq</span><br><span class="line">enable_isolated_metadata = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="路由型"><a href="#路由型" class="headerlink" title="路由型"></a>路由型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Worker-节点安装"><a href="#Worker-节点安装" class="headerlink" title="Worker 节点安装"></a>Worker 节点安装</h2><h3 id="Nova-组件"><a href="#Nova-组件" class="headerlink" title="Nova 组件"></a>Nova 组件</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">yum -y install centos-release-openstack-train</span><br><span class="line"> </span><br><span class="line">yum install openstack-nova-compute -y</span><br><span class="line"> </span><br><span class="line">cp /etc/nova/nova.conf /etc/nova/nova.conf.bak</span><br><span class="line">grep -Ev <span class="string">"#|^$"</span> /etc/nova/nova.conf.bak &gt;/etc/nova/nova.conf</span><br><span class="line"> </span><br><span class="line">vim /etc/nova/nova.conf</span><br><span class="line">[<span class="meta">DEFAULT</span>]</span><br><span class="line">enabled_apis = osapi_compute,metadata</span><br><span class="line">transport_url = rabbit:<span class="comment">//openstack:RABBIT_PASS@controller</span></span><br><span class="line">my_ip = <span class="number">192.168</span><span class="number">.0</span><span class="number">.104</span></span><br><span class="line">use_neutron = <span class="literal">true</span></span><br><span class="line">firewall_driver = nova.virt.firewall.NoopFirewallDriver</span><br><span class="line"> </span><br><span class="line">[<span class="meta">api</span>]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line"> </span><br><span class="line">[<span class="meta">api_database</span>]</span><br><span class="line">[<span class="meta">barbican</span>]</span><br><span class="line">[<span class="meta">cache</span>]</span><br><span class="line">[<span class="meta">cinder</span>]</span><br><span class="line">[<span class="meta">compute</span>]</span><br><span class="line">[<span class="meta">conductor</span>]</span><br><span class="line">[<span class="meta">console</span>]</span><br><span class="line">[<span class="meta">consoleauth</span>]</span><br><span class="line">[<span class="meta">cors</span>]</span><br><span class="line">[<span class="meta">database</span>]</span><br><span class="line">[<span class="meta">devices</span>]</span><br><span class="line">[<span class="meta">ephemeral_storage_encryption</span>]</span><br><span class="line">[<span class="meta">filter_scheduler</span>]</span><br><span class="line">[<span class="meta">glance</span>]</span><br><span class="line">api_servers = http:<span class="comment">//controller:9292</span></span><br><span class="line"> </span><br><span class="line">[<span class="meta">guestfs</span>]</span><br><span class="line">[<span class="meta">healthcheck</span>]</span><br><span class="line">[<span class="meta">hyperv</span>]</span><br><span class="line">[<span class="meta">ironic</span>]</span><br><span class="line">[<span class="meta">key_manager</span>]</span><br><span class="line">[<span class="meta">keystone</span>]</span><br><span class="line">[<span class="meta">keystone_authtoken</span>]</span><br><span class="line">www_authenticate_uri = http:<span class="comment">//controller:5000/</span></span><br><span class="line">auth_url = http:<span class="comment">//controller:5000/</span></span><br><span class="line">memcached_servers = controller:<span class="number">11211</span></span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">[<span class="meta">libvirt</span>]</span><br><span class="line">virt_type = qemu</span><br><span class="line">[<span class="meta">metrics</span>]</span><br><span class="line">[<span class="meta">mks</span>]</span><br><span class="line">[<span class="meta">neutron</span>]</span><br><span class="line">[<span class="meta">notifications</span>]</span><br><span class="line">[<span class="meta">osapi_v21</span>]</span><br><span class="line">[<span class="meta">oslo_concurrency</span>]</span><br><span class="line">lock_path = /<span class="keyword">var</span>/lib/nova/tmp</span><br><span class="line"> </span><br><span class="line">[<span class="meta">oslo_messaging_amqp</span>]</span><br><span class="line">[<span class="meta">oslo_messaging_kafka</span>]</span><br><span class="line">[<span class="meta">oslo_messaging_notifications</span>]</span><br><span class="line">[<span class="meta">oslo_messaging_rabbit</span>]</span><br><span class="line">[<span class="meta">oslo_middleware</span>]</span><br><span class="line">[<span class="meta">oslo_policy</span>]</span><br><span class="line">[<span class="meta">pci</span>]</span><br><span class="line">[<span class="meta">placement</span>]</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">auth_type = password</span><br><span class="line">user_domain_name = Default</span><br><span class="line">auth_url = http:<span class="comment">//controller:5000/v3</span></span><br><span class="line">username = placement</span><br><span class="line">password = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">[<span class="meta">powervm</span>]</span><br><span class="line">[<span class="meta">privsep</span>]</span><br><span class="line">[<span class="meta">profiler</span>]</span><br><span class="line">[<span class="meta">quota</span>]</span><br><span class="line">[<span class="meta">rdp</span>]</span><br><span class="line">[<span class="meta">remote_debug</span>]</span><br><span class="line">[<span class="meta">scheduler</span>]</span><br><span class="line">[<span class="meta">serial_console</span>]</span><br><span class="line">[<span class="meta">service_user</span>]</span><br><span class="line">[<span class="meta">spice</span>]</span><br><span class="line">[<span class="meta">upgrade_levels</span>]</span><br><span class="line">[<span class="meta">vault</span>]</span><br><span class="line">[<span class="meta">vendordata_dynamic_auth</span>]</span><br><span class="line">[<span class="meta">vmware</span>]</span><br><span class="line">[<span class="meta">vnc</span>]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">server_listen = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">server_proxyclient_address = $my_ip</span><br><span class="line">novncproxy_base_url = http:<span class="comment">//controller:6080/vnc_auto.html</span></span><br><span class="line"> </span><br><span class="line">[<span class="meta">workarounds</span>]</span><br><span class="line">[<span class="meta">wsgi</span>]</span><br><span class="line">[<span class="meta">xenserver</span>]</span><br><span class="line">[<span class="meta">xvp</span>]</span><br><span class="line">[<span class="meta">zvm</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">egrep -c <span class="string">'(vmx|svm)'</span> /proc/cpuinfo</span><br><span class="line">systemctl enable libvirtd.service openstack-nova-compute.service</span><br><span class="line">systemctl start libvirtd.service openstack-nova-compute.service</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Failed to connect socket to <span class="string">'/var/run/libvirt/libvirt-sock'</span>: Permission denied: libvirtError: Failed to connect socket to <span class="string">'/var/run/libvirt/libvirt-sock'</span>: Permission denied</span><br><span class="line"> </span><br><span class="line">chmod <span class="number">777</span> /<span class="keyword">var</span>/run/libvirt/libvirt-sock</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Run the following commands <span class="keyword">on</span> the controller node.</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 查看主机</span></span><br><span class="line">. admin-openrc</span><br><span class="line">openstack compute service list --service nova-compute</span><br><span class="line"> </span><br><span class="line">Discover compute hosts</span><br><span class="line">su -s /bin/sh -c <span class="string">"nova-manage cell_v2 discover_hosts --verbose"</span> nova</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 自动发现 controller 配置</span></span><br><span class="line">vim /etc/nova/nova.conf</span><br><span class="line">[<span class="meta">scheduler</span>]</span><br><span class="line">discover_hosts_in_cells_interval = <span class="number">120</span></span><br><span class="line"> </span><br><span class="line">openstack user list</span><br><span class="line">openstack service list</span><br><span class="line">openstack role list</span><br><span class="line"> </span><br><span class="line">openstack service list</span><br><span class="line">openstack compute service list</span><br><span class="line">openstack catalog list</span><br><span class="line">openstack image list</span><br><span class="line">nova-status upgrade check</span><br></pre></td></tr></table></figure>
<h3 id="Neutron-组件"><a href="#Neutron-组件" class="headerlink" title="Neutron 组件"></a>Neutron 组件</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">yum install openstack-neutron-linuxbridge ebtables ipset -y</span><br><span class="line"> </span><br><span class="line">cp <span class="regexp">/etc/</span>neutron<span class="regexp">/neutron.conf /</span>etc<span class="regexp">/neutron/</span>neutron.conf.bak</span><br><span class="line">grep -Ev <span class="string">"#|^$"</span> <span class="regexp">/etc/</span>neutron<span class="regexp">/neutron.conf.bak &gt;/</span>etc<span class="regexp">/neutron/</span>neutron.conf</span><br><span class="line"> </span><br><span class="line">vim <span class="regexp">/etc/</span>neutron/neutron.conf</span><br><span class="line">[DEFAULT]</span><br><span class="line">transport_url = <span class="string">rabbit:</span><span class="comment">//openstack:RABBIT_PASS@controller</span></span><br><span class="line">auth_strategy = keystone</span><br><span class="line"> </span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = <span class="string">http:</span><span class="comment">//controller:5000</span></span><br><span class="line">auth_url = <span class="string">http:</span><span class="comment">//controller:5000</span></span><br><span class="line">memcached_servers = <span class="string">controller:</span><span class="number">11211</span></span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = <span class="keyword">default</span></span><br><span class="line">user_domain_name = <span class="keyword">default</span></span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = <span class="regexp">/var/</span>lib<span class="regexp">/neutron/</span>tmp</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">cp <span class="regexp">/etc/</span>neutron<span class="regexp">/plugins/</span>ml2<span class="regexp">/linuxbridge_agent.ini /</span>etc<span class="regexp">/neutron/</span>plugins<span class="regexp">/ml2/</span>linuxbridge_agent.ini.bak</span><br><span class="line">grep -Ev <span class="string">"#|^$"</span> <span class="regexp">/etc/</span>neutron<span class="regexp">/plugins/</span>ml2<span class="regexp">/linuxbridge_agent.ini.bak &gt;/</span>etc<span class="regexp">/neutron/</span>plugins<span class="regexp">/ml2/</span>linuxbridge_agent.ini</span><br><span class="line"> </span><br><span class="line">vim <span class="regexp">/etc/</span>neutron<span class="regexp">/plugins/</span>ml2/linuxbridge_agent.ini</span><br><span class="line">[linux_bridge]</span><br><span class="line">physical_interface_mappings = <span class="string">provider:</span>em1</span><br><span class="line"> </span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line">[securitygroup]</span><br><span class="line">enable_security_group = <span class="literal">true</span></span><br><span class="line">firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">vim <span class="regexp">/etc/</span>nova/nova.conf</span><br><span class="line">[neutron]</span><br><span class="line">auth_url = <span class="string">http:</span><span class="comment">//controller:5000</span></span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = <span class="keyword">default</span></span><br><span class="line">user_domain_name = <span class="keyword">default</span></span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">systemctl restart openstack-nova-compute.service</span><br><span class="line"> </span><br><span class="line">systemctl enable neutron-linuxbridge-agent.service</span><br><span class="line">systemctl start neutron-linuxbridge-agent.service</span><br></pre></td></tr></table></figure>
<p>至此，已经可以把 Openstack 跑起来了。接下来要安装一些额外的组件，提供更多的功能。</p>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>openstack</tag>
        <tag>nova</tag>
        <tag>netron</tag>
        <tag>编排工具</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack</title>
    <url>/2020/05/OpenStack/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>云计算</category>
      </categories>
  </entry>
  <entry>
    <title>KVM 维护</title>
    <url>/2020/05/KVM%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="KVM-维护"><a href="#KVM-维护" class="headerlink" title="KVM 维护"></a>KVM 维护</h2><a href="/2020/05/KVM%E5%AE%89%E8%A3%85/" title="KVM安装">KVM安装</a>
<h3 id="修改虚拟机内存，cpu-core"><a href="#修改虚拟机内存，cpu-core" class="headerlink" title="修改虚拟机内存，cpu core"></a>修改虚拟机内存，cpu core</h3><blockquote>
<p>扩大内存，cpu个数需要重启生效</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出虚拟机</span></span><br><span class="line">virsh list --<span class="built_in">help</span></span><br><span class="line">virsh list</span><br><span class="line">virsh list -all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">virsh edit yfgitlab</span><br><span class="line">---</span><br><span class="line">&lt;memory unit=<span class="string">'KiB'</span>&gt;16777216&lt;/memory&gt;</span><br><span class="line">&lt;currentMemory unit=<span class="string">'KiB'</span>&gt;16777216&lt;/currentMemory&gt;</span><br><span class="line">&lt;vcpu placement=<span class="string">'static'</span>&gt;4&lt;/vcpu&gt;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启虚拟机</span></span><br><span class="line">virsh reboot yfgitlab</span><br><span class="line">or</span><br><span class="line">virsh shutdown yfgitlab</span><br><span class="line">virsh start yfgitlab</span><br></pre></td></tr></table></figure>
<h2 id="动态调整（虚拟机内存，cpu-core）"><a href="#动态调整（虚拟机内存，cpu-core）" class="headerlink" title="动态调整（虚拟机内存，cpu core）"></a>动态调整（虚拟机内存，cpu core）</h2><blockquote>
<p>KVM虚拟机可以动态增加和删除vCPU，但是前提条件是，必须在虚拟机offline模式下先设置好最大vCPU数量。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调整内存</span></span><br><span class="line">virsh setmaxmem devstack 32G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整cpu core</span></span><br><span class="line">virsh setvcpus devstack 4</span><br><span class="line"><span class="comment"># error: unsupported configuration: failed to find appropriate hotpluggable vcpus to reach the desired target vcpu count</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h3><blockquote>
<p>raw 格式盘不支持快照</p>
</blockquote>
<h2 id><a href="#" class="headerlink" title></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前快照</span></span><br><span class="line">virsh snapshot-list yfgitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># virsh snapshot-create-as 虚拟机名称     快照名称     快照描述</span></span><br><span class="line">virsh snapshot-create-as yfgitlab yfgitlab`date <span class="string">"+%F_%T"</span>` <span class="string">"test"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原快照</span></span><br><span class="line">virsh snapshot-revert --domain yfgitlab yfgitlab2017-05-21_08:34:12</span><br></pre></td></tr></table></figure></h2><h3 id="KVM-添加磁盘"><a href="#KVM-添加磁盘" class="headerlink" title="KVM 添加磁盘"></a>KVM 添加磁盘</h3><a href="/2020/05/LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E7%AE%A1%E7%90%86/" title="LVM逻辑卷管理">LVM逻辑卷管理</a>
<blockquote>
<p>qcow2是集各种技术为一体的超级镜像格式，支持内部快照，加密，压缩等一系列功能，访问性能也在不断提高。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建磁盘</span></span><br><span class="line">qemu-img create -h</span><br><span class="line">qemu-img create -f qcow2 yfgitlab2.img 50G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看磁盘格式</span></span><br><span class="line">file hello_data.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 磁盘格式转换 （raw 占用磁盘空间，qcow2 不占用磁盘空间）</span></span><br><span class="line">qemu-img convert -p -t directsync -O qcow2 test.raw test.qcow2 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出虚拟机</span></span><br><span class="line">virsh list</span><br><span class="line">---</span><br><span class="line"> 11    yfgitlab                       running</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 磁盘挂到虚拟机</span></span><br><span class="line"><span class="comment"># virsh 添加磁盘   虚拟机名           磁盘位置             虚拟机中盘名  是否缓存</span></span><br><span class="line">virsh attach-disk yfgitlab /data/img1/yfgitlab-data.img vdb --cache none --subdriver=qcow2</span><br><span class="line">virsh attach-disk yfgitlab /data/img1/yfgitlab-data.img vdb --cache none --subdriver=qcow2 --config</span><br><span class="line"></span><br><span class="line">--config   会把文件写入配置文件（下次启动有效）</span><br><span class="line">--live     直接有效</span><br><span class="line">--current  当前有效</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line"><span class="comment"># /etc/libvirt/qemu/yfgitlab.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载磁盘</span></span><br><span class="line">virsh detach-disk yfgitlab /data/img1/yfgitlab-data.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 到虚拟机中查看磁盘</span></span><br><span class="line">fdisk -l</span><br><span class="line">---</span><br><span class="line">Disk /dev/vdb: 53.7 GB, 53695545344 bytes, 104874112 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line">mkfs.ext4 /dev/vdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载目录</span></span><br><span class="line">mkdir /data</span><br><span class="line">mount /dev/vdb /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">df -h</span><br><span class="line">---</span><br><span class="line">/dev/vdb                  50G   53M   47G   1% /data</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写到挂载文件 /etc/fstab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/dev/vdb /data ext4 defaults 0 0"</span> &gt;&gt;/etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>
<h3 id="KVM-扩磁盘大小"><a href="#KVM-扩磁盘大小" class="headerlink" title="KVM 扩磁盘大小"></a>KVM 扩磁盘大小</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看磁盘格式</span></span><br><span class="line">file hello_data.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看磁盘信息</span></span><br><span class="line">qemu-img info hello_data.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭虚拟机</span></span><br><span class="line">virsh shutdown xp_4_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩容磁盘文件</span></span><br><span class="line">qemu-img resize hello_data.img +150M</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缩容</span></span><br><span class="line">qemu-img resize hello_data.img -150M --shrink</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看磁盘信息</span></span><br><span class="line">qemu-img info hello_data.img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动虚拟机</span></span><br><span class="line">virsh start xp_4_test</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>云计算</category>
      </categories>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2020/05/Docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><ul>
<li><a href="https://www.redhat.com/zh/topics/containers/whats-a-linux-container" target="_blank" rel="noopener">容器原理</a></li>
<li><a href="https://docs.docker.com/engine/" target="_blank" rel="noopener">docker doc </a></li>
<li><a href="https://docs.docker.com/reference/" target="_blank" rel="noopener">docker 参考文档</a></li>
<li><a href="https://container-registry.oracle.com" target="_blank" rel="noopener">oracle 镜像库</a></li>
</ul>
<a href="/2020/05/Docker%E5%AE%89%E8%A3%85/" title="Docker安装">Docker安装</a>
<h2 id="Docker-维护"><a href="#Docker-维护" class="headerlink" title="Docker 维护"></a>Docker 维护</h2><ul>
<li>镜像<ul>
<li>使用 Dockerfile 制作镜像</li>
<li>使用 tag 制作新的镜像</li>
<li>使用 commit 把容器制作成镜像</li>
<li>公共的镜像仓库</li>
<li>使用 harbor 搭建私有镜像仓库</li>
</ul>
</li>
<li>容器<ul>
<li>使用 docker run 创建容器  </li>
<li>使用 docker-compose 进行编排容器<ul>
<li>compose file 格式</li>
</ul>
</li>
</ul>
</li>
<li><p>overlay文件系统</p>
</li>
<li><p>CLI 使用</p>
</li>
<li><p>API 使用</p>
</li>
</ul>
<h2 id="Docker-原理"><a href="#Docker-原理" class="headerlink" title="Docker 原理"></a>Docker 原理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker Namespaces 隔离</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker 四种网络模式</span></span><br><span class="line"><span class="comment"># host</span></span><br><span class="line"><span class="comment"># contianer</span></span><br><span class="line"><span class="comment"># none</span></span><br><span class="line"><span class="comment"># bridge</span></span><br></pre></td></tr></table></figure>
<h3 id="容器与宿主机文件拷贝"><a href="#容器与宿主机文件拷贝" class="headerlink" title="容器与宿主机文件拷贝"></a>容器与宿主机文件拷贝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker cp 容器名：要拷贝的文件在容器里面的路径   要拷贝到宿主机的相应路径</span></span><br></pre></td></tr></table></figure>
<h3 id="docker-容器修改"><a href="#docker-容器修改" class="headerlink" title="docker 容器修改"></a>docker 容器修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件修改</span></span><br><span class="line"><span class="comment">## 获取id</span></span><br><span class="line">docker inspect e32ee41a614b |grep -i id</span><br><span class="line"></span><br><span class="line"><span class="comment">## mac 系统中使用轻量级虚拟机 hyperkit</span></span><br><span class="line">/var/lib/docker/containers/[hash_of_the_container]/hostconfig.json</span><br></pre></td></tr></table></figure>
<h3 id="docker-容器镜像导出导入"><a href="#docker-容器镜像导出导入" class="headerlink" title="docker 容器镜像导出导入"></a>docker 容器镜像导出导入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看容器ID</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出容器镜像</span></span><br><span class="line">docker <span class="built_in">export</span> 容器ID &gt; container`date <span class="string">"%F_%T"</span>`.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入容器镜像</span></span><br><span class="line">docker import - 镜像名 &lt; container.tar</span><br></pre></td></tr></table></figure>
<h3 id="docker-镜像导出导入"><a href="#docker-镜像导出导入" class="headerlink" title="docker 镜像导出导入"></a>docker 镜像导出导入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">docker image ls</span><br><span class="line">or (old version)</span><br><span class="line">docker images </span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出镜像</span></span><br><span class="line">docker save 镜像ID &gt; image`date <span class="string">"%F_%T"</span>`.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时打包多个镜像</span></span><br><span class="line">docker save -o images.tar postgres:9.6 mongo:3.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">docker load &lt; image`date <span class="string">"%F_%T"</span>`.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打上tag</span></span><br><span class="line"><span class="comment">#           镜像ID            repo        :tag</span></span><br><span class="line">docker tag 21de6f73b9ac sameersbn/gitlab:8.14.4</span><br></pre></td></tr></table></figure>
<h3 id="通过-registry-来进行镜像同步"><a href="#通过-registry-来进行镜像同步" class="headerlink" title="通过 registry 来进行镜像同步"></a>通过 registry 来进行镜像同步</h3><a href="/2020/05/Harbor%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/" title="Harbor安装配置">Harbor安装配置</a>
<hr>
<h3 id="Docker-使用"><a href="#Docker-使用" class="headerlink" title="Docker 使用"></a>Docker 使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker help</span></span><br><span class="line"><span class="comment"># docker image help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">docker search busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去镜像库拉镜像</span></span><br><span class="line">docker image pull busybox</span><br><span class="line">docker image ls</span><br><span class="line">docker image inspect busybox</span><br><span class="line">docker image create -d --name b1 busybox</span><br><span class="line">docker container ps -a</span><br><span class="line">docker container start b1</span><br><span class="line">docker container <span class="built_in">exec</span> -it b1 /bin/bash</span><br><span class="line">docker container logs b1</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">docker container run --name b1 -it busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地镜像</span></span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行的容器</span></span><br><span class="line">docker container ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器信息</span></span><br><span class="line">docker container inspect b1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有容器</span></span><br><span class="line">docker container ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm b1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除容器</span></span><br><span class="line">docker container rm b13c1f94e78c --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次删除所有容器</span></span><br><span class="line">docker container prune</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker logs b1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互状态进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it b1 /bin/sh</span><br><span class="line"><span class="comment"># or 新式命令</span></span><br><span class="line">docker container <span class="built_in">exec</span> -it b1 /bin/sh</span><br></pre></td></tr></table></figure>
<h2 id="增加一个docker-没有指令（查看tags-版本）"><a href="#增加一个docker-没有指令（查看tags-版本）" class="headerlink" title="增加一个docker 没有指令（查看tags 版本）"></a>增加一个docker 没有指令（查看tags 版本）</h2><blockquote>
<p>网上找了一段shell，我给加了个缓存。官方怎么就没考虑这个需求</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;dockertags</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">cat &lt;&lt; HELP</span><br><span class="line"></span><br><span class="line">dockertags  --  list all tags <span class="keyword">for</span> a Docker image on a remote registry.</span><br><span class="line"></span><br><span class="line">EXAMPLE:</span><br><span class="line">    - list all tags <span class="keyword">for</span> ubuntu:</span><br><span class="line">       dockertags ubuntu</span><br><span class="line"></span><br><span class="line">    - list all php tags containing apache:</span><br><span class="line">       dockertags php apache</span><br><span class="line"></span><br><span class="line">	- clean cache</span><br><span class="line">       dockertags clean</span><br><span class="line"></span><br><span class="line">HELP</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 增加个缓存，防止重复请求</span></span><br><span class="line"><span class="function"><span class="title">cache</span></span>()&#123;</span><br><span class="line">	mkdir -p <span class="variable">$HOME</span>/.dockercache</span><br><span class="line">	<span class="keyword">if</span> [ -f <span class="variable">$HOME</span>/.dockercache/<span class="variable">$1</span> ];<span class="keyword">then</span></span><br><span class="line">		cat <span class="variable">$HOME</span>/.dockercache/<span class="variable">$1</span>|egrep <span class="string">"<span class="variable">$2</span>.*"</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">        tags=`wget -q https://registry.hub.docker.com/v1/repositories/<span class="variable">$&#123;1&#125;</span>/tags -O -  | sed -e <span class="string">'s/[][]//g'</span> -e <span class="string">'s/"//g'</span> -e <span class="string">'s/ //g'</span> | tr <span class="string">'&#125;'</span> <span class="string">'\n'</span>  | awk -F: <span class="string">'&#123;print $3&#125;'</span>`</span><br><span class="line">	    <span class="comment">#echo "$&#123;tags&#125;"</span></span><br><span class="line">	    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;tags&#125;</span>"</span> |sort -r &gt;<span class="variable">$HOME</span>/.dockercache/<span class="variable">$1</span></span><br><span class="line">		cat <span class="variable">$HOME</span>/.dockercache/<span class="variable">$1</span> |grep <span class="string">"<span class="variable">$2</span>.*"</span>	</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span></span><br><span class="line">	usage</span><br><span class="line">	<span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">image=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">[ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"clean"</span> ]&amp;&amp; rm -rf <span class="variable">$HOME</span>/.dockercache&amp;&amp;<span class="built_in">exit</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$2</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">	cache <span class="variable">$image</span> <span class="variable">$2</span></span><br><span class="line">	<span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">cache <span class="variable">$image</span> <span class="string">""</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id="Docker-API-使用"><a href="#Docker-API-使用" class="headerlink" title="Docker API 使用"></a>Docker API 使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># go </span></span><br><span class="line">go get github.com/docker/docker/client</span><br><span class="line"></span><br><span class="line"><span class="comment"># python</span></span><br><span class="line">pip install docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl</span></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">$ curl --unix-socket /var/run/docker.sock -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'&#123;"Image": "alpine", "Cmd": ["echo", "hello world"]&#125;'</span> \</span><br><span class="line">  -X POST http:/v1.24/containers/create</span><br><span class="line"><span class="comment"># 返回容器id</span></span><br><span class="line">&#123;<span class="string">"Id"</span>:<span class="string">"1c6594faf5"</span>,<span class="string">"Warnings"</span>:null&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">$ curl --unix-socket /var/run/docker.sock -X POST http:/v1.24/containers/1c6594faf5/start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">$ curl --unix-socket /var/run/docker.sock -X POST http:/v1.24/containers/1c6594faf5/<span class="built_in">wait</span></span><br><span class="line">&#123;<span class="string">"StatusCode"</span>:0&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">$ curl --unix-socket /var/run/docker.sock <span class="string">"http:/v1.24/containers/1c6594faf5/logs?stdout=1"</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
<h3 id="Docker-go-API"><a href="#Docker-go-API" class="headerlink" title="Docker go API"></a>Docker go API</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"io"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/docker/docker/api/types"</span></span><br><span class="line">	<span class="string">"github.com/docker/docker/api/types/container"</span></span><br><span class="line">	<span class="string">"github.com/docker/docker/client"</span></span><br><span class="line">	<span class="string">"github.com/docker/docker/pkg/stdcopy"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// "github.com/docker/docker/client"</span></span><br><span class="line">    ctx := context.Background()</span><br><span class="line">    cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拉取镜像</span></span><br><span class="line">    reader, err := cli.ImagePull(ctx, <span class="string">"docker.io/library/alpine"</span>, types.ImagePullOptions&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    io.Copy(os.Stdout, reader)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建容器</span></span><br><span class="line">    resp, err := cli.ContainerCreate(ctx, &amp;container.Config&#123;</span><br><span class="line">        Image: <span class="string">"alpine"</span>,</span><br><span class="line">        Cmd:   []<span class="keyword">string</span>&#123;<span class="string">"echo"</span>, <span class="string">"hello world"</span>&#125;,</span><br><span class="line">    &#125;, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动容器</span></span><br><span class="line">    <span class="keyword">if</span> err := cli.ContainerStart(ctx, resp.ID, types.ContainerStartOptions&#123;&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看状态</span></span><br><span class="line">    statusCh, errCh := cli.ContainerWait(ctx, resp.ID, container.WaitConditionNotRunning)</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> err := &lt;-errCh:</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> &lt;-statusCh:</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看日志</span></span><br><span class="line">    out, err := cli.ContainerLogs(ctx, resp.ID, types.ContainerLogsOptions&#123;ShowStdout: <span class="literal">true</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    stdcopy.StdCopy(os.Stdout, os.Stderr, out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
  </entry>
  <entry>
    <title>jenkins</title>
    <url>/2020/05/Jenkins/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="/2020/05/Docker%E5%AE%89%E8%A3%85/" title="Docker安装">Docker安装</a></li>
<li><a href="https://www.jenkins.io/doc/" target="_blank" rel="noopener">jenkins docs</a></li>
<li><a href="http://mirrors.jenkins-ci.org/status.html" target="_blank" rel="noopener">jenkins 插件镜像</a></li>
<li><a href="https://www.jenkins.io/zh/doc/book/managing/plugins/" target="_blank" rel="noopener">jenkins 中文社区</a></li>
<li><a href="https://github.com/jenkins-zh" target="_blank" rel="noopener">jenkins github zh</a></li>
<li><a href="https://plugins.jenkins.io/" target="_blank" rel="noopener">jenkins plugins center</a></li>
<li><a href="https://hub.docker.com/_/jenkins" target="_blank" rel="noopener">jenkins dockerfile </a></li>
<li><a href="https://github.com/jenkinsci/docker" target="_blank" rel="noopener">jenkins github </a></li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins" target="_blank" rel="noopener">清华大学镜像源</a></li>
</ul>
<h2 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker-compose 安装"></a>docker-compose 安装</h2><p>JENKINS_UC：主要的插件更新中心，会提供Jenkin 长期支持的版本。默认值就是 <a href="https://updates.jenkins.io" target="_blank" rel="noopener">https://updates.jenkins.io</a>.<br>JENKINS_UC_EXPERIMENTAL：主要的插件开发/实验版本更新中心。<br>JENKINS_UC_DOWNLOAD：从插件更新中心的下载链接，默认为 $JENKINS_UC/downloads。</p>
<blockquote>
<p>使用最新的docker 镜像进行安装，安装完成报 jenkins 不是最新的。尝试了很多次插件安装的问题都不成功。<br>自己下载了jenkins.war 包制作镜像。jenkins插件是最大的诟病。</p>
</blockquote>
<h2 id="jenkins-conceptual"><a href="#jenkins-conceptual" class="headerlink" title="jenkins conceptual"></a>jenkins conceptual</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">item        <span class="comment"># 工程</span></span><br><span class="line">pipeline    <span class="comment"># 流水线</span></span><br><span class="line">build       <span class="comment"># 构建</span></span><br><span class="line">webhook     <span class="comment"># web钩子，属于http触发器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行环境</span></span><br><span class="line">workspace   <span class="comment"># 工作空间，包含来自远程仓库的文件和一些用于Pipeline的工作文件</span></span><br><span class="line">agent       <span class="comment">#</span></span><br><span class="line">stages      <span class="comment"># 块</span></span><br><span class="line">    stage(<span class="string">'Build'</span>)   <span class="comment">#</span></span><br><span class="line">    stage(<span class="string">'Test'</span>)    <span class="comment">#</span></span><br><span class="line">    stage(<span class="string">'Deploy'</span>)  <span class="comment">#</span></span><br><span class="line">        steps   <span class="comment"># 步骤</span></span><br><span class="line">executor    <span class="comment"># 执行器</span></span><br><span class="line"> </span><br><span class="line">environment <span class="comment"># 定义环境变量</span></span><br><span class="line">post        </span><br><span class="line">    always      <span class="comment">#</span></span><br><span class="line">    success     <span class="comment">#</span></span><br><span class="line">    unstable    <span class="comment">#</span></span><br><span class="line">    failure     <span class="comment">#</span></span><br><span class="line">    changed     <span class="comment">#</span></span><br><span class="line"><span class="comment"># 通知</span></span><br><span class="line">mail to:        <span class="comment">#</span></span><br><span class="line"><span class="comment"># 部署</span></span><br></pre></td></tr></table></figure>
<h2 id="jenkins-daemon-安装"><a href="#jenkins-daemon-安装" class="headerlink" title="jenkins daemon 安装"></a>jenkins daemon 安装</h2><ul>
<li><a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener">jenkins 下载</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行jenkins</span></span><br><span class="line">java -jar jenkins.war --httpPort=8080.</span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="docker-镜像安装-Jenkins"><a href="#docker-镜像安装-Jenkins" class="headerlink" title="docker 镜像安装 Jenkins"></a>docker 镜像安装 Jenkins</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找镜像</span></span><br><span class="line">docker search jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">docker pull jenkins/jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">docker container create --name=jenkins -p 8080:8080 jenkins/jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker container ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker container start e32ee41a614b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改容器资源</span></span><br><span class="line">docker container update --cpus 2  e32ee41a614b</span><br></pre></td></tr></table></figure>
<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一直停在 Your browser will reload automatically when Jenkins is ready.</span></span><br><span class="line">需要你进入jenkins的工作目录，打开-----hudson.model.UpdateCenter.xml将 url 中的 </span><br><span class="line">https://updates.jenkins.io/update-center.json</span><br><span class="line">更改为</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure>
<h2 id="下载最新版本-自己-build-一个镜像"><a href="#下载最新版本-自己-build-一个镜像" class="headerlink" title="下载最新版本 自己 build 一个镜像"></a>下载最新版本 自己 build 一个镜像</h2><p>build 过程中直接使用 root 用户<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir jenkins</span><br><span class="line"><span class="built_in">cd</span> jenkins</span><br><span class="line"><span class="comment"># 把官方的 dockerfile 下载下来</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jenkinsci/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 war</span></span><br><span class="line"><span class="comment"># wget http://ftp-nyc.osuosl.org/pub/jenkins/war-stable/2.222.4/jenkins.war</span></span><br><span class="line">wget http://ftp-nyc.osuosl.org/pub/jenkins/war-stable/latest/jenkins.war</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">/Users/alert/jenkins</span><br><span class="line">├── data</span><br><span class="line">│   └── jenkins <span class="comment">#启动时数据目录</span></span><br><span class="line">├── docker <span class="comment"># build 目录</span></span><br><span class="line">│   ├── CHANGELOG.md</span><br><span class="line">│   ├── CONTRIBUTING.md</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   ├── Dockerfile-alpine</span><br><span class="line">│   ├── Dockerfile-centos</span><br><span class="line">│   ├── Dockerfile-jdk11</span><br><span class="line">│   ├── Dockerfile-openj9</span><br><span class="line">│   ├── Dockerfile-openj9-jdk11</span><br><span class="line">│   ├── Dockerfile-slim</span><br><span class="line">│   ├── Dockerfile.bak</span><br><span class="line">│   ├── HACKING.adoc</span><br><span class="line">│   ├── Jenkinsfile</span><br><span class="line">│   ├── LICENSE.txt</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── docker-compose.yml</span><br><span class="line">│   ├── install-plugins.sh</span><br><span class="line">│   ├── jenkins-support</span><br><span class="line">│   ├── jenkins.sh</span><br><span class="line">│   ├── jenkins.war</span><br><span class="line">│   ├── multiarch</span><br><span class="line">│   ├── plugins.sh</span><br><span class="line">│   ├── publish-experimental.sh</span><br><span class="line">│   ├── publish.sh</span><br><span class="line">│   ├── tests</span><br><span class="line">│   ├── tini-shim.sh</span><br><span class="line">│   ├── tini_pub.gpg</span><br><span class="line">│   └── tools</span><br><span class="line">├── docker-compose.yml <span class="comment"># docker-compose 文件</span></span><br><span class="line">└── dockertags <span class="comment"># 获取标签的脚本</span></span><br></pre></td></tr></table></figure></p>
<h2 id="修改dockerfile"><a href="#修改dockerfile" class="headerlink" title="修改dockerfile"></a>修改dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'GEOF'</span> &gt;docker/Dockerfile</span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-stretch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用阿里云镜像</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib"</span> &gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/debian/ stretch main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian-security stretch/updates main"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/debian-security stretch/updates main"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉系统更新，系统更新下载太慢了</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get upgrade -y&amp;&amp;apt-get install -y git curl &amp;&amp; curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash &amp;&amp; apt-get install -y git-lfs &amp;&amp; git lfs install &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 root 用户</span></span><br><span class="line"><span class="keyword">ARG</span> <span class="keyword">user</span>=root</span><br><span class="line"><span class="keyword">ARG</span> group=root</span><br><span class="line"><span class="keyword">ARG</span> uid=<span class="number">0</span></span><br><span class="line"><span class="keyword">ARG</span> gid=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> http_port=<span class="number">8080</span></span><br><span class="line"><span class="keyword">ARG</span> agent_port=<span class="number">50000</span></span><br><span class="line"><span class="keyword">ARG</span> JENKINS_HOME=/var/jenkins_home</span><br><span class="line"><span class="keyword">ARG</span> REF=/usr/share/jenkins/ref</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JENKINS_HOME $JENKINS_HOME</span><br><span class="line"><span class="keyword">ENV</span> JENKINS_SLAVE_AGENT_PORT $&#123;agent_port&#125;</span><br><span class="line"><span class="keyword">ENV</span> REF $REF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改了一下，不要创建新用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$JENKINS_HOME</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> <span class="variable">$JENKINS_HOME</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$&#123;REF&#125;</span>/init.groovy.d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> TINI_VERSION=v0.<span class="number">16.1</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> tini_pub.gpg <span class="variable">$&#123;JENKINS_HOME&#125;</span>/tini_pub.gpg</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -fsSL https://github.com/krallin/tini/releases/download/<span class="variable">$&#123;TINI_VERSION&#125;</span>/tini-static-$(dpkg --<span class="built_in">print</span>-architecture) -o /sbin/tini \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -fsSL https://github.com/krallin/tini/releases/download/<span class="variable">$&#123;TINI_VERSION&#125;</span>/tini-static-$(dpkg --<span class="built_in">print</span>-architecture).asc -o /sbin/tini.asc \</span></span><br><span class="line"><span class="bash">  &amp;&amp; gpg --no-tty --import <span class="variable">$&#123;JENKINS_HOME&#125;</span>/tini_pub.gpg \</span></span><br><span class="line"><span class="bash">  &amp;&amp; gpg --verify /sbin/tini.asc \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm -rf /sbin/tini.asc /root/.gnupg \</span></span><br><span class="line"><span class="bash">  &amp;&amp; chmod +x /sbin/tini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> JENKINS_VERSION</span><br><span class="line"><span class="keyword">ENV</span> JENKINS_VERSION $&#123;JENKINS_VERSION:-<span class="number">2.176</span>.<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> JENKINS_SHA=<span class="number">33</span>a6c3161cf8de9c8729fd83914d781319fd1569acf487c7b1121681dba190a5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把下载的 jenkins.war 添加到镜像</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./jenkins.war /usr/share/jenkins/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把此处改了</span></span><br><span class="line"><span class="keyword">ENV</span> JENKINS_UC https://updates.jenkins.io</span><br><span class="line"><span class="keyword">ENV</span> JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental</span><br><span class="line"><span class="keyword">ENV</span> JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R <span class="variable">$&#123;user&#125;</span> <span class="string">"<span class="variable">$JENKINS_HOME</span>"</span> <span class="string">"<span class="variable">$REF</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $&#123;http_port&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $&#123;agent_port&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> $&#123;<span class="keyword">user</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> jenkins-support /usr/<span class="built_in">local</span>/bin/jenkins-support</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> jenkins.sh /usr/<span class="built_in">local</span>/bin/jenkins.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> tini-shim.sh /bin/tini</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/sbin/tini"</span>, <span class="string">"--"</span>, <span class="string">"/usr/local/bin/jenkins.sh"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> plugins.sh /usr/<span class="built_in">local</span>/bin/plugins.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> install-plugins.sh /usr/<span class="built_in">local</span>/bin/install-plugins.sh</span></span><br><span class="line">GEOF</span><br></pre></td></tr></table></figure>
<h2 id="开始-build-手动build"><a href="#开始-build-手动build" class="headerlink" title="开始 build(手动build)"></a>开始 build(手动build)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开始 build</span></span><br><span class="line">docker build -t myjenkins:0.1 .</span><br><span class="line"><span class="comment"># docker build -f ./Dockerfile-centos -t myjenkins:0.1 .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line">cat &lt;&lt;EOF &gt;docker-compose.yml</span><br><span class="line">version: <span class="string">"3.8"</span></span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    container_name: jenkins</span><br><span class="line">    image: myjenkins:0.1</span><br><span class="line">    volumes:</span><br><span class="line">    - ./data/jenkins:/var/jenkins_home:z</span><br><span class="line">    ports:</span><br><span class="line">    - 8080:8080</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">    - JENKINS_UC=https://mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">    - JENKINS_UC_EXPERIMENTAL=https://mirrors.tuna.tsinghua.edu.cn/experimental</span><br><span class="line">    <span class="comment">#- JAVA_OPTS=-Dhudson.footerURL=https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json jenkins</span></span><br><span class="line">networks:</span><br><span class="line">  jenkins-net:</span><br><span class="line">    driver: bridge</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="docker-compose-yml-build（自动build）"><a href="#docker-compose-yml-build（自动build）" class="headerlink" title="docker-compose.yml build（自动build）"></a>docker-compose.yml build（自动build）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;docker-compose.yml</span><br><span class="line">version: <span class="string">"3.8"</span></span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    container_name: jenkins</span><br><span class="line">    build:</span><br><span class="line">      context: ./docker</span><br><span class="line">      dockerfile: ./Dockerfile</span><br><span class="line">    image: myjenkins:latest</span><br><span class="line">    volumes:</span><br><span class="line">    - ./data/jenkins:/var/jenkins_home:z</span><br><span class="line">    ports:</span><br><span class="line">    - 8080:8080</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">    - JENKINS_UC=https://mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">    - JENKINS_UC_EXPERIMENTAL=https://mirrors.tuna.tsinghua.edu.cn/experimental</span><br><span class="line">    <span class="comment">#- JAVA_OPTS=-Dhudson.footerURL=https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json jenkins</span></span><br><span class="line">networks:</span><br><span class="line">  jenkins-net:</span><br><span class="line">    driver: bridge</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="直接build"><a href="#直接build" class="headerlink" title="直接build"></a>直接build</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up --build -d</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment"># 停止 docker-compose 运行</span></span><br><span class="line">docker-compose up down</span><br></pre></td></tr></table></figure>
<h3 id="密码路径"><a href="#密码路径" class="headerlink" title="密码路径"></a>密码路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密码路径 /var/jenkins_home/secrets/initialAdminPassword</span></span><br><span class="line"><span class="comment"># 设置用户名密码</span></span><br><span class="line">admin,admin@123.com</span><br></pre></td></tr></table></figure>
<h3 id="插件配置jenkins"><a href="#插件配置jenkins" class="headerlink" title="插件配置jenkins"></a>插件配置jenkins</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密码路径 /var/jenkins_home/secrets/initialAdminPassword</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置插件更新地址 Jenkins -&gt; Plugin Manager -&gt; Update Site</span></span><br><span class="line">https://updates.jenkins.io/update-center.json</span><br><span class="line">改</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 hudson xml 配置</span></span><br><span class="line">sed -i <span class="string">'/url/s#https.*.json#https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json#p'</span> /root/data/jenkins/hudson.model.UpdateCenter.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改default.json 需要重启</span></span><br><span class="line">cp default.json default.json.bak</span><br><span class="line">1,<span class="variable">$s</span>/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g</span><br><span class="line">1,<span class="variable">$s</span>/http:\/\/www.google.com/https:\/\/www.baidu.com/g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一定要重启否则不生效</span></span><br><span class="line">docker-compose stop</span><br><span class="line">docker-compose start</span><br></pre></td></tr></table></figure>
<h2 id="手动安装-jenkins-插件"><a href="#手动安装-jenkins-插件" class="headerlink" title="手动安装 jenkins 插件"></a>手动安装 jenkins 插件</h2><ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins" target="_blank" rel="noopener">清华大学镜像源</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动安装插件 https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/</span></span><br><span class="line">Jenkins -&gt; Plugin Manager -&gt; Upload Plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语言插件 locale</span></span><br><span class="line"><span class="comment"># Manager jenkins -&gt; configure system  -&gt; locale -&gt; 填入 zh_CN -&gt; 勾选所有用户生效</span></span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/locale/latest/locale.hpi</span><br></pre></td></tr></table></figure>
<h3 id="jenkins-CLI插件安装"><a href="#jenkins-CLI插件安装" class="headerlink" title="jenkins CLI插件安装"></a>jenkins CLI插件安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 http://182.92.67.154:8080/jnlpJars/jenkins-cli.jar</span></span><br><span class="line"><span class="comment"># java -jar jenkins-cli.jar -s http://182.92.67.154:8080/ install-plugin &lt;SOURCE&gt; ... [-deploy] [-name alias_name] [-restart]</span></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">SOURCE，是插件文件或插件的网络URI；</span><br><span class="line">-deploy，直接部署插件，无需推迟到Jenkins服务器重启的时候再部署插件</span><br><span class="line">-name，给插件起别名</span><br><span class="line">-restart，安装插件后重启Jenkins服务器</span><br><span class="line">-auth admin:admin@123.com <span class="comment"># 用户名:密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">java -jar jenkins-cli.jar -s http://129.84.8.33:10100/ -auth admin:admin@123.com install-plugin https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/backup/latest/backup.hpi -deploy</span><br></pre></td></tr></table></figure>
<h4 id="jenkins-安装插件脚本-centos"><a href="#jenkins-安装插件脚本-centos" class="headerlink" title="jenkins 安装插件脚本 (centos)"></a>jenkins 安装插件脚本 (centos)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'GEOF'</span> &gt;jenkins_install_plugin.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">log</span></span>()&#123;</span><br><span class="line"><span class="comment"># 用法：log x</span></span><br><span class="line"><span class="comment"># 方法在函数或模块前加上注释，会将注释打印出来</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[0;32m ------<span class="variable">$1</span>、`sed -n "</span>/\&lt;<span class="built_in">log</span> <span class="variable">$1</span>\&gt;/&#123;x;p&#125;;h<span class="string">" <span class="variable">$0</span>`\t------- \e[m"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">command</span> -v java|| <span class="built_in">log</span> 没有jdk,退出程序)&amp;&amp;<span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">jenkins_url=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">jenkins_url=<span class="variable">$&#123;jenkins_url:=http://182.92.67.154:8080/&#125;</span></span><br><span class="line">userpwd=<span class="string">"admin:admin@123.com"</span></span><br><span class="line"></span><br><span class="line">[ ! -f jenkins-cli.jar ]&amp;&amp; wget -q <span class="variable">$&#123;jenkins_url&#125;</span>/jnlpJars/jenkins-cli.jar</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">execute_install</span></span>()&#123;</span><br><span class="line"><span class="comment"># install plugin</span></span><br><span class="line"><span class="built_in">log</span> start</span><br><span class="line">java -jar jenkins-cli.jar -s <span class="variable">$1</span> -auth <span class="variable">$2</span> install-plugin https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/<span class="variable">$&#123;3&#125;</span>/latest/<span class="variable">$&#123;3&#125;</span>.hpi -deploy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baseplugin=<span class="string">"backup"</span></span><br><span class="line">gitlabplginlist=<span class="string">""</span></span><br><span class="line">k8spluginlist=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">base_install</span></span>()&#123;</span><br><span class="line"><span class="comment"># 安装基本插件</span></span><br><span class="line"><span class="built_in">log</span> 1</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable">$baseplugin</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"install plugin: "</span> <span class="variable">$p</span></span><br><span class="line">execute_install <span class="variable">$&#123;jenkins_url&#125;</span> <span class="variable">$&#123;userpwd&#125;</span> <span class="variable">$p</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">gitlab_install</span></span>()&#123;</span><br><span class="line"><span class="comment"># 安装 gitlab 所需插件</span></span><br><span class="line"><span class="built_in">log</span> 2</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable">$gitlabplginlist</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"install plugin: "</span> <span class="variable">$p</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">k8s_install</span></span>()&#123;</span><br><span class="line"><span class="comment"># 安装 k8s 所需插件</span></span><br><span class="line"><span class="built_in">log</span> 3</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable">$k8spluginlist</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"install plugin: "</span> <span class="variable">$p</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">base_install</span><br><span class="line">gitlab_install</span><br><span class="line">k8s_install</span><br><span class="line">&#125;;main</span><br><span class="line">GEOF</span><br><span class="line">chmod 755 jenkins_install_plugin.sh</span><br></pre></td></tr></table></figure>
<h3 id="2-4-新版本"><a href="#2-4-新版本" class="headerlink" title="2.4 新版本"></a>2.4 新版本</h3><p>插件管理 availble 不再全部显示。可以直接搜索</p>
<h2 id="jenkins-maven-配置"><a href="#jenkins-maven-配置" class="headerlink" title="jenkins maven 配置"></a>jenkins maven 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统工具 -&gt; 全局配置工具 -&gt; Maven -&gt;</span></span><br><span class="line">Name: maven3</span><br><span class="line">MAVEN_HOME: /var/jenkins_home/jdk/maven/</span><br></pre></td></tr></table></figure>
<h2 id="jenkins-jdk-配置"><a href="#jenkins-jdk-配置" class="headerlink" title="jenkins jdk 配置"></a>jenkins jdk 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统工具 -&gt; 全局配置工具 -&gt; jdk -&gt;</span></span><br><span class="line">Name: jdk8</span><br><span class="line">JAVA_HOME: /var/jenkins_home/jdk/jdk1.8.0_251/</span><br></pre></td></tr></table></figure>
<h2 id="项目设置-webhook"><a href="#项目设置-webhook" class="headerlink" title="项目设置 webhook"></a>项目设置 webhook</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitlab，pipeline 插件</span></span><br><span class="line"><span class="comment"># 到项目用户的setting 中获取一个 token</span></span><br><span class="line">J2X9KnkY2JWJCUz7xmdu</span><br><span class="line"></span><br><span class="line"><span class="comment"># Credentials</span></span><br><span class="line">Scope	：Global (Jenkins, nodes, items, all child items, etc)</span><br><span class="line">API token	：Concealed</span><br><span class="line">ID：leader</span><br><span class="line">Description	：youlv 项目</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 config -&gt; gitlab connection</span></span><br><span class="line">Enable authentication <span class="keyword">for</span> <span class="string">'/project'</span> end-point	（selected）	</span><br><span class="line">GitLab connections	</span><br><span class="line"> 	Connection name	：gitlab1</span><br><span class="line"> 	Gitlab host URL	：http://119.84.8.43:10097/</span><br><span class="line"> 	Credentials	：GitLab API token (youlv 项目)</span><br><span class="line"></span><br><span class="line"><span class="comment"># jenkins iterm 中 -&gt; general -&gt; GitHub project</span></span><br><span class="line">Project url	: http://119.84.8.43:10097/youlv/b1.git</span><br><span class="line">GitLab Connection	: gitlab1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build Triggers</span></span><br><span class="line">Build when a change is pushed to GitLab. GitLab webhook URL: http://182.92.67.154:8080/project/youlv	</span><br><span class="line"> 	Enabled GitLab triggers	</span><br><span class="line">    Push Events		</span><br><span class="line">    Opened Merge Request Events		</span><br><span class="line">    Accepted Merge Request Events		</span><br><span class="line">    Closed Merge Request Events		</span><br><span class="line">    Rebuild open Merge Requests	: Never</span><br><span class="line"> 	Approved Merge Requests (EE-only)		</span><br><span class="line"> 	Comments		</span><br><span class="line"> 	Comment (regex) <span class="keyword">for</span> triggering a build	</span><br><span class="line">Jenkins please retry a build</span><br><span class="line">--- advanced</span><br><span class="line">Enable [ci-skip]		</span><br><span class="line"> 	Ignore WIP Merge Requests		</span><br><span class="line"> 	Set build description to build cause (eg. Merge request or Git Push )		</span><br><span class="line"> 	Build on successful pipeline events		</span><br><span class="line"> 	Pending build name <span class="keyword">for</span> pipeline	</span><br><span class="line"> 	Cancel pending merge request builds on update		</span><br><span class="line"> 	Allowed branches	</span><br><span class="line"> Allow all branches to trigger this job	</span><br><span class="line"> Filter branches by name	</span><br><span class="line"> Filter branches by regex	</span><br><span class="line">Filter merge request by label	</span><br><span class="line"> 	Secret token: 3f18efd9425b48db84e609de4a4d925b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 gitlab 创建 webhook 填入以下信息</span></span><br><span class="line"><span class="comment"># project -&gt; setting -&gt; webhook</span></span><br><span class="line">webhook URL: http://182.92.67.154:8080/project/youlv</span><br><span class="line">Secret token: 3f18efd9425b48db84e609de4a4d925b</span><br><span class="line"><span class="comment"># 设置 master 库事件</span></span><br><span class="line">Trigger</span><br><span class="line">Push events: master</span><br><span class="line">SSL verification</span><br><span class="line">Enable SSL verification ： NO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先要 commit 一次再触发测试,参考 gitlab 项目示例</span></span><br></pre></td></tr></table></figure>


<p>/var/jenkins_home/workspace/youlv</p>
<h2 id="java-github-jenkins-maven"><a href="#java-github-jenkins-maven" class="headerlink" title="java + github + jenkins + maven"></a>java + github + jenkins + maven</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># java</span></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jenkins</span></span><br><span class="line"><span class="comment">## 新增 maven 插件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># groovy 语法（http://www.groovy-lang.org/documentation.html）</span></span><br><span class="line">node &#123;</span><br><span class="line">   def mvnHome</span><br><span class="line">   stage(<span class="string">'Preparation'</span>) &#123; // <span class="keyword">for</span> display purposes</span><br><span class="line">      // 下载源码</span><br><span class="line">      git <span class="string">'https://github.com/jglick/simple-maven-project-with-tests.git'</span></span><br><span class="line">      // 获取maven插件</span><br><span class="line">      mvnHome = tool <span class="string">'maven3'</span></span><br><span class="line">   &#125;</span><br><span class="line">   stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">      // Run the maven build</span><br><span class="line">      withEnv([<span class="string">"MVN_HOME=<span class="variable">$mvnHome</span>"</span>]) &#123;</span><br><span class="line">         <span class="keyword">if</span> (isUnix()) &#123;</span><br><span class="line">            sh <span class="string">'"$MVN_HOME/bin/mvn" -Dmaven.test.failure.ignore clean package'</span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bat(/<span class="string">"%MVN_HOME%\bin\mvn"</span> -Dmaven.test.failure.ignore clean package/)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   // 成功后单元测试</span><br><span class="line">   stage(<span class="string">'Results'</span>) &#123;</span><br><span class="line">      junit <span class="string">'**/target/surefire-reports/TEST-*.xml'</span></span><br><span class="line">      archiveArtifacts <span class="string">'target/*.jar'</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="comment"># unstable(单元测试错误)</span></span><br><span class="line">// &lt;!DOCTYPE suite SYSTEM <span class="string">"http://testng.org/testng-1.0.dtd"</span> &gt;</span><br></pre></td></tr></table></figure>
<h2 id="jenkins-备份还原"><a href="#jenkins-备份还原" class="headerlink" title="jenkins 备份还原"></a>jenkins 备份还原</h2><p>安装 backup 插件<br>设置好备份目录 /var/jenkins_home/backup<br>可以设置为： no shutdown<br>开始备份 -&gt;<br>还原备份 -&gt; 还原的时间稍长</p>
]]></content>
      <categories>
        <category>DEVOPS</category>
      </categories>
  </entry>
  <entry>
    <title>jenkins</title>
    <url>/2020/05/Jenkins/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="/2020/05/Docker%E5%AE%89%E8%A3%85/" title="Docker安装">Docker安装</a></li>
<li><a href="https://www.jenkins.io/doc/" target="_blank" rel="noopener">jenkins docs</a></li>
<li><a href="http://mirrors.jenkins-ci.org/status.html" target="_blank" rel="noopener">jenkins 插件镜像</a></li>
<li><a href="https://www.jenkins.io/zh/doc/book/managing/plugins/" target="_blank" rel="noopener">jenkins 中文社区</a></li>
<li><a href="https://github.com/jenkins-zh" target="_blank" rel="noopener">jenkins github zh</a></li>
<li><a href="https://plugins.jenkins.io/" target="_blank" rel="noopener">jenkins plugins center</a></li>
<li><a href="https://hub.docker.com/_/jenkins" target="_blank" rel="noopener">jenkins dockerfile </a></li>
<li><a href="https://github.com/jenkinsci/docker" target="_blank" rel="noopener">jenkins github </a></li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins" target="_blank" rel="noopener">清华大学镜像源</a></li>
</ul>
<h2 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker-compose 安装"></a>docker-compose 安装</h2><p>JENKINS_UC：主要的插件更新中心，会提供Jenkin 长期支持的版本。默认值就是 <a href="https://updates.jenkins.io" target="_blank" rel="noopener">https://updates.jenkins.io</a>.<br>JENKINS_UC_EXPERIMENTAL：主要的插件开发/实验版本更新中心。<br>JENKINS_UC_DOWNLOAD：从插件更新中心的下载链接，默认为 $JENKINS_UC/downloads。</p>
<blockquote>
<p>使用最新的docker 镜像进行安装，安装完成报 jenkins 不是最新的。尝试了很多次插件安装的问题都不成功。<br>自己下载了jenkins.war 包制作镜像。jenkins插件是最大的诟病。</p>
</blockquote>
<h2 id="jenkins-conceptual"><a href="#jenkins-conceptual" class="headerlink" title="jenkins conceptual"></a>jenkins conceptual</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">item        <span class="comment"># 工程</span></span><br><span class="line">pipeline    <span class="comment"># 流水线</span></span><br><span class="line">build       <span class="comment"># 构建</span></span><br><span class="line">webhook     <span class="comment"># web钩子，属于http触发器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行环境</span></span><br><span class="line">workspace   <span class="comment"># 工作空间，包含来自远程仓库的文件和一些用于Pipeline的工作文件</span></span><br><span class="line">agent       <span class="comment">#</span></span><br><span class="line">stages      <span class="comment"># 块</span></span><br><span class="line">    stage(<span class="string">'Build'</span>)   <span class="comment">#</span></span><br><span class="line">    stage(<span class="string">'Test'</span>)    <span class="comment">#</span></span><br><span class="line">    stage(<span class="string">'Deploy'</span>)  <span class="comment">#</span></span><br><span class="line">        steps   <span class="comment"># 步骤</span></span><br><span class="line">executor    <span class="comment"># 执行器</span></span><br><span class="line"> </span><br><span class="line">environment <span class="comment"># 定义环境变量</span></span><br><span class="line">post        </span><br><span class="line">    always      <span class="comment">#</span></span><br><span class="line">    success     <span class="comment">#</span></span><br><span class="line">    unstable    <span class="comment">#</span></span><br><span class="line">    failure     <span class="comment">#</span></span><br><span class="line">    changed     <span class="comment">#</span></span><br><span class="line"><span class="comment"># 通知</span></span><br><span class="line">mail to:        <span class="comment">#</span></span><br><span class="line"><span class="comment"># 部署</span></span><br></pre></td></tr></table></figure>
<h2 id="jenkins-daemon-安装"><a href="#jenkins-daemon-安装" class="headerlink" title="jenkins daemon 安装"></a>jenkins daemon 安装</h2><ul>
<li><a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener">jenkins 下载</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行jenkins</span></span><br><span class="line">java -jar jenkins.war --httpPort=8080.</span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="docker-镜像安装-Jenkins"><a href="#docker-镜像安装-Jenkins" class="headerlink" title="docker 镜像安装 Jenkins"></a>docker 镜像安装 Jenkins</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找镜像</span></span><br><span class="line">docker search jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">docker pull jenkins/jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">docker container create --name=jenkins -p 8080:8080 jenkins/jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker container ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker container start e32ee41a614b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改容器资源</span></span><br><span class="line">docker container update --cpus 2  e32ee41a614b</span><br></pre></td></tr></table></figure>
<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一直停在 Your browser will reload automatically when Jenkins is ready.</span></span><br><span class="line">需要你进入jenkins的工作目录，打开-----hudson.model.UpdateCenter.xml将 url 中的 </span><br><span class="line">https://updates.jenkins.io/update-center.json</span><br><span class="line">更改为</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure>
<h2 id="下载最新版本-自己-build-一个镜像"><a href="#下载最新版本-自己-build-一个镜像" class="headerlink" title="下载最新版本 自己 build 一个镜像"></a>下载最新版本 自己 build 一个镜像</h2><p>build 过程中直接使用 root 用户<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir jenkins</span><br><span class="line"><span class="built_in">cd</span> jenkins</span><br><span class="line"><span class="comment"># 把官方的 dockerfile 下载下来</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jenkinsci/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 war</span></span><br><span class="line"><span class="comment"># wget http://ftp-nyc.osuosl.org/pub/jenkins/war-stable/2.222.4/jenkins.war</span></span><br><span class="line">wget http://ftp-nyc.osuosl.org/pub/jenkins/war-stable/latest/jenkins.war</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">/Users/alert/jenkins</span><br><span class="line">├── data</span><br><span class="line">│   └── jenkins <span class="comment">#启动时数据目录</span></span><br><span class="line">├── docker <span class="comment"># build 目录</span></span><br><span class="line">│   ├── CHANGELOG.md</span><br><span class="line">│   ├── CONTRIBUTING.md</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   ├── Dockerfile-alpine</span><br><span class="line">│   ├── Dockerfile-centos</span><br><span class="line">│   ├── Dockerfile-jdk11</span><br><span class="line">│   ├── Dockerfile-openj9</span><br><span class="line">│   ├── Dockerfile-openj9-jdk11</span><br><span class="line">│   ├── Dockerfile-slim</span><br><span class="line">│   ├── Dockerfile.bak</span><br><span class="line">│   ├── HACKING.adoc</span><br><span class="line">│   ├── Jenkinsfile</span><br><span class="line">│   ├── LICENSE.txt</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── docker-compose.yml</span><br><span class="line">│   ├── install-plugins.sh</span><br><span class="line">│   ├── jenkins-support</span><br><span class="line">│   ├── jenkins.sh</span><br><span class="line">│   ├── jenkins.war</span><br><span class="line">│   ├── multiarch</span><br><span class="line">│   ├── plugins.sh</span><br><span class="line">│   ├── publish-experimental.sh</span><br><span class="line">│   ├── publish.sh</span><br><span class="line">│   ├── tests</span><br><span class="line">│   ├── tini-shim.sh</span><br><span class="line">│   ├── tini_pub.gpg</span><br><span class="line">│   └── tools</span><br><span class="line">├── docker-compose.yml <span class="comment"># docker-compose 文件</span></span><br><span class="line">└── dockertags <span class="comment"># 获取标签的脚本</span></span><br></pre></td></tr></table></figure></p>
<h2 id="修改dockerfile"><a href="#修改dockerfile" class="headerlink" title="修改dockerfile"></a>修改dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'GEOF'</span> &gt;docker/Dockerfile</span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-stretch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用阿里云镜像</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib"</span> &gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/debian/ stretch main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian-security stretch/updates main"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/debian-security stretch/updates main"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">&amp;&amp;<span class="built_in">echo</span> <span class="string">"deb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib"</span> &gt;&gt;/etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉系统更新，系统更新下载太慢了</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get upgrade -y&amp;&amp;apt-get install -y git curl &amp;&amp; curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash &amp;&amp; apt-get install -y git-lfs &amp;&amp; git lfs install &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 root 用户</span></span><br><span class="line"><span class="keyword">ARG</span> <span class="keyword">user</span>=root</span><br><span class="line"><span class="keyword">ARG</span> group=root</span><br><span class="line"><span class="keyword">ARG</span> uid=<span class="number">0</span></span><br><span class="line"><span class="keyword">ARG</span> gid=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> http_port=<span class="number">8080</span></span><br><span class="line"><span class="keyword">ARG</span> agent_port=<span class="number">50000</span></span><br><span class="line"><span class="keyword">ARG</span> JENKINS_HOME=/var/jenkins_home</span><br><span class="line"><span class="keyword">ARG</span> REF=/usr/share/jenkins/ref</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JENKINS_HOME $JENKINS_HOME</span><br><span class="line"><span class="keyword">ENV</span> JENKINS_SLAVE_AGENT_PORT $&#123;agent_port&#125;</span><br><span class="line"><span class="keyword">ENV</span> REF $REF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改了一下，不要创建新用户</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$JENKINS_HOME</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> <span class="variable">$JENKINS_HOME</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p <span class="variable">$&#123;REF&#125;</span>/init.groovy.d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> TINI_VERSION=v0.<span class="number">16.1</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> tini_pub.gpg <span class="variable">$&#123;JENKINS_HOME&#125;</span>/tini_pub.gpg</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -fsSL https://github.com/krallin/tini/releases/download/<span class="variable">$&#123;TINI_VERSION&#125;</span>/tini-static-$(dpkg --<span class="built_in">print</span>-architecture) -o /sbin/tini \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -fsSL https://github.com/krallin/tini/releases/download/<span class="variable">$&#123;TINI_VERSION&#125;</span>/tini-static-$(dpkg --<span class="built_in">print</span>-architecture).asc -o /sbin/tini.asc \</span></span><br><span class="line"><span class="bash">  &amp;&amp; gpg --no-tty --import <span class="variable">$&#123;JENKINS_HOME&#125;</span>/tini_pub.gpg \</span></span><br><span class="line"><span class="bash">  &amp;&amp; gpg --verify /sbin/tini.asc \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm -rf /sbin/tini.asc /root/.gnupg \</span></span><br><span class="line"><span class="bash">  &amp;&amp; chmod +x /sbin/tini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> JENKINS_VERSION</span><br><span class="line"><span class="keyword">ENV</span> JENKINS_VERSION $&#123;JENKINS_VERSION:-<span class="number">2.176</span>.<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> JENKINS_SHA=<span class="number">33</span>a6c3161cf8de9c8729fd83914d781319fd1569acf487c7b1121681dba190a5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把下载的 jenkins.war 添加到镜像</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./jenkins.war /usr/share/jenkins/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把此处改了</span></span><br><span class="line"><span class="keyword">ENV</span> JENKINS_UC https://updates.jenkins.io</span><br><span class="line"><span class="keyword">ENV</span> JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental</span><br><span class="line"><span class="keyword">ENV</span> JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R <span class="variable">$&#123;user&#125;</span> <span class="string">"<span class="variable">$JENKINS_HOME</span>"</span> <span class="string">"<span class="variable">$REF</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $&#123;http_port&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> $&#123;agent_port&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> $&#123;<span class="keyword">user</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> jenkins-support /usr/<span class="built_in">local</span>/bin/jenkins-support</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> jenkins.sh /usr/<span class="built_in">local</span>/bin/jenkins.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> tini-shim.sh /bin/tini</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/sbin/tini"</span>, <span class="string">"--"</span>, <span class="string">"/usr/local/bin/jenkins.sh"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> plugins.sh /usr/<span class="built_in">local</span>/bin/plugins.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> install-plugins.sh /usr/<span class="built_in">local</span>/bin/install-plugins.sh</span></span><br><span class="line">GEOF</span><br></pre></td></tr></table></figure>
<h2 id="开始-build-手动build"><a href="#开始-build-手动build" class="headerlink" title="开始 build(手动build)"></a>开始 build(手动build)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开始 build</span></span><br><span class="line">docker build -t myjenkins:0.1 .</span><br><span class="line"><span class="comment"># docker build -f ./Dockerfile-centos -t myjenkins:0.1 .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line">cat &lt;&lt;EOF &gt;docker-compose.yml</span><br><span class="line">version: <span class="string">"3.8"</span></span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    container_name: jenkins</span><br><span class="line">    image: myjenkins:0.1</span><br><span class="line">    volumes:</span><br><span class="line">    - ./data/jenkins:/var/jenkins_home:z</span><br><span class="line">    ports:</span><br><span class="line">    - 8080:8080</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">    - JENKINS_UC=https://mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">    - JENKINS_UC_EXPERIMENTAL=https://mirrors.tuna.tsinghua.edu.cn/experimental</span><br><span class="line">    <span class="comment">#- JAVA_OPTS=-Dhudson.footerURL=https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json jenkins</span></span><br><span class="line">networks:</span><br><span class="line">  jenkins-net:</span><br><span class="line">    driver: bridge</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="docker-compose-yml-build（自动build）"><a href="#docker-compose-yml-build（自动build）" class="headerlink" title="docker-compose.yml build（自动build）"></a>docker-compose.yml build（自动build）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;docker-compose.yml</span><br><span class="line">version: <span class="string">"3.8"</span></span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    container_name: jenkins</span><br><span class="line">    build:</span><br><span class="line">      context: ./docker</span><br><span class="line">      dockerfile: ./Dockerfile</span><br><span class="line">    image: myjenkins:latest</span><br><span class="line">    volumes:</span><br><span class="line">    - ./data/jenkins:/var/jenkins_home:z</span><br><span class="line">    ports:</span><br><span class="line">    - 8080:8080</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">    - JENKINS_UC=https://mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">    - JENKINS_UC_EXPERIMENTAL=https://mirrors.tuna.tsinghua.edu.cn/experimental</span><br><span class="line">    <span class="comment">#- JAVA_OPTS=-Dhudson.footerURL=https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json jenkins</span></span><br><span class="line">networks:</span><br><span class="line">  jenkins-net:</span><br><span class="line">    driver: bridge</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="直接build"><a href="#直接build" class="headerlink" title="直接build"></a>直接build</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up --build -d</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment"># 停止 docker-compose 运行</span></span><br><span class="line">docker-compose up down</span><br></pre></td></tr></table></figure>
<h3 id="密码路径"><a href="#密码路径" class="headerlink" title="密码路径"></a>密码路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密码路径 /var/jenkins_home/secrets/initialAdminPassword</span></span><br><span class="line"><span class="comment"># 设置用户名密码</span></span><br><span class="line">admin,admin@123.com</span><br></pre></td></tr></table></figure>
<h3 id="插件配置jenkins"><a href="#插件配置jenkins" class="headerlink" title="插件配置jenkins"></a>插件配置jenkins</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密码路径 /var/jenkins_home/secrets/initialAdminPassword</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置插件更新地址 Jenkins -&gt; Plugin Manager -&gt; Update Site</span></span><br><span class="line">https://updates.jenkins.io/update-center.json</span><br><span class="line">改</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 hudson xml 配置</span></span><br><span class="line">sed -i <span class="string">'/url/s#https.*.json#https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json#p'</span> /root/data/jenkins/hudson.model.UpdateCenter.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改default.json 需要重启</span></span><br><span class="line">cp default.json default.json.bak</span><br><span class="line">1,<span class="variable">$s</span>/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g</span><br><span class="line">1,<span class="variable">$s</span>/http:\/\/www.google.com/https:\/\/www.baidu.com/g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一定要重启否则不生效</span></span><br><span class="line">docker-compose stop</span><br><span class="line">docker-compose start</span><br></pre></td></tr></table></figure>
<h2 id="手动安装-jenkins-插件"><a href="#手动安装-jenkins-插件" class="headerlink" title="手动安装 jenkins 插件"></a>手动安装 jenkins 插件</h2><ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins" target="_blank" rel="noopener">清华大学镜像源</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动安装插件 https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/</span></span><br><span class="line">Jenkins -&gt; Plugin Manager -&gt; Upload Plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语言插件 locale</span></span><br><span class="line"><span class="comment"># Manager jenkins -&gt; configure system  -&gt; locale -&gt; 填入 zh_CN -&gt; 勾选所有用户生效</span></span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/locale/latest/locale.hpi</span><br></pre></td></tr></table></figure>
<h3 id="jenkins-CLI插件安装"><a href="#jenkins-CLI插件安装" class="headerlink" title="jenkins CLI插件安装"></a>jenkins CLI插件安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 http://182.92.67.154:8080/jnlpJars/jenkins-cli.jar</span></span><br><span class="line"><span class="comment"># java -jar jenkins-cli.jar -s http://182.92.67.154:8080/ install-plugin &lt;SOURCE&gt; ... [-deploy] [-name alias_name] [-restart]</span></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">SOURCE，是插件文件或插件的网络URI；</span><br><span class="line">-deploy，直接部署插件，无需推迟到Jenkins服务器重启的时候再部署插件</span><br><span class="line">-name，给插件起别名</span><br><span class="line">-restart，安装插件后重启Jenkins服务器</span><br><span class="line">-auth admin:admin@123.com <span class="comment"># 用户名:密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">java -jar jenkins-cli.jar -s http://129.84.8.33:10100/ -auth admin:admin@123.com install-plugin https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/backup/latest/backup.hpi -deploy</span><br></pre></td></tr></table></figure>
<h4 id="jenkins-安装插件脚本-centos"><a href="#jenkins-安装插件脚本-centos" class="headerlink" title="jenkins 安装插件脚本 (centos)"></a>jenkins 安装插件脚本 (centos)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">'GEOF'</span> &gt;jenkins_install_plugin.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">log</span></span>()&#123;</span><br><span class="line"><span class="comment"># 用法：log x</span></span><br><span class="line"><span class="comment"># 方法在函数或模块前加上注释，会将注释打印出来</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[0;32m ------<span class="variable">$1</span>、`sed -n "</span>/\&lt;<span class="built_in">log</span> <span class="variable">$1</span>\&gt;/&#123;x;p&#125;;h<span class="string">" <span class="variable">$0</span>`\t------- \e[m"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">command</span> -v java|| <span class="built_in">log</span> 没有jdk,退出程序)&amp;&amp;<span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">jenkins_url=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">jenkins_url=<span class="variable">$&#123;jenkins_url:=http://182.92.67.154:8080/&#125;</span></span><br><span class="line">userpwd=<span class="string">"admin:admin@123.com"</span></span><br><span class="line"></span><br><span class="line">[ ! -f jenkins-cli.jar ]&amp;&amp; wget -q <span class="variable">$&#123;jenkins_url&#125;</span>/jnlpJars/jenkins-cli.jar</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">execute_install</span></span>()&#123;</span><br><span class="line"><span class="comment"># install plugin</span></span><br><span class="line"><span class="built_in">log</span> start</span><br><span class="line">java -jar jenkins-cli.jar -s <span class="variable">$1</span> -auth <span class="variable">$2</span> install-plugin https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/<span class="variable">$&#123;3&#125;</span>/latest/<span class="variable">$&#123;3&#125;</span>.hpi -deploy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baseplugin=<span class="string">"backup"</span></span><br><span class="line">gitlabplginlist=<span class="string">""</span></span><br><span class="line">k8spluginlist=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">base_install</span></span>()&#123;</span><br><span class="line"><span class="comment"># 安装基本插件</span></span><br><span class="line"><span class="built_in">log</span> 1</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable">$baseplugin</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"install plugin: "</span> <span class="variable">$p</span></span><br><span class="line">execute_install <span class="variable">$&#123;jenkins_url&#125;</span> <span class="variable">$&#123;userpwd&#125;</span> <span class="variable">$p</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">gitlab_install</span></span>()&#123;</span><br><span class="line"><span class="comment"># 安装 gitlab 所需插件</span></span><br><span class="line"><span class="built_in">log</span> 2</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable">$gitlabplginlist</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"install plugin: "</span> <span class="variable">$p</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">k8s_install</span></span>()&#123;</span><br><span class="line"><span class="comment"># 安装 k8s 所需插件</span></span><br><span class="line"><span class="built_in">log</span> 3</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable">$k8spluginlist</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"install plugin: "</span> <span class="variable">$p</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">base_install</span><br><span class="line">gitlab_install</span><br><span class="line">k8s_install</span><br><span class="line">&#125;;main</span><br><span class="line">GEOF</span><br><span class="line">chmod 755 jenkins_install_plugin.sh</span><br></pre></td></tr></table></figure>
<h3 id="2-4-新版本"><a href="#2-4-新版本" class="headerlink" title="2.4 新版本"></a>2.4 新版本</h3><p>插件管理 availble 不再全部显示。可以直接搜索</p>
<h2 id="jenkins-maven-配置"><a href="#jenkins-maven-配置" class="headerlink" title="jenkins maven 配置"></a>jenkins maven 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统工具 -&gt; 全局配置工具 -&gt; Maven -&gt;</span></span><br><span class="line">Name: maven3</span><br><span class="line">MAVEN_HOME: /var/jenkins_home/jdk/maven/</span><br></pre></td></tr></table></figure>
<h2 id="jenkins-jdk-配置"><a href="#jenkins-jdk-配置" class="headerlink" title="jenkins jdk 配置"></a>jenkins jdk 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统工具 -&gt; 全局配置工具 -&gt; jdk -&gt;</span></span><br><span class="line">Name: jdk8</span><br><span class="line">JAVA_HOME: /var/jenkins_home/jdk/jdk1.8.0_251/</span><br></pre></td></tr></table></figure>
<h2 id="项目设置-webhook"><a href="#项目设置-webhook" class="headerlink" title="项目设置 webhook"></a>项目设置 webhook</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitlab，pipeline 插件</span></span><br><span class="line"><span class="comment"># 到项目用户的setting 中获取一个 token</span></span><br><span class="line">J2X9KnkY2JWJCUz7xmdu</span><br><span class="line"></span><br><span class="line"><span class="comment"># Credentials</span></span><br><span class="line">Scope	：Global (Jenkins, nodes, items, all child items, etc)</span><br><span class="line">API token	：Concealed</span><br><span class="line">ID：leader</span><br><span class="line">Description	：youlv 项目</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 config -&gt; gitlab connection</span></span><br><span class="line">Enable authentication <span class="keyword">for</span> <span class="string">'/project'</span> end-point	（selected）	</span><br><span class="line">GitLab connections	</span><br><span class="line"> 	Connection name	：gitlab1</span><br><span class="line"> 	Gitlab host URL	：http://119.84.8.43:10097/</span><br><span class="line"> 	Credentials	：GitLab API token (youlv 项目)</span><br><span class="line"></span><br><span class="line"><span class="comment"># jenkins iterm 中 -&gt; general -&gt; GitHub project</span></span><br><span class="line">Project url	: http://119.84.8.43:10097/youlv/b1.git</span><br><span class="line">GitLab Connection	: gitlab1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build Triggers</span></span><br><span class="line">Build when a change is pushed to GitLab. GitLab webhook URL: http://182.92.67.154:8080/project/youlv	</span><br><span class="line"> 	Enabled GitLab triggers	</span><br><span class="line">    Push Events		</span><br><span class="line">    Opened Merge Request Events		</span><br><span class="line">    Accepted Merge Request Events		</span><br><span class="line">    Closed Merge Request Events		</span><br><span class="line">    Rebuild open Merge Requests	: Never</span><br><span class="line"> 	Approved Merge Requests (EE-only)		</span><br><span class="line"> 	Comments		</span><br><span class="line"> 	Comment (regex) <span class="keyword">for</span> triggering a build	</span><br><span class="line">Jenkins please retry a build</span><br><span class="line">--- advanced</span><br><span class="line">Enable [ci-skip]		</span><br><span class="line"> 	Ignore WIP Merge Requests		</span><br><span class="line"> 	Set build description to build cause (eg. Merge request or Git Push )		</span><br><span class="line"> 	Build on successful pipeline events		</span><br><span class="line"> 	Pending build name <span class="keyword">for</span> pipeline	</span><br><span class="line"> 	Cancel pending merge request builds on update		</span><br><span class="line"> 	Allowed branches	</span><br><span class="line"> Allow all branches to trigger this job	</span><br><span class="line"> Filter branches by name	</span><br><span class="line"> Filter branches by regex	</span><br><span class="line">Filter merge request by label	</span><br><span class="line"> 	Secret token: 3f18efd9425b48db84e609de4a4d925b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 gitlab 创建 webhook 填入以下信息</span></span><br><span class="line"><span class="comment"># project -&gt; setting -&gt; webhook</span></span><br><span class="line">webhook URL: http://182.92.67.154:8080/project/youlv</span><br><span class="line">Secret token: 3f18efd9425b48db84e609de4a4d925b</span><br><span class="line"><span class="comment"># 设置 master 库事件</span></span><br><span class="line">Trigger</span><br><span class="line">Push events: master</span><br><span class="line">SSL verification</span><br><span class="line">Enable SSL verification ： NO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先要 commit 一次再触发测试,参考 gitlab 项目示例</span></span><br></pre></td></tr></table></figure>


<p>/var/jenkins_home/workspace/youlv</p>
<h2 id="java-github-jenkins-maven"><a href="#java-github-jenkins-maven" class="headerlink" title="java + github + jenkins + maven"></a>java + github + jenkins + maven</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># java</span></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jenkins</span></span><br><span class="line"><span class="comment">## 新增 maven 插件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># groovy 语法（http://www.groovy-lang.org/documentation.html）</span></span><br><span class="line">node &#123;</span><br><span class="line">   def mvnHome</span><br><span class="line">   stage(<span class="string">'Preparation'</span>) &#123; // <span class="keyword">for</span> display purposes</span><br><span class="line">      // 下载源码</span><br><span class="line">      git <span class="string">'https://github.com/jglick/simple-maven-project-with-tests.git'</span></span><br><span class="line">      // 获取maven插件</span><br><span class="line">      mvnHome = tool <span class="string">'maven3'</span></span><br><span class="line">   &#125;</span><br><span class="line">   stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">      // Run the maven build</span><br><span class="line">      withEnv([<span class="string">"MVN_HOME=<span class="variable">$mvnHome</span>"</span>]) &#123;</span><br><span class="line">         <span class="keyword">if</span> (isUnix()) &#123;</span><br><span class="line">            sh <span class="string">'"$MVN_HOME/bin/mvn" -Dmaven.test.failure.ignore clean package'</span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bat(/<span class="string">"%MVN_HOME%\bin\mvn"</span> -Dmaven.test.failure.ignore clean package/)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   // 成功后单元测试</span><br><span class="line">   stage(<span class="string">'Results'</span>) &#123;</span><br><span class="line">      junit <span class="string">'**/target/surefire-reports/TEST-*.xml'</span></span><br><span class="line">      archiveArtifacts <span class="string">'target/*.jar'</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="comment"># unstable(单元测试错误)</span></span><br><span class="line">// &lt;!DOCTYPE suite SYSTEM <span class="string">"http://testng.org/testng-1.0.dtd"</span> &gt;</span><br></pre></td></tr></table></figure>
<h2 id="jenkins-备份还原"><a href="#jenkins-备份还原" class="headerlink" title="jenkins 备份还原"></a>jenkins 备份还原</h2><p>安装 backup 插件<br>设置好备份目录 /var/jenkins_home/backup<br>可以设置为： no shutdown<br>开始备份 -&gt;<br>还原备份 -&gt; 还原的时间稍长</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>编程方法</title>
    <url>/2020/05/%E7%BC%96%E7%A8%8B%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>表达式<ul>
<li>常量</li>
<li>变量</li>
<li>运算符</li>
</ul>
</li>
<li>控制流程<ul>
<li>分支</li>
<li>循环</li>
</ul>
</li>
<li>容器<ul>
<li>数组</li>
<li>切片</li>
<li>Map</li>
</ul>
</li>
<li>函数<ul>
<li>参数</li>
<li>返回值</li>
<li>闭包</li>
<li>递归函数</li>
</ul>
</li>
<li>面向对象<ul>
<li>接口</li>
<li>结构体</li>
<li>指针</li>
</ul>
</li>
<li>设计模式<ul>
<li>单例模式</li>
<li>工厂模式</li>
</ul>
</li>
<li>Golang 并发<ul>
<li>Channel</li>
<li>sync</li>
</ul>
</li>
<li>错误处理</li>
<li>日志记录</li>
<li>常用包</li>
<li>包管理</li>
<li>基本库</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>shell编程</title>
    <url>/2020/05/Shell%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html" target="_blank" rel="noopener">bash docs</a></li>
<li><a href="http://tldp.org/LDP/abs/html/index.html" target="_blank" rel="noopener">Advanced Bash-Scripting Guide</a></li>
<li><a href="/2020/06/shell%E4%BE%8B%E7%A8%8B%E5%BA%8F/" title="shell例程序">shell例程序</a>
</li>
</ul>
<h2 id="话说-shell"><a href="#话说-shell" class="headerlink" title="话说 shell"></a>话说 shell</h2><p>那么多计算机语言，为啥还要学shell。示例: 打开文件 </p>
<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt</span><br></pre></td></tr></table></figure>
<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"file.txt"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> F:</span><br><span class="line">   l = F.readlines()</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure>
<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"test.log"</span>));</span><br><span class="line">            String str;</span><br><span class="line">            <span class="keyword">while</span> ((str = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是的你没看错，这就是 shell 为什么能一直流行的原因。<br>就是这么霸道，简单，高效，灵活。</p>
<h3 id="fork-炸弹-amp"><a href="#fork-炸弹-amp" class="headerlink" title="fork 炸弹 :(){:|:&amp;};:"></a>fork 炸弹 :(){:|:&amp;};:</h3><blockquote>
<p>11字符的炸弹</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用了递归，耗尽系统资源，extinguish ！</span></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line">:()&#123;&#125;</span><br><span class="line"><span class="comment"># 管道</span></span><br><span class="line">:|:</span><br><span class="line"><span class="comment"># 产生一个进程放到后台</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="comment"># 换行</span></span><br><span class="line">;</span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">:</span><br></pre></td></tr></table></figure>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="shell-输入、输出"><a href="#shell-输入、输出" class="headerlink" title="shell 输入、输出"></a>shell 输入、输出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> var <span class="comment">#输入</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span> <span class="comment">#输出</span></span><br></pre></td></tr></table></figure>
<h3 id="获取当前shell执行的目录"><a href="#获取当前shell执行的目录" class="headerlink" title="获取当前shell执行的目录"></a>获取当前shell执行的目录</h3><p>MAINDIR=$(dirname $(cd $(dirname $BASH_SOURCE);pwd))</p>
<h3 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h3><blockquote>
<p>shell中变量值都是字符串类型<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明</span></span><br><span class="line">var=2</span><br><span class="line">var=<span class="string">"hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 高级用法</span></span><br><span class="line">var=<span class="string">"ls"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$var</span> <span class="comment"># 将字符串变成命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量进行字符串截取</span></span><br><span class="line">var=<span class="string">"hello world"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var%*o&#125;</span>  <span class="comment"># 保留o左边字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var%%o*&#125;</span> <span class="comment"># 贪婪匹配</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var#o*&#125;</span>  <span class="comment"># 保留o右边字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var##*o&#125;</span> <span class="comment">#贪婪匹配</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量判断</span></span><br><span class="line"><span class="variable">$&#123;parameter:=word&#125;</span> <span class="comment"># （无值替换）</span></span><br><span class="line"><span class="variable">$&#123;parameter:+word&#125;</span> <span class="comment"># （有值才替换）</span></span><br><span class="line"><span class="variable">$&#123;parameter:-word&#125;</span> <span class="comment"># （为空替换）</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;parameter:?word&#125;</span> <span class="comment"># </span></span><br><span class="line"><span class="variable">$&#123;parameter:offset&#125;</span> <span class="comment"># 获取偏移字符</span></span><br><span class="line"><span class="variable">$&#123;parameter:offset:length&#125;</span></span><br></pre></td></tr></table></figure><br><a href="https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion" target="_blank" rel="noopener">Shell-Parameter-Expansion</a></p>
</blockquote>
<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"># ((...))</span><br><span class="line">(( expression ))</span><br><span class="line"></span><br><span class="line"># let</span><br><span class="line">let <span class="string">"expression"</span></span><br><span class="line"></span><br><span class="line"># <span class="string">[[…]]</span></span><br><span class="line"><span class="string">[[ expression ]]</span></span><br><span class="line"></span><br><span class="line"># 模式匹配 ‘aab’ <span class="keyword">and</span> ‘ aaaaaab’ 会被匹配</span><br><span class="line"><span class="string">[[ $line =~ [[:space:]]*?(a)b ]]</span></span><br><span class="line"></span><br><span class="line"># 提高优先级使用小括号</span><br><span class="line">( expression )</span><br><span class="line"></span><br><span class="line"># 取反</span><br><span class="line">! expression</span><br><span class="line"></span><br><span class="line"># 取与</span><br><span class="line">expression1 &amp;&amp; expression2</span><br><span class="line"></span><br><span class="line"># 取或</span><br><span class="line">expression1 || expression2</span><br></pre></td></tr></table></figure>
<h3 id="shell-控制流程"><a href="#shell-控制流程" class="headerlink" title="shell 控制流程"></a>shell 控制流程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if # 判断</span></span><br><span class="line">i=10</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$i</span> -gt 20 ];<span class="keyword">then</span> <span class="comment"># 数值比较</span></span><br><span class="line">        <span class="built_in">echo</span> gt 20</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> lt 20</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"mm"</span> == <span class="string">"m1"</span> ];<span class="keyword">then</span>  <span class="comment"># 字符串比较</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"some strings"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"different strings"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ls /datamm 2&gt;/dev/null ;<span class="keyword">then</span> <span class="comment"># 命令处理</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"list file ok"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"file is not exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"><span class="comment"># case in</span></span><br><span class="line"><span class="comment"># 常用 case in 制作菜单</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> var <span class="comment"># 读入字符串</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$var</span> <span class="keyword">in</span> <span class="comment"># 判断</span></span><br><span class="line">        dog|cat)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"animal"</span></span><br><span class="line">        ;;</span><br><span class="line">        1|2)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"number"</span></span><br><span class="line">        ;;</span><br><span class="line">        q)</span><br><span class="line">        <span class="built_in">exit</span> 0 <span class="comment"># 退出</span></span><br><span class="line">        ;;</span><br><span class="line">        *)  <span class="comment"># 不匹配输出</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"entry dog|cat|1|2"</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"><span class="comment"># for</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"abc bcd"</span> <span class="comment"># 空格分隔</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$x</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (( i=0;i&lt;10;i++ )) <span class="comment"># 计数 </span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((;;)) <span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> for..ok</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># while</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="comment"># 死循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> while..ok</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">A=<span class="variable">$IFS</span></span><br><span class="line">IFS=$<span class="string">":"</span> <span class="comment"># 改变分隔符</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line1 line2 <span class="comment"># 把一行读成两个字段</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line1</span></span><br><span class="line"><span class="keyword">done</span> &lt;&gt;/etc/passwd</span><br><span class="line">IFS=<span class="variable">$A</span></span><br><span class="line"></span><br><span class="line">A=<span class="variable">$IFS</span></span><br><span class="line">IFS=$<span class="string">":"</span></span><br><span class="line">cat /etc/passwd| <span class="keyword">while</span> <span class="built_in">read</span> line1 <span class="comment"># 通过输出重定向读入</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line1</span></span><br><span class="line"><span class="comment">#echo $line1 $line2</span></span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line">IFS=<span class="variable">$A</span></span><br><span class="line"></span><br><span class="line">i=2</span><br><span class="line"><span class="keyword">while</span> ((i&lt;10)) <span class="comment"># 比较数值大小</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">i=$(expr <span class="variable">$i</span> + 1) <span class="comment"># 自增</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while 跟 for 的区别</span></span><br><span class="line">seq 60 62|<span class="keyword">while</span> <span class="built_in">read</span> n</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ssh 192.168.0.<span class="variable">$n</span> <span class="string">"echo ok"</span> <span class="comment"># 只会执行一次</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">---</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `seq 60 62`;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ssh 192.168.0.<span class="variable">$n</span> <span class="string">"echo ok"</span> <span class="comment"># 会依次执行</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>python编程</title>
    <url>/2020/05/Python%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">Python 入门</a></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python高级编程</title>
    <url>/2020/05/Python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>本文使用 python 3 </p>
</blockquote>
<ul>
<li><a href="https://docs.python.org/zh-cn/3/tutorial/index.html" target="_blank" rel="noopener"> Python docs </a><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3>s = “<a href="http://www.abc.com" target="_blank" rel="noopener">http://www.abc.com</a>“</li>
</ul>
<h4 id="字符串断言"><a href="#字符串断言" class="headerlink" title="字符串断言"></a>字符串断言</h4><p>isalpha         # 字母<br>isidentifier    # 标识符<br>isspace         # 空格<br>isascii         # ascii 码<br>islower         # 小写<br>isupper         # 大写<br>istitle         # 标题 “Abc”<br>isdecimal       # 十进制数<br>isnumeric       # 数字<br>isalnum         # 字母和数字<br>isdigit         # 数字<br>isprintable     # 可打印字符 “\n”                     </p>
<h4 id="字符串常用的操作"><a href="#字符串常用的操作" class="headerlink" title="字符串常用的操作"></a>字符串常用的操作</h4><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>l = list(range(3))</p>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h1 id="迭代器与生产器"><a href="#迭代器与生产器" class="headerlink" title="迭代器与生产器"></a>迭代器与生产器</h1><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h1 id="命名空间-作用域"><a href="#命名空间-作用域" class="headerlink" title="命名空间/作用域"></a>命名空间/作用域</h1><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1>]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>java编程</title>
    <url>/2020/05/Java%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="/2020/05/Java%E7%BC%96%E7%A8%8B/" title="java编程">java编程</a></li>
<li><a href="/2020/06/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" title="Java面向对象">Java面向对象</a></li>
<li><a href="/2020/06/Java%E9%AB%98%E7%BA%A7%E7%AF%87/" title="Java高级篇">Java高级篇</a></li>
<li></li>
<li><a href="/2020/06/SpringMVC/" title="SpringMVC">SpringMVC</a></li>
<li><a href="/2020/06/Springboot/" title="Springboot">Springboot</a></li>
<li><a href="https://spring.io" target="_blank" rel="noopener">spring</a></li>
<li><a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">java help</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="noopener">IBM cn community</a></li>
<li><a href="https://www.javatpoint.com/servlet-tutorial" target="_blank" rel="noopener">Servlet</a></li>
</ul>
<h2 id="示例-touch-HelloWorld-java"><a href="#示例-touch-HelloWorld-java" class="headerlink" title="示例 touch HelloWorld.java"></a>示例 touch HelloWorld.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 第一个Java程序</span></span><br><span class="line"><span class="comment">     * 它将打印字符串 Hello World</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>); <span class="comment">// 打印 Hello World</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac  HelloWorld.java <span class="comment"># 编译</span></span><br><span class="line">java HelloWorld <span class="comment"># 执行</span></span><br></pre></td></tr></table></figure>
<h2 id="打成-jar-包"><a href="#打成-jar-包" class="headerlink" title="打成 jar 包"></a>打成 jar 包</h2><p>jar 是zip压缩文件<br>jar 相当于一个目录<br>通过 MAINFEST.MF 指定入口类<br>META-INF/MANIFEST.MF<br>Main-Class: com.company.sample.main</p>
<p>打成jar包<br>zip -r test.jar ./*</p>
<p>java -jar main.jar<br>or<br>java -cp test.jar com.company.sample.main</p>
<h3 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h3><p>一个源文件中只能有一个public类<br>一个源文件可以有多个非public类<br>源文件的名称应该和public类的类名保持一致。<br>package语句应该在源文件的首行。<br>import语句放在package语句和类定义之间。<br>import语句和package语句对源文件中定义的所有类都有效。</p>
<h3 id="Java包-（对java类分类）"><a href="#Java包-（对java类分类）" class="headerlink" title="Java包 （对java类分类）"></a>Java包 （对java类分类）</h3><p>对类和接口进行分类。</p>
<h3 id="Import语句"><a href="#Import语句" class="headerlink" title="Import语句"></a>Import语句</h3><p>java_installation/java/io路径下的所有类</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>内置数据类型<br>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。<br>byte 8、short 16、int 32、long 64<br>float 32、double 64<br>boolean true|false<br>char 16 unicode</li>
<li>引用数据类型<br>引用类型指向一个对象，指向对象的变量是引用变量。<br>对象、数组都是引用数据类型。<br>所有引用类型的默认值都是null。</li>
</ul>
<blockquote>
<p>java.lang.Byte、java.lang.Integer 包装类</p>
<p>内存最小的原子单位是btye，想象一下 boolean 是怎么存放的。</p>
</blockquote>
<h3 id="Java-常量"><a href="#Java-常量" class="headerlink" title="Java 常量"></a>Java 常量</h3><p>在程序运行时是不能被修改的。</p>
<p>常量定义<br>public static final int RATE = 5.0 ;</p>
<h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double<br>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。<br>强转导致溢出或损失精度<br>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i1;</span><br></pre></td></tr></table></figure>
<h3 id="访问控制修饰符-实际使用中常用-private、public"><a href="#访问控制修饰符-实际使用中常用-private、public" class="headerlink" title="访问控制修饰符 (实际使用中常用 private、public)"></a>访问控制修饰符 (实际使用中常用 private、public)</h3><ul>
<li>default 同一包内可见 package</li>
<li>protected 同一包内的类和所有子类可见</li>
<li>private 同一类内可见</li>
<li>public 对所有类可见</li>
</ul>
<h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><p>static 修饰符，用来修饰类方法和类变量。<br>final 修饰符，用来修饰类、方法和变量</p>
<blockquote>
<p> final 修饰的类不能够被继承<br>  修饰的方法不能被继承类重新定义<br>  修饰的变量为常量，是不可修改的</p>
</blockquote>
<p>abstract 修饰符，用来创建抽象类和抽象方法。<br>synchronized 和 volatile 修饰符，主要用于线程的编程。<br>  synchronized 关键字声明的方法同一时间只能被一个线程访问。</p>
<h3 id="transient-修饰符"><a href="#transient-修饰符" class="headerlink" title="transient 修饰符"></a>transient 修饰符</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> transient <span class="built_in">int</span> limit = <span class="number">55</span>;   <span class="comment">// 不会持久化</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> b; <span class="comment">// 持久化</span></span><br></pre></td></tr></table></figure>
<h3 id="volatile-修饰符"><a href="#volatile-修饰符" class="headerlink" title="volatile 修饰符"></a>volatile 修饰符</h3><p>两个不同的线程总是看到某个成员变量的同一个值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="comment">// 第一线程</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        active = <span class="keyword">true</span>; </span><br><span class="line">        <span class="keyword">while</span> (active) <span class="comment">// 如果不用 volatile 修饰的话，第一个线程一直读缓存的数据，即使第二个线程改变了active 值，第一线程也读不到。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="comment">// 第二线程</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        active = <span class="keyword">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li>位运算<ul>
<li>与 &amp;</li>
<li>非 ^</li>
<li>或 |</li>
<li>移位 &gt;&gt;</li>
</ul>
</li>
<li>三元运算 ?:</li>
<li>instanceof</li>
</ul>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">Thread</span> 类</span><br><span class="line">  <span class="variable">run</span></span><br><span class="line">  <span class="variable">Thread.sleep</span>(<span class="number">1000</span>)</span><br><span class="line"><span class="variable">new</span></span><br><span class="line"><span class="variable">runnable</span></span><br><span class="line"><span class="variable">no</span> <span class="variable">runnable</span></span><br><span class="line">  <span class="function"><span class="title">wait</span>() 阻塞</span></span><br><span class="line"><span class="function">  <span class="title">resume</span>() 恢复</span></span><br><span class="line"><span class="function">  <span class="title">notify</span>()</span></span><br><span class="line">  <span class="function"><span class="title">notifyAll</span>()</span></span><br></pre></td></tr></table></figure>
<h3 id="jvm-debug"><a href="#jvm-debug" class="headerlink" title="jvm debug"></a>jvm debug</h3><p>java 一切都是在拼命令行参数<br>首先确定 程序运行在哪个jvm？<br>java 5 below<br>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044</p>
<p>java 5 and above<br>-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=1044</p>
<ul>
<li><a href="https://www.jetbrains.com/help/idea/tutorial-remote-debug.html#0124d250" target="_blank" rel="noopener">remote-debug</a></li>
</ul>
<p>查看源码在那？</p>
<h2 id="java-集合"><a href="#java-集合" class="headerlink" title="java 集合"></a>java 集合</h2><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">java.util</span><br><span class="line">Collection</span><br><span class="line">  <span class="built_in">list</span> 有序列表，支持泛型</span><br><span class="line">    ArrayList 数组实现</span><br><span class="line">    LinkedList 链表实现</span><br><span class="line">  <span class="built_in">set</span> 无序列表，没重复元素</span><br><span class="line"><span class="built_in">Map</span></span><br><span class="line">  key，value </span><br><span class="line"> </span><br><span class="line">线程安全的实现，jdk早期类</span><br><span class="line">Hashtable <span class="built_in">map</span></span><br><span class="line">Vector <span class="built_in">list</span></span><br><span class="line"><span class="built_in">Stack</span></span><br><span class="line"></span><br><span class="line">引用类型比较必须重写<span class="keyword">equals</span>方法</span><br></pre></td></tr></table></figure>
<h3 id="把-array-转成-arraylist"><a href="#把-array-转成-arraylist" class="headerlink" title="把 array 转成 arraylist"></a>把 array 转成 arraylist</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] arr= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">ArrayList&lt;Integer&gt; arrayList1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">arrayList1.addAll(Arrays.asList(arr));</span><br></pre></td></tr></table></figure>
<h2 id="IO-操作"><a href="#IO-操作" class="headerlink" title="IO 操作"></a>IO 操作</h2><p>从外部输入内存<br>从内存输出到外部<br><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">IO 流</span><br><span class="line"><span class="built_in">char</span></span><br><span class="line">  Reader</span><br><span class="line">    FileReader</span><br><span class="line">  Writer</span><br><span class="line">    FileWriter</span><br><span class="line">binnary(<span class="built_in">byte</span>)</span><br><span class="line">  InputStream</span><br><span class="line">    FileInputStream</span><br><span class="line">  OutputStream</span><br><span class="line">    FileOutputStream</span><br><span class="line"></span><br><span class="line">java.<span class="built_in">io</span> 同步<span class="built_in">io</span></span><br><span class="line">java.nio 异步<span class="built_in">io</span></span><br></pre></td></tr></table></figure></p>
<p>文件<br>new File()</p>
<p>关闭文件新方法<br>try(resource){}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    f.createNewFile();</span><br><span class="line">    System.out.println(f.getCanonicalFile());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(FileWriter writer = <span class="keyword">new</span> FileWriter(<span class="string">"a.txt"</span>))&#123;</span><br><span class="line">    writer.append(<span class="string">"good map"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="stringbuilder-and-stringbuffer"><a href="#stringbuilder-and-stringbuffer" class="headerlink" title="stringbuilder and stringbuffer"></a>stringbuilder and stringbuffer</h2><p>Stringbuilder 解决 string 用 + 拼接产生的类存碎片<br>Stringbuffer 多线程 string 方案<br>链式操作 return this 实现</p>
<h2 id="包装类（把基本数据类型包装成类）"><a href="#包装类（把基本数据类型包装成类）" class="headerlink" title="包装类（把基本数据类型包装成类）"></a>包装类（把基本数据类型包装成类）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">int</span> i1 = i.intValue(); </span><br><span class="line"></span><br><span class="line">Integer a = <span class="number">99</span>; <span class="comment">// 自动装箱</span></span><br><span class="line"><span class="keyword">int</span> b = a; <span class="comment">// 自动拆箱</span></span><br><span class="line">System.out.println(a.toString());</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>自动装箱自动拆箱只发生在编译阶段。</p>
</blockquote>
<h2 id="java-Bean"><a href="#java-Bean" class="headerlink" title="java Bean"></a>java Bean</h2><p>含有 setter，getter 方法的java 类。</p>
<h2 id="enum-类"><a href="#enum-类" class="headerlink" title="enum 类"></a>enum 类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">  RED,GREEN,BLUE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>能访问静态属性和静态方法<br>用于工具类</p>
<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>add,offer<br>remove,poll 删除<br>element,peek 不删除</p>
<h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority queue"></a>priority queue</h3><p>add,offer<br>remove,poll<br>element,peek<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// priority queue</span></span><br><span class="line">Queue q = <span class="keyword">new</span> PriorityQueue&lt;Person&gt;(<span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">q.add(<span class="keyword">new</span> Person(<span class="string">"yanqi"</span>,<span class="number">32</span>));</span><br><span class="line">q.add(<span class="keyword">new</span> Person(<span class="string">"faye"</span>,<span class="number">28</span>));</span><br><span class="line">q.add(<span class="keyword">new</span> Person(<span class="string">"ryan"</span>,<span class="number">5</span>));</span><br><span class="line">q.add(<span class="keyword">new</span> Person(<span class="string">"poly"</span>,<span class="number">29</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(q.poll());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>addLast,addFirst,offerLast,offerFirst<br>removeFrist,pollFirst<br>elementFrist,peekFirst</p>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul>
<li>native</li>
<li>strictfp</li>
<li>synchronized</li>
<li>transient</li>
<li>volatile</li>
<li>instanceof</li>
</ul>
<h2 id="java-基本语法"><a href="#java-基本语法" class="headerlink" title="java 基本语法"></a>java 基本语法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"helloworld"</span>);</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Primitive Types</span></span><br><span class="line">        <span class="comment">// byte,short,int,long L</span></span><br><span class="line">        <span class="comment">// float F ,double</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// reference Types</span></span><br><span class="line">        Point point1 = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">220</span>);</span><br><span class="line">        Point point2 = <span class="keyword">new</span> Point(<span class="number">50</span>, <span class="number">120</span>);</span><br><span class="line">        System.out.println(point1.distance(point2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String</span></span><br><span class="line">        String a = <span class="keyword">new</span> String(<span class="string">"hi ryan"</span>);</span><br><span class="line">        a = a + <span class="string">"!!"</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(a.indexOf(<span class="string">'r'</span>));</span><br><span class="line">        System.out.println(a.replace(<span class="string">'r'</span>, <span class="string">'R'</span>));</span><br><span class="line">        System.out.println(a.toUpperCase());</span><br><span class="line">        a = <span class="string">"  "</span> + a + <span class="string">"  "</span>;</span><br><span class="line">        System.out.println(a.trim());</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Escape Sequences</span></span><br><span class="line">        String s = <span class="string">"hi\tryan\\\n"</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Arrays</span></span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.out.println(Arrays.toString(numbers));</span><br><span class="line">        <span class="keyword">int</span>[][][] dimnumbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">        System.out.println(Arrays.deepToString(dimnumbers));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Constants</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> PI = <span class="number">3.14F</span>;</span><br><span class="line"><span class="comment">//        PI=3.154</span></span><br><span class="line">        System.out.println(<span class="number">3</span> * PI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Arithmetic expression</span></span><br><span class="line">        <span class="comment">// order of operator</span></span><br><span class="line">        <span class="keyword">int</span> exp = <span class="number">2</span> + <span class="number">10</span> * <span class="number">3</span>;</span><br><span class="line">        System.out.println(exp);</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y = x++;</span><br><span class="line">        <span class="keyword">int</span> z = ++x;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">        System.out.println(z);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Casting</span></span><br><span class="line">        <span class="keyword">int</span> x1 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">double</span> y1 = x1 + <span class="number">3</span>;</span><br><span class="line">        System.out.println(y1);</span><br><span class="line">        <span class="keyword">double</span> x2 = <span class="number">10.5</span>;</span><br><span class="line">        <span class="keyword">int</span> y2 = (<span class="keyword">int</span>) x2 + <span class="number">3</span>;</span><br><span class="line">        System.out.println(y2);</span><br><span class="line">        String x3 = <span class="string">"10"</span>;</span><br><span class="line">        <span class="keyword">int</span> y3 = Integer.parseInt(x3) + <span class="number">5</span>;</span><br><span class="line">        System.out.println(y3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Math</span></span><br><span class="line">        <span class="keyword">int</span> result = Math.round(<span class="number">1.5F</span>);</span><br><span class="line">        <span class="keyword">int</span> result1 = (<span class="keyword">int</span>) Math.ceil(<span class="number">1.5F</span>);</span><br><span class="line">        <span class="keyword">int</span> result2 = (<span class="keyword">int</span>) Math.floor(<span class="number">1.5F</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(result1);</span><br><span class="line">        System.out.println(result2);</span><br><span class="line">        <span class="keyword">int</span> result3 = Math.max(<span class="number">32</span>,<span class="number">23</span>);</span><br><span class="line">        System.out.println(result3);</span><br><span class="line">        <span class="comment">// shift +fn+f6 modify variable</span></span><br><span class="line">        <span class="keyword">double</span> rand = Math.random();</span><br><span class="line">        System.out.println(rand);</span><br><span class="line"></span><br><span class="line">        NumberFormat percent = NumberFormat.getPercentInstance();</span><br><span class="line">        String p = percent.format(.<span class="number">12</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"please entry your name :"</span>);</span><br><span class="line">        String name = input.nextLine();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>golang编程</title>
    <url>/2020/05/golang%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Goloang"><a href="#Goloang" class="headerlink" title="Goloang"></a>Goloang</h2><ul>
<li><a href="https://golang.org/" target="_blank" rel="noopener"> Golang </a></li>
<li><a href="https://www.runoob.com/go/go-tutorial.html" target="_blank" rel="noopener"> 菜鸟教程 golang  </a></li>
<li><a href="https://github.com/golang/go" target="_blank" rel="noopener"> Golang 源码 </a></li>
<li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener"> awesome-go </a></li>
<li><a href="https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-compile-intro/" target="_blank" rel="noopener">Go 语言设计与实现</a></li>
</ul>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 包定义</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量定义</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	i <span class="keyword">int</span></span><br><span class="line">	k <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量定义</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	city <span class="keyword">string</span> = <span class="string">"beijing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 变量 := 变量 + 字面常量</span></span><br><span class="line">	sum := i + <span class="number">10</span></span><br><span class="line">	<span class="comment">// 输出</span></span><br><span class="line">	fmt.Println(sum)</span><br><span class="line">	<span class="comment">// 浮点计算</span></span><br><span class="line">	fdiv := <span class="number">10</span> / <span class="number">0.3</span></span><br><span class="line">	fmt.Println(fdiv)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 把数值转成字符串</span></span><br><span class="line">	<span class="comment">// 使用 strconv 库来转换</span></span><br><span class="line">	fmt.Println(strconv.FormatFloat(fdiv, <span class="string">'f'</span>, <span class="number">-1</span>, <span class="number">64</span>))</span><br><span class="line">	<span class="comment">// 打印到屏幕</span></span><br><span class="line">	fmt.Printf(<span class="string">"x = %.15f\n"</span>, fdiv)</span><br><span class="line">	<span class="comment">// 以返回值形式返回</span></span><br><span class="line">	fmt.Println(fmt.Sprintf(<span class="string">"%.15f"</span>, fdiv))</span><br><span class="line"></span><br><span class="line">	<span class="comment">//把字符串转成数值</span></span><br><span class="line">	fmt.Println(strconv.Atoi(<span class="string">"0.333333"</span>))</span><br><span class="line">	fmt.Println(strconv.Atoi(<span class="string">"12345"</span>))</span><br><span class="line">	fmt.Println(strconv.Atoi(<span class="string">"123ead"</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 取余运算</span></span><br><span class="line">	fmt.Println(<span class="number">1</span> % <span class="number">7</span>) <span class="comment">// 比余数小取本身</span></span><br><span class="line">	fmt.Println(<span class="number">16</span> % <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">"------------"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用按位与位(乘法运算)获得循环数，相与数必须是：1，3，7，31，2^n-1</span></span><br><span class="line">	<span class="comment">// 00001001  9</span></span><br><span class="line">	<span class="comment">// 00000111  7</span></span><br><span class="line">	<span class="comment">//         = 0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">		fmt.Println(i, i&amp;<span class="number">3</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用移位算乘法,因为字长为64，所以到第63次时变负值，64次溢出</span></span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">uint64</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>; i &lt; <span class="number">65</span>; i++ &#123;</span><br><span class="line">		fmt.Println(i, <span class="number">1</span>&lt;&lt;i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 包定义</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 循环</span></span><br><span class="line">	<span class="comment">// 一重循环算法复杂度为 O(n)+1</span></span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(i)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 二重循环 算法复杂度为 O(n^2) +2</span></span><br><span class="line">	<span class="keyword">var</span> k, j <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">			fmt.Println(k, j)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 二重循环</span></span><br><span class="line">	<span class="comment">// 逐步递减</span></span><br><span class="line">	<span class="keyword">var</span> m, n <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> m = <span class="number">1</span>; m &lt; <span class="number">10</span>; m++ &#123;</span><br><span class="line">		<span class="keyword">for</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>/m; n++ &#123;</span><br><span class="line">			<span class="comment">// strings 库 提供对字符串的各种处理方法</span></span><br><span class="line">			fmt.Printf(<span class="string">"%d %s"</span>, n, strings.Repeat(<span class="string">"*"</span>, n))</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 逐步递增</span></span><br><span class="line">	<span class="keyword">var</span> c, d <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> c = <span class="number">0</span>; c &lt; <span class="number">10</span>; c++ &#123;</span><br><span class="line">		<span class="keyword">for</span> d = <span class="number">0</span>; d &lt; <span class="number">2</span>*c; d++ &#123;</span><br><span class="line">			fmt.Printf(<span class="string">"%d %s"</span>, d, strings.Repeat(<span class="string">"*"</span>, d))</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 二分法猜数</span></span><br><span class="line">	<span class="keyword">var</span> num, g <span class="keyword">int</span></span><br><span class="line">	g = <span class="number">231</span></span><br><span class="line">	fmt.Println(<span class="string">"猜一个1000以内的数"</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		fmt.Scan(&amp;num)</span><br><span class="line">		<span class="keyword">if</span> num &gt; g &#123;</span><br><span class="line">			fmt.Println(<span class="string">"猜的数大了"</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> num == g &#123;</span><br><span class="line">			fmt.Println(<span class="string">"猜中了"</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"猜的数小了"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(num)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line"><span class="comment">// 切片</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 数组</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">	fmt.Println(<span class="string">"array: "</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 切片</span></span><br><span class="line"><span class="keyword">for</span> k1, v1 := <span class="keyword">range</span> slice &#123;</span><br><span class="line">	fmt.Println(<span class="string">"slice: "</span>, k1, v1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 map</span></span><br><span class="line"><span class="comment">//for k2, v2 := range m &#123;</span></span><br><span class="line"><span class="comment">//	fmt.Println("map: ", k2, v2)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">slice = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// 打印 切片</span></span><br><span class="line"><span class="keyword">for</span> k3, v3 := <span class="keyword">range</span> slice &#123;</span><br><span class="line">	fmt.Println(<span class="string">"slice: "</span>, k3, v3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须要初始化</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">m[<span class="number">1</span>] = <span class="string">"beijing"</span></span><br><span class="line">m[<span class="number">3</span>] = <span class="string">"shanghai"</span></span><br><span class="line"><span class="comment">// 打印 map</span></span><br><span class="line"><span class="keyword">for</span> k2, v2 := <span class="keyword">range</span> m &#123;</span><br><span class="line">	fmt.Println(<span class="string">"map: "</span>, k2, v2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印长度</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(arr))</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice))</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(arr))</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组，切片常用的方法</span></span><br><span class="line">fmt.Println(arr[:<span class="number">3</span>])</span><br><span class="line">fmt.Println(slice[<span class="number">2</span>:<span class="number">8</span>])</span><br><span class="line">fmt.Println(arr[:])</span><br><span class="line">sort.Ints(slice)</span><br><span class="line">s1 := []<span class="keyword">string</span>&#123;<span class="string">"abc"</span>, <span class="string">"zbc"</span>, <span class="string">"edf"</span>&#125;</span><br><span class="line">sort.Strings(s1)</span><br><span class="line">fmt.Println(<span class="string">"sort: "</span>, s1)</span><br><span class="line"><span class="built_in">copy</span>(slice, slice)</span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">fmt.Println(slice)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">fmt.Println(m)</span><br><span class="line"><span class="built_in">delete</span>(m, <span class="number">3</span>)</span><br><span class="line">fmt.Println(m)</span><br><span class="line"><span class="built_in">println</span>(m[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高级一点</span></span><br><span class="line"><span class="comment">// map key 是int 值是 切片</span></span><br><span class="line">mode1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]([]<span class="keyword">string</span>))</span><br><span class="line"><span class="comment">//定义一个map（key 是 string，值是个数组）</span></span><br><span class="line">mode2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]([<span class="number">10</span>]<span class="keyword">string</span>))</span><br><span class="line"><span class="comment">// 定义一个string 类型map，值是map类型（值的key 是string，值是string切片类型）</span></span><br><span class="line">mode3 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>](<span class="keyword">map</span>[<span class="keyword">string</span>]([]<span class="keyword">string</span>)))</span><br><span class="line"><span class="comment">// 定义一个切片，值也是切片，类型string</span></span><br><span class="line">_ = <span class="built_in">make</span>([][]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// 定义一个切片，切片的值是二维切片，类型是string</span></span><br><span class="line">mode4 := <span class="built_in">make</span>([]([]([]<span class="keyword">string</span>)), <span class="number">10</span>)</span><br><span class="line"><span class="comment">// 定义一个三维数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体切片</span></span><br><span class="line"><span class="keyword">type</span> s <span class="keyword">struct</span> &#123;</span><br><span class="line">	id   <span class="keyword">int</span></span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">_ = <span class="built_in">make</span>([][]s, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体指针类型的切片</span></span><br><span class="line">_ = <span class="built_in">make</span>([][]*s, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"map1: "</span>, mode1)</span><br><span class="line">fmt.Println(<span class="string">"map2: "</span>, mode2)</span><br><span class="line">fmt.Println(<span class="string">"map3: "</span>, mode3)</span><br><span class="line">fmt.Println(<span class="string">"slice4: "</span>, mode4)</span><br><span class="line">fmt.Println(<span class="string">"arr5: "</span>, arr1)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>出境旅游常用英语</title>
    <url>/2020/05/%E5%87%BA%E5%A2%83%E6%97%85%E6%B8%B8%E5%B8%B8%E7%94%A8%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>出入境填表常用词汇</p>
<p>姓：Family name，Surname</p>
<p>名：First Name，Given name</p>
<p>性别：sex，gender</p>
<p>男：male；女：female</p>
<p>国籍：nationality，country of citizenship</p>
<p>护照号：passport number</p>
<p>原住地：country of origin</p>
<p>前往国：destination country</p>
<p>登机城市：city where you boarded</p>
<p>签证签发地：city where visa was issued</p>
<p>签发日期：date of issue</p>
<p>出生日期：date of birth，birth date</p>
<p>年：year；月：month；日：day</p>
<p>偕行人数：accompanying number</p>
<p>签名：signature</p>
<p>官方填写：official use only</p>
<p>职业：occupation</p>
<p>护照：Passport；签证：Visa</p>
<p>登机、启程：Embarkation</p>
<p>登岸：Disembarkation</p>
<p>商务签证：Business Visa</p>
<p>观光签证：Tourist Visa</p>
<p>乘机常用词汇</p>
<p>航站、终点站：Terminal</p>
<p>入境大厅：Arrival Lobby</p>
<p>出境大厅：Departure Lobby</p>
<p>登机门号码：Gate Number</p>
<p>登机证：Boarding Card，Boarding Pass</p>
<p>机场税：Airport Tax</p>
<p>登机手续办理处：Check in Counter</p>
<p>海关申报处：Customs Service Area</p>
<p>货币申报：Currency Declaration</p>
<p>免税商品：Duty-Free Items</p>
<p>大号：large；中号：medium；小号：small</p>
<p>纪念品：Souvenir</p>
<p>行李：Baggage，Luggage</p>
<p>~ 1 / 11 ~</p>
<p>托运的行李：Checked baggage</p>
<p>行李领取处：Baggage claim area</p>
<p>随身行李：Carry-on baggage</p>
<p>行李牌：Baggage Tag</p>
<p>行李推车：Luggage Cart</p>
<p>退税处：Tax-free refund</p>
<p>盥洗室（厕所）：Lavatory，washroom，toilet</p>
<p>W.C.＝water closet，rest room</p>
<p>男厕：Men’s，Gent’s，Gentlemen’s</p>
<p>女厕：Women’s，Lady’s</p>
<p>使用中：Occupied</p>
<p>空闲：Vacant</p>
<p>男（女）空服员：Steward（Stewardess）</p>
<p>机内免税贩卖：In-Flight Sales</p>
<p>钱币兑换常用词汇</p>
<p>外币兑换店：Currency Exchange Shop</p>
<p>汇率：Exchange rate</p>
<p>旅行支票：Traveler’s check</p>
<p>手续费：Commission</p>
<p>银行买入价：We buy（Bid）</p>
<p>银行卖出价：We sell（Ask）</p>
<p>酒店常用词汇</p>
<p>入住登记手续：Check-in</p>
<p>客房服务：Room Service</p>
<p>退房（时间）：Check Out（Time）</p>
<p>前台：Front Desk，Reception</p>
<p>酒店大堂：Lobby</p>
<p>咖啡馆：Coffee shop</p>
<p>服务员，侍者：waiter（餐厅、旅馆的服务生、行李员）</p>
<p>电话叫醒服务：Wake Up Call，Morning Call</p>
<p>日常用语</p>
<p>你好，很高兴认识你：How do you do，I’m glad to meet you.（It’s nice meeting you.）</p>
<p>请问你叫什么名字：May I have your name, please?</p>
<p>我可以试穿一下吗：May I try it on?</p>
<p>多少钱：How much?</p>
<p>请把菜单给我：Please show me the menu.</p>
<p>干杯：Cheers! Bottoms up!</p>
<p>~ 2 / 11 ~</p>
<p>我迷路了，您能告诉我怎么回饭店吗：I’m lost．Could you do me a favor to find my hotel?</p>
<p>你能帮我拍照吗：Could you take a picture for me?</p>
<p>非常感谢：Thank you very much.</p>
<p>不客气：You’re welcome．</p>
<p>我就是忍不住：I just couldn’t help it.</p>
<p>让我们保持联系：Let’s keep in touch.</p>
<p>我怎样能跟你联络上：How can I get in touch with you?</p>
<p>我将会尽我最大努力：I’ll do my best.</p>
<p>请稍等一下：Wait a moment please.</p>
<p>你先请：After you</p>
<p>我们该走了：We’d better be off.</p>
<p>我真要累死了：I’m really dead.</p>
<p>真是那样吗：Is that so?</p>
<p>我不确切知道：I don’t know for sure.</p>
<p>太好了，太棒了：That’s something.</p>
<p>这主意真棒：Brilliant idea!</p>
<p>此话当真：Do you really mean it?</p>
<p>你帮了大忙：You are a great help.</p>
<p>我身无分文：I’m broke.</p>
<p>我一直不太喜欢这东西：I never liked it anyway.</p>
<p>别跟我耍花招：Don’t play games with me!</p>
<p>看情况再说：That depends.</p>
<p>最全食物的英文翻译</p>
<p>水果类（fruits）：</p>
<p>火龙果 pitaya</p>
<p>西红柿 tomato</p>
<p>菠萝 pineapple</p>
<p>西瓜watermelon</p>
<p>香蕉banana</p>
<p>柚子 shaddock （pomelo）</p>
<p>橙子orange</p>
<p>苹果apple</p>
<p>柠檬lemon</p>
<p>樱桃 cherry</p>
<p>桃子peach</p>
<p>梨 pear</p>
<p>枣Chinese date （去核枣 pitted date ）</p>
<p>~ 3 / 11 ~</p>
<p>椰子coconut</p>
<p>草莓 strawberry</p>
<p>树莓 raspberry</p>
<p>蓝莓 blueberry</p>
<p>黑莓 blackberry</p>
<p>葡萄 grape</p>
<p>甘蔗 sugar cane</p>
<p>芒果 mango</p>
<p>木瓜 pawpaw或者papaya</p>
<p>杏子 apricot 　</p>
<p>油桃 nectarine</p>
<p>柿子persimmon</p>
<p>石榴pomegranate</p>
<p>榴莲 jackfruit</p>
<p>槟榔果 areca nut</p>
<p>（西班牙产苦橙）bitter orange</p>
<p>猕猴桃 kiwi fruit or Chinese gooseberry</p>
<p>金橘cumquat</p>
<p>蟠桃 flat peach</p>
<p>荔枝 litchi</p>
<p>青梅greengage</p>
<p>山楂果 haw</p>
<p>水蜜桃honey peach</p>
<p>香瓜，甜瓜 musk melon</p>
<p>李子plum</p>
<p>杨梅 waxberry red bayberry</p>
<p>桂圆 longan</p>
<p>沙果 crab apple</p>
<p>杨桃starfruit</p>
<p>枇杷 loquat</p>
<p>柑橘 tangerine</p>
<p>莲雾wax-apple</p>
<p>番石榴 guava</p>
<p>肉、蔬菜类：</p>
<p>南瓜（倭瓜） pumpkin cushaw</p>
<p>甜玉米 Sweet corn</p>
<p>牛肉beef</p>
<p>猪肉pork</p>
<p>羊肉 mutton</p>
<p>羔羊肉lamb</p>
<p>鸡肉chicken</p>
<p>生菜 莴苣lettuce</p>
<p>白菜 Chinese cabbage （celery cabbage）（甘蓝）</p>
<p>卷心菜 cabbage</p>
<p>萝卜 radish</p>
<p>胡萝卜 carrot</p>
<p>韭菜leek</p>
<p>木耳 agarics</p>
<p>豌豆 pea</p>
<p>马铃薯（土豆） potato</p>
<p>黄瓜 cucumber</p>
<p>苦瓜 balsam pear</p>
<p>秋葵 okra</p>
<p>洋葱 onion</p>
<p>芹菜 celery</p>
<p>芹菜杆 celery sticks</p>
<p>地瓜 sweet potato</p>
<p>蘑菇 mushroom</p>
<p>橄榄 olive</p>
<p>菠菜spinach</p>
<p>冬瓜 （Chinese）wax gourd</p>
<p>~ 4 / 11 ~</p>
<p>莲藕 lotus root</p>
<p>紫菜 laver</p>
<p>油菜 cole rape</p>
<p>茄子 eggplant</p>
<p>香菜 caraway</p>
<p>枇杷loquat</p>
<p>青椒 green pepper</p>
<p>四季豆 青刀豆 garden bean</p>
<p>银耳 silvery fungi</p>
<p>腱子肉tendon</p>
<p>肘子 pork joint</p>
<p>茴香fennel（茴香油fennel oil 药用）</p>
<p>鲤鱼carp</p>
<p>咸猪肉bacon</p>
<p>金针蘑 needle mushroom</p>
<p>扁豆 lentil</p>
<p>槟榔 areca</p>
<p>牛蒡great burdock</p>
<p>水萝卜 summer radish</p>
<p>竹笋 bamboo shoot</p>
<p>艾蒿Chinese mugwort</p>
<p>绿豆mung bean</p>
<p>毛豆green soy bean</p>
<p>瘦肉 lean meat</p>
<p>肥肉speck</p>
<p>黄花菜 day lily （day lily bud）</p>
<p>豆芽菜 bean sprout</p>
<p>丝瓜 towel gourd</p>
<p>(注：在美国丝瓜或用来做丝瓜茎loofah洗澡的，不是食用的)</p>
<p>海鲜类（sea food）：</p>
<p>虾仁 Peeled Prawns</p>
<p>龙虾 lobster</p>
<p>小龙虾 crayfish（退缩者）</p>
<p>蟹 crab</p>
<p>蟹足crab claws</p>
<p>小虾（虾米） shrimp</p>
<p>对虾、大虾 prawn</p>
<p>（烤）鱿鱼（toast）squid</p>
<p>海参 sea cucumber</p>
<p>扇贝 scallop</p>
<p>鲍鱼 sea-ear abalone</p>
<p>小贝肉cockles</p>
<p>牡蛎oyster</p>
<p>鱼鳞scale</p>
<p>海蜇jellyfish</p>
<p>鳖 海龟turtle</p>
<p>蚬 蛤 clam</p>
<p>鲅鱼 culter</p>
<p>鲳鱼 butterfish</p>
<p>虾籽 shrimp egg</p>
<p>鲢鱼 银鲤鱼chub silver carp</p>
<p>黄花鱼 yellow croaker</p>
<p>调料类（seasonings）：</p>
<p>醋 vinegar</p>
<p>酱油 soy</p>
<p>盐 salt</p>
<p>加碘盐 iodized salt</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
  </entry>
  <entry>
    <title>编程英语</title>
    <url>/2020/05/%E7%BC%96%E7%A8%8B%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>application</td>
<td>应用程式 应用、应用程序 apply</td>
</tr>
<tr>
<td>archi-tect-ure</td>
<td>架构、系统架构 体系结构</td>
</tr>
<tr>
<td>application framework</td>
<td>应用程式框架、应用框架 应用程序框架</td>
</tr>
<tr>
<td>end user</td>
<td>终端用户</td>
</tr>
<tr>
<td>design phase</td>
<td>设计阶段</td>
</tr>
<tr>
<td>design by contract</td>
<td>契约式设计</td>
</tr>
<tr>
<td>design pattern</td>
<td>设计范式、设计样式 设计模式</td>
</tr>
<tr>
<td>object oriented design</td>
<td>面向对象的设计</td>
</tr>
<tr>
<td>collective noun</td>
<td>集体名词</td>
</tr>
<tr>
<td>The contrasts with</td>
<td>这与</td>
</tr>
<tr>
<td>involved with</td>
<td>参与</td>
</tr>
<tr>
<td>bundled with</td>
<td>捆绑一起</td>
</tr>
<tr>
<td>published separately</td>
<td>单独发布</td>
</tr>
</tbody>
</table>
</div>
<p>Application software (app for short) is a program or group of programs designed for end users. Examples of an application include a <strong>word processor</strong>, a <strong>spreadsheet</strong>, an <strong>accounting application</strong>, a <strong>web browser</strong>, an <strong>email client</strong>, a <strong>media player</strong>, a <strong>file viewer</strong>, <strong>simulators</strong>, a <strong>console game</strong> or a <strong>photo editor</strong>. The collective noun application software refers to all applications collectively.[1] This contrasts with system software, which is mainly involved with running the computer.</p>
<p>Applications may be bundled with the computer and its system software or published separately, and may be coded as proprietary, open-source or university projects.[2] Apps built for mobile platforms are called mobile apps.</p>
<h2 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>assign</td>
<td>指派、指定、设值、赋值 赋值</td>
</tr>
<tr>
<td>assignment</td>
<td>指派、指定 赋值、分配</td>
</tr>
<tr>
<td>assignment operator</td>
<td>指派（赋值）运算子 = 赋值操作符</td>
</tr>
<tr>
<td>associated</td>
<td>相应的、相关的 相关的、关联、相应的</td>
</tr>
<tr>
<td>associative container</td>
<td>关联式容器（对应 sequential container）</td>
</tr>
<tr>
<td>atomic</td>
<td>不可分割的 原子的</td>
</tr>
<tr>
<td>attribute</td>
<td>属性 属性、特性</td>
</tr>
<tr>
<td>audio</td>
<td>音讯 音频</td>
</tr>
<tr>
<td>A.I.（artificial intelligence ）</td>
<td>人工智慧 人工智能</td>
</tr>
<tr>
<td>background</td>
<td>背景 背景（用於图形着色）</td>
</tr>
<tr>
<td>argument</td>
<td>引数（传给函式的值）。叁见 parameter 叁数、实质叁数、实叁、自变量</td>
</tr>
<tr>
<td>array</td>
<td>阵列 数组</td>
</tr>
<tr>
<td>arrow</td>
<td>（箭头）</td>
</tr>
<tr>
<td>arrow operator</td>
<td>运算子 箭头操作符</td>
</tr>
<tr>
<td>assembly</td>
<td>装配件</td>
</tr>
<tr>
<td>assembly language</td>
<td>组合语言 汇编语言</td>
</tr>
<tr>
<td>assert(ion)</td>
<td>断言</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-2"><a href="#list-2" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>backward compatible</td>
<td>回溯相容 向下兼容</td>
</tr>
<tr>
<td>bandwidth</td>
<td>频宽 带宽</td>
</tr>
<tr>
<td>base class</td>
<td>基础类别 基类</td>
</tr>
<tr>
<td>base type</td>
<td>基础型别 (等同於 base class)</td>
</tr>
<tr>
<td>batch</td>
<td>批次（意思是整批作业） 批处理</td>
</tr>
<tr>
<td>benefit</td>
<td>利益,收益</td>
</tr>
<tr>
<td>best viable function</td>
<td>最佳可行函式 最佳可行函式从 viable functions 中挑出的最佳吻合者</td>
</tr>
<tr>
<td>binary search</td>
<td>二分搜寻法 二分查找</td>
</tr>
<tr>
<td>binary tree</td>
<td>二元树 二叉树</td>
</tr>
<tr>
<td>binary function</td>
<td>二元函式 双叁函数</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-3"><a href="#list-3" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>binary operator</td>
<td>二元运算子 二元操作符</td>
</tr>
<tr>
<td>binding</td>
<td>系结 绑定</td>
</tr>
<tr>
<td>bit</td>
<td>(发音为beit)位元 位</td>
</tr>
<tr>
<td>bit field</td>
<td>位元栏 位域</td>
</tr>
<tr>
<td>bitmap</td>
<td>位元图 位图</td>
</tr>
<tr>
<td>bitwise</td>
<td>以 bit 为单元逐一┅</td>
</tr>
<tr>
<td>bitwise copy</td>
<td>以 bit 为单元进行复制；位元逐一复制 位拷贝</td>
</tr>
<tr>
<td>block</td>
<td>区块,区段 块、区块、语句块</td>
</tr>
<tr>
<td>boolean</td>
<td>布林值（真假值，true 或 false） 布尔值</td>
</tr>
<tr>
<td>border</td>
<td>边框、框线 边框</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-4"><a href="#list-4" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>brace (curly brace)</td>
<td>大括弧、大括号 花括弧、花括号</td>
</tr>
<tr>
<td>bracket (square brakcet)</td>
<td>中括弧、中括号 方括弧、方括号</td>
</tr>
<tr>
<td>breakpoint</td>
<td>中断点 断点</td>
</tr>
<tr>
<td>build</td>
<td>建造、构筑、建置（MS 用语）</td>
</tr>
<tr>
<td>build－in</td>
<td>内建 内置</td>
</tr>
<tr>
<td>bus</td>
<td>汇流排 总线</td>
</tr>
<tr>
<td>business</td>
<td>商务,业务 业务</td>
</tr>
<tr>
<td>buttons</td>
<td>按钮 按钮</td>
</tr>
<tr>
<td>byte</td>
<td>位元组（由 8 bits 组成） 字节</td>
</tr>
<tr>
<td>cache</td>
<td>快取 高速缓存</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-5"><a href="#list-5" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>call</td>
<td>呼叫、叫用 调用</td>
</tr>
<tr>
<td>callback</td>
<td>回呼 回调</td>
</tr>
<tr>
<td>call operator</td>
<td>call（函式呼叫）运算子调用操作符（同 function call operator）</td>
</tr>
<tr>
<td>candidate</td>
<td>function 候选函式 候选函数（在函式多载决议程序中出现的候选函式）</td>
</tr>
<tr>
<td>chain</td>
<td>串链（例 chain of function calls） 链</td>
</tr>
<tr>
<td>character</td>
<td>字元 字符</td>
</tr>
<tr>
<td>check</td>
<td>box 核取方块 (i.e. check button) 复选框</td>
</tr>
<tr>
<td>checked exception</td>
<td>可控式异常(Java)</td>
</tr>
<tr>
<td>check button</td>
<td>方钮 (i.e. check box) 复选按钮</td>
</tr>
<tr>
<td>child</td>
<td>class 子类别（或称为derived class, subtype 图表类型） 子类</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-6"><a href="#list-6" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>class</td>
<td>类别 类</td>
</tr>
<tr>
<td>class body</td>
<td>类别本体 类体</td>
</tr>
<tr>
<td>class declaration</td>
<td>类别宣告、类别宣告式 类声明</td>
</tr>
<tr>
<td>class definition</td>
<td>类别定义、类别定义式 类定义</td>
</tr>
<tr>
<td>class derivation</td>
<td>list 类别衍化列 类继承列表</td>
</tr>
<tr>
<td>class head</td>
<td>类别表头 类头</td>
</tr>
<tr>
<td>class hierarchy</td>
<td>类别继承体系, 类别阶层 类层次体系</td>
</tr>
<tr>
<td>class library</td>
<td>类别程式库、类别库 类库</td>
</tr>
<tr>
<td>class template</td>
<td>类别模板、类别范本 类模板</td>
</tr>
<tr>
<td>class template partial specializations</td>
<td>类别模板偏特化 类模板部分特化</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-7"><a href="#list-7" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>class template specializations</td>
<td>类别模板特化 类模板特化</td>
</tr>
<tr>
<td>cleanup</td>
<td>清理、善後 清理、清除</td>
</tr>
<tr>
<td>client</td>
<td>客端、客户端、客户 客户</td>
</tr>
<tr>
<td>client－server</td>
<td>主从架构 客户/服务器</td>
</tr>
<tr>
<td>clipboard</td>
<td>剪贴簿 剪贴板</td>
</tr>
<tr>
<td>clone</td>
<td>复制 克隆</td>
</tr>
<tr>
<td>collection</td>
<td>群集 集合</td>
</tr>
<tr>
<td>combo box</td>
<td>复合方块、复合框 组合框</td>
</tr>
<tr>
<td>command line</td>
<td>命令列 命令行 (系统文字模式下的整行执行命令)</td>
</tr>
<tr>
<td>communication</td>
<td>通讯 通讯</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-8"><a href="#list-8" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>compatible</td>
<td>相容 兼容</td>
</tr>
<tr>
<td>compile</td>
<td>time 编译期 编译期、编译时</td>
</tr>
<tr>
<td>compiler</td>
<td>编译器 编译器</td>
</tr>
<tr>
<td>component</td>
<td>组件 组件</td>
</tr>
<tr>
<td>composition</td>
<td>复合、合成、组合 组合</td>
</tr>
<tr>
<td>computer</td>
<td>电脑、计算机 计算机、电脑</td>
</tr>
<tr>
<td>concept</td>
<td>概念 概念</td>
</tr>
<tr>
<td>concrete</td>
<td>具象的 实在的</td>
</tr>
<tr>
<td>concurrent</td>
<td>并行 并发</td>
</tr>
<tr>
<td>configuration</td>
<td>组态 配置</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-9"><a href="#list-9" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>connection</td>
<td>连接，连线（网络,资料库） 连接</td>
</tr>
<tr>
<td>constraint</td>
<td>约束（条件）</td>
</tr>
<tr>
<td>construct</td>
<td>构件 构件</td>
</tr>
<tr>
<td>container</td>
<td>容器 容器（存放资料的某种结构如 list, vector…）</td>
</tr>
<tr>
<td>containment</td>
<td>内含 包容</td>
</tr>
<tr>
<td>context</td>
<td>背景关系、周遭环境、上下脉络 环境、上下文</td>
</tr>
<tr>
<td>control</td>
<td>控制元件、控件 控件</td>
</tr>
<tr>
<td>console</td>
<td>主控台 控制台</td>
</tr>
<tr>
<td>const</td>
<td>常数（constant 的缩写，C++ 关键字）</td>
</tr>
<tr>
<td>constant</td>
<td>常数（相对於 variable） 常量</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-10"><a href="#list-10" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>constructor</td>
<td>（ctor） 建构式 构造函数（与class 同名的一种 member functions）</td>
</tr>
<tr>
<td>copy</td>
<td>(v) 复制、拷贝 拷贝</td>
</tr>
<tr>
<td>copy</td>
<td>(n) 复件, 副本</td>
</tr>
<tr>
<td>cover</td>
<td>涵盖 覆盖</td>
</tr>
<tr>
<td>create</td>
<td>创建、建立、产生、生成 创建</td>
</tr>
<tr>
<td>creation</td>
<td>产生、生成 创建</td>
</tr>
<tr>
<td>cursor</td>
<td>游标 光标</td>
</tr>
<tr>
<td>custom</td>
<td>订制、自定 定制</td>
</tr>
<tr>
<td>data</td>
<td>资料 数据</td>
</tr>
<tr>
<td>database</td>
<td>资料库 数据库</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-11"><a href="#list-11" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>database schema</td>
<td>数据库结构纲目</td>
</tr>
<tr>
<td>data member</td>
<td>资料成员、成员变数 数据成员、成员变量</td>
</tr>
<tr>
<td>data structure</td>
<td>资料结构 数据结构</td>
</tr>
<tr>
<td>datagram</td>
<td>资料元 数据报文</td>
</tr>
<tr>
<td>dead lock</td>
<td>死结 死锁</td>
</tr>
<tr>
<td>debug</td>
<td>除错 调试</td>
</tr>
<tr>
<td>debugger</td>
<td>除错器 调试器</td>
</tr>
<tr>
<td>declaration</td>
<td>宣告、宣告式 声明</td>
</tr>
<tr>
<td>deduction</td>
<td>推导（例：template argument deduction） 推导、推断</td>
</tr>
<tr>
<td>default</td>
<td>预设 缺省、默认</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-12"><a href="#list-12" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>defer</td>
<td>延缓 推迟</td>
</tr>
<tr>
<td>define</td>
<td>定义 预定义</td>
</tr>
<tr>
<td>definition</td>
<td>定义、定义区、定义式 定义</td>
</tr>
<tr>
<td>delegate</td>
<td>委派、委托、委任 委托</td>
</tr>
<tr>
<td>delegation</td>
<td>（同上）</td>
</tr>
<tr>
<td>demarshal</td>
<td>反编列 散集</td>
</tr>
<tr>
<td>dereference</td>
<td>提领（取出指标所指物体的内容） 解叁考</td>
</tr>
<tr>
<td>dereference operator dereference</td>
<td>（提领）运算子 * 解叁考操作符</td>
</tr>
<tr>
<td>derived</td>
<td>class 衍生类别 派生类</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-13"><a href="#list-13" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>destroy</td>
<td>摧毁、销毁</td>
</tr>
<tr>
<td>destructor</td>
<td>解构式 析构函数</td>
</tr>
<tr>
<td>device</td>
<td>装置、设备 设备</td>
</tr>
<tr>
<td>dialog</td>
<td>对话窗、对话盒 对话框</td>
</tr>
<tr>
<td>directive</td>
<td>指令（例：using directive） (编译)指示符</td>
</tr>
<tr>
<td>directory</td>
<td>目录 目录</td>
</tr>
<tr>
<td>disk</td>
<td>碟 盘</td>
</tr>
<tr>
<td>dispatch</td>
<td>分派 分派</td>
</tr>
<tr>
<td>distributed computing</td>
<td>分布式计算 (分布式电算) 分布式计算;分散式计算 (分散式电算)</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-14"><a href="#list-14" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>document</td>
<td>文件 文档</td>
</tr>
<tr>
<td>dot operator</td>
<td>dot（句点）运算子 . (圆)点操作符</td>
</tr>
<tr>
<td>driver</td>
<td>驱动程式 驱动（程序）</td>
</tr>
<tr>
<td>dynamic binding</td>
<td>动态系结 动态绑定</td>
</tr>
<tr>
<td>efficiency</td>
<td>效率 效率</td>
</tr>
<tr>
<td>efficient</td>
<td>高效 高效</td>
</tr>
<tr>
<td>entity</td>
<td>物体 实体、物体</td>
</tr>
<tr>
<td>encapsulation</td>
<td>封装 封装</td>
</tr>
<tr>
<td>enclosing</td>
<td>class 外围类别（与巢状类别 nested ( 嵌套的) class 有关）外围类</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-15"><a href="#list-15" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>enum (enumeration )</td>
<td>列举（一种 C++ 资料型别） 枚举</td>
</tr>
<tr>
<td>enumerators</td>
<td>列举元（enum 型别中的成员） 枚举成员、枚举器</td>
</tr>
<tr>
<td>equal</td>
<td>相等 相等</td>
</tr>
<tr>
<td>equality</td>
<td>相等性 相等性</td>
</tr>
<tr>
<td>equality operator</td>
<td>equality（等号）运算子 == 等号操作符</td>
</tr>
<tr>
<td>equivalence</td>
<td>等价性、等同性、对等性 等价性</td>
</tr>
<tr>
<td>equivalent</td>
<td>等价、等同、对等 等价</td>
</tr>
<tr>
<td>escape</td>
<td>code 转义码 转义码</td>
</tr>
<tr>
<td>evaluate</td>
<td>评估、求值、核定 评估</td>
</tr>
<tr>
<td>event</td>
<td>事件 事件</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-16"><a href="#list-16" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>event driven</td>
<td>事件驱动的 事件驱动的</td>
</tr>
<tr>
<td>exception</td>
<td>异常情况 异常</td>
</tr>
<tr>
<td>exception declaration</td>
<td>异常宣告（ref. C++ Primer 3/e, 11.3） 异常声明</td>
</tr>
<tr>
<td>exception handling</td>
<td>异常处理、异常处理机制 异常处理、异常处理机制</td>
</tr>
<tr>
<td>exception specification</td>
<td>异常规格（ref. C++ Primer 3/e, 11.4） 异常规范</td>
</tr>
<tr>
<td>exit</td>
<td>退离（指离开函式时的那一个执行点） 退出</td>
</tr>
<tr>
<td>explicit</td>
<td>明白的、明显的、显式 显式</td>
</tr>
<tr>
<td>export</td>
<td>汇出 引出、导出</td>
</tr>
<tr>
<td>expression</td>
<td>运算式、算式 表达式</td>
</tr>
<tr>
<td>facility</td>
<td>设施、设备 设施、设备</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-17"><a href="#list-17" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>feature</td>
<td>特性</td>
</tr>
<tr>
<td>field</td>
<td>栏位,资料栏（Java） 字段, 值域（Java）</td>
</tr>
<tr>
<td>file</td>
<td>档案 文件</td>
</tr>
<tr>
<td>firmware</td>
<td>韧体 固件</td>
</tr>
<tr>
<td>flag</td>
<td>旗标 标记</td>
</tr>
<tr>
<td>flash memory</td>
<td>快闪记忆体 闪存</td>
</tr>
<tr>
<td>flexibility</td>
<td>弹性 灵活性</td>
</tr>
<tr>
<td>flush</td>
<td>清理、扫清 刷新</td>
</tr>
<tr>
<td>font</td>
<td>字型 字体</td>
</tr>
<tr>
<td>form</td>
<td>表单（programming 用语） 窗体</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-18"><a href="#list-18" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>formal parameter</td>
<td>形式叁数 形式叁数</td>
</tr>
<tr>
<td>forward declaration</td>
<td>前置宣告 前置声明</td>
</tr>
<tr>
<td>forwarding</td>
<td>转呼叫,转发 转发</td>
</tr>
<tr>
<td>forwarding function</td>
<td>转呼叫函式,转发函式 转发函数</td>
</tr>
<tr>
<td>fractal</td>
<td>碎形 分形</td>
</tr>
<tr>
<td>framework</td>
<td>框架 框架</td>
</tr>
<tr>
<td>full specialization</td>
<td>全特化（ref. partial  specialization）</td>
</tr>
<tr>
<td>function</td>
<td>函式、函数 函数</td>
</tr>
<tr>
<td>function call operator</td>
<td>同 call operator</td>
</tr>
<tr>
<td>function object</td>
<td>函式物件（ref. C++ Primer 3/e, 12.3） 函数对象</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-19"><a href="#list-19" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>function overloaded resolution</td>
<td>函式多载决议程序 函数重载解决（方案）</td>
</tr>
<tr>
<td>functionality</td>
<td>功能、机能 功能</td>
</tr>
<tr>
<td>function template</td>
<td>函式模板、函式范本 函数模板</td>
</tr>
<tr>
<td>functor</td>
<td>仿函式 仿函式、函子</td>
</tr>
<tr>
<td>game</td>
<td>游戏 游戏</td>
</tr>
<tr>
<td>generate</td>
<td>生成</td>
</tr>
<tr>
<td>generic</td>
<td>泛型、一般化的 一般化的、通用的、泛化</td>
</tr>
<tr>
<td>generic algorithm</td>
<td>泛型演算法 通用算法</td>
</tr>
<tr>
<td>getter</td>
<td>(相对於 setter) 取值函式</td>
</tr>
<tr>
<td>global</td>
<td>全域的（对应於 local） 全局的</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-20"><a href="#list-20" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>global object</td>
<td>全域物件 全局对象</td>
</tr>
<tr>
<td>global scope resolution operator</td>
<td>全域生存空间（范围决议）运算子 :: 全局范围解析操作符</td>
</tr>
<tr>
<td>group</td>
<td>群组</td>
</tr>
<tr>
<td>group box</td>
<td>群组方块 分组框</td>
</tr>
<tr>
<td>guard clause</td>
<td>卫述句 (Refactoring, p250) 卫语句</td>
</tr>
<tr>
<td>GUI（Graphical User Interface）</td>
<td>图形介面 图形界面</td>
</tr>
<tr>
<td>hand shaking</td>
<td>握手协商</td>
</tr>
<tr>
<td>handle</td>
<td>识别码、识别号、号码牌、权柄 句柄</td>
</tr>
<tr>
<td>handler</td>
<td>处理常式 处理函数</td>
</tr>
<tr>
<td>hard－coded</td>
<td>编死的 硬编码的</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-21"><a href="#list-21" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>hard－copy</td>
<td>硬拷图 屏幕截图</td>
</tr>
<tr>
<td>hard disk</td>
<td>硬碟 硬盘</td>
</tr>
<tr>
<td>hardware</td>
<td>硬体 硬件</td>
</tr>
<tr>
<td>hash table</td>
<td>杂凑表 哈希表、散列表</td>
</tr>
<tr>
<td>header file</td>
<td>表头档、标头档 头文件</td>
</tr>
<tr>
<td>heap</td>
<td>堆积 堆</td>
</tr>
<tr>
<td>hierarchy</td>
<td>阶层体系 层次结构（体系）</td>
</tr>
<tr>
<td>hook</td>
<td>挂钩 钩子</td>
</tr>
<tr>
<td>hyperlink</td>
<td>超链结 超链接</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-22"><a href="#list-22" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>icon</td>
<td>图示、图标 图标</td>
</tr>
<tr>
<td>IDE（integrated development environment）</td>
<td>整合开发环境 集成开发环境</td>
</tr>
<tr>
<td>identifier</td>
<td>识别字、识别符号 标识符</td>
</tr>
<tr>
<td>if and only if</td>
<td>若且唯若 当且仅当</td>
</tr>
<tr>
<td>Illinois</td>
<td>伊利诺 伊利诺斯</td>
</tr>
<tr>
<td>image</td>
<td>影像 图象</td>
</tr>
<tr>
<td>immediate base</td>
<td>直接的（紧临的）上层 base class。 直接上层基类</td>
</tr>
<tr>
<td>immediate derived</td>
<td>直接的（紧临的）下层 derived class。 直接下层派生类</td>
</tr>
<tr>
<td>immutability</td>
<td>不变性</td>
</tr>
<tr>
<td>immutable</td>
<td>不可变（的）</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-23"><a href="#list-23" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>implement</td>
<td>实作、实现 实现</td>
</tr>
<tr>
<td>implementation</td>
<td>实作品、实作体、实作码、实件 实现</td>
</tr>
<tr>
<td>implicit</td>
<td>隐喻的、暗自的、隐式 隐式</td>
</tr>
<tr>
<td>import</td>
<td>汇入 导入</td>
</tr>
<tr>
<td>increment operator</td>
<td>累加运算子 ++ 增加操作符</td>
</tr>
<tr>
<td>infinite loop</td>
<td>无穷回圈 无限循环</td>
</tr>
<tr>
<td>infinite recursive</td>
<td>无穷递回 无限递归</td>
</tr>
<tr>
<td>information</td>
<td>资讯 信息</td>
</tr>
<tr>
<td>infrastructure</td>
<td>公共基础建设</td>
</tr>
<tr>
<td>inheritance</td>
<td>继承、继承机制 继承、继承机制</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-24"><a href="#list-24" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>inline</td>
<td>行内 内联</td>
</tr>
<tr>
<td>inline expansion</td>
<td>行内展开 内联展开</td>
</tr>
<tr>
<td>initialization</td>
<td>初始化（动作） 初始化</td>
</tr>
<tr>
<td>initialization list</td>
<td>初值列 初始值列表</td>
</tr>
<tr>
<td>initialize</td>
<td>初始化 初始化</td>
</tr>
<tr>
<td>inner class</td>
<td>内隐类别 内嵌类</td>
</tr>
<tr>
<td>instance</td>
<td>实体 实例（根据某种表述而实际产生的「东西」）</td>
</tr>
<tr>
<td>instantiated</td>
<td>具现化、实体化（常应用於 template） 实例化</td>
</tr>
<tr>
<td>instantiation</td>
<td>具现体、具现化实体（常应用於 template） 实例</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-25"><a href="#list-25" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>integer</td>
<td>(integral ) 整数（的） 整型（的）</td>
</tr>
<tr>
<td>integrate</td>
<td>整合 集成</td>
</tr>
<tr>
<td>interacts</td>
<td>交谈、互动 交互</td>
</tr>
<tr>
<td>interface</td>
<td>介面 接口</td>
</tr>
<tr>
<td>for GUI （Graphical  User Interface）</td>
<td>介面 界面</td>
</tr>
<tr>
<td>interpreter</td>
<td>直译器 解释器</td>
</tr>
<tr>
<td>invariants</td>
<td>恒常性,约束条件 约束条件</td>
</tr>
<tr>
<td>invoke</td>
<td>唤起 调用</td>
</tr>
<tr>
<td>iterate</td>
<td>迭代（回圈一个轮回一个轮回地进行） 迭代</td>
</tr>
<tr>
<td>iterative</td>
<td>反覆的，迭代的</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-26"><a href="#list-26" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>iterator</td>
<td>迭代器（一种泛型指标） 迭代器</td>
</tr>
<tr>
<td>iteration</td>
<td>迭代（回圈每次轮回称为一个 iteration） 迭代</td>
</tr>
<tr>
<td>item</td>
<td>项目、条款 项、条款、项目</td>
</tr>
<tr>
<td>laser</td>
<td>雷射 激光</td>
</tr>
<tr>
<td>level</td>
<td>阶 层 (级) 例 high level 高阶 高层</td>
</tr>
<tr>
<td>library</td>
<td>程式库、函式库 库、函数库</td>
</tr>
<tr>
<td>lifetime</td>
<td>生命期、寿命 生命期、寿命</td>
</tr>
<tr>
<td>link</td>
<td>联结、连结 连接,链接</td>
</tr>
<tr>
<td>linker</td>
<td>联结器、连结器 连接器</td>
</tr>
<tr>
<td>literal constant</td>
<td>字面常数（例 3.14 或 “hi” 这等常数值） 字面常数</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-27"><a href="#list-27" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>list</td>
<td>串列（linked－list） 列表、表、链表</td>
</tr>
<tr>
<td>list box</td>
<td>列表方块、列表框 列表框</td>
</tr>
<tr>
<td>load</td>
<td>载入 装载</td>
</tr>
<tr>
<td>loader</td>
<td>载入器 装载器、载入器</td>
</tr>
<tr>
<td>local</td>
<td>区域的（对应於 global） 局部的</td>
</tr>
<tr>
<td>local object</td>
<td>区域物件 局部对象</td>
</tr>
<tr>
<td>lock</td>
<td>机锁</td>
</tr>
<tr>
<td>loop</td>
<td>回圈 循环</td>
</tr>
<tr>
<td>lvalue</td>
<td>左值 左值</td>
</tr>
<tr>
<td>macro</td>
<td>巨集 宏</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-28"><a href="#list-28" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>magic</td>
<td>number 魔术数字 魔法数</td>
</tr>
<tr>
<td>maintain</td>
<td>维护 维护</td>
</tr>
<tr>
<td>manipulator</td>
<td>操纵器（iostream 预先定义的一种东西） 操纵器</td>
</tr>
<tr>
<td>marshal</td>
<td>编列 列集;叁考 demarshal</td>
</tr>
<tr>
<td>mechanism</td>
<td>机制 机制</td>
</tr>
<tr>
<td>member</td>
<td>成员 成员</td>
</tr>
<tr>
<td>member access operator</td>
<td>成员取用运算子（有 dot 和 arrow 两种） 成员存取操作符</td>
</tr>
<tr>
<td>member function</td>
<td>成员函式 成员函数</td>
</tr>
<tr>
<td>member initialization</td>
<td>list 成员初值列 成员初始值列表</td>
</tr>
<tr>
<td>memberwise</td>
<td>以 member 为单元┅、members 逐一┅ 以成员为单位</td>
</tr>
</tbody>
</table>
</div>
<h2 id="list-29"><a href="#list-29" class="headerlink" title="list"></a>list</h2><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>memberwise</td>
<td>copy 以 members 为单元逐一复制</td>
</tr>
<tr>
<td>memory</td>
<td>记忆体 内存</td>
</tr>
<tr>
<td>menu</td>
<td>表单、选单 菜单</td>
</tr>
<tr>
<td>message</td>
<td>讯息 消息</td>
</tr>
<tr>
<td>message based</td>
<td>以讯息为基础的 基於消息的</td>
</tr>
<tr>
<td>message loop</td>
<td>讯息回圈 消息环</td>
</tr>
<tr>
<td>method</td>
<td>(java) 方法、行为、函式 方法</td>
</tr>
<tr>
<td>meta－</td>
<td>超－ 元-;例 meta－programming 超编程 元编程</td>
</tr>
<tr>
<td>micro</td>
<td>微</td>
</tr>
<tr>
<td>middleware</td>
<td>中介层 中间件</td>
</tr>
<tr>
<td>modeling</td>
<td>模塑</td>
</tr>
<tr>
<td>modeling language</td>
<td>塑模语言，建模语言</td>
</tr>
<tr>
<td>modem</td>
<td>数据机 调制解调器</td>
</tr>
<tr>
<td>module</td>
<td>模组 模块</td>
</tr>
<tr>
<td>modifier</td>
<td>饰词 修饰符</td>
</tr>
<tr>
<td>most derived</td>
<td>class 最末层衍生类别 最底层的派生类</td>
</tr>
<tr>
<td>mouse</td>
<td>滑鼠 鼠标</td>
</tr>
<tr>
<td>mutable</td>
<td>可变的 可变的</td>
</tr>
<tr>
<td>multi－tasking</td>
<td>多工 多任务</td>
</tr>
<tr>
<td>namespace</td>
<td>命名空间 名字空间、命名空间</td>
</tr>
<tr>
<td>native</td>
<td>原生的 本地的、固有的</td>
</tr>
<tr>
<td>nested</td>
<td>class 巢状类别 嵌套类</td>
</tr>
<tr>
<td>network</td>
<td>网路 网络</td>
</tr>
<tr>
<td>network card</td>
<td>网路卡 网卡</td>
</tr>
<tr>
<td>object</td>
<td>物件 对象</td>
</tr>
<tr>
<td>object based</td>
<td>以物件为基础的 基於对象的</td>
</tr>
<tr>
<td>object file</td>
<td>目的档 目标文件</td>
</tr>
<tr>
<td>object model</td>
<td>物件模型 对象模型</td>
</tr>
<tr>
<td>object oriented</td>
<td>物件导向的 面向对象的</td>
</tr>
<tr>
<td>online</td>
<td>线上 在线</td>
</tr>
<tr>
<td>opaque</td>
<td>不透明的</td>
</tr>
<tr>
<td>operand</td>
<td>运算元 操作数</td>
</tr>
<tr>
<td>operating system</td>
<td>(OS) 作业系统 操作系统</td>
</tr>
<tr>
<td>operation</td>
<td>操作、操作行为 操作</td>
</tr>
<tr>
<td>operator</td>
<td>运算子 操作符、运算符</td>
</tr>
<tr>
<td>option</td>
<td>选项，可选方案 选项</td>
</tr>
<tr>
<td>ordinary</td>
<td>常规的 常规的</td>
</tr>
<tr>
<td>overflow</td>
<td>上限溢位（相对於 underflow） 溢出（underflow:下溢）</td>
</tr>
<tr>
<td>overhead</td>
<td>额外负担、额外开销 额外开销</td>
</tr>
<tr>
<td>overload</td>
<td>多载化、多载化、重载 重载</td>
</tr>
<tr>
<td>overloaded</td>
<td>function 多载化函式 重载的函数</td>
</tr>
<tr>
<td>overloaded operator</td>
<td>多载化运算子 被重载的操作符</td>
</tr>
<tr>
<td>overloaded set</td>
<td>多载集合 重载集合</td>
</tr>
<tr>
<td>override</td>
<td>改写、覆写 重载、改写、重新定义（在 derived class 中重新定义虚拟函式)</td>
</tr>
<tr>
<td>package</td>
<td>套件 包</td>
</tr>
<tr>
<td>pair</td>
<td>对组</td>
</tr>
<tr>
<td>palette</td>
<td>调色盘、组件盘、工具箱</td>
</tr>
<tr>
<td>pane</td>
<td>窗格 窗格（有时为嵌板之意，例 Java Content Pane）</td>
</tr>
<tr>
<td>parallel</td>
<td>平行 并行</td>
</tr>
<tr>
<td>parameter</td>
<td>叁数（函式叁数列上的变数） 叁数、形式叁数、形叁</td>
</tr>
<tr>
<td>parameter list</td>
<td>叁数列 叁数列表</td>
</tr>
<tr>
<td>parent</td>
<td>class 父类别（或称 base class） 父类</td>
</tr>
<tr>
<td>parentheses</td>
<td>小括弧、小括号 圆括弧、圆括号</td>
</tr>
<tr>
<td>parse</td>
<td>解析 解析</td>
</tr>
<tr>
<td>part</td>
<td>零件 部件</td>
</tr>
<tr>
<td>partial specialization</td>
<td>偏特化（ref. C++ Primer 3/e, 16.10） 局部特化（ref. full specialization）</td>
</tr>
<tr>
<td>pass by address</td>
<td>传址（函式引数的传递方式）（非正式用语）传地址</td>
</tr>
<tr>
<td>pass by reference</td>
<td>传址（函式引数的一种传递方式） 传地址, 按引用传递</td>
</tr>
<tr>
<td>pass by value</td>
<td>传值（函式引数的一种传递方式） 按值传递</td>
</tr>
<tr>
<td>pattern</td>
<td>范式、样式 模式</td>
</tr>
<tr>
<td>performance</td>
<td>效率、性能兼而有之 性能</td>
</tr>
<tr>
<td>persistence</td>
<td>永续性 持久性</td>
</tr>
<tr>
<td>pixel</td>
<td>图素、像素 像素</td>
</tr>
<tr>
<td>placement delete ref</td>
<td>C++ Primer 3/e, 15.8.2</td>
</tr>
<tr>
<td>placement new ref</td>
<td>C++ Primer 3/e, 15.8.2</td>
</tr>
<tr>
<td>platform</td>
<td>平台 平台</td>
</tr>
<tr>
<td>pointer</td>
<td>指标 指针;址位器（和址叁器 reference 形成对映，满好）</td>
</tr>
<tr>
<td>poll</td>
<td>轮询 轮询</td>
</tr>
<tr>
<td>polymorphism</td>
<td>多型 多态</td>
</tr>
<tr>
<td>pop up</td>
<td>冒起式、弹出式 弹出式</td>
</tr>
<tr>
<td>port</td>
<td>埠 端口</td>
</tr>
<tr>
<td>postfix</td>
<td>後置式、後序式 後置式</td>
</tr>
<tr>
<td>precedence</td>
<td>优先序（通常用於运算子的优先执行次序）</td>
</tr>
<tr>
<td>prefix</td>
<td>前置式、前序式 前置式</td>
</tr>
<tr>
<td>preprocessor</td>
<td>前处理器 预处理器</td>
</tr>
<tr>
<td>prime</td>
<td>质数 素数</td>
</tr>
<tr>
<td>primitive</td>
<td>type 基本型别 (不同於 base class,基础类别)</td>
</tr>
<tr>
<td>print</td>
<td>列印 打印</td>
</tr>
<tr>
<td>printer</td>
<td>印表机 打印机</td>
</tr>
<tr>
<td>priority</td>
<td>优先权 (通常用於执行绪获得 CPU 时间的优先次序）</td>
</tr>
<tr>
<td>procedure</td>
<td>程序 过程</td>
</tr>
<tr>
<td>procedural</td>
<td>程序性的、程序式的 过程式的、过程化的</td>
</tr>
<tr>
<td>process</td>
<td>行程 进程</td>
</tr>
<tr>
<td>profile</td>
<td>评测 评测</td>
</tr>
<tr>
<td>profiler</td>
<td>效能（效率）评测器 效能（性能）评测器</td>
</tr>
<tr>
<td>programmer</td>
<td>程式员 程序员</td>
</tr>
<tr>
<td>programming</td>
<td>编程、程式设计、程式化 编程</td>
</tr>
<tr>
<td>progress</td>
<td>进度指示器 进度指示器</td>
</tr>
<tr>
<td>project</td>
<td>专案 项目、工程</td>
</tr>
<tr>
<td>property</td>
<td>属性</td>
</tr>
<tr>
<td>protocol</td>
<td>协定 协议</td>
</tr>
<tr>
<td>pseudo code</td>
<td>假码、虚拟码、伪码 伪码</td>
</tr>
<tr>
<td>qualified</td>
<td>经过资格修饰（例如加上 scope 运算子） 限定</td>
</tr>
<tr>
<td>qualifier</td>
<td>资格修饰词、饰词 限定修饰词</td>
</tr>
<tr>
<td>quality</td>
<td>品质 质量</td>
</tr>
<tr>
<td>queue</td>
<td>伫列 队列</td>
</tr>
<tr>
<td>radian</td>
<td>径度 弧度</td>
</tr>
<tr>
<td>radio</td>
<td>button 圆钮 单选按钮</td>
</tr>
<tr>
<td>raise</td>
<td>引发（常用来表示发出一个 exception） 引起、引发</td>
</tr>
<tr>
<td>random number</td>
<td>随机数、乱数 随机数</td>
</tr>
<tr>
<td>range</td>
<td>范围、区间（用於 STL 时） 范围、区间</td>
</tr>
<tr>
<td>rank</td>
<td>等级、分等（ref. C++Primer 3/e 9,15章） 等级</td>
</tr>
<tr>
<td>raw</td>
<td>生鲜的、未经处理的 未经处理的</td>
</tr>
<tr>
<td>record</td>
<td>记录 记录</td>
</tr>
<tr>
<td>recordset</td>
<td>记录集 记录集</td>
</tr>
<tr>
<td>recursive</td>
<td>递回 递归</td>
</tr>
<tr>
<td>re－direction</td>
<td>重导向 重定向</td>
</tr>
<tr>
<td>refactoring</td>
<td>重构、重整 重构</td>
</tr>
<tr>
<td>refer</td>
<td>取用 叁考</td>
</tr>
<tr>
<td>refer to</td>
<td>指向、指涉、指代</td>
</tr>
<tr>
<td>reference</td>
<td>（C++ 中类似指标的东西，相当於 “化身”） 引用、叁考 址叁器, see pointer</td>
</tr>
<tr>
<td>register</td>
<td>暂存器 寄存器</td>
</tr>
<tr>
<td>reflection</td>
<td>反射 反射、映像</td>
</tr>
<tr>
<td>relational</td>
<td>database 关联式资料库 关系数据库</td>
</tr>
<tr>
<td>represent</td>
<td>表述，表现 表述，表现</td>
</tr>
<tr>
<td>resolve</td>
<td>决议（为算式中的符号名称寻找 解析 对应之宣告式的过程）</td>
</tr>
<tr>
<td>resolution</td>
<td>决议程序、决议过程 解析过程</td>
</tr>
<tr>
<td>resolution</td>
<td>解析度 分辨率</td>
</tr>
<tr>
<td>restriction</td>
<td>局限</td>
</tr>
<tr>
<td>return</td>
<td>传回、回返 返回</td>
</tr>
<tr>
<td>return type</td>
<td>回返型别 返回类型</td>
</tr>
<tr>
<td>return value</td>
<td>回返值 返回值</td>
</tr>
<tr>
<td>robust</td>
<td>强固、稳健 健壮</td>
</tr>
<tr>
<td>robustness</td>
<td>强固性、稳健性 健壮性</td>
</tr>
<tr>
<td>routine</td>
<td>常式 例程</td>
</tr>
<tr>
<td>runtime</td>
<td>执行期 运行期、运行时</td>
</tr>
<tr>
<td>common language runtime (CLR)</td>
<td>译为通用语言运行时</td>
</tr>
<tr>
<td>rvalue</td>
<td>右值 右值</td>
</tr>
<tr>
<td>save</td>
<td>储存 存储</td>
</tr>
<tr>
<td>schedule</td>
<td>排程 调度</td>
</tr>
<tr>
<td>scheduler</td>
<td>排程器 调度程序</td>
</tr>
<tr>
<td>scheme</td>
<td>结构纲目、组织纲目</td>
</tr>
<tr>
<td>scroll</td>
<td>bar 卷轴 滚动条</td>
</tr>
<tr>
<td>scope</td>
<td>生存空间、生存范围、范畴、作用域 生存空间</td>
</tr>
<tr>
<td>scope operator</td>
<td>生存空间（范围决议）运算子 :: 生存空间操作符</td>
</tr>
<tr>
<td>scope resolution operator</td>
<td>生存空间决议运算子 生存空间解析操作符（与scope operator同）</td>
</tr>
<tr>
<td>screen</td>
<td>萤幕 屏幕</td>
</tr>
<tr>
<td>search</td>
<td>搜寻 查找</td>
</tr>
<tr>
<td>semantics</td>
<td>语意 语义</td>
</tr>
<tr>
<td>sequential container</td>
<td>序列式容器 顺序式容器（对应於 associative container）</td>
</tr>
<tr>
<td>server</td>
<td>伺服器、伺服端 服务器、服务端</td>
</tr>
<tr>
<td>serial</td>
<td>串行</td>
</tr>
<tr>
<td>serialization</td>
<td>次第读写,序列化 序列化 (serialize) </td>
</tr>
<tr>
<td>setter</td>
<td>(相对於 getter) 设值函式</td>
</tr>
<tr>
<td>signal</td>
<td>信号</td>
</tr>
<tr>
<td>signature</td>
<td>标记式、签名式、署名式 签名</td>
</tr>
<tr>
<td>slider</td>
<td>滚轴 滑块</td>
</tr>
<tr>
<td>slot</td>
<td>条孔、槽 槽</td>
</tr>
<tr>
<td>smart pointer</td>
<td>灵巧指标、精灵指标 智能指针</td>
</tr>
<tr>
<td>snapshot</td>
<td>萤幕快照（图） 屏幕截图</td>
</tr>
<tr>
<td>specialization</td>
<td>特殊化、特殊化定义、特殊化宣告 特化</td>
</tr>
<tr>
<td>specification</td>
<td>规格 规格、规范</td>
</tr>
<tr>
<td>splitter</td>
<td>分裂视窗 切分窗口</td>
</tr>
<tr>
<td>software</td>
<td>软体 软件</td>
</tr>
<tr>
<td>solution</td>
<td>解法,解决方案 方案</td>
</tr>
<tr>
<td>source</td>
<td>原始码 源码、源代码</td>
</tr>
<tr>
<td>stack</td>
<td>(d)堆叠 栈</td>
</tr>
<tr>
<td>stack unwinding</td>
<td>堆叠辗转开解（此词用於 exception 主题） 栈辗转开解 *</td>
</tr>
<tr>
<td>standard</td>
<td>标准程式库</td>
</tr>
<tr>
<td>standard template library</td>
<td>标准模板程式库</td>
</tr>
<tr>
<td>statement</td>
<td>述句 语句、声明</td>
</tr>
<tr>
<td>status bar</td>
<td>状态列、状态栏 状态条</td>
</tr>
<tr>
<td>STL</td>
<td>见 standard template library</td>
</tr>
<tr>
<td>stream</td>
<td>资料流、串流 流</td>
</tr>
<tr>
<td>string</td>
<td>字串 字符串</td>
</tr>
<tr>
<td>subroutine</td>
<td>子程序调用序列</td>
</tr>
<tr>
<td>subscript operator 下标运算子</td>
<td>下标操作符</td>
</tr>
<tr>
<td>subtype</td>
<td>子型别 子类型</td>
</tr>
<tr>
<td>support</td>
<td>支援 支持</td>
</tr>
<tr>
<td>suspend</td>
<td>虚悬 挂起</td>
</tr>
<tr>
<td>symbol</td>
<td>符号 记号</td>
</tr>
<tr>
<td>syntax</td>
<td>语法 语法</td>
</tr>
<tr>
<td>tag</td>
<td>标签 标记 索引标签,页签</td>
</tr>
<tr>
<td>target</td>
<td>标的（例 target pointer ：标的指标） 目标</td>
</tr>
<tr>
<td>task switch</td>
<td>工作切换 任务切换</td>
</tr>
<tr>
<td>template</td>
<td>模板、范本 模板</td>
</tr>
<tr>
<td>template argument deduction</td>
<td>模板引数推导 模板叁数推导</td>
</tr>
<tr>
<td>template explicit specialization</td>
<td>模板显式特化（版本） 模板显式特化</td>
</tr>
<tr>
<td>template parameter</td>
<td>模板叁数 模板叁数</td>
</tr>
<tr>
<td>temporary object</td>
<td>暂时物件 临时对象</td>
</tr>
<tr>
<td>text</td>
<td>文字 文本</td>
</tr>
<tr>
<td>text file</td>
<td>程式本文档（放置程式原始码的档案） 文本文件</td>
</tr>
<tr>
<td>thread</td>
<td>执行绪 线程</td>
</tr>
<tr>
<td>thread safe</td>
<td>多绪安全 多线程安全</td>
</tr>
<tr>
<td>throw</td>
<td>丢掷（常指发出一个 exception） 丢掷、引发</td>
</tr>
<tr>
<td>token</td>
<td>语汇单元 符号、标记</td>
</tr>
<tr>
<td>transaction</td>
<td>交易 事务</td>
</tr>
<tr>
<td>transparent(ly)</td>
<td>透通的(地)</td>
</tr>
<tr>
<td>traverse</td>
<td>巡访（来回走动） 遍历</td>
</tr>
<tr>
<td>trigger</td>
<td>触发 触发</td>
</tr>
<tr>
<td>type</td>
<td>型别 类型</td>
</tr>
<tr>
<td>UML unified modeling language</td>
<td>统一建模语言</td>
</tr>
<tr>
<td>unary function</td>
<td>一元函式 单叁函数</td>
</tr>
<tr>
<td>unary operator</td>
<td>一元运算子 一元操作符</td>
</tr>
<tr>
<td>underflow</td>
<td>下限溢位（相对於 overflow） 下溢</td>
</tr>
<tr>
<td>unchecked</td>
<td>exception 不可控异常(Java)</td>
</tr>
<tr>
<td>unqualified</td>
<td>未经资格修饰（而直接取用）unwinding  ref . stack  unwinding </td>
</tr>
<tr>
<td>user</td>
<td>使用者、用户 用户</td>
</tr>
<tr>
<td>user interface</td>
<td>使用者介面、用户介面、人机介面 用户界面</td>
</tr>
<tr>
<td>variable</td>
<td>变数（相对於常数 const） 变量</td>
</tr>
<tr>
<td>vector</td>
<td>向量（一种容器，有点类似 array） 向量、矢量</td>
</tr>
<tr>
<td>viable</td>
<td>可实行的、可行的 可行的</td>
</tr>
<tr>
<td>viable function</td>
<td>可行函式 可行函数（从 candidate functions 中挑出者）</td>
</tr>
<tr>
<td>video</td>
<td>视讯 视频</td>
</tr>
<tr>
<td>view</td>
<td>(1) 视图(document/view) 文档/视图</td>
</tr>
<tr>
<td>view</td>
<td>(2) 映件</td>
</tr>
<tr>
<td>virtual</td>
<td>function 虚拟函式 虚函数</td>
</tr>
<tr>
<td>virtual machine</td>
<td>虚拟机器 虚拟机</td>
</tr>
<tr>
<td>virtual memory</td>
<td>虚拟记忆体 虚内存, 虚存</td>
</tr>
<tr>
<td>volatile</td>
<td>易挥发的、易变的</td>
</tr>
<tr>
<td>vowel</td>
<td>母音 元音字母</td>
</tr>
<tr>
<td>window</td>
<td>视窗 窗口</td>
</tr>
<tr>
<td>window function</td>
<td>视窗函式 窗口函数</td>
</tr>
<tr>
<td>window procedure</td>
<td>视窗函式 窗口过程</td>
</tr>
<tr>
<td>word</td>
<td>字 单词</td>
</tr>
<tr>
<td>word processor</td>
<td>文书处理器 字处理器</td>
</tr>
<tr>
<td>wrapper</td>
<td>外覆、外包 包装absence 缺席</td>
</tr>
<tr>
<td>access</td>
<td>访问存取通路进入</td>
</tr>
<tr>
<td>achieve</td>
<td>实现完成</td>
</tr>
<tr>
<td>acquire</td>
<td>获得</td>
</tr>
<tr>
<td>adjacency list method</td>
<td>邻接表表示法</td>
</tr>
<tr>
<td>adjacency matrix  method</td>
<td>邻接矩阵表示法</td>
</tr>
<tr>
<td>algorithm</td>
<td>算法</td>
</tr>
<tr>
<td>allocate</td>
<td>留下分配</td>
</tr>
<tr>
<td>analog</td>
<td>推论</td>
</tr>
<tr>
<td>append</td>
<td>添加</td>
</tr>
<tr>
<td>archive</td>
<td>档案归档</td>
</tr>
<tr>
<td>array</td>
<td>数组</td>
</tr>
<tr>
<td>assign</td>
<td>分配</td>
</tr>
<tr>
<td>assume</td>
<td>假设</td>
</tr>
<tr>
<td>assurance</td>
<td>确信信任</td>
</tr>
<tr>
<td>ATM(asynchronous transfer mode )</td>
<td>异步传输模式</td>
</tr>
<tr>
<td>b.. real programs kernels</td>
<td>实程序核心程序</td>
</tr>
<tr>
<td>b.. toy benchmark synthetic benchmark</td>
<td>简单基准程序复合基准程序</td>
</tr>
<tr>
<td>balance</td>
<td>平衡</td>
</tr>
<tr>
<td>bandwidth</td>
<td>带宽</td>
</tr>
<tr>
<td>batch</td>
<td>一批一组</td>
</tr>
<tr>
<td>benchmark</td>
<td>基准测试程序</td>
</tr>
<tr>
<td>best-fit algorithm</td>
<td>最佳适应算法</td>
</tr>
<tr>
<td>BFS(breadth first search )</td>
<td>广度优先搜索法</td>
</tr>
<tr>
<td>binary</td>
<td>二进制</td>
</tr>
<tr>
<td>binary relation</td>
<td>二元关系</td>
</tr>
<tr>
<td>binary tree</td>
<td>二叉树</td>
</tr>
<tr>
<td>bit series</td>
<td>比特序列</td>
</tr>
<tr>
<td>black-box white-box</td>
<td>黑盒白盒</td>
</tr>
<tr>
<td>block miss</td>
<td>块失效</td>
</tr>
<tr>
<td>blocked</td>
<td>阻塞(等待状态也称阻塞或封锁状态)</td>
</tr>
<tr>
<td>boundary</td>
<td>界线分界</td>
</tr>
<tr>
<td>bridge</td>
<td>网桥</td>
</tr>
<tr>
<td>bubble  sort</td>
<td>冒泡排序</td>
</tr>
<tr>
<td>calculation</td>
<td>计算</td>
</tr>
<tr>
<td>candidate key</td>
<td>候选键(辅键)</td>
</tr>
<tr>
<td>capability</td>
<td>能力才能</td>
</tr>
<tr>
<td>capacity</td>
<td>容量</td>
</tr>
<tr>
<td>cartesian product</td>
<td>笛卡尔积</td>
</tr>
<tr>
<td>CASE(com.. aided sof.. engineering)</td>
<td>计算机辅助软件工程</td>
</tr>
<tr>
<td>CCP(communication control processor )</td>
<td>通信控制处理机</td>
</tr>
<tr>
<td>cell</td>
<td>信元</td>
</tr>
<tr>
<td>characteristic</td>
<td>特征特性</td>
</tr>
<tr>
<td>circuit switching</td>
<td>线路交换</td>
</tr>
<tr>
<td>circular wait</td>
<td>循环等待</td>
</tr>
<tr>
<td>CISC(complex instruction set computer )</td>
<td>复杂指令集计算机</td>
</tr>
<tr>
<td>class</td>
<td>类</td>
</tr>
<tr>
<td>Client/Server</td>
<td>客户机/服务器</td>
</tr>
<tr>
<td>clock cycle clock rate</td>
<td>时钟周期时钟频率</td>
</tr>
<tr>
<td>coaxial cable</td>
<td>同轴电缆</td>
</tr>
<tr>
<td>cohesion coupling</td>
<td>内聚耦合</td>
</tr>
<tr>
<td>coincidental logical procedural functional</td>
<td>偶然内聚逻辑内聚过程内聚功能内聚</td>
</tr>
<tr>
<td>combination</td>
<td>联合配合</td>
</tr>
<tr>
<td>common</td>
<td>公用的共同的</td>
</tr>
<tr>
<td>communication</td>
<td>通信</td>
</tr>
<tr>
<td>complement number</td>
<td>补码</td>
</tr>
<tr>
<td>component</td>
<td>成分</td>
</tr>
<tr>
<td>concept</td>
<td>概念观念</td>
</tr>
<tr>
<td>condition</td>
<td>情况状况</td>
</tr>
<tr>
<td>conform</td>
<td>符合</td>
</tr>
<tr>
<td>consist</td>
<td>组成存在</td>
</tr>
<tr>
<td>constrain</td>
<td>约束</td>
</tr>
<tr>
<td>contain</td>
<td>包含</td>
</tr>
<tr>
<td>correspond</td>
<td>(corresponding) 相符合(相应的一致的)</td>
</tr>
<tr>
<td>CPETT</td>
<td>计算机性能评价工具与技术</td>
</tr>
<tr>
<td>CPI</td>
<td>每条指令需要的周期数</td>
</tr>
<tr>
<td>CSMA/CD</td>
<td>带冲突检测的载波监听多路访问</td>
</tr>
<tr>
<td>cursor</td>
<td>游标</td>
</tr>
<tr>
<td>cyclic redundancy check</td>
<td>循环冗余校验</td>
</tr>
<tr>
<td>database: integrity consistency restory</td>
<td>完整性一致性可恢复性</td>
</tr>
<tr>
<td>database: security efficiency</td>
<td>数据库设计的目标: 安全性效率</td>
</tr>
<tr>
<td>deadlock: mutual exclusion</td>
<td>死锁条件: 互斥</td>
</tr>
<tr>
<td>deadlock: circular wait no preemption</td>
<td>死锁条件: 循环等待狗熊先权</td>
</tr>
<tr>
<td>decimal</td>
<td>十进位的</td>
</tr>
<tr>
<td>decision</td>
<td>决定判断</td>
</tr>
<tr>
<td>decomposition</td>
<td>双重的混合的</td>
</tr>
<tr>
<td>decrease</td>
<td>减少</td>
</tr>
<tr>
<td>definition</td>
<td>定义</td>
</tr>
<tr>
<td>definition phase</td>
<td>定义阶段</td>
</tr>
<tr>
<td>demonstrate</td>
<td>证明</td>
</tr>
</tbody>
</table>
</div>
<p>determine |限定<br>development phase |开发阶段<br>DFS(depth first search)|深度优先搜索法<br>diagram| 图表<br>Difference Manchester| 差分曼彻斯特<br>directed graph undirected graph |有向图无向图<br>distinguish| 辩认区别<br>distributed| system 分布式系统<br>divide division| 分开除除法<br>divide union intersection difference |除并交差<br>document| 文件文档<br>DQDB(distributed queue dual bus) |分布队列双总线<br>draw |绘制<br>dual |二元的双的<br>dynamic design process| 动态定义过程<br>element |元素要素<br>elevator (scan) algorithm |电梯算法又称扫描算法<br>encapsulation inheritance|封装(压缩) 继承(遗传)<br>encode |译成密码<br>entity | 实体<br>entity integrity  rule | 实体完整性规则<br>equal |相等的<br>equation | 方程式等式<br>estimate | 估计判断<br>Ethernet | 以太网<br>evolution | 发展演化<br>exceed |超过<br>exchange sort |交换排序<br>exclusive locks |排它锁(简记为X 锁)<br>execute | 实现执行<br>exhibit |表现展示陈列<br>existence |存在发生<br>expertise |专门技术<br>external (internal ) fragmentation | 外(内)碎片<br>fault page fault |中断过错页中断<br>FDDI(fiber distributed data interface) |光纤分布式数据接口<br>FDM(frequency division multiplexing |频分多路复用<br>fiber optic cable | 光缆<br>FIFO replacement policy | 先进先出替换算法<br>figure |数字图形<br>final |最后的最终的<br>first normal form |第一范式<br>floppy | 活动盘片(软盘)<br>foreign key domain tuple | 外来键值域元组<br>form |形状形式<br>formula |公式表达式<br>foundation |基础根据基金<br>frame page frame |帧结构页结构<br>frequency |频率<br>FTP(File Transfer Protocol ) |文件传送服务<br>function |函数<br>functionally dependent |函数依赖<br>gateway | 网间连接器<br>gather | 聚集采集推测<br>general |-purose registers 通用寄存器<br>generate | 产生<br>grade |等级标准<br>graph  (graphic )| 图<br>Gopher |将用户的请求自动转换成<br>guarantee |保证确定<br>hash table hash function collision | 哈希表哈希函数(散列函数) 碰撞<br>HDLC（High-level Data Link Control）|面向比特型数据链路层协议<br>hit rate |命中率<br>host | 主计算机<br>host language statement |主语言语句<br>hypertext | 超级文本<br>illustrate | 举例说明<br>independent | 独立的<br>index |索引<br>indirect |间接的<br>influence |有影响的<br>initially | 最初开头<br>insertion sort | 插入排序<br>instruction format | 指令格式<br>instruction set |指令集<br>interface |接口分界面连接体<br>internal | 内部的内在的<br>interrupt |中断<br>IPC （Information Processing Center）|工业过程控制<br>ISAM VSAM |索引顺序存取方法虚拟存储存取方法<br>ISAM: （Index Sequential  Access Mode ）|<br>VSAM: (Virtual Storage Access Method)|<br>join natural join semi join |连接自然连接半连接<br>judgment |判断<br>kernel executive supervisor user |核心执行管理用户<br>kernels | 核心程序<br>key comparison | 键(码)值比较<br>LAN(local area network) |局域网<br>load |负载载入<br>logical functional |逻辑内聚功能内聚<br>longitudinal |水平的<br>loop | 圈环状<br>maintain |维护保养供给<br>maintanence phase | 维护(保养)阶段<br>MAN(metropolitan area network) |城域网<br>Manchester |曼彻斯特<br>map |地图映射图<br>matrix |矩阵点阵<br>memory reference | 存储器参量<br>message switching |报文交换<br>method |方法技巧<br>MFLOP(million floating point operate)|ps 每秒百万次浮点运算<br>minimum | 最小的<br>MIPS(millions of instructions per second) |每秒百万条指令<br>module |单位基准<br>monitor (model benchmark physcal) method |监视(模型基准物理)法<br>multilevel data flow chart | 分层数据流图<br>multiple | 复合的多样的<br>multiple-term formula | 多项式<br>multiplexing | 多路复用技术<br>multiplication |乘法<br>mutual exclusion | 互相排斥<br>non-key attributes | 非码属性<br>null |零空<br>Nyquist |奈奎斯特<br>object oriented | 对象趋向的使适应的<br>object oriented analysis | 面向对象的分析<br>object oriented databases |面向对象数据库</p>
<p>object oriented implementation |面向对象的实现<br>obtain | 获得<br>occupy | 占有居住于<br>occurrence | 事件<br>odd | 奇数的<br>even|偶数<br>one-dimensional array |一维数组<br>OODB(object oriented data base) |面向对象数据库<br>OOM(object oriented method) |面向对象的方法<br>oom: information object message class |信息对象消息类<br>oom: instance method message passing | 实例方法消息传递<br>open system |开放系统<br>operand | 操作数<br>optimized | 尽量充分利用<br>optional |任选的非强制的<br>organize |组织<br>overflow | 溢出<br>overlapping register windows |重叠寄存器窗口<br>packet switching | 报文分组交换<br>page fault | 页面失效<br>page replacement algorithm | 页替换算法<br>paged segments| 段页式管理<br>PCB(process control block) |进程控制块<br>peer entites |对等实体<br>perform |表演执行<br>period| 时期周期<br>permit | 许可准许<br>phase |阶段局面状态<br>physical data link network layer |物理层数据链路层网络层<br>pipeline | 管道<br>platter track cluster |面磁道簇<br>predicate |谓语<br>preemption | 有优先权的<br>prefix (Polish form) |前缀(波兰表达式)<br>preorder | inorder postorder 前序中序后序<br>presentation application layer |表示层应用层<br>primary key attributes |主码属性<br>principle | 原则方法<br>procedural coincidental |过程内聚偶然内聚<br>process | 过程加工处理<br>proficient |精通<br>program debugging | 程序排错<br>projection  selection join | 投影选择连接<br>proposition |主张建议陈述<br>protocal |协议<br>prototype | 原型样板<br>prototyping method (model ) |原型化周期(模型)<br>pseudo-code |伪码(又称程序设计语言PDL)<br>punctuation | 标点<br>purpose |目的意图<br>quality |质量品质<br>queue |队列<br>ready blocked running |就绪阻塞(等待) 运行<br>real page number |实页数<br>real programs |实程序<br>redirected |重定向<br>redundency  |冗余<br>reference integrity rule |引用完整性规则<br>referred to as |把…..当作<br>regard |关于<br>register (registry ) |寄存器登记注册挂号<br>regularly |定期的常规的<br>relation | 关系<br>relay | 中继<br>reliability | 可信赖的<br>repeater | 中继器<br>replacement | 替换<br>represent |代表象征<br>request indication response confirm |请求指示响应确认<br>resource |资源<br>response |回答响应<br>RISC(reduced instruction set computer) |精简指令集计算机<br>robustness | 健壮性<br>router | 路由器<br>scheme | 计划图表<br>sector head cylinder | 扇区磁头柱面<br>selection sort | 选择排序<br>semaphores| 信号<br>sequence | 序列顺序<br>Shanon |香农<br>share locks |共享锁(简记为S 锁)<br>short path critical path |最短路径关键路径<br>signal | 信号<br>signal-to-noise ratio | 信噪比B/N<br>similar | 相似的<br>SISD SIMD MISD MIMD |<em> 指令流</em> 数据流<br>SMDS |交换多兆位数据服务<br>software development phase | 软件开发阶段<br>software engineering | 软件工程<br>software portability | 软件可移植性<br>software requirements specification | 软件需求说明书<br>solve | 解决<br>sort | 种类方式分类排序<br>spanning tree |跨越树(生成树)<br>specify | 指定说明<br>speedup | 加速比<br>SSTF(shortest-seek-time-first) |最短寻道时间优先(磁盘调度算法)<br>stack strategy non-stack strategy |堆栈型非堆栈型<br>starvation | 饥饿匮乏<br>statement |陈述<br>storage | 贮藏库<br>store procedures | 存储过程<br>strategy | 战略兵法计划<br>strict | 严密的<br>styles | 文体风格<br>subgroup | 循环的<br>subset| 子集子设备<br>superclass subclass abstract class |超类子类抽象类<br>suppose | 假定<br>symbolic | 象征的符号的<br>synthetic benchmark |复合基准程序<br>system testing |系统测试<br>Systolic | 脉动阵列<br>table |表表格桌子<br>TDM(time division multiplexing)| 时分多路复用<br>technology | 工艺技术<br>terminal | 终端<br>testing phase | 测试阶段<br>theta select project theta join | θ选择投影θ连接<br>time complexity | 时间复杂度<br>timestamping |时标技术<br>Token Bus |令牌总线<br>Token Ring | 令牌环<br>toy benchmark | 简单基准程序<br>transaction | 事务记录<br>transmit  |传送<br>transport layer session layer |传输层会话层<br>traversal method |遍历方法<br>triggers store procedures| 触发器存储过程<br>ORACLE |系统<br>underflow |下溢<br>unique | 唯一的<br>unit system acceptance testing |单元测试系统测试确认测试<br>universe | 宇宙全世界<br>update | 更新<br>value  |值<br>variable | 变量<br>vertical | 垂直的<br>vertice edge | 顶点(结点) 边<br>via | 经过<br>virtual memory system |虚拟存储系统<br>WAN(wide area network) |广域网<br>waterfall model | 瀑布模型<br>white noise | 白噪声<br>write-back(copy-back) |写回法<br>write-through(store-through) | 写直达法<br>WWW(world wide web) |万维网</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>计算机英语1500词</title>
    <url>/2020/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD1500%E8%AF%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>directory</td>
<td>n. 目录，索引簿 </td>
</tr>
<tr>
<td>file</td>
<td>n. 文件；v. 保存文件</td>
</tr>
<tr>
<td>name</td>
<td>n. 名，名称；vt. 命名</td>
</tr>
<tr>
<td>format</td>
<td>n. 格式</td>
</tr>
<tr>
<td>topic</td>
<td>n. 题目，论题</td>
</tr>
<tr>
<td>string</td>
<td>n. 行，字符串</td>
</tr>
<tr>
<td>word</td>
<td>n. 字(词)，单词</td>
</tr>
<tr>
<td>character</td>
<td>n. 字符，符号，特性</td>
</tr>
<tr>
<td>text</td>
<td>n. 正文，文本</td>
</tr>
<tr>
<td>number</td>
<td>n. 数字，号码；vt. 编号</td>
</tr>
<tr>
<td>program</td>
<td>n. 程序</td>
</tr>
<tr>
<td>type</td>
<td>n. 型，类型；v. 打印</td>
</tr>
<tr>
<td>field</td>
<td>n. 字段，域，栏，场 </td>
</tr>
<tr>
<td>variable</td>
<td>a. 可变的；n. 变量</td>
</tr>
<tr>
<td>value</td>
<td>n. 值 </td>
</tr>
<tr>
<td>function</td>
<td>n. 函数，功能，操作 </td>
</tr>
<tr>
<td>parameter</td>
<td>n. 参数，参变量 </td>
</tr>
<tr>
<td>set</td>
<td>v. 设置，n. 集合</td>
</tr>
<tr>
<td>list</td>
<td>n. 列表，显示，v. 打印</td>
</tr>
<tr>
<td>index</td>
<td>n. 索引，变址，指数</td>
</tr>
<tr>
<td>display</td>
<td>vt. 显示，显示器</td>
</tr>
<tr>
<td>area</td>
<td>n. (区)域，面积，方面 </td>
</tr>
<tr>
<td>item</td>
<td>n. 项，项目，条款</td>
</tr>
<tr>
<td>window</td>
<td>n. 窗口</td>
</tr>
<tr>
<td>dialog</td>
<td>n. &amp; vt. 对话</td>
</tr>
<tr>
<td>mode</td>
<td>n. 态，方式，模 </td>
</tr>
<tr>
<td>box</td>
<td>n. 箱，匣，(逻辑)框</td>
</tr>
<tr>
<td>button</td>
<td>n. 按钮</td>
</tr>
<tr>
<td>tab</td>
<td>n. 制表键</td>
</tr>
<tr>
<td>line</td>
<td>n. (数据，程序)行，线路</td>
</tr>
<tr>
<td>produce</td>
<td>v. 生产，制造 </td>
</tr>
<tr>
<td>procedure</td>
<td>n. 过程，程序，工序 </td>
</tr>
<tr>
<td>message</td>
<td>n. 信息，消息，电文</td>
</tr>
<tr>
<td>information</td>
<td>n. 信息，情报</td>
</tr>
<tr>
<td>database</td>
<td>n. 数据库</td>
</tr>
<tr>
<td>make</td>
<td>vt. 制造，形成，接通</td>
</tr>
<tr>
<td>control</td>
<td>v. 控制，支配，管理 </td>
</tr>
<tr>
<td>select</td>
<td>vt. 选择</td>
</tr>
<tr>
<td>selected</td>
<td>a. 精选的</td>
</tr>
<tr>
<td>selection</td>
<td>n. 选择</td>
</tr>
<tr>
<td>keyboard</td>
<td>n. 键盘 </td>
</tr>
<tr>
<td>key</td>
<td>n. 键，关键字，关键码</td>
</tr>
<tr>
<td>press</td>
<td>v. 按，压</td>
</tr>
<tr>
<td>disk</td>
<td>n. 盘，磁盘 </td>
</tr>
<tr>
<td>screen</td>
<td>n. 屏幕，屏；v. 屏蔽</td>
</tr>
<tr>
<td>memory</td>
<td>n. 记忆存储，存储器</td>
</tr>
<tr>
<td>command</td>
<td>n. 命令，指令</td>
</tr>
<tr>
<td>mouse</td>
<td>n. 鼠标器</td>
</tr>
<tr>
<td>cursor</td>
<td>n. 光标</td>
</tr>
<tr>
<td>arrow</td>
<td>n. 箭头，指针 </td>
</tr>
<tr>
<td>specify</td>
<td>v. 指定，规定，确定</td>
</tr>
<tr>
<td>use</td>
<td>v. 使用，用途 </td>
</tr>
<tr>
<td>do</td>
<td>v. 做，干；n. 循环</td>
</tr>
<tr>
<td>see</td>
<td>v. 看，看出，查看</td>
</tr>
<tr>
<td>enter</td>
<td>v. 键入，送入</td>
</tr>
<tr>
<td>print</td>
<td>v. 打印，印刷 </td>
</tr>
<tr>
<td>drive</td>
<td>v. 驱动；n. 驱动器</td>
</tr>
<tr>
<td>change</td>
<td>v. 更换，改变，变动 </td>
</tr>
<tr>
<td>return</td>
<td>v. 返回，回送</td>
</tr>
<tr>
<td>choose</td>
<td>v. 挑选，选择，选定</td>
</tr>
<tr>
<td>shell</td>
<td>n. 壳，外壳</td>
</tr>
<tr>
<td>margin</td>
<td>n. 余量，边缘，边际 </td>
</tr>
<tr>
<td>current</td>
<td>n. 电流</td>
</tr>
<tr>
<td>example</td>
<td>n. 例子，实例</td>
</tr>
<tr>
<td>menu</td>
<td>n. 菜单，目录</td>
</tr>
<tr>
<td>option</td>
<td>n. 任选，选择，可选项</td>
</tr>
<tr>
<td>if</td>
<td>conj. 如果</td>
</tr>
<tr>
<td>by</td>
<td>prep. 凭，靠，沿 </td>
</tr>
<tr>
<td>with</td>
<td>prep. 用，与，随着 </td>
</tr>
<tr>
<td>from</td>
<td>prep. 从，来自，以来</td>
</tr>
<tr>
<td>move</td>
<td>v. 移动</td>
</tr>
<tr>
<td>copy</td>
<td>n. 复制，v. 拷贝 </td>
</tr>
<tr>
<td>create</td>
<td>vt. 创立，建立</td>
</tr>
<tr>
<td>insert</td>
<td>vt. 插入</td>
</tr>
<tr>
<td>edit</td>
<td>vt. 编辑，编排，编篡</td>
</tr>
<tr>
<td>save</td>
<td>v. 保存</td>
</tr>
<tr>
<td>delete</td>
<td>vt. 删除，删去，作废</td>
</tr>
<tr>
<td>on</td>
<td>ad. 接通，导电，开</td>
</tr>
<tr>
<td>off</td>
<td>ad. (设备)关着，脱离</td>
</tr>
<tr>
<td>mark</td>
<td>n. 标记；vt. 加标记</td>
</tr>
<tr>
<td>marked</td>
<td>a. 有记号的</td>
</tr>
<tr>
<td>help</td>
<td>v. &amp; n. 帮助</td>
</tr>
<tr>
<td>start</td>
<td>v. 起动，开始，启动</td>
</tr>
<tr>
<td>active</td>
<td>a. 激活的，活动的 </td>
</tr>
<tr>
<td>which pro</td>
<td>n. 哪个，a. 那一个</td>
</tr>
<tr>
<td>all</td>
<td>a. 全，全部；ad. 完全 </td>
</tr>
<tr>
<td>also</td>
<td>ad. &amp; conj. 也，亦，还 </td>
</tr>
<tr>
<td>without</td>
<td>prep. 没有，在…以外</td>
</tr>
<tr>
<td>then</td>
<td>ad. &amp; conj. 那时，则</td>
</tr>
<tr>
<td>group</td>
<td>n. 组，群</td>
</tr>
<tr>
<td>subgroup</td>
<td>n. 分组，子群 </td>
</tr>
<tr>
<td>user</td>
<td>n. 用户 </td>
</tr>
<tr>
<td>want</td>
<td>v. 需要，应该，缺少</td>
</tr>
<tr>
<td>appear</td>
<td>vi. 出现，显现，好像 </td>
</tr>
<tr>
<td>related</td>
<td>a. 相关的 </td>
</tr>
<tr>
<td>following</td>
<td>a. 下列的，以下的</td>
</tr>
<tr>
<td>only</td>
<td>a. 唯一的，ad. 仅仅</td>
</tr>
<tr>
<td>each</td>
<td>a. &amp; ad. 各(自)，每个 </td>
</tr>
<tr>
<td>first</td>
<td>a. &amp; ad. &amp; n. 第一，首先 </td>
</tr>
<tr>
<td>right</td>
<td>a. 右边的，正确的 </td>
</tr>
<tr>
<td>left</td>
<td>a. &amp; n. 左边(的) </td>
</tr>
<tr>
<td>next</td>
<td>n. 下一次，a. 其次 </td>
</tr>
<tr>
<td>end</td>
<td>n. 结束，终点，端点</td>
</tr>
<tr>
<td>up</td>
<td>ad. 上，向上，a. 高的  </td>
</tr>
<tr>
<td>system</td>
<td>n. 系统 </td>
</tr>
<tr>
<td>contain</td>
<td>vt. 包含，包括 </td>
</tr>
<tr>
<td>time</td>
<td>n. 时间；vt. 计时 </td>
</tr>
<tr>
<td>letter</td>
<td>n. 字母，信 </td>
</tr>
<tr>
<td>data</td>
<td>n. 数据 </td>
</tr>
<tr>
<td>setting</td>
<td>n. 设置，调整 </td>
</tr>
<tr>
<td>desire</td>
<td>v. &amp; n. 期望 </td>
</tr>
<tr>
<td>position</td>
<td>n. 位置；vt. 定位 </td>
</tr>
<tr>
<td>down</td>
<td>ad. 落下，降低，减少</td>
</tr>
<tr>
<td>task</td>
<td>n. 任务；v. 派给…任务 </td>
</tr>
<tr>
<td>view</td>
<td>n. &amp; v. 视图，景象 </td>
</tr>
<tr>
<td>switch</td>
<td>n. &amp; v. 开关，转换，切换 </td>
</tr>
<tr>
<td>include</td>
<td>vt. 包括，包含 </td>
</tr>
<tr>
<td>get</td>
<td>v. 得到，获得，取 </td>
</tr>
<tr>
<td>default</td>
<td>v. 缺省，预置，约定 </td>
</tr>
<tr>
<td>structure</td>
<td>n. 结构，构造，构件 </td>
</tr>
<tr>
<td>into</td>
<td>prep. 向内，进入</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>path</td>
<td>n. 路径，通路，轨道 </td>
</tr>
<tr>
<td>blank</td>
<td>n. 空白，间隔 </td>
</tr>
<tr>
<td>open</td>
<td>v. 打开，开启，断开 </td>
</tr>
<tr>
<td>add</td>
<td>v. &amp; n. 加，增加，添 </td>
</tr>
<tr>
<td>enable</td>
<td>vt. 启动，恢复正常操作 </td>
</tr>
<tr>
<td>operation</td>
<td>n. 操作，运算，动作 </td>
</tr>
<tr>
<td>erase</td>
<td>v. 擦除，取消，删除 </td>
</tr>
<tr>
<td>filename</td>
<td>n. 文件名 </td>
</tr>
<tr>
<td>search</td>
<td>v. 检索，查询，搜索</td>
</tr>
<tr>
<td>another</td>
<td>a. 另一个，别的 </td>
</tr>
<tr>
<td>last</td>
<td>a. &amp; n. 最后(的) </td>
</tr>
<tr>
<td>column</td>
<td>n. 列，柱，栏 </td>
</tr>
<tr>
<td>after</td>
<td>prep. &amp; ad. 以后，后面 </td>
</tr>
<tr>
<td>prompt</td>
<td>n. &amp; v. 提示 </td>
</tr>
<tr>
<td>two</td>
<td>n. &amp; a. 二，两，双 </td>
</tr>
<tr>
<td>execute</td>
<td>v. 实行，实施 </td>
</tr>
<tr>
<td>about</td>
<td>ad. 关于，大约，附近 </td>
</tr>
<tr>
<td>escape</td>
<td>v. 逃避，逸出，换码</td>
</tr>
<tr>
<td>error</td>
<td>n. 错误，误差，差错 </td>
</tr>
<tr>
<td>currently</td>
<td>ad. 目前，现在 </td>
</tr>
<tr>
<td>extension</td>
<td>n. 扩充，延伸 </td>
</tr>
<tr>
<td>same</td>
<td>a. 同样的，相同的 </td>
</tr>
<tr>
<td>status</td>
<td>n. 状态，态，状况 </td>
</tr>
<tr>
<td>run</td>
<td>v. 运行，运转，操作 </td>
</tr>
<tr>
<td>argument</td>
<td>n. 变元，自变量 </td>
</tr>
<tr>
<td>statement</td>
<td>n. 语句，陈述，命题</td>
</tr>
<tr>
<td>shift</td>
<td>v. 转义，换档，移位</td>
</tr>
<tr>
<td>store</td>
<td>n. &amp; vt. 存储，存储器 </td>
</tr>
<tr>
<td>scroll</td>
<td>vt. 上滚(卷)；n. 纸卷 </td>
</tr>
<tr>
<td>replace</td>
<td>vt. 替换，置换，代换 </td>
</tr>
<tr>
<td>macro</td>
<td>n. 宏，宏功能，宏指令 </td>
</tr>
<tr>
<td>page</td>
<td>n. 页面，页，版面 </td>
</tr>
<tr>
<td>quit</td>
<td>v. 退出，结束 </td>
</tr>
<tr>
<td>define</td>
<td>vt. 定义，规定，分辨 </td>
</tr>
<tr>
<td>reference</td>
<td>n. &amp; a. 参考；参考的 </td>
</tr>
<tr>
<td>other</td>
<td>a. 别的，另外的 </td>
</tr>
<tr>
<td>while</td>
<td>conj. 当…的时候 </td>
</tr>
<tr>
<td>pressing</td>
<td>n. &amp; a. 压制；紧急的 </td>
</tr>
<tr>
<td>restore</td>
<td>vt. 恢复，复原 </td>
</tr>
<tr>
<td>top</td>
<td>n. 顶，尖端 </td>
</tr>
<tr>
<td>how</td>
<td>ad. 如何，怎样，多么 </td>
</tr>
<tr>
<td>color</td>
<td>n. 颜色，色彩，(彩)色 </td>
</tr>
<tr>
<td>allow</td>
<td>v. 允许，容许 </td>
</tr>
<tr>
<td>block</td>
<td>n. (字，信息，数据)块 </td>
</tr>
<tr>
<td>decimal</td>
<td>n. &amp; a. 十进制；十进制的 </td>
</tr>
<tr>
<td>main</td>
<td>a. 主要的 </td>
</tr>
<tr>
<td>definition</td>
<td>n. 定义，确实，清晰度</td>
</tr>
<tr>
<td>between</td>
<td>prep. 在…之间，中间 </td>
</tr>
<tr>
<td>optional</td>
<td>a. 任选的，可选的 </td>
</tr>
<tr>
<td>date</td>
<td>n. 日期 </td>
</tr>
<tr>
<td>remove</td>
<td>v. 除去，移动</td>
</tr>
<tr>
<td>label</td>
<td>n. 标签，标号，标识符 </td>
</tr>
<tr>
<td>within</td>
<td>prep. 在…以内 </td>
</tr>
<tr>
<td>issue</td>
<td>v. 发行，出版，流出 </td>
</tr>
<tr>
<td>different</td>
<td>a. 不同的，各种各样的 </td>
</tr>
<tr>
<td>available</td>
<td>a. 可用的 </td>
</tr>
<tr>
<td>returned</td>
<td>a. 退回的</td>
</tr>
<tr>
<td>associate</td>
<td>v. 相联，联想，关联 </td>
</tr>
<tr>
<td>attribute</td>
<td>n. 属性，标志，表征 </td>
</tr>
<tr>
<td>dos</td>
<td>磁盘操作系统 </td>
</tr>
<tr>
<td>before</td>
<td>prep. 以前，前，先 </td>
</tr>
<tr>
<td>order</td>
<td>n. &amp; vt. 指令，次序；排序 </td>
</tr>
<tr>
<td>modify</td>
<td>vt. 修改，改变，变址 </td>
</tr>
<tr>
<td>array</td>
<td>n. 数组，阵列</td>
</tr>
<tr>
<td>note</td>
<td>n. 注解，注释 </td>
</tr>
<tr>
<td>locate</td>
<td>vt. 定位</td>
</tr>
<tr>
<td>video</td>
<td>n. 视频，电视</td>
</tr>
<tr>
<td>printer</td>
<td>n. 打印机，印刷机</td>
</tr>
<tr>
<td>bar</td>
<td>n. 条，杆，棒</td>
</tr>
<tr>
<td>bottom</td>
<td>n. &amp; a. 底，基础；底下的</td>
</tr>
<tr>
<td>carriage</td>
<td>n. 滑架，托架 </td>
</tr>
<tr>
<td>content</td>
<td>n. 含量，容量，内容 </td>
</tr>
<tr>
<td>either</td>
<td>a. &amp; pro n. 任何一个，各 </td>
</tr>
<tr>
<td>ok</td>
<td>ad. &amp; a. 对，好；全对 </td>
</tr>
<tr>
<td>space</td>
<td>n. 空格键，空间 </td>
</tr>
<tr>
<td>editor</td>
<td>n. 编辑程序 </td>
</tr>
<tr>
<td>exist</td>
<td>vi. 存在，生存，有 </td>
</tr>
<tr>
<td>scope</td>
<td>n. 范围，显示器</td>
</tr>
<tr>
<td>paragraph</td>
<td>n. 段(落)，节，短讯 </td>
</tr>
<tr>
<td>multi</td>
<td>(词头)多 </td>
</tr>
<tr>
<td>clear</td>
<td>v. 清除，弄干净 </td>
</tr>
<tr>
<td>exit</td>
<td>n. &amp; vi. 出口；退出 </td>
</tr>
<tr>
<td>report</td>
<td>vt. &amp; n. 报告，报表 </td>
</tr>
<tr>
<td>execution</td>
<td>n. 执行 </td>
</tr>
<tr>
<td>backup</td>
<td>n. 备份，后备，后援 </td>
</tr>
<tr>
<td>version</td>
<td>n. 版本 </td>
</tr>
<tr>
<td>find</td>
<td>v. 寻找，发现 </td>
</tr>
<tr>
<td>pointer</td>
<td>n. 指针，指示字 </td>
</tr>
<tr>
<td>subset</td>
<td>n. 子集，子设备 </td>
</tr>
<tr>
<td>full</td>
<td>a. &amp; ad. &amp; n. 全(的)，满 </td>
</tr>
<tr>
<td>check</td>
<td>v. 校对，栓查，核算 </td>
</tr>
<tr>
<td>should</td>
<td>v. &amp; aux. 应当，该 </td>
</tr>
<tr>
<td>single</td>
<td>a. &amp; n. 单个的；一个，单 </td>
</tr>
<tr>
<td>positioning</td>
<td>n. 定位 </td>
</tr>
<tr>
<td>provide</td>
<td>v. 提供 </td>
</tr>
<tr>
<td>title</td>
<td>n. 题目，标题 </td>
</tr>
<tr>
<td>expression</td>
<td>n. 表达式 </td>
</tr>
<tr>
<td>through</td>
<td>prep. &amp; ad. 通过，直通</td>
</tr>
<tr>
<td>toggle</td>
<td>n. &amp; v. 触发器；系紧</td>
</tr>
<tr>
<td>code</td>
<td>n. 码，代码，编码 </td>
</tr>
<tr>
<td>such</td>
<td>a. &amp; pro n. 这样的，如此 </td>
</tr>
<tr>
<td>beginning</td>
<td>n. 起点，初 </td>
</tr>
<tr>
<td>guide</td>
<td>n. 向导，指南，入门 </td>
</tr>
<tr>
<td>tree</td>
<td>n. 树，语法树 </td>
</tr>
<tr>
<td>environment</td>
<td>n. 环境 </td>
</tr>
<tr>
<td>but</td>
<td>但是，可是，除非，不过 </td>
</tr>
<tr>
<td>device</td>
<td>n. 设备，器件，装置 </td>
</tr>
<tr>
<td>highlight</td>
<td>n. 增强亮度，提示区</td>
</tr>
<tr>
<td>call</td>
<td>v. 调用，访问，呼叫</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-2"><a href="#list-2" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>continue</td>
<td>v. 连续，继续 </td>
</tr>
<tr>
<td>indicate</td>
<td>vt. 指示，表示 </td>
</tr>
<tr>
<td>until</td>
<td>prep. 到…为止，直到 </td>
</tr>
<tr>
<td>begin</td>
<td>v. 开始，着手，开端 </td>
</tr>
<tr>
<td>place</td>
<td>vt. 放，位，地点 </td>
</tr>
<tr>
<td>rename</td>
<td>vt. 更名，改名 </td>
</tr>
<tr>
<td>swap</td>
<td>v. 交换，调动 </td>
</tr>
<tr>
<td>work</td>
<td>n. 工作 </td>
</tr>
<tr>
<td>remain</td>
<td>vi. 剩下，留下，仍然 </td>
</tr>
<tr>
<td>close</td>
<td>v. &amp; a. 关闭，闭合；紧密的 </td>
</tr>
<tr>
<td>profile</td>
<td>n. 简要，剖面，概貌 </td>
</tr>
<tr>
<td>unless</td>
<td>conj. 除非 </td>
</tr>
<tr>
<td>so pro</td>
<td>n. &amp; conj. 如此，这样 </td>
</tr>
<tr>
<td>except</td>
<td>prep. 除…之外，除非 </td>
</tr>
<tr>
<td>turn</td>
<td>v. &amp; n. 转，转动；圈，匝 </td>
</tr>
<tr>
<td>back</td>
<td>n. 背面，反向，底座 </td>
</tr>
<tr>
<td>sure</td>
<td>a. &amp; ad. 确实的；的确 </td>
</tr>
<tr>
<td>section</td>
<td>n. 节，段，区域 </td>
</tr>
<tr>
<td>follow</td>
<td>v. 跟随，跟踪</td>
</tr>
<tr>
<td>split</td>
<td>v. 分开，分离</td>
</tr>
<tr>
<td>need</td>
<td>v. 必须，需要</td>
</tr>
<tr>
<td>access</td>
<td>n. 存取，选取，接近 </td>
</tr>
<tr>
<td>additional</td>
<td>a. 附加的，辅助的 </td>
</tr>
<tr>
<td>cancel</td>
<td>v. 删除，取消，作废 </td>
</tr>
<tr>
<td>document</td>
<td>n. 文献，资料，文件 </td>
</tr>
<tr>
<td>case</td>
<td>n. 情况，场合</td>
</tr>
<tr>
<td>go</td>
<td>vi. 运行，达到 </td>
</tr>
<tr>
<td>load</td>
<td>n. &amp; v. 装入，负载，寄存 </td>
</tr>
<tr>
<td>try</td>
<td>n. (尝)试，试验 </td>
</tr>
<tr>
<td>size</td>
<td>n. 尺寸，大小，容量</td>
</tr>
<tr>
<td>entire</td>
<td>a. &amp; n. 完全的；总体</td>
</tr>
<tr>
<td>leave</td>
<td>v. 离开，留下 </td>
</tr>
<tr>
<td>history</td>
<td>n. 历史 </td>
</tr>
<tr>
<td>second</td>
<td>n. &amp; a. 秒，第二(的) </td>
</tr>
<tr>
<td>reflow</td>
<td>v. &amp; n. 回流，逆流 </td>
</tr>
<tr>
<td>output</td>
<td>n. 输出，输出设备 </td>
</tr>
<tr>
<td>out</td>
<td>n. &amp; a. 输入，在外 </td>
</tr>
<tr>
<td>both</td>
<td>a. &amp; ad. 两，双，都 </td>
</tr>
<tr>
<td>install</td>
<td>vt. 安装 </td>
</tr>
<tr>
<td>source</td>
<td>n. 源，电源，源点 </td>
</tr>
<tr>
<td>way</td>
<td>n. 路线，途径，状态 </td>
</tr>
<tr>
<td>assign</td>
<td>vt. 赋值，指定，分派</td>
</tr>
<tr>
<td>support</td>
<td>vt. 支援，支持，配套 </td>
</tr>
<tr>
<td>specific</td>
<td>a. 特殊的，具体的 </td>
</tr>
<tr>
<td>join</td>
<td>v. &amp; n. 连接，并(运算) </td>
</tr>
<tr>
<td>expand</td>
<td>v. 扩充，扩展，展开 </td>
</tr>
<tr>
<td>like</td>
<td>a. 类似的，同样的 </td>
</tr>
<tr>
<td>diskette</td>
<td>n. 软磁盘，软盘片 </td>
</tr>
<tr>
<td>skip</td>
<td>v. 跳跃(定位)，跳过 </td>
</tr>
<tr>
<td>application</td>
<td>n. 应用 </td>
</tr>
<tr>
<td>confirmation</td>
<td>n. 认可 </td>
</tr>
<tr>
<td>whether</td>
<td>conj. 无论，不管 </td>
</tr>
<tr>
<td>hold</td>
<td>v. 保持 </td>
</tr>
<tr>
<td>click</td>
<td>n. “卡搭”声，插销 </td>
</tr>
<tr>
<td>byte</td>
<td>n. (二进制的)字节 </td>
</tr>
<tr>
<td>abbreviate</td>
<td>vt. 缩写，省略 </td>
</tr>
<tr>
<td>show</td>
<td>v. 显示，呈现，出示 </td>
</tr>
<tr>
<td>otherwise</td>
<td>ad. &amp; a. 另外 </td>
</tr>
<tr>
<td>working</td>
<td>n. 工作，操作，作业 </td>
</tr>
<tr>
<td>delimiter</td>
<td>n. 定界符，分界符 </td>
</tr>
<tr>
<td>location</td>
<td>n. 定位，(存储器)单元 </td>
</tr>
<tr>
<td>perform</td>
<td>v. 执行，完成 </td>
</tr>
<tr>
<td>graphic</td>
<td>n. &amp; a. 图形；图形的 </td>
</tr>
<tr>
<td>confirm</td>
<td>vt. 证实，确认 </td>
</tr>
<tr>
<td>sort</td>
<td>v. 分类，排序 </td>
</tr>
<tr>
<td>clause</td>
<td>n. 条款，项目，子句 </td>
</tr>
<tr>
<td>once</td>
<td>ad. &amp; n. 只一次，一旦 </td>
</tr>
<tr>
<td>however</td>
<td>conj. 然而，可是 </td>
</tr>
<tr>
<td>extend</td>
<td>v. 扩充 </td>
</tr>
<tr>
<td>look</td>
<td>v. 看，查看 </td>
</tr>
<tr>
<td>starting</td>
<td>a. 起始的 </td>
</tr>
<tr>
<td>now</td>
<td>ad. &amp; n. 此刻，现在 </td>
</tr>
<tr>
<td>original</td>
<td>n. &amp; a. 原文；原(初)始的 </td>
</tr>
<tr>
<td>correspond</td>
<td>vi. 通信(联系) </td>
</tr>
<tr>
<td>property</td>
<td>n. 性(质)，特征</td>
</tr>
<tr>
<td>several</td>
<td>a. &amp; n. 若干个，几个 </td>
</tr>
<tr>
<td>learn</td>
<td>v. 学习，训练 </td>
</tr>
<tr>
<td>cause</td>
<td>n. 原因，理由 </td>
</tr>
<tr>
<td>bracket</td>
<td>n. (方)括号，等级 </td>
</tr>
<tr>
<td>omit</td>
<td>vt. 省略，删去，遗漏 </td>
</tr>
<tr>
<td>running</td>
<td>a. 运行着的，游动的 </td>
</tr>
<tr>
<td>sub-directory</td>
<td>n. 子目录 </td>
</tr>
<tr>
<td>edge</td>
<td>n. 棱，边，边缘，界限 </td>
</tr>
<tr>
<td>form</td>
<td>n. 格式，表格，方式 </td>
</tr>
<tr>
<td>instruction</td>
<td>n. 指令，指导</td>
</tr>
<tr>
<td>ascii</td>
<td>n. 美国信息交换标准码 </td>
</tr>
<tr>
<td>below</td>
<td>a. &amp; prep. 下列的；低于 </td>
</tr>
<tr>
<td>standard</td>
<td>n. 标准 </td>
</tr>
<tr>
<td>occurrence</td>
<td>n. 出现，发生 </td>
</tr>
<tr>
<td>lock</td>
<td>n. &amp; v. 锁，封闭；自动跟踪 </td>
</tr>
<tr>
<td>append</td>
<td>vt. 附加，增补 </td>
</tr>
<tr>
<td>destination</td>
<td>n. 目的地，接收站 </td>
</tr>
<tr>
<td>password</td>
<td>n. 口令，保密字 </td>
</tr>
<tr>
<td>point</td>
<td>n. 点，小数点，句号 </td>
</tr>
<tr>
<td>variety</td>
<td>n. 变化，种类，品种 </td>
</tr>
<tr>
<td>many</td>
<td>a. &amp; n. 许多，多数</td>
</tr>
<tr>
<td>buffer</td>
<td>n. 缓冲器 </td>
</tr>
<tr>
<td>useful</td>
<td>a. 有用的 </td>
</tr>
<tr>
<td>object</td>
<td>n. 对象，目标，物体 </td>
</tr>
<tr>
<td>again</td>
<td>ad. 再，又，重新，也 </td>
</tr>
<tr>
<td>operating</td>
<td>a. 操作的，控制的 </td>
</tr>
<tr>
<td>carry</td>
<td>v. 进位，带 </td>
</tr>
<tr>
<td>update</td>
<td>v. 更新，修改，校正 </td>
</tr>
<tr>
<td>moving</td>
<td>n. &amp; a. 活动的，自动的 </td>
</tr>
<tr>
<td>coprocessor</td>
<td>n. 协同处理器</td>
</tr>
<tr>
<td>overlay</td>
<td>v. 覆盖，重叠 </td>
</tr>
<tr>
<td>practice</td>
<td>n. 实习，实践 </td>
</tr>
<tr>
<td>navigation</td>
<td>n. 导航 </td>
</tr>
<tr>
<td>automatically</td>
<td>ad. 自动地，机械地 </td>
</tr>
<tr>
<td>total</td>
<td>n. &amp; v. 总数；总计 </td>
</tr>
<tr>
<td>previous</td>
<td>a. 早先的，上述的 </td>
</tr>
<tr>
<td>software</td>
<td>n. 软件 </td>
</tr>
<tr>
<td>shortcut</td>
<td>n. 近路，捷径 </td>
</tr>
<tr>
<td>long</td>
<td>a. 长的，远的 </td>
</tr>
<tr>
<td>unique</td>
<td>a. 唯一的，独特的 </td>
</tr>
<tr>
<td>part</td>
<td>n. 部分，零件 </td>
</tr>
<tr>
<td>updated</td>
<td>a. 适时的，更新的 </td>
</tr>
<tr>
<td>internal</td>
<td>a. 内部的 </td>
</tr>
<tr>
<td>fill</td>
<td>v. 填充 </td>
</tr>
<tr>
<td>basic</td>
<td>n. &amp; a. 基本；基本的 </td>
</tr>
<tr>
<td>math</td>
<td>n. 数学 </td>
</tr>
<tr>
<td>since</td>
<td>prep. 自从…以来 </td>
</tr>
<tr>
<td>making</td>
<td>n. 制造，构造 </td>
</tr>
<tr>
<td>center</td>
<td>n. 中心，中央</td>
</tr>
<tr>
<td>keyword</td>
<td>n. 关键字(词)</td>
</tr>
<tr>
<td>action</td>
<td>n. 操作，运算 </td>
</tr>
<tr>
<td>condition</td>
<td>n. 条件，情况；vt. 调节 </td>
</tr>
<tr>
<td>quick</td>
<td>a. &amp; ad. 快速的，灵敏的 </td>
</tr>
<tr>
<td>assigned</td>
<td>a. 指定的，赋值的 </td>
</tr>
<tr>
<td>give</td>
<td>vt. 给出，赋予，发生 </td>
</tr>
<tr>
<td>large</td>
<td>a. (巨)大的，大量的 </td>
</tr>
<tr>
<td>chapter</td>
<td>n. 章，段 </td>
</tr>
<tr>
<td>computer</td>
<td>n. 计算机 </td>
</tr>
<tr>
<td>complete</td>
<td>v. &amp; a. 完成；完整的 </td>
</tr>
<tr>
<td>past</td>
<td>a. 过去的，结束的 </td>
</tr>
<tr>
<td>match</td>
<td>v. 比较，匹配，符合</td>
</tr>
<tr>
<td>recover</td>
<td>v. 恢复，回收</td>
</tr>
<tr>
<td>always</td>
<td>ad. 总是，一直，始终 </td>
</tr>
<tr>
<td>require</td>
<td>v. 需要，要求 </td>
</tr>
<tr>
<td>opening</td>
<td>n. 打开，断路，孔 </td>
</tr>
<tr>
<td>network</td>
<td>n. &amp; vt. 网络；联网 </td>
</tr>
<tr>
<td>sign</td>
<td>n. 符号，信号，记号 </td>
</tr>
<tr>
<td>release</td>
<td>vt. &amp; n. 释放，核发，版 </td>
</tr>
<tr>
<td>three</td>
<td>a. &amp; n. 三(的) </td>
</tr>
<tr>
<td>recall</td>
<td>vt. 撤消，复活，检索 </td>
</tr>
<tr>
<td>deletion</td>
<td>n. 删去(部分)，删除 </td>
</tr>
<tr>
<td>fixed</td>
<td>a. 固定的，不变的</td>
</tr>
<tr>
<td>amount</td>
<td>vt. &amp; n. 总计；合计 </td>
</tr>
<tr>
<td>alias</td>
<td>n. 别名，代号，标记 </td>
</tr>
<tr>
<td>quote</td>
<td>n. &amp; v. 引号；加引号 </td>
</tr>
<tr>
<td>correct</td>
<td>a. &amp; vt. 正确的；改正 </td>
</tr>
<tr>
<td>else</td>
<td>ad. &amp; conj. 否则，此外 </td>
</tr>
<tr>
<td>maximum</td>
<td>n. &amp; a. 最大(的)，最高 </td>
</tr>
<tr>
<td>under</td>
<td>prep. 在…下面(之下) </td>
</tr>
<tr>
<td>take</td>
<td>v. 取，拿 </td>
</tr>
<tr>
<td>switching</td>
<td>n. 开关，转接，交换 </td>
</tr>
<tr>
<td>element</td>
<td>n. 元件，元素，码元</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-3"><a href="#list-3" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>modification</td>
<td>n. 改变，修改 </td>
</tr>
<tr>
<td>modified</td>
<td>a. 修改的，变更的 </td>
</tr>
<tr>
<td>input</td>
<td>n. 输入，输入设备 </td>
</tr>
<tr>
<td>uppercase</td>
<td>n. 大写字母 </td>
</tr>
<tr>
<td>plus</td>
<td>prep. 加，加上，外加 </td>
</tr>
<tr>
<td>found</td>
<td>v. 建立，创办 </td>
</tr>
<tr>
<td>debug</td>
<td>vt. 调试 </td>
</tr>
<tr>
<td>force</td>
<td>v. &amp; n. 强制；压力，强度 </td>
</tr>
<tr>
<td>lowercase</td>
<td>n. 下档，小写体 </td>
</tr>
<tr>
<td>just</td>
<td>ad. 恰好 </td>
</tr>
<tr>
<td>undo</td>
<td>vt. 取消，废除</td>
</tr>
<tr>
<td>environ</td>
<td>vt. 围绕，包围 </td>
</tr>
<tr>
<td>why</td>
<td>ad. 为什么 </td>
</tr>
<tr>
<td>temporary</td>
<td>a. 暂时的，临时的 </td>
</tr>
<tr>
<td>put</td>
<td>v. 存放(记录)，放置 </td>
</tr>
<tr>
<td>instead</td>
<td>ad. (来)代替，当作 </td>
</tr>
<tr>
<td>encounter</td>
<td>v. &amp; n. 遇到，碰到 </td>
</tr>
<tr>
<td>across</td>
<td>prep. 交叉，越过 </td>
</tr>
<tr>
<td>matching</td>
<td>n. 匹配，调整 </td>
</tr>
<tr>
<td>wildcard</td>
<td>n. 通配符 </td>
</tr>
<tr>
<td>spill</td>
<td>v. 漏出，溢出，漏失 </td>
</tr>
<tr>
<td>level</td>
<td>n. 水平，级，层次</td>
</tr>
<tr>
<td>browse</td>
<td>v. 浏览 </td>
</tr>
<tr>
<td>speech</td>
<td>n. 说话，言语，语音 </td>
</tr>
<tr>
<td>occur</td>
<td>vi. 发生，出现，存在 </td>
</tr>
<tr>
<td>memo</td>
<td>n. 备忘录 </td>
</tr>
<tr>
<td>prior</td>
<td>a. 先验的，优先的 </td>
</tr>
<tr>
<td>loaded</td>
<td>a. 有负载的 </td>
</tr>
<tr>
<td>length</td>
<td>n. (字，记录，块)长度 </td>
</tr>
<tr>
<td>round</td>
<td>v. 舍入，四舍五入 </td>
</tr>
<tr>
<td>variant</td>
<td>n. &amp; a. 变体，易变的 </td>
</tr>
<tr>
<td>floppy</td>
<td>n. 软磁盘 </td>
</tr>
<tr>
<td>machine</td>
<td>n. 机器，计算机</td>
</tr>
<tr>
<td>square</td>
<td>n. &amp; a. 正方形；方形的 </td>
</tr>
<tr>
<td>supply</td>
<td>vt. &amp; n. 电源，供给 </td>
</tr>
<tr>
<td>home</td>
<td>n. &amp; a. 家，出发点 </td>
</tr>
<tr>
<td>normal</td>
<td>a. &amp; n. 正常，标准 </td>
</tr>
<tr>
<td>onto</td>
<td>prep. 向…，到…上 </td>
</tr>
<tr>
<td>during</td>
<td>prep. 在…期间 </td>
</tr>
<tr>
<td>module</td>
<td>n. 模块(程序设计) </td>
</tr>
<tr>
<td>monochrome</td>
<td>n. 单色 </td>
</tr>
<tr>
<td>assistance</td>
<td>n. 辅助设备，帮助 </td>
</tr>
<tr>
<td>tell</td>
<td>n. 讲，说，教，计算</td>
</tr>
<tr>
<td>library</td>
<td>n. (程序…)库，图书馆 </td>
</tr>
<tr>
<td>demonstration</td>
<td>n. (公开)表演，示范 </td>
</tr>
<tr>
<td>stack</td>
<td>n. 栈，堆栈，存储栈 </td>
</tr>
<tr>
<td>even</td>
<td>a. &amp; ad. 偶数的；甚至 </td>
</tr>
<tr>
<td>evaluate</td>
<td>v. 估计，估算，求值 </td>
</tr>
<tr>
<td>times</td>
<td>n. 次数 </td>
</tr>
<tr>
<td>previously</td>
<td>ad. 以前，预先 </td>
</tr>
<tr>
<td>directly</td>
<td>ad. 直接地，立即 </td>
</tr>
<tr>
<td>logical</td>
<td>a. 逻辑的，逻辑”或” </td>
</tr>
<tr>
<td>template</td>
<td>n. 标准框，样板，模板 </td>
</tr>
<tr>
<td>calling</td>
<td>n. 呼叫，调用，调入</td>
</tr>
<tr>
<td>later</td>
<td>a. 更后的，后面的 </td>
</tr>
<tr>
<td>driver</td>
<td>n. 驱动器，驱动程序 </td>
</tr>
<tr>
<td>therefore</td>
<td>ad. &amp; conj. 因此，所以 </td>
</tr>
<tr>
<td>saving</td>
<td>a. 保存的 </td>
</tr>
<tr>
<td>detail</td>
<td>n. 元件，零件，细节 </td>
</tr>
<tr>
<td>linker</td>
<td>n. 连接程序 </td>
</tr>
<tr>
<td>loop</td>
<td>n. 圈，环；(程序)循环，回路 </td>
</tr>
<tr>
<td>process</td>
<td>vt. 处理，进程，加工 </td>
</tr>
<tr>
<td>scheme</td>
<td>n. 方案，计划，图 </td>
</tr>
<tr>
<td>every</td>
<td>a. 每个，全体，所有的</td>
</tr>
<tr>
<td>refer</td>
<td>v. 访问，引用，涉及 </td>
</tr>
<tr>
<td>possible</td>
<td>a. 可能的，潜在的 </td>
</tr>
<tr>
<td>above</td>
<td>a. 在…之上，大于 </td>
</tr>
<tr>
<td>overview</td>
<td>n. 综述，概要 </td>
</tr>
<tr>
<td>result</td>
<td>n. 结果 </td>
</tr>
<tr>
<td>syntax</td>
<td>n. 语法，文法，句法 </td>
</tr>
<tr>
<td>abbreviation</td>
<td>n. 缩短，省略，简称 </td>
</tr>
<tr>
<td>bios</td>
<td>n. 基本输入/输出系统 </td>
</tr>
<tr>
<td>hidden</td>
<td>a. 隐藏的，秘密的 </td>
</tr>
<tr>
<td>null</td>
<td>n. &amp; a. 空(的)，零(的)</td>
</tr>
<tr>
<td>send</td>
<td>v. 发送 </td>
</tr>
<tr>
<td>private</td>
<td>a. 专用的，私人的 </td>
</tr>
<tr>
<td>hard</td>
<td>a. 硬的 </td>
</tr>
<tr>
<td>hardware</td>
<td>n. 硬件 </td>
</tr>
<tr>
<td>say</td>
<td>v. 说，显示，假定 </td>
</tr>
<tr>
<td>equal</td>
<td>vt. &amp; n. 等于，相等；等号 </td>
</tr>
<tr>
<td>pack</td>
<td>n. 压缩，包裹 </td>
</tr>
<tr>
<td>minus</td>
<td>a. &amp; n. 负的；负数，减 </td>
</tr>
<tr>
<td>alternate</td>
<td>a. 交替的，备用的 </td>
</tr>
<tr>
<td>collapse</td>
<td>v. 崩溃，破裂 </td>
</tr>
<tr>
<td>corner</td>
<td>n. 角，角落，转换 </td>
</tr>
<tr>
<td>present</td>
<td>a. &amp; v. 现行的；提供</td>
</tr>
<tr>
<td>interpreter</td>
<td>n. 解释程序，翻译机 </td>
</tr>
<tr>
<td>advance</td>
<td>v. &amp; n. 进步，提高；进展 </td>
</tr>
<tr>
<td>forward</td>
<td>a. 正向的 </td>
</tr>
<tr>
<td>fast</td>
<td>a. &amp; ad. 快速的 </td>
</tr>
<tr>
<td>special</td>
<td>a. 专用的，特殊的 </td>
</tr>
<tr>
<td>slash</td>
<td>n. 斜线 </td>
</tr>
<tr>
<td>utility</td>
<td>n. &amp; a. 实用程序；实用性 </td>
</tr>
<tr>
<td>regardless</td>
<td>a. 不注意的，不考虑的 </td>
</tr>
<tr>
<td>disable</td>
<td>vt. 禁止，停用 </td>
</tr>
<tr>
<td>compatible</td>
<td>a. 可兼容的，可共存的 </td>
</tr>
<tr>
<td>depend</td>
<td>vi. 随…而定，取决于</td>
</tr>
<tr>
<td>empty</td>
<td>a. 空，零，未占用 </td>
</tr>
<tr>
<td>alphabetical</td>
<td>a. 字母(表)的，abc的 </td>
</tr>
<tr>
<td>branch</td>
<td>n. 分支，支线；v. 转换 </td>
</tr>
<tr>
<td>resume</td>
<td>v. 重(新)开(始) </td>
</tr>
<tr>
<td>multiple</td>
<td>a. 多次的，复杂的 </td>
</tr>
<tr>
<td>monitor</td>
<td>n. 监视器，监督程序 </td>
</tr>
<tr>
<td>configuration</td>
<td>n. 配置 </td>
</tr>
<tr>
<td>replacement</td>
<td>n. 替换，置换，更新 </td>
</tr>
<tr>
<td>required</td>
<td>a. 需要的 </td>
</tr>
<tr>
<td>macros</td>
<td>n. 宏命令(指令) </td>
</tr>
<tr>
<td>table</td>
<td>n. 表 </td>
</tr>
<tr>
<td>loss</td>
<td>n. 损耗，损失</td>
</tr>
<tr>
<td>batch</td>
<td>n. 批，批量，成批 </td>
</tr>
<tr>
<td>exact</td>
<td>a. 正确的 </td>
</tr>
<tr>
<td>aboveboard</td>
<td>ad. &amp; a. 照直，公开的 </td>
</tr>
<tr>
<td>activate</td>
<td>vt. &amp; n. 使激活，驱动 </td>
</tr>
<tr>
<td>around</td>
<td>ad. &amp; prep. 周围，围绕 </td>
</tr>
<tr>
<td>slow</td>
<td>a. &amp; ad. 慢速的 </td>
</tr>
<tr>
<td>floating</td>
<td>a. 浮动的，浮点的 </td>
</tr>
<tr>
<td>refresh</td>
<td>v. 刷新，更新，再生 </td>
</tr>
<tr>
<td>stop</td>
<td>v. 停止，停机 </td>
</tr>
<tr>
<td>pass</td>
<td>v. 传送，传递，遍(数) </td>
</tr>
<tr>
<td>public</td>
<td>a. 公用的，公共的 </td>
</tr>
<tr>
<td>eject</td>
<td>n. 弹出 </td>
</tr>
<tr>
<td>ignore</td>
<td>vt. 不管，忽略不计 </td>
</tr>
<tr>
<td>share</td>
<td>v. 共享，共用 </td>
</tr>
<tr>
<td>sequence</td>
<td>n. 顺序，时序，序列 </td>
</tr>
<tr>
<td>consist</td>
<td>vi. 符合，包括 </td>
</tr>
<tr>
<td>step</td>
<td>n. 步，步骤，步长，档 </td>
</tr>
<tr>
<td>double</td>
<td>a. 两倍的，成双的 </td>
</tr>
<tr>
<td>come</td>
<td>vi. 来，到，出现 </td>
</tr>
<tr>
<td>lower</td>
<td>a. 下部的，低级的 </td>
</tr>
<tr>
<td>describe</td>
<td>vt. 描述，沿…运行</td>
</tr>
<tr>
<td>count</td>
<td>v. 计数，计算 </td>
</tr>
<tr>
<td>pop</td>
<td>v. 上托，弹出(栈) </td>
</tr>
<tr>
<td>valid</td>
<td>a. 有效的 </td>
</tr>
<tr>
<td>suspend</td>
<td>v. 中止，暂停，挂起 </td>
</tr>
<tr>
<td>enhance</td>
<td>vt. 增强，放大，夸张 </td>
</tr>
<tr>
<td>separate</td>
<td>v. &amp; a. 分隔，分离，各自的 </td>
</tr>
<tr>
<td>echo</td>
<td>n. 回波，反射波 </td>
</tr>
<tr>
<td>necessary</td>
<td>a. 必要的，必然的 </td>
</tr>
<tr>
<td>greater than</td>
<td>大于 </td>
</tr>
<tr>
<td>able</td>
<td>a. 能…的，有能力的 </td>
</tr>
<tr>
<td>marking</td>
<td>n. 标记，记号，传号 </td>
</tr>
<tr>
<td>ask</td>
<td>v. 请求，需要 </td>
</tr>
<tr>
<td>bring</td>
<td>v. 引起，产生，拿来 </td>
</tr>
<tr>
<td>warning</td>
<td>n. &amp; a. 报警，预告 </td>
</tr>
<tr>
<td>less</td>
<td>a. &amp; ad. 更小，更少 </td>
</tr>
<tr>
<td>whose pro</td>
<td>n. 谁的 </td>
</tr>
<tr>
<td>comment</td>
<td>n. &amp; vi. 注解，注释 </td>
</tr>
<tr>
<td>effect</td>
<td>n. 效率，作用，效能 </td>
</tr>
<tr>
<td>expanding</td>
<td>a. 扩展的，扩充的 </td>
</tr>
<tr>
<td>on-line</td>
<td>a. 联机的 </td>
</tr>
<tr>
<td>reorder</td>
<td>v. (按序)排列，排序 </td>
</tr>
<tr>
<td>direct</td>
<td>a. 直接的 </td>
</tr>
<tr>
<td>enclose</td>
<td>vt. 封闭，密封，围住，包装</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-4"><a href="#list-4" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>reset</td>
<td>vt. 复位，置”0” </td>
</tr>
<tr>
<td>various</td>
<td>a. 不同的，各种各样的 </td>
</tr>
<tr>
<td>paper</td>
<td>n. 纸，文件，论文 </td>
</tr>
<tr>
<td>prevent</td>
<td>v. 防止，预防 </td>
</tr>
<tr>
<td>side</td>
<td>n. (旁)边，面，侧(面) </td>
</tr>
<tr>
<td>push</td>
<td>v. 推，按，压，进(栈) </td>
</tr>
<tr>
<td>programming</td>
<td>n. 程序设计，编程序 </td>
</tr>
<tr>
<td>upper</td>
<td>a. 上的，上部的 </td>
</tr>
<tr>
<td>row</td>
<td>n. 行 </td>
</tr>
<tr>
<td>pressed</td>
<td>a. 加压的，压缩的 </td>
</tr>
<tr>
<td>temporarily</td>
<td>ad. 暂时</td>
</tr>
<tr>
<td>day</td>
<td>n. 日，天，白天，时代 </td>
</tr>
<tr>
<td>repaint</td>
<td>vt. 重画 </td>
</tr>
<tr>
<td>redefine</td>
<td>vt. 重新规定(定义) </td>
</tr>
<tr>
<td>relation</td>
<td>n. 关系，关系式 </td>
</tr>
<tr>
<td>dimension</td>
<td>n. 尺寸，维，因次 </td>
</tr>
<tr>
<td>boundary</td>
<td>n. 边界，界限，约束 </td>
</tr>
<tr>
<td>zoom</td>
<td>v. 变焦距 </td>
</tr>
<tr>
<td>initialize</td>
<td>v. 初始化 </td>
</tr>
<tr>
<td>personal</td>
<td>a. 个人的，自身的 </td>
</tr>
<tr>
<td>hello int. &amp;</td>
<td>v. 喂！；呼叫</td>
</tr>
<tr>
<td>true</td>
<td>a. &amp; n. 真，实，选中</td>
</tr>
<tr>
<td>wish</td>
<td>v. &amp; n. 祝愿，希望 </td>
</tr>
<tr>
<td>font</td>
<td>n. 铅字，字形 </td>
</tr>
<tr>
<td>know</td>
<td>v. 知道，了解，认识 </td>
</tr>
<tr>
<td>convert</td>
<td>v. 转换，变换 </td>
</tr>
<tr>
<td>global</td>
<td>n. 全局，全程，全局符 </td>
</tr>
<tr>
<td>still</td>
<td>a. &amp; n. &amp; v. 静止的；静；平静 </td>
</tr>
<tr>
<td>installation</td>
<td>n. 安装，装配 </td>
</tr>
<tr>
<td>invoke</td>
<td>vt. 调用，请求 </td>
</tr>
<tr>
<td>interactive</td>
<td>a. 交互式，交互的 </td>
</tr>
<tr>
<td>described</td>
<td>a. 被看到的，被发现的 </td>
</tr>
<tr>
<td>century</td>
<td>n. 世纪</td>
</tr>
<tr>
<td>literal</td>
<td>a. 文字的 </td>
</tr>
<tr>
<td>rather</td>
<td>ad. 宁可，有点 </td>
</tr>
<tr>
<td>exclusive</td>
<td>a. 排斥，排它性 </td>
</tr>
<tr>
<td>marker</td>
<td>n. 记号，标记，标志 </td>
</tr>
<tr>
<td>wait</td>
<td>v. 等待 </td>
</tr>
<tr>
<td>appropriate</td>
<td>a. 适当的，合适的 </td>
</tr>
<tr>
<td>fit</td>
<td>v. &amp; n. 适合，装配；非特 </td>
</tr>
<tr>
<td>adapter</td>
<td>n. 适配器，转换器 </td>
</tr>
<tr>
<td>filter</td>
<td>n. 滤波器，滤光材料 </td>
</tr>
<tr>
<td>break</td>
<td>v. 断开，撕开，中断 </td>
</tr>
<tr>
<td>backward</td>
<td>ad. 向后，逆，倒</td>
</tr>
<tr>
<td>searching</td>
<td>n. 搜索 </td>
</tr>
<tr>
<td>receive</td>
<td>v. 接收 </td>
</tr>
<tr>
<td>dual</td>
<td>a. 对偶的，双的 </td>
</tr>
<tr>
<td>retry</td>
<td>vt. 再试，复算 </td>
</tr>
<tr>
<td>normally</td>
<td>ad. 正常地，通常 </td>
</tr>
<tr>
<td>exactly</td>
<td>ad. 正好，完全，精确地 </td>
</tr>
<tr>
<td>immediately</td>
<td>ad. 直接地 </td>
</tr>
<tr>
<td>separated</td>
<td>a. 分开的 </td>
</tr>
<tr>
<td>high</td>
<td>a. 高 </td>
</tr>
<tr>
<td>equivalent</td>
<td>a. 相等的，等效的</td>
</tr>
<tr>
<td>light</td>
<td>n. &amp; a. 光(波，源)；轻的 </td>
</tr>
<tr>
<td>zero</td>
<td>n. 零，零位，零点 </td>
</tr>
<tr>
<td>storage</td>
<td>n. 存储，存储器 </td>
</tr>
<tr>
<td>width</td>
<td>n. 宽度 </td>
</tr>
<tr>
<td>language</td>
<td>n. 语言 </td>
</tr>
<tr>
<td>startup</td>
<td>n. 启动 </td>
</tr>
<tr>
<td>much</td>
<td>a. &amp; n. 很多，许多，大量 </td>
</tr>
<tr>
<td>per</td>
<td>prep. 每，按 </td>
</tr>
<tr>
<td>over</td>
<td>prep. 在…上方 </td>
</tr>
<tr>
<td>mirror</td>
<td>n. &amp; v. 镜，反射，反映 </td>
</tr>
<tr>
<td>request</td>
<td>n. &amp; vt. 请求</td>
</tr>
<tr>
<td>keypad</td>
<td>n. 小键盘 </td>
</tr>
<tr>
<td>keep</td>
<td>v. 保持，保存 </td>
</tr>
<tr>
<td>resident</td>
<td>a. 驻留的 </td>
</tr>
<tr>
<td>learning</td>
<td>n. 学问，知识 </td>
</tr>
<tr>
<td>talk</td>
<td>v. 通话，谈话 </td>
</tr>
<tr>
<td>summary</td>
<td>n. 摘要，汇总，提要 </td>
</tr>
<tr>
<td>well</td>
<td>n. &amp; a. 井；好，良好 </td>
</tr>
<tr>
<td>link</td>
<td>n. &amp; v. 链接；连接，联络 </td>
</tr>
<tr>
<td>identify</td>
<td>v. 识别，辨认 </td>
</tr>
<tr>
<td>designated</td>
<td>a. 指定的，特指的</td>
</tr>
<tr>
<td>pertain</td>
<td>vi. 附属，属于，关于</td>
</tr>
<tr>
<td>expansion</td>
<td>n. 展开，展开式 </td>
</tr>
<tr>
<td>incompatible</td>
<td>a. 不兼容的 </td>
</tr>
<tr>
<td>blinking</td>
<td>n. 闪烁 </td>
</tr>
<tr>
<td>month</td>
<td>n. 月份 </td>
</tr>
<tr>
<td>precede</td>
<td>v. 先于</td>
</tr>
<tr>
<td>transportable</td>
<td>a. 可移动的 </td>
</tr>
<tr>
<td>appropriately</td>
<td>ad. 适当地 </td>
</tr>
<tr>
<td>routine</td>
<td>n. 程序，例行程序 </td>
</tr>
<tr>
<td>listing</td>
<td>n. 列表，编目 </td>
</tr>
<tr>
<td>newly</td>
<td>ad. 新近，重新 </td>
</tr>
<tr>
<td>year</td>
<td>n. (一)年，年度，年龄 </td>
</tr>
<tr>
<td>contact</td>
<td>n. 接触，触点 </td>
</tr>
<tr>
<td>session</td>
<td>n. 对话，通话 </td>
</tr>
<tr>
<td>own</td>
<td>a. &amp; v. 自己的；拥有 </td>
</tr>
<tr>
<td>redraw</td>
<td>vt. 再拉 </td>
</tr>
<tr>
<td>here</td>
<td>ad. 在这里 </td>
</tr>
<tr>
<td>manual</td>
<td>a. 手工的，手动的 </td>
</tr>
<tr>
<td>particular</td>
<td>a. 特定的，特别的</td>
</tr>
<tr>
<td>rectangle</td>
<td>n. 矩形 </td>
</tr>
<tr>
<td>additive</td>
<td>a. &amp; n. 相加的；附加物 </td>
</tr>
<tr>
<td>similar</td>
<td>a. 相似的 </td>
</tr>
<tr>
<td>assembly</td>
<td>n. 汇编，安装，装配 </td>
</tr>
<tr>
<td>copyright</td>
<td>n. 版权 </td>
</tr>
<tr>
<td>description</td>
<td>n. 描述 </td>
</tr>
<tr>
<td>retrieve</td>
<td>v. 检索 </td>
</tr>
<tr>
<td>mistake</td>
<td>n. 错误 </td>
</tr>
</tbody>
</table>
</div>
<p>ram 随机存取存储器<br>exception |n. 例外，异常，异议<br>reverse |v. &amp; |a. 反向的，逆<br>minimum |n. &amp; a. 最小(的)，最低<br>enough |a. &amp; ad. 足够的，充足的<br>although |conj. 虽然，即使<br>reindex |v. &amp; n. 变换(改变)符号<br>third |a. &amp; n. 第三，三分之一<br>red |a. &amp; n. 红色(的)<br>along |prep. &amp; ad. 沿着<br>test |n. &amp; v. 测试<br>small |a. 小的，小型的<br>feed |v. 馈给，(打印机)进纸<br>company |n. &amp; v. 公司；交际，交往<br>movie |n. 影片，电影(院)<br>compile |vt. 编译<br>frequently |ad. 常常，频繁地<br>undefined |a. 未定义的<br>state |n. &amp; vt. 状态；确定<br>tick v；|n. 滴答(响)；勾号(√)<br>accept |vt. 接受，认可，同意<br>intense |a. 强烈的，高度的<br>documentation |n. 文件编制，文本<br>asterisk |n. 星号(*)<br>easily |ad. 容易地，轻易地<br>become |v. 成为，变成，适宜<br>address |vt. &amp; n. 寻址；地址<br>interface |n. 接口<br>pause |vi. 暂停<br>repeat |v. 重复<br>restart |v. 重新启动，再启动<br>assumed |a. 假定的<br>speed |n. 速度<br>entry |n. 输入，项(目)，入口</p>
<h5 id="list-5"><a href="#list-5" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>organize</td>
<td>v. 组织，创办，成立 </td>
</tr>
<tr>
<td>finished</td>
<td>a. 完成的 </td>
</tr>
<tr>
<td>mixed</td>
<td>a. 混合的 </td>
</tr>
<tr>
<td>permit</td>
<td>v. 许可，容许 </td>
</tr>
<tr>
<td>formatting</td>
<td>n. 格式化 </td>
</tr>
<tr>
<td>root</td>
<td>n. 根 </td>
</tr>
<tr>
<td>symbol</td>
<td>n. 符号，记号 </td>
</tr>
<tr>
<td>binary</td>
<td>n. &amp; a. 二进制；双态的 </td>
</tr>
<tr>
<td>whenever</td>
<td>ad. &amp; conj. 随时 </td>
</tr>
<tr>
<td>reach</td>
<td>v. &amp; n. 范围，达到范围 </td>
</tr>
<tr>
<td>caution</td>
<td>n. &amp; v. 警告，注意</td>
</tr>
<tr>
<td>subtotal</td>
<td>n. &amp; v. 小计，求部分和 </td>
</tr>
<tr>
<td>card</td>
<td>n. 卡片，插件(板) </td>
</tr>
<tr>
<td>general</td>
<td>a. 通用的 </td>
</tr>
<tr>
<td>associated</td>
<td>a. 联合的，相联的 </td>
</tr>
<tr>
<td>transfer</td>
<td>v. 传送，转换，转移 </td>
</tr>
<tr>
<td>connect</td>
<td>v. 连接 </td>
</tr>
<tr>
<td>partition</td>
<td>v. 划分，分区，部分 </td>
</tr>
<tr>
<td>hexadecimal</td>
<td>a. 十六进制的 </td>
</tr>
<tr>
<td>generate</td>
<td>vt. 产生，发生，生成 </td>
</tr>
<tr>
<td>specification</td>
<td>n. 说明书，规则说明书 </td>
</tr>
<tr>
<td>customize</td>
<td>vt. 定制，定做</td>
</tr>
<tr>
<td>far</td>
<td>a. 远的，遥远的 </td>
</tr>
<tr>
<td>nest</td>
<td>v. 嵌套，后进先出 </td>
</tr>
<tr>
<td>duplicate</td>
<td>vt. 复制，转录，加倍 </td>
</tr>
<tr>
<td>compression</td>
<td>n. 压缩，浓缩 </td>
</tr>
<tr>
<td>unable</td>
<td>a. 不能的 </td>
</tr>
<tr>
<td>means</td>
<td>n. 方法，手段 </td>
</tr>
<tr>
<td>alternately</td>
<td>ad. 交替地，轮流地 </td>
</tr>
<tr>
<td>intensity</td>
<td>n. 强度，亮度</td>
</tr>
<tr>
<td>let</td>
<td>v. 让，允许 </td>
</tr>
<tr>
<td>explicitly</td>
<td>ad. 明显地，显然地 </td>
</tr>
<tr>
<td>compare</td>
<td>v. 比较，对照，比喻</td>
</tr>
<tr>
<td>sector</td>
<td>n. &amp; v. 扇区，段；分段 </td>
</tr>
<tr>
<td>problem</td>
<td>n. 问题，难题 </td>
</tr>
<tr>
<td>vertically</td>
<td>ad. 竖直地，直立地 </td>
</tr>
<tr>
<td>horizontally</td>
<td>ad. 水平地 </td>
</tr>
<tr>
<td>backspace</td>
<td>v. 退格，回退 </td>
</tr>
<tr>
<td>people</td>
<td>n. 人们 </td>
</tr>
<tr>
<td>short</td>
<td>a. &amp; n. 短的；短路 </td>
</tr>
<tr>
<td>drag</td>
<td>vt. 拖，拉，牵，曳 </td>
</tr>
<tr>
<td>formatted</td>
<td>a. 有格式的 </td>
</tr>
<tr>
<td>preview</td>
<td>n. &amp; vt. 预映 </td>
</tr>
<tr>
<td>underscore</td>
<td>vt. 在…下面划线 </td>
</tr>
<tr>
<td>correctly</td>
<td>ad. 正确地</td>
</tr>
<tr>
<td>initially</td>
<td>ad. 最初，开头 </td>
</tr>
<tr>
<td>reformat</td>
<td>v. 重定格式 </td>
</tr>
<tr>
<td>inside</td>
<td>n. &amp; a. 内部，内容；内部的 </td>
</tr>
<tr>
<td>integrate</td>
<td>v. 综合，集成 </td>
</tr>
<tr>
<td>controlled</td>
<td>a. 受控制的，受操纵的 </td>
</tr>
<tr>
<td>period</td>
<td>n. 周期 </td>
</tr>
<tr>
<td>huge</td>
<td>a. 巨大的，非常的 </td>
</tr>
<tr>
<td>trailing</td>
<td>n. &amp; a. 结尾；尾随的 </td>
</tr>
<tr>
<td>seek</td>
<td>v. 查找，寻找，探求 </td>
</tr>
<tr>
<td>introduction</td>
<td>n. 入门，介绍，引进 </td>
</tr>
<tr>
<td>indent</td>
<td>v. 缩排 </td>
</tr>
<tr>
<td>base</td>
<td>n. 基，底，基地址</td>
</tr>
<tr>
<td>integer</td>
<td>n. 整数 </td>
</tr>
<tr>
<td>attempt</td>
<td>vt. &amp; n. 尝试，试验 </td>
</tr>
<tr>
<td>twice</td>
<td>n. &amp; ad. 两次，两倍于 </td>
</tr>
<tr>
<td>formed</td>
<td>a. &amp; n. 成形 </td>
</tr>
<tr>
<td>subscript</td>
<td>n. 注脚，下标 </td>
</tr>
<tr>
<td>tiny</td>
<td>a. 微小的，微量的 </td>
</tr>
<tr>
<td>model</td>
<td>n. 模型，样机，型号 </td>
</tr>
<tr>
<td>correction</td>
<td>n. 校正，修正 </td>
</tr>
<tr>
<td>rating</td>
<td>n. 定额，标称值 </td>
</tr>
<tr>
<td>secondary</td>
<td>a. 辅助的，第二的 </td>
</tr>
<tr>
<td>opened</td>
<td>a. 开路的，断开的</td>
</tr>
<tr>
<td>limit</td>
<td>n. 极限，限界 </td>
</tr>
<tr>
<td>sun</td>
<td>n. 太阳，日 </td>
</tr>
<tr>
<td>translate</td>
<td>v. 翻译，转换，平移 </td>
</tr>
<tr>
<td>reason</td>
<td>n. 原因，理由 </td>
</tr>
<tr>
<td>colon</td>
<td>n. 冒号”:” </td>
</tr>
<tr>
<td>avoid</td>
<td>vt. 避免，取消，无效 </td>
</tr>
<tr>
<td>range</td>
<td>n. 范围，域，区域 </td>
</tr>
<tr>
<td>allocate</td>
<td>vt. 分配 </td>
</tr>
<tr>
<td>wordperfect</td>
<td>a. 一字不错地熟记的 </td>
</tr>
<tr>
<td>simply</td>
<td>ad. 简单地，单纯地 </td>
</tr>
<tr>
<td>verify</td>
<td>vt. 鉴定，检验，核对</td>
</tr>
<tr>
<td>manner</td>
<td>n. 方法，样式，惯例 </td>
</tr>
<tr>
<td>direction</td>
<td>n. 方向，定向，指向 </td>
</tr>
<tr>
<td>portion</td>
<td>n. &amp; vt. 部分；分配 </td>
</tr>
<tr>
<td>emulator</td>
<td>n. 仿真器，仿真程序 </td>
</tr>
<tr>
<td>successful</td>
<td>a. 成功的 </td>
</tr>
<tr>
<td>applied</td>
<td>a. 适用的，外加的 </td>
</tr>
<tr>
<td>sum</td>
<td>n. 和，合计，总额</td>
</tr>
<tr>
<td>achieve</td>
<td>vt. 完成，实现 </td>
</tr>
<tr>
<td>together</td>
<td>ad. 一同，共同，相互 </td>
</tr>
<tr>
<td>affect</td>
<td>vt. 影响，改变，感动 </td>
</tr>
<tr>
<td>delay</td>
<td>v. 延迟</td>
</tr>
<tr>
<td>free</td>
<td>a. 自由的，空闲的 </td>
</tr>
<tr>
<td>properly</td>
<td>ad. 真正地，适当地 </td>
</tr>
<tr>
<td>kind</td>
<td>n. 种类，属，级，等 </td>
</tr>
<tr>
<td>splitting</td>
<td>n. 分区(裂) </td>
</tr>
<tr>
<td>feature</td>
<td>n. 特征，特点 </td>
</tr>
<tr>
<td>console</td>
<td>n. 控制台，操作台 </td>
</tr>
<tr>
<td>operate</td>
<td>v. 操作，运算 </td>
</tr>
<tr>
<td>kernel</td>
<td>n. 内核(核心)程序 </td>
</tr>
<tr>
<td>easy</td>
<td>a. &amp; ad. 容易的；容易地 </td>
</tr>
<tr>
<td>modifier</td>
<td>n. 修改量，变址数 </td>
</tr>
<tr>
<td>invalid</td>
<td>a. 无效的</td>
</tr>
<tr>
<td>compiler</td>
<td>n. 编译程序(器) </td>
</tr>
<tr>
<td>dot</td>
<td>n. 点 </td>
</tr>
<tr>
<td>beep</td>
<td>n. 蜂鸣声，嘀嘀声 </td>
</tr>
<tr>
<td>face</td>
<td>n. 面，表面 </td>
</tr>
<tr>
<td>random</td>
<td>a. 随机的 </td>
</tr>
<tr>
<td>facility</td>
<td>n. 设施，装备，便利 </td>
</tr>
<tr>
<td>heading</td>
<td>n. 标题 </td>
</tr>
<tr>
<td>asynchronous</td>
<td>a. 异步的，非同步的 </td>
</tr>
<tr>
<td>series</td>
<td>n. 序列，系列，串联 </td>
</tr>
<tr>
<td>individual</td>
<td>a. 个别的，单个的</td>
</tr>
<tr>
<td>explain</td>
<td>v. 阐明，解释 </td>
</tr>
<tr>
<td>paste</td>
<td>n. 湖，胶，膏 </td>
</tr>
<tr>
<td>welcome</td>
<td>vt. &amp; n. 欢迎 </td>
</tr>
<tr>
<td>six</td>
<td>n. &amp; a. 六(个)(的) </td>
</tr>
<tr>
<td>early</td>
<td>a. &amp; ad. 早期，初期 </td>
</tr>
<tr>
<td>wrap</td>
<td>v. &amp; n. 包装，缠绕 </td>
</tr>
<tr>
<td>blue</td>
<td>a. &amp; n. 蓝(色)，青色 </td>
</tr>
<tr>
<td>queue</td>
<td>v. &amp; n. 排队，队列 </td>
</tr>
<tr>
<td>interrupt</td>
<td>v. &amp; n. 中断 </td>
</tr>
<tr>
<td>respect</td>
<td>n. &amp; vt. 遵守，关系 </td>
</tr>
<tr>
<td>converted</td>
<td>a. 转换的，变换的</td>
</tr>
<tr>
<td>common</td>
<td>a. 公用的 </td>
</tr>
<tr>
<td>hyphen</td>
<td>n. 连字符，短线 </td>
</tr>
<tr>
<td>serial</td>
<td>a. 串行的，串联的 </td>
</tr>
<tr>
<td>loading</td>
<td>n. 装入，加载，存放 </td>
</tr>
<tr>
<td>retain</td>
<td>vt. 保持，维持 </td>
</tr>
<tr>
<td>setup</td>
<td>n. 安排，准备，配置 </td>
</tr>
<tr>
<td>freeze</td>
<td>v. 冻结，结冰 </td>
</tr>
<tr>
<td>intend</td>
<td>vt. 打算，设计 </td>
</tr>
<tr>
<td>explanation</td>
<td>n. 说明，注解，注释 </td>
</tr>
<tr>
<td>certain</td>
<td>a. 确实的，确定的 </td>
</tr>
<tr>
<td>zap</td>
<td>v. 迅速离去，击溃</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-6"><a href="#list-6" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>archive</td>
<td>vt. 归档 </td>
</tr>
<tr>
<td>negative</td>
<td>a. 负的，否定的 </td>
</tr>
<tr>
<td>image</td>
<td>n. 图像，影像，映像 </td>
</tr>
<tr>
<td>platform</td>
<td>n. 平台，台架 </td>
</tr>
<tr>
<td>often</td>
<td>ad. 经常，往往，屡次 </td>
</tr>
<tr>
<td>signal</td>
<td>n. &amp; v. 信号；发信号 </td>
</tr>
<tr>
<td>cpu</td>
<td>控制处理部件 </td>
</tr>
<tr>
<td>bit</td>
<td>n. 比特；(二进制)位 </td>
</tr>
<tr>
<td>fully</td>
<td>ad. 十分，完全 </td>
</tr>
<tr>
<td>deactivate</td>
<td>vt. 释放，去活化</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-7"><a href="#list-7" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>especially</td>
<td>ad. 特别(是)，尤其 </td>
</tr>
<tr>
<td>usually</td>
<td>ad. 通常，平常，一般 </td>
</tr>
<tr>
<td>recommend</td>
<td>vt. 推荐，建议 </td>
</tr>
<tr>
<td>maintain</td>
<td>vt. 维护，保养，保留 </td>
</tr>
<tr>
<td>important</td>
<td>a. 严重的，显著的 </td>
</tr>
<tr>
<td>central</td>
<td>a. 中央的，中心的 </td>
</tr>
<tr>
<td>addition</td>
<td>n. 加法，增加 </td>
</tr>
<tr>
<td>anytime</td>
<td>ad. 在任何时候 </td>
</tr>
<tr>
<td>analyst</td>
<td>n. 分析员 </td>
</tr>
<tr>
<td>false</td>
<td>a. 假(布尔值)，错误</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-8"><a href="#list-8" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>black</td>
<td>a. &amp; n. 黑色的，黑色 </td>
</tr>
<tr>
<td>gather</td>
<td>n. 聚集，集合 </td>
</tr>
<tr>
<td>cycle</td>
<td>n. &amp; v. 周，周期；循环 </td>
</tr>
<tr>
<td>relative</td>
<td>a. 相对的 </td>
</tr>
<tr>
<td>offer</td>
<td>v. 提供，给予，呈现 </td>
</tr>
<tr>
<td>ending</td>
<td>n. 结束 </td>
</tr>
<tr>
<td>rent</td>
<td>v. &amp; n. 租用；裂缝 </td>
</tr>
<tr>
<td>sentence</td>
<td>n. 句(子) </td>
</tr>
<tr>
<td>remember</td>
<td>v. 存储，记忆，记住 </td>
</tr>
<tr>
<td>proper</td>
<td>a. 真的，固有的 </td>
</tr>
<tr>
<td>design</td>
<td>v. 设计</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-9"><a href="#list-9" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>examine</td>
<td>v. 检验，考试，审查 </td>
</tr>
<tr>
<td>initial</td>
<td>a. 最初的，初始的 </td>
</tr>
<tr>
<td>corrupt</td>
<td>v. &amp; a. 恶化；有毛病的 </td>
</tr>
<tr>
<td>buy</td>
<td>v. 买，购买，赢得 </td>
</tr>
<tr>
<td>increase</td>
<td>v. 增加，增大 </td>
</tr>
<tr>
<td>host</td>
<td>n. 主机 </td>
</tr>
<tr>
<td>sample</td>
<td>n. &amp; v. 样品，样本；抽样 </td>
</tr>
<tr>
<td>pending</td>
<td>a. 悬而未决的，未定的 </td>
</tr>
<tr>
<td>divide</td>
<td>v. 除 </td>
</tr>
<tr>
<td>boot</td>
<td>n. 引导，靴 </td>
</tr>
<tr>
<td>hide</td>
<td>v. 隐藏，隐蔽</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-10"><a href="#list-10" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>half</td>
<td>n. &amp; a. &amp; ad. 一半，半个 </td>
</tr>
<tr>
<td>magenta</td>
<td>n. &amp; a. 深红色(的) </td>
</tr>
<tr>
<td>leading</td>
<td>n. &amp; a. 引导(的) </td>
</tr>
<tr>
<td>wrong</td>
<td>a. &amp; ad. n. 错误(的) </td>
</tr>
<tr>
<td>today</td>
<td>n. &amp; ad. 今天 </td>
</tr>
<tr>
<td>least</td>
<td>a. &amp; ad. 最小(的) </td>
</tr>
<tr>
<td>opposite</td>
<td>a. &amp; n. &amp; ad. 相反的 </td>
</tr>
<tr>
<td>white</td>
<td>a. &amp; n. 白色(的) </td>
</tr>
<tr>
<td>override</td>
<td>v. &amp; n. 超越，克服 </td>
</tr>
<tr>
<td>brown</td>
<td>a. &amp; n. 褐色(的)，棕色 </td>
</tr>
<tr>
<td>hex</td>
<td>a. &amp; n. 六角形的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-11"><a href="#list-11" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>rest</td>
<td>n. &amp; v. 剩余，休息 </td>
</tr>
<tr>
<td>damage</td>
<td>n. &amp; vt. 损伤，故障 </td>
</tr>
<tr>
<td>instant</td>
<td>a. 立刻的，直接的 </td>
</tr>
<tr>
<td>reserved</td>
<td>a. 保留的，预订的 </td>
</tr>
<tr>
<td>technology</td>
<td>n. 工艺，技术，制造学 </td>
</tr>
<tr>
<td>handle</td>
<td>n. 处理，句柄 </td>
</tr>
<tr>
<td>apply</td>
<td>v. 应用，适用于，作用 </td>
</tr>
<tr>
<td>stand</td>
<td>v. 处于(状态)，保持 </td>
</tr>
<tr>
<td>payment</td>
<td>n. 支付，付款 </td>
</tr>
<tr>
<td>kilobyte</td>
<td>n. 千字节(kb) </td>
</tr>
<tr>
<td>parenthesis</td>
<td>n. 括弧，圆括号</td>
</tr>
<tr>
<td>scan</td>
<td>v. 扫描，扫视，搜索</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-12"><a href="#list-12" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>locating</td>
<td>n. 定位，查找 </td>
</tr>
<tr>
<td>developer</td>
<td>n. 开发者，显影剂 </td>
</tr>
<tr>
<td>murder</td>
<td>n. 弄坏，毁掉 </td>
</tr>
<tr>
<td>flush</td>
<td>v. 弄平，使齐平 </td>
</tr>
<tr>
<td>unlock</td>
<td>v. 开锁，打开 </td>
</tr>
<tr>
<td>movement</td>
<td>n. 传送，移动 </td>
</tr>
<tr>
<td>consecutive</td>
<td>a. 连续的，连贯的 </td>
</tr>
<tr>
<td>collection</td>
<td>n. 集合，聚集，画卷 </td>
</tr>
<tr>
<td>front</td>
<td>a. 前面的，正面的 </td>
</tr>
<tr>
<td>addressing</td>
<td>n. 寻址 </td>
</tr>
<tr>
<td>prefix</td>
<td>n. 前缀 </td>
</tr>
<tr>
<td>carousel</td>
<td>n. 圆盘传送带</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-13"><a href="#list-13" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>safety</td>
<td>n. 安全，保险 </td>
</tr>
<tr>
<td>static</td>
<td>a. 静态的，不变的 </td>
</tr>
<tr>
<td>background</td>
<td>n. 背景，底色，基础 </td>
</tr>
<tr>
<td>product</td>
<td>n. (乘)积，产品 </td>
</tr>
<tr>
<td>assignment</td>
<td>n. 赋值，分配 </td>
</tr>
<tr>
<td>bad</td>
<td>a. 坏的，不良的 </td>
</tr>
<tr>
<td>declare</td>
<td>v. 说明 </td>
</tr>
<tr>
<td>adjust</td>
<td>vt. 调整，调节，控制 </td>
</tr>
<tr>
<td>recognize</td>
<td>v. 识别</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-14"><a href="#list-14" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>route</td>
<td>n. 路线，路由 </td>
</tr>
<tr>
<td>respectively</td>
<td>ad. 分别地 </td>
</tr>
<tr>
<td>unsuccessful</td>
<td>a. 不成功的，失败的 </td>
</tr>
<tr>
<td>received</td>
<td>a. 被接收的，公认的 </td>
</tr>
<tr>
<td>navigate</td>
<td>v. 导航，驾驶 </td>
</tr>
<tr>
<td>considered</td>
<td>a. 考虑过的，被尊重的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-15"><a href="#list-15" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>due</td>
<td>a. 到期的，应付(给)的 </td>
</tr>
<tr>
<td>recently</td>
<td>ad. 近来 </td>
</tr>
<tr>
<td>room</td>
<td>n. 房间，空间 </td>
</tr>
<tr>
<td>descend</td>
<td>v. 下降，落下 </td>
</tr>
<tr>
<td>fact</td>
<td>n. 事实 </td>
</tr>
<tr>
<td>alter</td>
<td>v. 改变，修改 </td>
</tr>
<tr>
<td>track</td>
<td>n. 磁道，轨道 </td>
</tr>
<tr>
<td>precedence</td>
<td>n. 优先权 </td>
</tr>
<tr>
<td>skeleton</td>
<td>n. 骨架，框架 </td>
</tr>
<tr>
<td>log</td>
<td>n. &amp; v. 记录，存入</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-16"><a href="#list-16" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>star</td>
<td>n. 星形，星号 </td>
</tr>
<tr>
<td>hot</td>
<td>a. 热的 </td>
</tr>
<tr>
<td>replaceable</td>
<td>a. 可替换的 </td>
</tr>
<tr>
<td>accessible</td>
<td>a. 可以使用的 </td>
</tr>
<tr>
<td>involve</td>
<td>vt. 涉及，卷入，占用 </td>
</tr>
<tr>
<td>configure</td>
<td>vt. 使成形 </td>
</tr>
<tr>
<td>question</td>
<td>n. 问题 </td>
</tr>
<tr>
<td>green</td>
<td>n. &amp; a. 绿色绿色的 </td>
</tr>
<tr>
<td>entirely</td>
<td>ad. 完全地，彻底地 </td>
</tr>
<tr>
<td>helpful</td>
<td>a. 有帮助的，有用的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-17"><a href="#list-17" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>middle</td>
<td>a. 中间的 </td>
</tr>
<tr>
<td>declared</td>
<td>a. 承认的，申报的 </td>
</tr>
<tr>
<td>compress</td>
<td>vt. 压缩，精减 </td>
</tr>
<tr>
<td>graphically</td>
<td>ad. 用图表表示 </td>
</tr>
<tr>
<td>auto</td>
<td>a. 自动的 </td>
</tr>
<tr>
<td>automatic</td>
<td>a. 自动的 </td>
</tr>
<tr>
<td>aligned</td>
<td>a. 对准的，均衡的 </td>
</tr>
<tr>
<td>anywhere</td>
<td>ad. 在任何地方 </td>
</tr>
<tr>
<td>door</td>
<td>n. 舱门，入口，孔 </td>
</tr>
<tr>
<td>expire</td>
<td>v. 终止，期满</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-18"><a href="#list-18" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>resolution</td>
<td>n. 分辨率 </td>
</tr>
<tr>
<td>local</td>
<td>a. 局部的，本地的 </td>
</tr>
<tr>
<td>semicolon</td>
<td>n. 分号(；) </td>
</tr>
<tr>
<td>critical</td>
<td>a. &amp; n. 临界的；临界值 </td>
</tr>
<tr>
<td>manager</td>
<td>n. 管理程序 </td>
</tr>
<tr>
<td>capability</td>
<td>n. 能力，效力，权力 </td>
</tr>
<tr>
<td>affected</td>
<td>a. 受了影响的 </td>
</tr>
<tr>
<td>allowed</td>
<td>a. 容许的 </td>
</tr>
<tr>
<td>border</td>
<td>n. 边界，框，界限 </td>
</tr>
<tr>
<td>cache</td>
<td>n. 高速缓存</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-19"><a href="#list-19" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>bell</td>
<td>n. 铃，钟 </td>
</tr>
<tr>
<td>play</td>
<td>v. 玩，奏，放音，放象 </td>
</tr>
<tr>
<td>quickly</td>
<td>a. 快，迅速地 </td>
</tr>
<tr>
<td>fastback</td>
<td>n. 快速返回 </td>
</tr>
<tr>
<td>answer</td>
<td>n. &amp; v. 响应，回答；答复 </td>
</tr>
<tr>
<td>represent</td>
<td>v. 表示，表现，代表 </td>
</tr>
<tr>
<td>difference</td>
<td>n. 差分，差 </td>
</tr>
<tr>
<td>highest</td>
<td>a. 最高的 </td>
</tr>
<tr>
<td>project</td>
<td>n. 项目，计划，设计</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-20"><a href="#list-20" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>physical</td>
<td>a. 物理的，实际的 </td>
</tr>
<tr>
<td>matter</td>
<td>n. 物质，内容，事情 </td>
</tr>
<tr>
<td>hercules</td>
<td>n. 大力神，大力士 </td>
</tr>
<tr>
<td>reduce</td>
<td>v. 减少，降低，简化 </td>
</tr>
<tr>
<td>publisher</td>
<td>n. 出版者，发行人 </td>
</tr>
<tr>
<td>trim</td>
<td>n. 区标，微调 </td>
</tr>
<tr>
<td>substitute</td>
<td>v. 代替，替换，代入 </td>
</tr>
<tr>
<td>disabled</td>
<td>a. 禁止的，报废的 </td>
</tr>
<tr>
<td>recent</td>
<td>a. 近来的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-21"><a href="#list-21" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>positive</td>
<td>a. 正的，阳的，正片 </td>
</tr>
<tr>
<td>upgrade</td>
<td>v. 升级，提高质量 </td>
</tr>
<tr>
<td>instance</td>
<td>n. &amp; vt. 例子，情况；举例 </td>
</tr>
<tr>
<td>happen</td>
<td>vi. (偶然)发生，碰巧 </td>
</tr>
<tr>
<td>elapsed</td>
<td>vi. &amp; n. 经过 </td>
</tr>
<tr>
<td>future</td>
<td>n. &amp; a. 将来，未来的 </td>
</tr>
<tr>
<td>midnight</td>
<td>n. &amp; a. 午夜 </td>
</tr>
<tr>
<td>though</td>
<td>conj. 虽然，尽管 </td>
</tr>
<tr>
<td>nor</td>
<td>conj. 也不 </td>
</tr>
<tr>
<td>mono</td>
<td>a. &amp; n. 单音的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-22"><a href="#list-22" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>slide</td>
<td>v. &amp; n. 滑动，滑动触头 </td>
</tr>
<tr>
<td>abort</td>
<td>v. &amp; n. 中断，故障 </td>
</tr>
<tr>
<td>jump</td>
<td>v. &amp; n. 转移 </td>
</tr>
<tr>
<td>toward</td>
<td>prep. 朝(着…方向) </td>
</tr>
<tr>
<td>throughout</td>
<td>prep. 贯穿，整，遍 </td>
</tr>
<tr>
<td>via</td>
<td>prep. 经过，经由 </td>
</tr>
<tr>
<td>among</td>
<td>prep. 在…之中，中间 </td>
</tr>
<tr>
<td>neither</td>
<td>a. &amp; pron. (两者)都不 </td>
</tr>
<tr>
<td>layer</td>
<td>n. &amp; v. 层，涂层</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-23"><a href="#list-23" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>scatter</td>
<td>v. 散射，分散，散布 </td>
</tr>
<tr>
<td>attention</td>
<td>n. 注意(信号) </td>
</tr>
<tr>
<td>convention</td>
<td>n. 常规，约定，协定 </td>
</tr>
<tr>
<td>conventional</td>
<td>a. 常规的，习惯的 </td>
</tr>
<tr>
<td>tool</td>
<td>n. 工具，刀 </td>
</tr>
<tr>
<td>handler</td>
<td>n. 处理程序 </td>
</tr>
<tr>
<td>processor</td>
<td>n. 处理机，处理程序 </td>
</tr>
<tr>
<td>desktop</td>
<td>a. 台式的 </td>
</tr>
<tr>
<td>build</td>
<td>v. 建造，建立，组合</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-24"><a href="#list-24" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>windowing</td>
<td>n. 开窗口 </td>
</tr>
<tr>
<td>development</td>
<td>n. 开发，研制，显影 </td>
</tr>
<tr>
<td>exceed</td>
<td>v. 超过，大于 </td>
</tr>
<tr>
<td>understand</td>
<td>v. 懂，明白(了)，理解 </td>
</tr>
<tr>
<td>horizontal</td>
<td>a. 水平的，横向的 </td>
</tr>
<tr>
<td>alphabetically</td>
<td>ad. 按字母表顺序 </td>
</tr>
<tr>
<td>meet</td>
<td>v. “与”，符合，满足 </td>
</tr>
<tr>
<td>protect</td>
<td>vt. 保护 </td>
</tr>
<tr>
<td>reserve</td>
<td>vt. 保留，预定，预约 </td>
</tr>
<tr>
<td>clock</td>
<td>n. 时钟，计时器，同步</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-25"><a href="#list-25" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>manifest</td>
<td>vt. 表明，显示，显现 </td>
</tr>
<tr>
<td>safe</td>
<td>a. 安全的，可靠的 </td>
</tr>
<tr>
<td>disconnect</td>
<td>vt. 拆接，断开，拆线 </td>
</tr>
<tr>
<td>clockwise</td>
<td>a. 顺时针的 </td>
</tr>
<tr>
<td>eliminate</td>
<td>vt. 除去，消除，切断 </td>
</tr>
<tr>
<td>actual</td>
<td>a. 实际的，现实的 </td>
</tr>
<tr>
<td>declaration</td>
<td>n. 说明，申报 </td>
</tr>
<tr>
<td>probably</td>
<td>ad. 多半，很可能 </td>
</tr>
<tr>
<td>ring</td>
<td>n. &amp; v. 环，圈；按铃</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-26"><a href="#list-26" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>cover</td>
<td>vt. 盖，罩，套 </td>
</tr>
<tr>
<td>indicator</td>
<td>n. 指示器，指示灯 </td>
</tr>
<tr>
<td>apple</td>
<td>n. 苹果 </td>
</tr>
<tr>
<td>icon</td>
<td>n. 图符，象征 </td>
</tr>
<tr>
<td>consideration</td>
<td>n. 考虑，研究，讨论 </td>
</tr>
<tr>
<td>skill</td>
<td>n. 技巧 </td>
</tr>
<tr>
<td>picture</td>
<td>n. 图象，画面 </td>
</tr>
<tr>
<td>layout</td>
<td>n. 布置，布局，安排 </td>
</tr>
<tr>
<td>suggest</td>
<td>vt. 建议，提议，暗示</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-27"><a href="#list-27" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>convenient</td>
<td>a. 方便的，便利的 </td>
</tr>
<tr>
<td>instruct</td>
<td>vt. 讲授，命令 </td>
</tr>
<tr>
<td>appendix</td>
<td>n. 附录 </td>
</tr>
<tr>
<td>medium</td>
<td>n. &amp; a. 媒体；中等的 </td>
</tr>
<tr>
<td>truncate</td>
<td>vt. 截尾，截断 </td>
</tr>
<tr>
<td>inhibit</td>
<td>vt. 禁止 </td>
</tr>
<tr>
<td>nearly</td>
<td>ad. 近乎，差不多，几乎 </td>
</tr>
<tr>
<td>warn</td>
<td>vt. 警告，警戒，预告 </td>
</tr>
<tr>
<td>underline</td>
<td>n. 下划线</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-28"><a href="#list-28" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>register</td>
<td>n. 寄存器 </td>
</tr>
<tr>
<td>stuff</td>
<td>n. &amp; vt. 材料；装入 </td>
</tr>
<tr>
<td>exclude</td>
<td>vt. 排除，除去 </td>
</tr>
<tr>
<td>destroy</td>
<td>vt. 破坏，毁坏，打破 </td>
</tr>
<tr>
<td>calculation</td>
<td>n. 计算，统计，估计 </td>
</tr>
<tr>
<td>angle</td>
<td>n. 角，角度 </td>
</tr>
<tr>
<td>lexical</td>
<td>a. 辞典的，词法的 </td>
</tr>
<tr>
<td>decide</td>
<td>v. (使)判定，判断 </td>
</tr>
<tr>
<td>trouble</td>
<td>n. 故障 </td>
</tr>
<tr>
<td>processing</td>
<td>n. (数据)处理，加工</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-29"><a href="#list-29" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>customer</td>
<td>n. 顾客，客户 </td>
</tr>
<tr>
<td>port</td>
<td>n. 端口，进出口 </td>
</tr>
<tr>
<td>discuss</td>
<td>vt. 讨论，论述 </td>
</tr>
<tr>
<td>segment</td>
<td>n. 段，片段，图块 </td>
</tr>
<tr>
<td>filing</td>
<td>n. (文件的)整理汇集 </td>
</tr>
<tr>
<td>identically</td>
<td>ad. 相等，恒等 </td>
</tr>
<tr>
<td>market</td>
<td>n. 市场，行情，销路 </td>
</tr>
<tr>
<td>valuable</td>
<td>a. 有价值的，贵重的 </td>
</tr>
<tr>
<td>limited</td>
<td>a. 有限的，(受)限制的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-30"><a href="#list-30" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>trying</td>
<td>a. 费劲的，困难的 </td>
</tr>
<tr>
<td>heap</td>
<td>n. 堆阵 </td>
</tr>
<tr>
<td>grey</td>
<td>n. &amp; a. 灰色；灰色的 </td>
</tr>
<tr>
<td>permanently</td>
<td>ad. 永久地，持久地 </td>
</tr>
<tr>
<td>accelerator</td>
<td>n. 加速装置，加速剂 </td>
</tr>
<tr>
<td>originally</td>
<td>ad. 原来，最初 </td>
</tr>
<tr>
<td>ability</td>
<td>n. 性能，能力，效率 </td>
</tr>
<tr>
<td>internally</td>
<td>ad. 在内(部) </td>
</tr>
<tr>
<td>derelict</td>
<td>vt. 中途淘汰</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-31"><a href="#list-31" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>redirect</td>
<td>vt. 重定向 </td>
</tr>
<tr>
<td>reside</td>
<td>vi. 驻留 </td>
</tr>
<tr>
<td>header</td>
<td>n. 首部，标题，报头 </td>
</tr>
<tr>
<td>extra</td>
<td>a. 特别的，额外的 </td>
</tr>
<tr>
<td>repeated</td>
<td>a. 重复的 </td>
</tr>
<tr>
<td>death</td>
<td>n. 毁灭，消灭 </td>
</tr>
<tr>
<td>observe</td>
<td>v. 观察，探测 </td>
</tr>
<tr>
<td>density</td>
<td>n. 密度 </td>
</tr>
<tr>
<td>management</td>
<td>n. 管理</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-32"><a href="#list-32" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>environmental</td>
<td>a. 周围的，环境的 </td>
</tr>
<tr>
<td>surrounding</td>
<td>a. 周围的，环绕的 </td>
</tr>
<tr>
<td>master</td>
<td>a. 总要的，总的 </td>
</tr>
<tr>
<td>recursive</td>
<td>a. 递归的，循环的 </td>
</tr>
<tr>
<td>trap</td>
<td>n. &amp; vt. 陷阱；俘获 </td>
</tr>
<tr>
<td>dimensional</td>
<td>n. 尺寸的，…维的 </td>
</tr>
<tr>
<td>logic</td>
<td>n. 逻辑(线路) </td>
</tr>
<tr>
<td>conjunction</td>
<td>n. 逻辑乘，”与” </td>
</tr>
<tr>
<td>identical</td>
<td>a. 相等的，相同的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-33"><a href="#list-33" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>advice</td>
<td>n. 意见，参考说明 </td>
</tr>
<tr>
<td>meaning</td>
<td>n. 意义，含义 </td>
</tr>
<tr>
<td>fall</td>
<td>n. 落下，降落 </td>
</tr>
<tr>
<td>interval</td>
<td>n. 间歇，区间 </td>
</tr>
<tr>
<td>compatibility</td>
<td>n. 兼容性，适应性 </td>
</tr>
<tr>
<td>rule</td>
<td>n. 规则，法则，尺 </td>
</tr>
<tr>
<td>flag</td>
<td>n. 标志(记)，特征(位) </td>
</tr>
<tr>
<td>criterion</td>
<td>n. 标准，判据，准则 </td>
</tr>
<tr>
<td>office</td>
<td>n. 办公室，局，站 </td>
</tr>
<tr>
<td>express</td>
<td>a. 快速的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-34"><a href="#list-34" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>volume</td>
<td>n. 卷，册，体积，容量 </td>
</tr>
<tr>
<td>soft</td>
<td>a. 软的 </td>
</tr>
<tr>
<td>rated</td>
<td>a. 额定的 </td>
</tr>
<tr>
<td>activity</td>
<td>n. 活力，功率 </td>
</tr>
<tr>
<td>odometer</td>
<td>n. 里程表，计程仪 </td>
</tr>
<tr>
<td>phoenix</td>
<td>n. 凤凰，绝世珍品 </td>
</tr>
<tr>
<td>obtain</td>
<td>v. 获得，得到 </td>
</tr>
<tr>
<td>easel</td>
<td>n. 框，(画)架 </td>
</tr>
<tr>
<td>latter</td>
<td>a. 后面的，最近的 </td>
</tr>
<tr>
<td>decrease</td>
<td>v. 减少，降低，缩短</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-35"><a href="#list-35" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>mainframe</td>
<td>n. 主机，大型机 </td>
</tr>
<tr>
<td>debugger</td>
<td>n. 调试程序 </td>
</tr>
<tr>
<td>diacritical</td>
<td>a. 区分的，辩别的</td>
</tr>
<tr>
<td>dential</td>
<td>a. 机密的 </td>
</tr>
<tr>
<td>trace</td>
<td>v. 跟踪，追踪 </td>
</tr>
<tr>
<td>division</td>
<td>n. 除，除法，(程序)部分 </td>
</tr>
<tr>
<td>regular</td>
<td>a. 正则的，正规的 </td>
</tr>
<tr>
<td>implicit</td>
<td>a. 隐式的 </td>
</tr>
<tr>
<td>mention</td>
<td>vt. &amp; n. 叙述，说到</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-36"><a href="#list-36" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>near</td>
<td>ad. &amp; prep. 领近，接近 </td>
</tr>
<tr>
<td>fifth</td>
<td>n. &amp; a. 第五，五分之一 </td>
</tr>
<tr>
<td>seven</td>
<td>n. &amp; a. 七(个) </td>
</tr>
<tr>
<td>whereas</td>
<td>conj. 面，其实，既然 </td>
</tr>
<tr>
<td>review</td>
<td>v. &amp; n. (再)检查 </td>
</tr>
<tr>
<td>whatever pro</td>
<td>n. &amp; a. 无论什么 </td>
</tr>
<tr>
<td>transform</td>
<td>v. &amp; n. 变换，变换式 </td>
</tr>
<tr>
<td>align</td>
<td>v. &amp; n. 定位，对准 </td>
</tr>
<tr>
<td>yellow</td>
<td>a. &amp; n. 黄色(的) </td>
</tr>
<tr>
<td>assist</td>
<td>v. &amp; n. 加速，帮助</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-37"><a href="#list-37" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>finish</td>
<td>v. &amp; n. 完成，结束 </td>
</tr>
<tr>
<td>micro</td>
<td>a. &amp; n. 微的，百万分之一 </td>
</tr>
<tr>
<td>beyond</td>
<td>prep. 超过，那边 </td>
</tr>
<tr>
<td>against</td>
<td>prep. 反对，阻止 </td>
</tr>
<tr>
<td>upon</td>
<td>prep. 依据，遵照 </td>
</tr>
<tr>
<td>service</td>
<td>n. &amp; vt. 服务，业务 </td>
</tr>
<tr>
<td>little</td>
<td>a. 小的，少量的 </td>
</tr>
<tr>
<td>exhaust</td>
<td>v. 取尽，用完 </td>
</tr>
<tr>
<td>choice</td>
<td>n. 选择，精品</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-38"><a href="#list-38" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>sounding</td>
<td>a. 发声的 </td>
</tr>
<tr>
<td>develop</td>
<td>v. 发展，研制，显影 </td>
</tr>
<tr>
<td>holding</td>
<td>n. 保持，固定，存储 </td>
</tr>
<tr>
<td>alpha</td>
<td>n. 希腊字母α，未知数 </td>
</tr>
<tr>
<td>constant</td>
<td>n. 常数 </td>
</tr>
<tr>
<td>warranty</td>
<td>n. 保证(书)，授权 </td>
</tr>
<tr>
<td>stay</td>
<td>v. 停止，停留 </td>
</tr>
<tr>
<td>industry</td>
<td>n. 工业 </td>
</tr>
<tr>
<td>trigger</td>
<td>n. &amp; v. 触发器；触发</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-39"><a href="#list-39" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>lesson</td>
<td>n. 功课，教训 </td>
</tr>
<tr>
<td>handling</td>
<td>n. 处理，操纵 </td>
</tr>
<tr>
<td>treat</td>
<td>v. 处理，加工 </td>
</tr>
<tr>
<td>busy</td>
<td>a. 忙碌的，占线的 </td>
</tr>
<tr>
<td>usage</td>
<td>n. 应用，使用，用法 </td>
</tr>
<tr>
<td>difficult</td>
<td>a. 困难的，不容易的 </td>
</tr>
<tr>
<td>failure</td>
<td>n. 失效，故障，失败 </td>
</tr>
<tr>
<td>communication</td>
<td>n. 通信</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-40"><a href="#list-40" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>building</td>
<td>n. 建造，建筑，房屋 </td>
</tr>
<tr>
<td>ally</td>
<td>v. 联合，与…关联 </td>
</tr>
<tr>
<td>exclamation</td>
<td>n. 惊叹(号) </td>
</tr>
<tr>
<td>turning</td>
<td>a. 转弯的，旋转的 </td>
</tr>
<tr>
<td>whole</td>
<td>a. 全部的，整个的 </td>
</tr>
<tr>
<td>parent</td>
<td>n. 双亲，父代 </td>
</tr>
<tr>
<td>connection</td>
<td>n. 连接(法) </td>
</tr>
<tr>
<td>connectivity</td>
<td>n. 连通性，联络性 </td>
</tr>
<tr>
<td>translation</td>
<td>n. 翻译，变换，平移</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-41"><a href="#list-41" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>dynamic</td>
<td>a. 动态的，动力的 </td>
</tr>
<tr>
<td>foreground</td>
<td>n. 前台 </td>
</tr>
<tr>
<td>preserve</td>
<td>vt. 保存，维持 </td>
</tr>
<tr>
<td>vice</td>
<td>n. 缺点，毛病，错误 </td>
</tr>
<tr>
<td>necessarily</td>
<td>ad. 必定，当然 </td>
</tr>
<tr>
<td>circle</td>
<td>n. 圆，圈，循环，周期 </td>
</tr>
<tr>
<td>differ</td>
<td>vi. 不同，不一致 </td>
</tr>
<tr>
<td>stationary</td>
<td>a. 静止的，平稳的 </td>
</tr>
<tr>
<td>extract</td>
<td>vt. 抽取，摘录，开方</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-42"><a href="#list-42" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>unrecognized</td>
<td>a. 未被认出的 </td>
</tr>
<tr>
<td>thereafter</td>
<td>ad. 此后，据此 </td>
</tr>
<tr>
<td>inverse</td>
<td>a. 反向的，逆的 </td>
</tr>
<tr>
<td>spell</td>
<td>v. 拼写 </td>
</tr>
<tr>
<td>limiting</td>
<td>n. (电路参数)限制处理 </td>
</tr>
<tr>
<td>restructure</td>
<td>vt. 调整，重新组织 </td>
</tr>
<tr>
<td>delimit</td>
<td>vt. 定界，定义 </td>
</tr>
<tr>
<td>pay</td>
<td>v. 付款，支付 </td>
</tr>
<tr>
<td>separately</td>
<td>ad. 分别地</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-43"><a href="#list-43" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>classify</td>
<td>vt. 分类，分级 </td>
</tr>
<tr>
<td>interfere</td>
<td>vi. 干涉，干扰，冲突 </td>
</tr>
<tr>
<td>mind</td>
<td>n. 愿望，想法，智力 </td>
</tr>
<tr>
<td>individually</td>
<td>ad. 个别地，单独地 </td>
</tr>
<tr>
<td>vertical</td>
<td>a. 垂直的，立(式)的 </td>
</tr>
<tr>
<td>undesirable</td>
<td>a. 不合乎需要的 </td>
</tr>
<tr>
<td>lot</td>
<td>n. 一块(批，组，套) </td>
</tr>
<tr>
<td>piece</td>
<td>n. 一块，部分，段 </td>
</tr>
<tr>
<td>unavailable</td>
<td>a. 不能利用的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-44"><a href="#list-44" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>unlike</td>
<td>a. 不象的，不同的 </td>
</tr>
<tr>
<td>sit</td>
<td>v. 位于，安装 </td>
</tr>
<tr>
<td>insufficient</td>
<td>a. 不足的，不适当的 </td>
</tr>
<tr>
<td>map</td>
<td>n. &amp; vt. 图；映射，变址 </td>
</tr>
<tr>
<td>figure</td>
<td>n. 数字；图，图形，形状 </td>
</tr>
<tr>
<td>prepare</td>
<td>v. 准备 </td>
</tr>
<tr>
<td>consider</td>
<td>v. 考虑，认为，设想 </td>
</tr>
<tr>
<td>detect</td>
<td>vt. 检测 </td>
</tr>
<tr>
<td>convenience</td>
<td>n. 方便，便利</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-45"><a href="#list-45" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>method</td>
<td>n. 方法，方案 </td>
</tr>
<tr>
<td>mean</td>
<td>n. &amp; vt. 平均；意味着 </td>
</tr>
<tr>
<td>salary</td>
<td>n. &amp; vt. 薪水；发工资 </td>
</tr>
<tr>
<td>pacific</td>
<td>a. 平稳的，太平(洋)的 </td>
</tr>
<tr>
<td>strong</td>
<td>a. 强的 </td>
</tr>
<tr>
<td>emphasize</td>
<td>v. 强调，着重，增强 </td>
</tr>
<tr>
<td>department</td>
<td>n. 部门，门类，系 </td>
</tr>
<tr>
<td>forced</td>
<td>a. 强制的，压力的 </td>
</tr>
<tr>
<td>ansi</td>
<td>n. 美国国家标准协会</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-46"><a href="#list-46" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>permanent</td>
<td>a. 永久的 </td>
</tr>
<tr>
<td>remark</td>
<td>n. 评注，备注 </td>
</tr>
<tr>
<td>away</td>
<td>ad. 离开，(去)掉 </td>
</tr>
<tr>
<td>concatenate</td>
<td>vt. 连接，串联，并置 </td>
</tr>
<tr>
<td>lightning</td>
<td>n. 闪电 </td>
</tr>
<tr>
<td>additionally</td>
<td>ad. 另外，又 </td>
</tr>
<tr>
<td>emulate</td>
<td>v. 仿真，模仿；赶上或超过 </td>
</tr>
<tr>
<td>tape</td>
<td>n. 磁带，纸带 </td>
</tr>
<tr>
<td>accidentally</td>
<td>ad. 偶然地</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-47"><a href="#list-47" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>concept</td>
<td>n. 概念 </td>
</tr>
<tr>
<td>optimize</td>
<td>v. 优选，优化 </td>
</tr>
<tr>
<td>counter</td>
<td>n. 计数器，计算器 </td>
</tr>
<tr>
<td>expect</td>
<td>vt. 期望，期待，盼望 </td>
</tr>
<tr>
<td>subsequently</td>
<td>ad. 其后，其次，按着 </td>
</tr>
<tr>
<td>registration</td>
<td>n. 登记，挂号，读数 </td>
</tr>
<tr>
<td>city</td>
<td>n. 城市，市区 </td>
</tr>
<tr>
<td>designate</td>
<td>vt. 任命，标志 </td>
</tr>
<tr>
<td>visible</td>
<td>a. 可见的，明显的 </td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-48"><a href="#list-48" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>consult</td>
<td>v. 咨询，顾问 </td>
</tr>
<tr>
<td>completely</td>
<td>ad. 十分，完全，彻底 </td>
</tr>
<tr>
<td>virtually</td>
<td>ad. 实际上 </td>
</tr>
<tr>
<td>substantially</td>
<td>ad. 实质上，本质上 </td>
</tr>
<tr>
<td>specialize</td>
<td>v. (使)专门化 </td>
</tr>
<tr>
<td>fail</td>
<td>n. 故障，失效 </td>
</tr>
<tr>
<td>primarily</td>
<td>ad. 首先，起初，原来 </td>
</tr>
<tr>
<td>sequentially</td>
<td>ad. 顺序地 </td>
</tr>
<tr>
<td>client</td>
<td>n. 顾客，买主</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-49"><a href="#list-49" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td>n. 运行时间 </td>
</tr>
<tr>
<td>fix</td>
<td>v. 固定，定影 </td>
</tr>
<tr>
<td>author</td>
<td>n. 程序设计者，作者 </td>
</tr>
<tr>
<td>programmer</td>
<td>n. 程序设计人员 </td>
</tr>
<tr>
<td>commercial</td>
<td>a. 商业的，经济的 </td>
</tr>
<tr>
<td>particularly</td>
<td>ad. 特别，格外，尤其 </td>
</tr>
<tr>
<td>low</td>
<td>a. 低的，浅的，弱的 </td>
</tr>
<tr>
<td>sheet</td>
<td>n. (图)表，纸，片 </td>
</tr>
<tr>
<td>employee</td>
<td>n. 雇员</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-50"><a href="#list-50" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>legal</td>
<td>a. 合法的，法律的 </td>
</tr>
<tr>
<td>qualified</td>
<td>a. 合格的，受限制的 </td>
</tr>
<tr>
<td>context</td>
<td>n. 上下文，来龙去脉 </td>
</tr>
<tr>
<td>involved</td>
<td>a. 有关的 </td>
</tr>
<tr>
<td>conditional</td>
<td>a. 有条件的 </td>
</tr>
<tr>
<td>halfway</td>
<td>a. 中途的，不彻底的 </td>
</tr>
<tr>
<td>oriented</td>
<td>a. 有向的，定向的 </td>
</tr>
<tr>
<td>pair</td>
<td>n. (一)对，一双 </td>
</tr>
<tr>
<td>week</td>
<td>n. (一)星期，(一)周</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-51"><a href="#list-51" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>suppressed</td>
<td>vt. 抑制，取消 </td>
</tr>
<tr>
<td>subroutine</td>
<td>n. 子程序 </td>
</tr>
<tr>
<td>bracketed</td>
<td>a. 加括号的 </td>
</tr>
<tr>
<td>manually</td>
<td>ad. 用手，手动地 </td>
</tr>
<tr>
<td>preset</td>
<td>vt. 预置 </td>
</tr>
<tr>
<td>autoindex</td>
<td>n. 自动变址(数) </td>
</tr>
<tr>
<td>restrict</td>
<td>vt. 约束，限制 </td>
</tr>
<tr>
<td>performance</td>
<td>n. 性能，实绩 </td>
</tr>
<tr>
<td>showing</td>
<td>n. 显示，表现</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-52"><a href="#list-52" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>ever</td>
<td>ad. 在任何时候，曾经 </td>
</tr>
<tr>
<td>distribution</td>
<td>n. 分布，分配 </td>
</tr>
<tr>
<td>denote</td>
<td>vt. 指示，意味着，代表 </td>
</tr>
<tr>
<td>cash</td>
<td>n. 现金 </td>
</tr>
<tr>
<td>repeatedly</td>
<td>ad. 重复地 </td>
</tr>
<tr>
<td>replicate</td>
<td>vt. 重复，复制 </td>
</tr>
<tr>
<td>mega</td>
<td>n. 兆，百万 </td>
</tr>
<tr>
<td>conform</td>
<td>vi. 遵从，符合 </td>
</tr>
<tr>
<td>rebuild</td>
<td>v. 重建，修复，改造</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-53"><a href="#list-53" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>certainty</td>
<td>n. 必然，确实 </td>
</tr>
<tr>
<td>controller</td>
<td>n. 控制器 </td>
</tr>
<tr>
<td>pseudo</td>
<td>a. 假的，伪的，冒充的 </td>
</tr>
<tr>
<td>manage</td>
<td>v. 管理，经营，使用 </td>
</tr>
<tr>
<td>administrator</td>
<td>n. 管理人，行政人员 </td>
</tr>
<tr>
<td>ensemble</td>
<td>n. 总体，集合体 </td>
</tr>
<tr>
<td>bus</td>
<td>n. 总线，信息通路 </td>
</tr>
<tr>
<td>allowable</td>
<td>a. 容许的，承认的 </td>
</tr>
<tr>
<td>limitations</td>
<td>n. 限制，边界 </td>
</tr>
<tr>
<td>restriction</td>
<td>n. 限制，约束，节流</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-54"><a href="#list-54" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>height</td>
<td>n. 高度 </td>
</tr>
<tr>
<td>remainder</td>
<td>n. 余数，余项，剩余 </td>
</tr>
<tr>
<td>traverse</td>
<td>v. 横渡，横过，横断 </td>
</tr>
<tr>
<td>organization</td>
<td>n. 结构，机构，公司 </td>
</tr>
<tr>
<td>resulting</td>
<td>a. 结果的，合成的 </td>
</tr>
<tr>
<td>solution</td>
<td>n. 解，解法，解答 </td>
</tr>
<tr>
<td>external</td>
<td>a. 外部的 </td>
</tr>
<tr>
<td>adequate</td>
<td>a. 足够的，充分的 </td>
</tr>
<tr>
<td>interpretability</td>
<td>n. 配合动作性</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-55"><a href="#list-55" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>vary</td>
<td>v. 变化，变换 </td>
</tr>
<tr>
<td>gap</td>
<td>n. 间隙，间隔，缝隙 </td>
</tr>
<tr>
<td>indexing</td>
<td>n. 变址，标引，加下标 </td>
</tr>
<tr>
<td>board</td>
<td>n. 板，插件板 </td>
</tr>
<tr>
<td>package</td>
<td>n. 插件，(软件)包 </td>
</tr>
<tr>
<td>insertion</td>
<td>n. 插入，嵌入，插页 </td>
</tr>
<tr>
<td>intervene</td>
<td>vi插入，干涉 </td>
</tr>
<tr>
<td>conflict</td>
<td>v. 冲突，碰头 </td>
</tr>
<tr>
<td>really</td>
<td>a. 真正地，确实地</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-56"><a href="#list-56" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>overflow</td>
<td>v. 溢出，上溢 </td>
</tr>
<tr>
<td>charge</td>
<td>n. 电荷，充电，负荷 </td>
</tr>
<tr>
<td>phone</td>
<td>n. 电话，电话机，音素 </td>
</tr>
<tr>
<td>virtual</td>
<td>a. 虚(拟)的，虚拟 </td>
</tr>
<tr>
<td>compose</td>
<td>v. 组成，构成，构图 </td>
</tr>
<tr>
<td>snapshot</td>
<td>n. 抽点打印 </td>
</tr>
<tr>
<td>sensitivity</td>
<td>n. 灵敏度 </td>
</tr>
<tr>
<td>familiar</td>
<td>a. 熟悉的，惯用的 </td>
</tr>
<tr>
<td>mach</td>
<td>n. 马赫(速度单位)</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-57"><a href="#list-57" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>incorrect</td>
<td>a. 错误的，不正确的 </td>
</tr>
<tr>
<td>cut</td>
<td>v. 割，切 </td>
</tr>
<tr>
<td>lowest</td>
<td>a. 最低的，最小的 </td>
</tr>
<tr>
<td>simple</td>
<td>a. 简单的 </td>
</tr>
<tr>
<td>subsequent</td>
<td>a. 后来的，其次的 </td>
</tr>
<tr>
<td>capitalized</td>
<td>a. 大写的 </td>
</tr>
<tr>
<td>compact</td>
<td>a. 紧致的，压缩的 </td>
</tr>
<tr>
<td>plain</td>
<td>n. 明码 </td>
</tr>
<tr>
<td>noted</td>
<td>a. 著名的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-58"><a href="#list-58" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>desirable</td>
<td>a. 所希望的，称心的 </td>
</tr>
<tr>
<td>substitution</td>
<td>n. 代替，替换，置换 </td>
</tr>
<tr>
<td>consume</td>
<td>v. 消耗，使用 </td>
</tr>
<tr>
<td>forget</td>
<td>v. 忘记 </td>
</tr>
<tr>
<td>keyed</td>
<td>a. 键控的 </td>
</tr>
<tr>
<td>overstrike</td>
<td>n. 过打印 </td>
</tr>
<tr>
<td>tornado</td>
<td>n. 旋风，龙卷风 </td>
</tr>
<tr>
<td>quotation</td>
<td>n. 引证，引用(句) </td>
</tr>
<tr>
<td>ones</td>
<td>n. 二进制反码</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-59"><a href="#list-59" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>parse</td>
<td>vt. (语法)分析 </td>
</tr>
<tr>
<td>experience</td>
<td>vt. &amp; n. 试验 </td>
</tr>
<tr>
<td>manufacture</td>
<td>vt. &amp; n. 制造(业)，工业 </td>
</tr>
<tr>
<td>hundred</td>
<td>n. &amp; a. (一)百，百个 </td>
</tr>
<tr>
<td>thousand</td>
<td>n. &amp; a. (一)千，无数的 </td>
</tr>
<tr>
<td>twentieth</td>
<td>n. &amp; a. 第二十(的) </td>
</tr>
<tr>
<td>understanding</td>
<td>n. &amp; a. 了解的，聪明的 </td>
</tr>
<tr>
<td>hand</td>
<td>n. &amp; a. 手，手工(动)的 </td>
</tr>
<tr>
<td>restricting</td>
<td>n. &amp; a. 限制(的)</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-60"><a href="#list-60" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>fancy</td>
<td>n. &amp; a. 想象(的)，精制的 </td>
</tr>
<tr>
<td>wide</td>
<td>a. &amp; ad. 宽的，广阔的 </td>
</tr>
<tr>
<td>fine</td>
<td>a. &amp; ad. 微小的，细的 </td>
</tr>
<tr>
<td>worry</td>
<td>v. &amp; n. (使)烦恼 </td>
</tr>
<tr>
<td>somewhat pro</td>
<td>n. &amp; ad. 稍微，有点 </td>
</tr>
<tr>
<td>quiet</td>
<td>a. &amp; n. 静态，静止的 </td>
</tr>
<tr>
<td>purge</td>
<td>v. &amp; n. 清除 </td>
</tr>
<tr>
<td>mod</td>
<td>a. &amp; n. 时髦的</td>
</tr>
<tr>
<td>whichever</td>
<td>a. &amp; pron. 无论哪个</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-61"><a href="#list-61" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>purchase</td>
<td>n. &amp; v. 购买 </td>
</tr>
<tr>
<td>care</td>
<td>n. &amp; v. 关心，注意 </td>
</tr>
<tr>
<td>watch</td>
<td>n. &amp; v. 监视，观测 </td>
</tr>
<tr>
<td>endeavor</td>
<td>n. &amp; v. 尽力，力图 </td>
</tr>
<tr>
<td>mismatch</td>
<td>n. &amp; vt. 失配，不匹配 </td>
</tr>
<tr>
<td>printout</td>
<td>n. 印出 </td>
</tr>
<tr>
<td>ellipsis</td>
<td>n. 省略符号，省略(法) </td>
</tr>
<tr>
<td>ship</td>
<td>n. 舰，船 </td>
</tr>
<tr>
<td>british</td>
<td>a. &amp; n. 英国的；英国人</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-62"><a href="#list-62" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>parallel</td>
<td>a. 并行 </td>
</tr>
<tr>
<td>custom</td>
<td>a. &amp; n. 常规的，惯例；用户 </td>
</tr>
<tr>
<td>congratulation</td>
<td>n. 祝贺 </td>
</tr>
<tr>
<td>protection</td>
<td>n. 保护 </td>
</tr>
<tr>
<td>glass</td>
<td>n. 玻璃 </td>
</tr>
<tr>
<td>pattern</td>
<td>n. 模式 </td>
</tr>
<tr>
<td>insure</td>
<td>v. 保证，保障 </td>
</tr>
<tr>
<td>stopping</td>
<td>n. 停止，制动(状态) </td>
</tr>
<tr>
<td>factory</td>
<td>n. 工厂，制造厂</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-63"><a href="#list-63" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>implement</td>
<td>n. &amp; vt. 工具；执行，实现 </td>
</tr>
<tr>
<td>effort</td>
<td>n. 工作，研究计划 </td>
</tr>
<tr>
<td>worker</td>
<td>n. 工作人员 </td>
</tr>
<tr>
<td>ampersand</td>
<td>n. &amp;号(and) </td>
</tr>
<tr>
<td>deal</td>
<td>v. 处理，分配，交易 </td>
</tr>
<tr>
<td>power</td>
<td>n. 功率，电源，幂 </td>
</tr>
<tr>
<td>difficulty</td>
<td>n. 困难，难点 </td>
</tr>
<tr>
<td>lose</td>
<td>n. 失去，损失 </td>
</tr>
<tr>
<td>magic</td>
<td>n. 魔术，幻术</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-64"><a href="#list-64" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>proprietary</td>
<td>a. 专有的 </td>
</tr>
<tr>
<td>aware</td>
<td>a. 知道的，察觉到的</td>
</tr>
<tr>
<td>vowel</td>
<td>n. 元音，母音 </td>
</tr>
<tr>
<td>closely</td>
<td>a. 精密地，仔细地 </td>
</tr>
<tr>
<td>accuracy</td>
<td>n. 精确度，准确度 </td>
</tr>
<tr>
<td>traditional</td>
<td>a. 传统的，惯例的 </td>
</tr>
<tr>
<td>synchronization</td>
<td>n. 同步 </td>
</tr>
<tr>
<td>fragment</td>
<td>n. 片段，段，分段 </td>
</tr>
<tr>
<td>primary</td>
<td>a. 原始的，主要的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-65"><a href="#list-65" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>safely</td>
<td>ad. 安全地，确实地 </td>
</tr>
<tr>
<td>habit</td>
<td>n. 习惯 </td>
</tr>
<tr>
<td>comprise</td>
<td>vt. 包括，由…组成 </td>
</tr>
<tr>
<td>landler</td>
<td>n. 兰德勒舞曲 </td>
</tr>
<tr>
<td>absence</td>
<td>n. 缺少，没有 </td>
</tr>
<tr>
<td>revolutionize</td>
<td>vt. 变革，彻底改革 </td>
</tr>
<tr>
<td>constantly</td>
<td>ad. 不变地，经常地 </td>
</tr>
<tr>
<td>seldom</td>
<td>ad. 不常，很少，难得 </td>
</tr>
<tr>
<td>unfortunately</td>
<td>ad. 不幸，遗憾地</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-66"><a href="#list-66" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>expunge</td>
<td>vt. 擦除，删掉 </td>
</tr>
<tr>
<td>security</td>
<td>n. 安全性，保密性 </td>
</tr>
<tr>
<td>touch</td>
<td>v. &amp; n. 按，揿，触；触力 </td>
</tr>
<tr>
<td>contrast</td>
<td>n. 反差，对比，对比度 </td>
</tr>
<tr>
<td>invent</td>
<td>vt. 创造，想象 </td>
</tr>
<tr>
<td>reflect</td>
<td>v. 反射 </td>
</tr>
<tr>
<td>undone</td>
<td>a. 未完成的 </td>
</tr>
<tr>
<td>unshift</td>
<td>v. 未移动，不移档 </td>
</tr>
<tr>
<td>complex</td>
<td>a. &amp; n. 复杂的；复数 </td>
</tr>
<tr>
<td>complexity</td>
<td>n. 复杂性，复杂度</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-67"><a href="#list-67" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>creation</td>
<td>n. 创造，创作 </td>
</tr>
<tr>
<td>unknown</td>
<td>a. 未知的，无名的 </td>
</tr>
<tr>
<td>greatly</td>
<td>ad. 大大地，非常 </td>
</tr>
<tr>
<td>cost</td>
<td>n. 值，价值，成本 </td>
</tr>
<tr>
<td>degrade</td>
<td>v. 降低，减少，递降 </td>
</tr>
<tr>
<td>suggestion</td>
<td>n. 暗示，提醒 </td>
</tr>
<tr>
<td>real</td>
<td>n. 实数，实的，实型 </td>
</tr>
<tr>
<td>experimentation</td>
<td>n. 实验(工作，法) </td>
</tr>
<tr>
<td>experiment</td>
<td>n. 实验，试验(研究) </td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-68"><a href="#list-68" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>substantial</td>
<td>a. 实质的，真正的 </td>
</tr>
<tr>
<td>solely</td>
<td>ad. 独自，单独，只 </td>
</tr>
<tr>
<td>announce</td>
<td>vt. 发表，宣布 </td>
</tr>
<tr>
<td>squeeze</td>
<td>v. 挤压 </td>
</tr>
<tr>
<td>distribute</td>
<td>vt. 分布，配线，配给 </td>
</tr>
<tr>
<td>negate</td>
<td>vt. 否定，求反，”非” </td>
</tr>
<tr>
<td>capture</td>
<td>vt. 俘获，捕捉 </td>
</tr>
<tr>
<td>father</td>
<td>n. 父，上层(树节点的) </td>
</tr>
<tr>
<td>reinstate</td>
<td>vt. 复原，恢复</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-69"><a href="#list-69" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>tutorial</td>
<td>a. 指导的 </td>
</tr>
<tr>
<td>nicety</td>
<td>n. 细节，精细 </td>
</tr>
<tr>
<td>roll</td>
<td>n. &amp; v. 案卷；卷动，滚动 </td>
</tr>
<tr>
<td>exponent</td>
<td>n. 指数，阶，幂 </td>
</tr>
<tr>
<td>exponential</td>
<td>a. 指数的，幂的，阶的 </td>
</tr>
<tr>
<td>prefer</td>
<td>vt. 更喜欢，宁愿 </td>
</tr>
<tr>
<td>complicated</td>
<td>v. 使复杂化，使混乱 </td>
</tr>
<tr>
<td>reactivate</td>
<td>v. 使恢复活动 </td>
</tr>
<tr>
<td>spread</td>
<td>v. 展开，传播</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-70"><a href="#list-70" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>synchronize</td>
<td>v. 使同步 </td>
</tr>
<tr>
<td>formation</td>
<td>n. 构造，结构，形成 </td>
</tr>
<tr>
<td>widely</td>
<td>ad. 广泛，很远 </td>
</tr>
<tr>
<td>comma</td>
<td>n. 逗号”,”，逗点 </td>
</tr>
<tr>
<td>very</td>
<td>ad. 很，非常，最 </td>
</tr>
<tr>
<td>unnecessary</td>
<td>a. 不必要的，多余的 </td>
</tr>
<tr>
<td>unchanged</td>
<td>a. 不变的 </td>
</tr>
<tr>
<td>cross</td>
<td>n. 交叉，十字准线 </td>
</tr>
<tr>
<td>yet</td>
<td>ad. 还，仍然，至今</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-71"><a href="#list-71" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>slowly</td>
<td>ad. 缓慢地 </td>
</tr>
<tr>
<td>inexperienced</td>
<td>a. 不熟练的，外行的 </td>
</tr>
<tr>
<td>noninteractive</td>
<td>a. 不相关的，非交互的 </td>
</tr>
<tr>
<td>unwanted</td>
<td>a. 不需要的，多余的 </td>
</tr>
<tr>
<td>unused</td>
<td>a. 不用的，空着的 </td>
</tr>
<tr>
<td>unmarked</td>
<td>a. 没有标记的 </td>
</tr>
<tr>
<td>nothing</td>
<td>n. 没有任何东西 </td>
</tr>
<tr>
<td>chart</td>
<td>n. 图(表) </td>
</tr>
<tr>
<td>dearly</td>
<td>ad. 极，非常，昂贵地</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-72"><a href="#list-72" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>extremely</td>
<td>ad. 极端地，非常 </td>
</tr>
<tr>
<td>hardly</td>
<td>ad. 几乎不，未必 </td>
</tr>
<tr>
<td>placement</td>
<td>n. 布局 </td>
</tr>
<tr>
<td>think</td>
<td>v. 考虑，以为，判断 </td>
</tr>
<tr>
<td>technical</td>
<td>a. 技术的，专业的 </td>
</tr>
<tr>
<td>idea</td>
<td>n. 思想，观念 </td>
</tr>
<tr>
<td>stamp</td>
<td>n. 图章 </td>
</tr>
<tr>
<td>indirectly</td>
<td>ad. 间接地 </td>
</tr>
<tr>
<td>equation</td>
<td>n. 方程，方程式</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-73"><a href="#list-73" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>smooth</td>
<td>v. &amp; a. 平滑；平滑的 </td>
</tr>
<tr>
<td>attached</td>
<td>a. 附加的</td>
</tr>
<tr>
<td>e</td>
<td>n. 平均，平均数 </td>
</tr>
<tr>
<td>quietly</td>
<td>ad. 静静地 </td>
</tr>
<tr>
<td>discard</td>
<td>v. 删除，废除，放弃 </td>
</tr>
<tr>
<td>never</td>
<td>ad. 决不，从来不 </td>
</tr>
<tr>
<td>initiate</td>
<td>vt. 开创，起始 </td>
</tr>
<tr>
<td>powerful</td>
<td>a. 强大的，大功率的 </td>
</tr>
<tr>
<td>purpose</td>
<td>n. &amp; vt. 目的，用途；打算</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-74"><a href="#list-74" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>regard</td>
<td>vt. 考虑，注意，关系 </td>
</tr>
<tr>
<td>daily</td>
<td>a. 每日的，日常的 </td>
</tr>
<tr>
<td>possibly</td>
<td>ad. 可能地，合理地 </td>
</tr>
<tr>
<td>potentially</td>
<td>ad. 可能地，大概地 </td>
</tr>
<tr>
<td>moreover</td>
<td>ad. 况且，并且，此外 </td>
</tr>
<tr>
<td>american</td>
<td>a. 美国的 </td>
</tr>
<tr>
<td>guard</td>
<td>v. &amp; n. 防护；防护装置 </td>
</tr>
<tr>
<td>world</td>
<td>n. 世界，全球 </td>
</tr>
<tr>
<td>independent</td>
<td>a. 独立的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-75"><a href="#list-75" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>independently</td>
<td>a. 独立地 </td>
</tr>
<tr>
<td>continuously</td>
<td>ad. 连续不断地 </td>
</tr>
<tr>
<td>shield</td>
<td>v. 屏蔽，罩，防护 </td>
</tr>
<tr>
<td>glance</td>
<td>n. 闪烁 </td>
</tr>
<tr>
<td>happening</td>
<td>n. 事件，偶然发生的事 </td>
</tr>
<tr>
<td>transaction</td>
<td>n. 事项，事务，学报 </td>
</tr>
<tr>
<td>emulation</td>
<td>n. 仿真，仿效 </td>
</tr>
<tr>
<td>strike</td>
<td>v. 敲，击 </td>
</tr>
<tr>
<td>dump</td>
<td>v. (内存信息)转储</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-76"><a href="#list-76" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>occasionally</td>
<td>ad. 偶尔(地)，不时 </td>
</tr>
<tr>
<td>tension</td>
<td>n. 张力 </td>
</tr>
<tr>
<td>probable</td>
<td>a. 概率的，可能的 </td>
</tr>
<tr>
<td>talent</td>
<td>n. 才能，技能，人才 </td>
</tr>
<tr>
<td>financial</td>
<td>a. 财务的，金融的 </td>
</tr>
<tr>
<td>meter</td>
<td>n. 仪表，米 </td>
</tr>
<tr>
<td>logged</td>
<td>a. 记录的，浸透的 </td>
</tr>
<tr>
<td>ware</td>
<td>n. 仪器，商品 </td>
</tr>
<tr>
<td>disregard</td>
<td>vt. 轻视，把…忽略不计</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-77"><a href="#list-77" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>waiting</td>
<td>a. 等待的 </td>
</tr>
<tr>
<td>preceding</td>
<td>a. 先的，以前的 </td>
</tr>
<tr>
<td>comparison</td>
<td>n. 比较，对照 </td>
</tr>
<tr>
<td>advanced</td>
<td>a. 先进的，预先的 </td>
</tr>
<tr>
<td>rate</td>
<td>n. 比率，速率，费率 </td>
</tr>
<tr>
<td>fly</td>
<td>v. 飞，跳过 </td>
</tr>
<tr>
<td>programmable</td>
<td>a. 可编程的 </td>
</tr>
<tr>
<td>definable</td>
<td>a. 可定义的，可确定的</td>
</tr>
<tr>
<td>recoverable</td>
<td>a. 可恢复的，可回收的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-78"><a href="#list-78" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>possibility</td>
<td>n. 可能性 </td>
</tr>
<tr>
<td>finisher</td>
<td>n. 成品机 </td>
</tr>
<tr>
<td>applicable</td>
<td>a. 可适用的，合适的 </td>
</tr>
<tr>
<td>printable</td>
<td>a. 可印刷的 </td>
</tr>
<tr>
<td>executable</td>
<td>a. 可执行的 </td>
</tr>
<tr>
<td>essentially</td>
<td>ad. 实质上，本来 </td>
</tr>
<tr>
<td>confuse</td>
<td>vt. 使混乱，干扰 </td>
</tr>
<tr>
<td>familiarize</td>
<td>vt. 使熟悉，使通俗化 </td>
</tr>
<tr>
<td>employe</td>
<td>vt. 使用，花费</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-79"><a href="#list-79" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>suitable</td>
<td>a. 适合的，相适宜的 </td>
</tr>
<tr>
<td>generation</td>
<td>n. (世)代，(发展)阶段 </td>
</tr>
<tr>
<td>quality</td>
<td>n. 质量，性质，属性 </td>
</tr>
<tr>
<td>defective</td>
<td>a. 故障的，有毛病的 </td>
</tr>
<tr>
<td>interpretable</td>
<td>a. 彼此协作的 </td>
</tr>
<tr>
<td>interest</td>
<td>n. 兴趣，注意，影响 </td>
</tr>
<tr>
<td>fourscore</td>
<td>n. 八十 </td>
</tr>
<tr>
<td>teach</td>
<td>v. 教，讲授 </td>
</tr>
<tr>
<td>procedural</td>
<td>a. 程序上的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-80"><a href="#list-80" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>phrase</td>
<td>n. 短语，成语 </td>
</tr>
<tr>
<td>specifically</td>
<td>ad. 特别地，逐一地 </td>
</tr>
<tr>
<td>penalty</td>
<td>n. 惩罚，罚款，负担 </td>
</tr>
<tr>
<td>violate</td>
<td>vt. 违犯，妨碍，破坏 </td>
</tr>
<tr>
<td>indefinitely</td>
<td>ad. 无限地，无穷地 </td>
</tr>
<tr>
<td>major</td>
<td>a. 较大的，主要的 </td>
</tr>
<tr>
<td>higher</td>
<td>a. 较高的 </td>
</tr>
<tr>
<td>wise</td>
<td>a. 聪明的 </td>
</tr>
<tr>
<td>becoming</td>
<td>a. 合适的，相称的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-81"><a href="#list-81" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>equally</td>
<td>ad. 相等地，相同地 </td>
</tr>
<tr>
<td>enjoy</td>
<td>vt. 享受，欣赏，喜爱 </td>
</tr>
<tr>
<td>forth</td>
<td>ad. 向前 </td>
</tr>
<tr>
<td>disappear</td>
<td>vi. 消失 </td>
</tr>
<tr>
<td>crop</td>
<td>v. 切，剪切 </td>
</tr>
<tr>
<td>diagonally</td>
<td>ad. 斜(对) </td>
</tr>
<tr>
<td>labeled</td>
<td>a. 有标号的 </td>
</tr>
<tr>
<td>decision</td>
<td>n. 判定，决定，决策 </td>
</tr>
<tr>
<td>effective</td>
<td>a. 有效的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-82"><a href="#list-82" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>significant</td>
<td>a. 有效的，有意义的 </td>
</tr>
<tr>
<td>avail</td>
<td>v. &amp; n. 有益于；利益 </td>
</tr>
<tr>
<td>hang</td>
<td>v. 中止，暂停，挂起 </td>
</tr>
<tr>
<td>craze</td>
<td>n. &amp; v. 裂纹开裂 </td>
</tr>
<tr>
<td>consequently</td>
<td>ad. 因此，从而 </td>
</tr>
<tr>
<td>introduce</td>
<td>vt. 引进，引导 </td>
</tr>
<tr>
<td>team</td>
<td>n. 队，小组 </td>
</tr>
<tr>
<td>visual</td>
<td>a. 视觉的，直观的 </td>
</tr>
<tr>
<td>acknowledgment</td>
<td>n. 接收(收妥)，承认 </td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-83"><a href="#list-83" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>efficiently</td>
<td>ad. 有效地 </td>
</tr>
<tr>
<td>predict</td>
<td>vt. 预测，预言 </td>
</tr>
<tr>
<td>anticipate</td>
<td>vt. 预先考虑，抢…先 </td>
</tr>
<tr>
<td>bypass</td>
<td>n. 旁路 </td>
</tr>
<tr>
<td>nature</td>
<td>n. 自然，天然 </td>
</tr>
<tr>
<td>natural</td>
<td>a. 自然的 </td>
</tr>
<tr>
<td>grant</td>
<td>vt. 允许，授权 </td>
</tr>
<tr>
<td>logarithm</td>
<td>n. 对数 </td>
</tr>
<tr>
<td>reappears</td>
<td>vi. 再现，重现</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-84"><a href="#list-84" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>reload</td>
<td>vt. 再装入 </td>
</tr>
<tr>
<td>occupy</td>
<td>vt. 占有，充满 </td>
</tr>
<tr>
<td>photograph</td>
<td>n. 照片；v.照相</td>
</tr>
<tr>
<td>resolve</td>
<td>v. 分辨，解像 </td>
</tr>
<tr>
<td>unsafe</td>
<td>v. 恢复 </td>
</tr>
<tr>
<td>separator</td>
<td>n. 分隔符 </td>
</tr>
<tr>
<td>hierarchical</td>
<td>a. 分级的，分层的 </td>
</tr>
<tr>
<td>assortment</td>
<td>n. 种类，花色品种 </td>
</tr>
<tr>
<td>growing</td>
<td>n. 分类，分组，成群</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-85"><a href="#list-85" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>discussion</td>
<td>n. 讨论，商议，论述 </td>
</tr>
<tr>
<td>alphabet</td>
<td>n. 字母，字母表 </td>
</tr>
<tr>
<td>scattered</td>
<td>a. 分散的</td>
</tr>
<tr>
<td>superimpose</td>
<td>vt. 重叠，叠加 </td>
</tr>
<tr>
<td>reorganization</td>
<td>vt. 重排，改组</td>
</tr>
<tr>
<td>ready</td>
<td>a. 就绪，准备好的</td>
</tr>
<tr>
<td>already</td>
<td>ad. 已经，早已</td>
</tr>
<tr>
<td>readily</td>
<td>ad. 容易地，不勉强</td>
</tr>
<tr>
<td>read</td>
<td>v. 读，读阅</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-86"><a href="#list-86" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>reading</td>
<td>n. 读，读数</td>
</tr>
<tr>
<td>readable</td>
<td>a. 可读的</td>
</tr>
<tr>
<td>reread</td>
<td>vt. 重读</td>
</tr>
<tr>
<td>write</td>
<td>v. 写，存入 </td>
</tr>
<tr>
<td>rewrite</td>
<td>vt. 重写，再生</td>
</tr>
<tr>
<td>overwrite</td>
<td>v. 重写(覆盖)</td>
</tr>
<tr>
<td>university</td>
<td>n. (综合性)大学 </td>
</tr>
<tr>
<td>deter</td>
<td>vt. 阻止，拦住，妨碍 </td>
</tr>
<tr>
<td>pool</td>
<td>n. &amp; v. 池，坑；共享</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-87"><a href="#list-87" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>moment</td>
<td>n. 矩，力矩，磁矩</td>
</tr>
<tr>
<td>shut</td>
<td>v. 关闭 </td>
</tr>
<tr>
<td>closed</td>
<td>a. 关闭的，闭迹 </td>
</tr>
<tr>
<td>respond</td>
<td>v. 回答，响应</td>
</tr>
<tr>
<td>repeating</td>
<td>n. 重复，循环 </td>
</tr>
<tr>
<td>repetitive</td>
<td>a. 重复的 </td>
</tr>
<tr>
<td>reenter</td>
<td>v. 重新进入 </td>
</tr>
<tr>
<td>rearrange</td>
<td>v. 重新整理，重新排序 </td>
</tr>
<tr>
<td>rectangular</td>
<td>a. 矩形的，成直角的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-88"><a href="#list-88" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>tag</td>
<td>n. 特征，标记，标识符</td>
</tr>
<tr>
<td>price</td>
<td>n. 价格</td>
</tr>
<tr>
<td>suppose</td>
<td>v. 假定，推测 </td>
</tr>
<tr>
<td>supposed</td>
<td>a. 假定的，推测的 </td>
</tr>
<tr>
<td>manipulating</td>
<td>v. 操纵，操作</td>
</tr>
<tr>
<td>operator</td>
<td>n. 操作员，运算符 </td>
</tr>
<tr>
<td>masking</td>
<td>n. 掩蔽，屏蔽</td>
</tr>
<tr>
<td>demonstrate</td>
<td>v. 论证，证明，证实 </td>
</tr>
<tr>
<td>importance</td>
<td>n. 价值，重要</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-89"><a href="#list-89" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>pipe</td>
<td>n. 管，导管 </td>
</tr>
<tr>
<td>overall</td>
<td>a. 总共的，全部的 </td>
</tr>
<tr>
<td>turnkey</td>
<td>n. 总控钥匙 </td>
</tr>
<tr>
<td>restricted</td>
<td>a. 受限制的，受约束的 </td>
</tr>
<tr>
<td>suspension</td>
<td>n. 暂停，中止，挂起 </td>
</tr>
<tr>
<td>seamless</td>
<td>a. 无缝的</td>
</tr>
<tr>
<td>unsigned</td>
<td>a. 无符号的 </td>
</tr>
<tr>
<td>unformatted</td>
<td>a. 无格式的 </td>
</tr>
<tr>
<td>infinite</td>
<td>a. 无限的，无穷的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-90"><a href="#list-90" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>useless</td>
<td>a. 无用的</td>
</tr>
<tr>
<td>limiter</td>
<td>n. 限制(幅)器 </td>
</tr>
<tr>
<td>mountain</td>
<td>n. 高山，山脉</td>
</tr>
<tr>
<td>redundant</td>
<td>a. 冗余的 </td>
</tr>
<tr>
<td>dependent</td>
<td>a. 相关的 </td>
</tr>
<tr>
<td>contiguous</td>
<td>a. 相连的，邻接的 </td>
</tr>
<tr>
<td>consistent</td>
<td>a. 相容的，一致的</td>
</tr>
<tr>
<td>multiprocessing</td>
<td>n. 多重处理，多道处理 </td>
</tr>
<tr>
<td>architecture</td>
<td>n. 结构，构造</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-91"><a href="#list-91" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>structural</td>
<td>a. 结构的，结构上的</td>
</tr>
<tr>
<td>outcome</td>
<td>n. 结果，成果，输出</td>
</tr>
<tr>
<td>opinion</td>
<td>n. 意见，见解，判断 </td>
</tr>
<tr>
<td>association</td>
<td>n. 结合，协会，联想</td>
</tr>
<tr>
<td>interpret</td>
<td>v. 解释</td>
</tr>
<tr>
<td>explanatory</td>
<td>a. 解释(性)的 </td>
</tr>
<tr>
<td>assemble</td>
<td>v. 汇编，装配 </td>
</tr>
<tr>
<td>assembler</td>
<td>n. 汇编程序</td>
</tr>
<tr>
<td>cad</td>
<td>计算机辅助设计</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-92"><a href="#list-92" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>arithmetic</td>
<td>n. 算术，运算 </td>
</tr>
<tr>
<td>varying</td>
<td>a. 变化的，可变的</td>
</tr>
<tr>
<td>typical</td>
<td>a. 典型的，标准的</td>
</tr>
<tr>
<td>representative</td>
<td>a. 典型的，表示的</td>
</tr>
<tr>
<td>sufficient</td>
<td>a. 充足的，足够的 </td>
</tr>
<tr>
<td>blast</td>
<td>v. &amp; n. 清除；爆炸 </td>
</tr>
<tr>
<td>clean</td>
<td>a. 清洁的，干净的 </td>
</tr>
<tr>
<td>caret</td>
<td>n. 插入符号</td>
</tr>
<tr>
<td>socket</td>
<td>n. 插座，插孔，插口</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-93"><a href="#list-93" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>stated</td>
<td>a. 规定的</td>
</tr>
<tr>
<td>protocol</td>
<td>n. 规约，协议，规程 </td>
</tr>
<tr>
<td>presence</td>
<td>n. 存在，有 </td>
</tr>
<tr>
<td>telephone</td>
<td>n. 电话</td>
</tr>
<tr>
<td>lending</td>
<td>n. &amp; a. 借给，出租；借出的 </td>
</tr>
<tr>
<td>mixture</td>
<td>n. 混合物</td>
</tr>
<tr>
<td>situation</td>
<td>n. 情况，状况，势态</td>
</tr>
<tr>
<td>circumstances</td>
<td>n. 情况，环境，细节 </td>
</tr>
<tr>
<td>representation</td>
<td>n. 表示</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-94"><a href="#list-94" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>esoteric</td>
<td>a. 深奥的，奥秘的 </td>
</tr>
<tr>
<td>depth</td>
<td>n. 深度，浓度(颜色的)</td>
</tr>
<tr>
<td>final</td>
<td>a. 最终的</td>
</tr>
<tr>
<td>eventually</td>
<td>ad. 终于，最后 </td>
</tr>
<tr>
<td>finally</td>
<td>ad. 终于，最后</td>
</tr>
<tr>
<td>physically</td>
<td>a. 物理上，实际上</td>
</tr>
<tr>
<td>please</td>
<td>v. 请</td>
</tr>
<tr>
<td>aid</td>
<td>n. 帮助，辅助程序</td>
</tr>
<tr>
<td>successive</td>
<td>a. 逐次的，相继的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-95"><a href="#list-95" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>succession</td>
<td>n. 逐次性，连续性</td>
</tr>
<tr>
<td>alignment</td>
<td>n. 序列，成直线 </td>
</tr>
<tr>
<td>chunk</td>
<td>n. 厚块，大部分</td>
</tr>
<tr>
<td>big</td>
<td>a. 大的，重要的</td>
</tr>
<tr>
<td>unpack</td>
<td>v. 拆开，卸，分开</td>
</tr>
<tr>
<td>book</td>
<td>n. 书，手册，源程序块</td>
</tr>
<tr>
<td>desk</td>
<td>n. 书桌，控制台，面板 </td>
</tr>
<tr>
<td>equipment</td>
<td>n. 设备，装备，仪器 </td>
</tr>
<tr>
<td>typewriter</td>
<td>n. 打字机</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-96"><a href="#list-96" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>clipper</td>
<td>n. 限幅器，钳位器</td>
</tr>
<tr>
<td>sensitive</td>
<td>a. 敏感的，灵敏的 </td>
</tr>
<tr>
<td>reduction</td>
<td>n. 减化，还原，减少 </td>
</tr>
<tr>
<td>indentation</td>
<td>n. 缩进，缩排</td>
</tr>
<tr>
<td>term</td>
<td>n. 项，条款，术语</td>
</tr>
<tr>
<td>terminology</td>
<td>n. 术语</td>
</tr>
<tr>
<td>terminating</td>
<td>n. 终止，终结，收信</td>
</tr>
<tr>
<td>terminal</td>
<td>n. 终端，端子</td>
</tr>
<tr>
<td>terminate</td>
<td>v. 端接，终止</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-97"><a href="#list-97" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>determine</td>
<td>v. 确定</td>
</tr>
<tr>
<td>determined</td>
<td>a. 坚决的，毅然的 </td>
</tr>
<tr>
<td>accommodate</td>
<td>v. 调节，适应   </td>
</tr>
<tr>
<td>gain</td>
<td>n. 增益(系数) </td>
</tr>
<tr>
<td>ascending</td>
<td>a. 增长的，向上的 </td>
</tr>
<tr>
<td>augment</td>
<td>v. 增加，添加，扩充 </td>
</tr>
<tr>
<td>increment</td>
<td>n. 增量，加１，递增 </td>
</tr>
<tr>
<td>obsolete</td>
<td>a. 作废的，过时的 </td>
</tr>
<tr>
<td>motif</td>
<td>n. 主题，要点，特色 </td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-98"><a href="#list-98" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>subject</td>
<td>n. 主题，源</td>
</tr>
<tr>
<td>job</td>
<td>n. 作业</td>
</tr>
<tr>
<td>stream</td>
<td>n. 流</td>
</tr>
<tr>
<td>locking</td>
<td>n. 锁定，加锁</td>
</tr>
<tr>
<td>progress</td>
<td>n. 进度，进展</td>
</tr>
<tr>
<td>differentiate</td>
<td>v. 区别，分辨 </td>
</tr>
<tr>
<td>distinction</td>
<td>n. 区别，相异，特性 </td>
</tr>
<tr>
<td>distinguish</td>
<td>v. 区别，辨识</td>
</tr>
<tr>
<td>basis</td>
<td>n. 基础，座</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-99"><a href="#list-99" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>underlying</td>
<td>a. 基础的，根本的</td>
</tr>
<tr>
<td>fundamental</td>
<td>a. 基本的，根本的 </td>
</tr>
<tr>
<td>sound</td>
<td>n. 声音，音响</td>
</tr>
<tr>
<td>tone</td>
<td>n. 音调，音色，色调</td>
</tr>
<tr>
<td>vital</td>
<td>a. 生动的，不可缺少的</td>
</tr>
<tr>
<td>social</td>
<td>a. 社会的 </td>
</tr>
<tr>
<td>national</td>
<td>a. 国家的</td>
</tr>
<tr>
<td>sale</td>
<td>n. 销售，销路 </td>
</tr>
<tr>
<td>agree</td>
<td>v. 符合，相同</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-100"><a href="#list-100" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>course</td>
<td>n. 过程，航向，课程</td>
</tr>
<tr>
<td>exceeded</td>
<td>a. 过度的，非常的</td>
</tr>
<tr>
<td>iterative</td>
<td>a. 迭代的 </td>
</tr>
<tr>
<td>inclusive</td>
<td>a. 包括的，内含的 </td>
</tr>
<tr>
<td>charm</td>
<td>n. 吸引力</td>
</tr>
<tr>
<td>hit</td>
<td>v. 命中，瞬时干扰</td>
</tr>
<tr>
<td>numeral</td>
<td>n. &amp; n. 数字的，数码</td>
</tr>
<tr>
<td>numeric</td>
<td>n. &amp; a. 数字的，分数</td>
</tr>
<tr>
<td>numerous</td>
<td>a. 为数众多的，无数的</td>
</tr>
</tbody>
</table>
</div>
<h5 id="list-101"><a href="#list-101" class="headerlink" title="list"></a>list</h5><div class="table-container">
<table>
<thead>
<tr>
<th>word</th>
<th>trans</th>
</tr>
</thead>
<tbody>
<tr>
<td>numerical</td>
<td>a. 数量的，数字的</td>
</tr>
<tr>
<td>digital</td>
<td>a. 数字的</td>
</tr>
<tr>
<td>digit</td>
<td>n. 数字，位数，位</td>
</tr>
<tr>
<td>combo</td>
<td>n. 二进位组合码</td>
</tr>
<tr>
<td>combine</td>
<td>v. 组合，联合</td>
</tr>
<tr>
<td>combination</td>
<td>n. 结合，组合</td>
</tr>
<tr>
<td>cord</td>
<td>n. 绳子，电线</td>
</tr>
<tr>
<td>record</td>
<td>n. 记录</td>
</tr>
<tr>
<td>according to</td>
<td>a. 按照，根据</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
  </entry>
  <entry>
    <title>数学大观</title>
    <url>/2020/05/%E6%95%B0%E5%AD%A6%E5%A4%A7%E8%A7%82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="代数"><a href="#代数" class="headerlink" title="代数"></a>代数</h3><h4 id="线性代数的本质"><a href="#线性代数的本质" class="headerlink" title="线性代数的本质"></a>线性代数的本质</h4><p><a href="https://www.bilibili.com/video/BV1s4411S78P?p=3" target="_blank" rel="noopener">线性代数的本质</a></p>
<blockquote>
<p>数学需要的不是天赋，而是少量的自由想象，但想象太过自由又会陷入疯狂。</p>
<p>—安古斯.罗杰斯</p>
</blockquote>
<h4 id="向量的概念"><a href="#向量的概念" class="headerlink" title="向量的概念"></a>向量的概念</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">向量</span><br><span class="line">	物理学专业视角看向量（决定向量是它的长度和所指的方向）</span><br><span class="line">	计算机专业视角看向量（向量是有序数字列表）比如：房屋的价格和房屋的面积。</span><br><span class="line">	数学专业视角看向量（具有概括性）</span><br><span class="line">	</span><br><span class="line">向量的运算</span><br><span class="line">	加(向量延长)</span><br><span class="line">	数乘（向量缩放）</span><br><span class="line">	</span><br><span class="line">基向量</span><br><span class="line">	基向量决定向量张成的形态，在数据分析中向量的基是不同的类别</span><br><span class="line">	向量共线，两个向量叠加了。</span><br><span class="line">	零向量待在原点</span><br><span class="line"></span><br><span class="line">线性组合</span><br><span class="line">	两个数乘向量的和被称为这两个向量的线性组合。</span><br><span class="line">	</span><br><span class="line">给定向量张成的空间</span><br><span class="line">	给定所有向量线性组合的向量的集合</span><br><span class="line">	两个三维向量张成的空间是个平面</span><br><span class="line">	</span><br><span class="line">线性相关</span><br><span class="line">	对于张成的空间没有贡献的向量</span><br><span class="line">	一个向量可以表示为其他向量的线性组合，因为这个向量已经落在其他向量张成的空间上</span><br><span class="line">	</span><br><span class="line">线性无关</span><br><span class="line">	所有向量给张成的空间增加了维度就叫线性无关的</span><br><span class="line">	</span><br><span class="line">线性变换(变换其实是函数)</span><br><span class="line">	<span class="number">1</span>、直线再变换后仍保持为直线，不能有所弯曲</span><br><span class="line">	<span class="number">2</span>、原点必须保持固定</span><br><span class="line">	</span><br><span class="line">复合变换</span><br><span class="line">	矩阵乘法</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV1uQ4y1M7yG?from=search&amp;seid=8311637673933044236" target="_blank" rel="noopener">中国科学院 席南华院士-代数</a></p>
<ul>
<li>代数运算 +，-，* ，/</li>
<li>多项式</li>
</ul>
<h4 id="集合与映射"><a href="#集合与映射" class="headerlink" title="集合与映射"></a>集合与映射</h4><figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">集合</span><br><span class="line"># 集合没法定义，可以解释</span><br><span class="line"># 现代数学的重要基础</span><br><span class="line">集合的记法</span><br><span class="line">    枚举法 &#123;<span class="number">1</span>,<span class="number">2</span>,...,n&#125;</span><br><span class="line">    通过性质描述 S =&#123;(<span class="symbol">x</span>,<span class="symbol">y</span>)|<span class="symbol">x</span>^<span class="number">2</span>+<span class="symbol">y</span>^<span class="number">2</span>=<span class="number">1</span>,<span class="symbol">x</span>,<span class="symbol">y</span> 实数&#125;</span><br><span class="line">    固定的记号</span><br><span class="line">        Z 整数级 (德文)</span><br><span class="line">        N 自然数 &#123;<span class="number">1</span>,<span class="number">2</span>,...,n&#125;</span><br><span class="line">        Q 有理数集</span><br><span class="line">        R 实数集</span><br><span class="line">        C 复数集</span><br><span class="line">        空集</span><br><span class="line">        一切</span><br><span class="line">    集合的关系</span><br><span class="line">        元素与集合的关系</span><br><span class="line">            属于</span><br><span class="line">            不属于</span><br><span class="line">        集合与集合的关系</span><br><span class="line">            子集</span><br><span class="line">                包含</span><br><span class="line">                相等</span><br><span class="line">                # 很多时候集合形态不一 &#123;<span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span>，...n&#125; &#123;<span class="symbol">x</span>|<span class="symbol">x</span>,<span class="symbol">x</span> 是自然数&#125;</span><br><span class="line">            # 约定 空集是任何集合的子集</span><br><span class="line">    集合之间的运算</span><br><span class="line">        并</span><br><span class="line">        交</span><br><span class="line">        差</span><br><span class="line">        补</span><br><span class="line">        笛卡尔积 AxB = &#123;(<span class="symbol">x</span>,<span class="symbol">y</span>)|<span class="symbol">x</span>,<span class="symbol">y</span>属于A&#125; (<span class="symbol">x</span>,<span class="symbol">y</span>) 是有序对</span><br><span class="line">    集合运算定律</span><br><span class="line"></span><br><span class="line">有限集 |<span class="symbol">x</span>|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">映射</span><br><span class="line">    X,Y 集合</span><br><span class="line">    X 到 Y 的映射指按照一定规则把X中每个元素都有Y中一个元素与之对应。</span><br><span class="line">    记号 F：X -&gt; Y</span><br><span class="line">重要的映射</span><br><span class="line">    单射：</span><br><span class="line">    满射：全部映射</span><br><span class="line">    双射：即使单射，又是满射。</span><br><span class="line">    # 双射有逆映射</span><br><span class="line">    # 重要的两个概念，恒等映射，映射合成。</span><br><span class="line">恒等映射:</span><br><span class="line"></span><br><span class="line">映射合成gf: 类似复函数,（gf 是乘法）</span><br><span class="line">    g(f(<span class="symbol">x</span>))</span><br><span class="line">    左逆</span><br><span class="line">    右逆</span><br><span class="line">    双边逆</span><br><span class="line">映射相等</span><br><span class="line">    </span><br><span class="line">映射运算定律</span><br><span class="line">    结合性</span><br><span class="line">    </span><br><span class="line">像</span><br><span class="line">    原像 X -&gt;自变量集合</span><br><span class="line">    <span class="symbol">y</span> 的纤维（几何里用）</span><br><span class="line"></span><br><span class="line">置换</span><br><span class="line">    从X的自身的双射称为<span class="symbol">x</span>的一个置换，S</span><br><span class="line">简单置换 恒等置换</span><br><span class="line">一般置换</span><br><span class="line">循环（置换）</span><br><span class="line">	k 称 长度</span><br><span class="line">	约定：长度为<span class="number">1</span>，恒等置换 eT=Te=T</span><br><span class="line">	两个不相交的循环</span><br><span class="line">	定理：每一个置换都可以写成不相交的循环的乘积</span><br><span class="line">	</span><br><span class="line">对换</span><br><span class="line">	改变两个元素的置换称为对换</span><br></pre></td></tr></table></figure>
<h4 id="方程"><a href="#方程" class="headerlink" title="方程"></a>方程</h4> <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># **变元在方程中意义**：<span class="number">10</span>个苹果<span class="number">2</span>人分 <span class="keyword">or</span> <span class="number">50</span>个苹果<span class="number">2</span>人分，x 都没有变化？ </span><br><span class="line"># 方程：<span class="number">2</span>x=<span class="number">10</span>；<span class="number">2</span>x=<span class="number">50</span></span><br><span class="line">高次方程</span><br><span class="line">    高次方程求解引出代数系统</span><br><span class="line">    代数系统</span><br><span class="line">        群</span><br><span class="line">        环</span><br><span class="line">        域</span><br><span class="line"></span><br><span class="line">多元方程一次</span><br><span class="line"># <span class="number">20</span>个苹果分给 <span class="number">3</span>个大和尚，<span class="number">2</span>个小和尚，各分多少个？。<span class="number">3</span>x+<span class="number">2</span>y=<span class="number">20</span>；x,y 表示类别；<span class="number">3</span>，<span class="number">2</span> 表示分量(系数)；<span class="number">20</span> 表示(总量)常数项</span><br><span class="line"># 扩展到高次</span><br><span class="line"></span><br><span class="line">多元方程高次</span><br><span class="line"># <span class="number">3</span>x^<span class="number">2</span>+<span class="number">2</span>y=<span class="number">20</span> x^<span class="number">2</span>表示意义重复次数</span><br><span class="line"># y=<span class="number">4</span> 则两个小和尚分到<span class="number">8</span>个，<span class="number">3</span>个大和尚分到<span class="number">12</span>个，每个人分<span class="number">4</span>个。大和尚们上午分一次，下午分一次。哈哈</span><br><span class="line"># 可计算的方程，线性方程(多元一次)</span><br><span class="line"></span><br><span class="line">线性方程组</span><br><span class="line"># n个多元一次方程组成</span><br><span class="line">    系数</span><br><span class="line">    常数</span><br><span class="line">    记号: m1 </span><br><span class="line">        # 注意记号混淆导致求解过程出错</span><br><span class="line">        m 表示第几个方程</span><br><span class="line">        <span class="number">1</span> 表示位置量</span><br><span class="line"></span><br><span class="line">线性方程组求解</span><br><span class="line">    无解(等式矛盾)</span><br><span class="line">        有时需要逼近</span><br><span class="line">    有解（一定能够推导出恒等式 如：<span class="number">0</span>=b1）</span><br><span class="line">        有多少解</span><br><span class="line">        唯一解</span><br><span class="line"> # 线性方程组是有结构的，相互之间可以做运算</span><br><span class="line"></span><br><span class="line">求解的方法</span><br><span class="line">    高斯消元法</span><br><span class="line">        交换两个方程 （<span class="number">1</span>型初等变换）</span><br><span class="line">        某个方程加上另一个方程的倍数 （<span class="number">2</span>型初等变换）</span><br><span class="line">    等价关系 有共同解的方程组。表示意义:事物间的联系。 无解方程等价。</span><br><span class="line">    &gt; 理论指导实践。直接可以求解，就不需要理论。</span><br><span class="line"></span><br><span class="line">矩阵</span><br><span class="line">   系数矩阵：方程系数列式</span><br><span class="line">   增广矩阵：方程的系数+方程的常数项</span><br><span class="line">   阶梯型矩阵（消元的结果）</span><br><span class="line">   齐次方程组 常数项都为零的方程组（一定有解）</span><br><span class="line">        当一般线性方程组 m=n 有唯一解，齐次方程组有 <span class="number">0</span> 解</span><br><span class="line"></span><br><span class="line">行列式（矩阵的一个从属的数）</span><br><span class="line">    二元二次方程</span><br><span class="line">        消元法（进行推导）</span><br><span class="line">            乘倍数</span><br><span class="line">            再相减</span><br><span class="line">        猜测（利用消元法验证）</span><br><span class="line">            分子 把未知量系数换成常数项</span><br><span class="line">            分母 方程的矩阵</span><br><span class="line"></span><br><span class="line">笛卡尔积： 线性方程组，每个数组看着元素</span><br><span class="line">	 加法</span><br><span class="line">	 乘法</span><br><span class="line">	 	纯量乘法</span><br><span class="line">向量空间（长度为n的行向量空间）</span><br><span class="line"></span><br><span class="line">运算的性质</span><br><span class="line">	加法</span><br><span class="line">		交换律</span><br><span class="line">		结合律</span><br><span class="line">		零元</span><br><span class="line">		负元</span><br><span class="line">	纯量乘法</span><br><span class="line">		X*<span class="number">1</span>=X</span><br><span class="line">		(a+b)X = aX+bX</span><br><span class="line"> 		(ab)x = a(bx)</span><br><span class="line"> 		</span><br><span class="line"> 线性组合（数列 + 向量，结果仍然落在向量空间中）</span><br><span class="line"> 	线性相关 （线性组合k系数有一个不为等于<span class="number">0</span>）</span><br><span class="line"> 	线性无关 （线性组合k系数全为<span class="number">0</span>）</span><br><span class="line"></span><br><span class="line">线性子空间(线性子空间)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>线性方程</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机英语</title>
    <url>/2020/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="计算机专业-（Computer-Science-计算机科学）"><a href="#计算机专业-（Computer-Science-计算机科学）" class="headerlink" title="计算机专业 （Computer Science 计算机科学）"></a>计算机专业 （Computer Science 计算机科学）</h2><h3 id="美国计算机专业院校排名前十-University-Rankings"><a href="#美国计算机专业院校排名前十-University-Rankings" class="headerlink" title="美国计算机专业院校排名前十 University Rankings"></a>美国计算机专业院校排名前十 University Rankings</h3><ul>
<li><a href="https://www.cmu.edu/" target="_blank" rel="noopener">卡耐基梅隆大学</a>    Carnegie Mellon University    5    Pittsburgh, PA</li>
<li><a href="https://www.mit.edu/" target="_blank" rel="noopener">麻省理工学院</a>    Massachusetts Institute of Technology    5    Cambridge, MA</li>
<li><a href="https://www.stanford.edu/" target="_blank" rel="noopener">斯坦福大学</a>    Stanford University    5    Stanford, CA</li>
<li><a href="https://www.berkeley.edu/" target="_blank" rel="noopener">加州大学伯克利分校</a>    University of California—Berkeley    5    Berkeley, CA</li>
<li>伊利诺伊大学厄本那-香槟分校    University of Illinois—Urbana-Champaign    4.6    Urbana, IL</li>
<li>康奈尔大学    Cornell University    4.5    Ithaca, NY</li>
<li>华盛顿大学    University of Washington    4.5    Seattle, WA</li>
<li>佐治亚理工学院    Georgia Institute of Technology    4.4    Atlanta, GA</li>
<li>普林斯顿大学    Princeton University    4.4    Princeton, NJ</li>
<li>德克萨斯大学奥斯汀分校    University of Texas—Austin    4.3    Austin, TX</li>
</ul>
<h3 id="国内计算机专业院校排名"><a href="#国内计算机专业院校排名" class="headerlink" title="国内计算机专业院校排名"></a>国内计算机专业院校排名</h3><ul>
<li><a href="https://www.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学</a></li>
<li><a href="https://www.nudt.edu.cn/" target="_blank" rel="noopener">国防科学技术大学</a></li>
<li><a href="https://www.pku.edu.cn/" target="_blank" rel="noopener">北京大学</a></li>
<li><a href="https://www.buaa.edu.cn/" target="_blank" rel="noopener">北京航空航天大学</a></li>
<li>哈尔滨工业大学</li>
<li>上海交通大学</li>
<li>浙江大学</li>
<li>南京大学</li>
<li>中国科学技术大学</li>
<li>东北大学</li>
</ul>
<h3 id="第一类，研究理论层面"><a href="#第一类，研究理论层面" class="headerlink" title="第一类，研究理论层面"></a>第一类，研究理论层面</h3><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">计算理论 Theory <span class="keyword">of</span> computation</span><br><span class="line">计算几何学 Computational Geometry</span><br><span class="line">并行计算 <span class="keyword">Parallel</span> Computation</span><br><span class="line">形式化方法 Formal <span class="function"><span class="keyword">Method</span></span></span><br><span class="line"><span class="function">程序设计语言理论 <span class="title">Theory</span> <span class="title">of</span> <span class="title">programming</span> <span class="title">language</span></span></span><br><span class="line"><span class="function">人工智能 <span class="title">Artificial</span> <span class="title">Intelligence</span></span></span><br></pre></td></tr></table></figure>
<h3 id="第二类，系统软件层面"><a href="#第二类，系统软件层面" class="headerlink" title="第二类，系统软件层面"></a>第二类，系统软件层面</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">体系结构<span class="built_in"> System </span>Architecture</span><br><span class="line">网络与通讯 Networkand Communication</span><br><span class="line">面向对象 Object-oriented</span><br><span class="line">约束程序设计 Programming Design</span><br><span class="line">软件工程 Software Engineering</span><br><span class="line">软件质量控制 Software Quality Control</span><br><span class="line">实时系统与嵌入式系统 Real-timeand Imbedded System</span><br><span class="line">数据库系统 Database System</span><br><span class="line">大规模计算中的 I/O</span><br></pre></td></tr></table></figure>
<h3 id="第三类，计算机应用层面"><a href="#第三类，计算机应用层面" class="headerlink" title="第三类，计算机应用层面"></a>第三类，计算机应用层面</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">科学与工程计算</span><br><span class="line">电子商务与数字化图书馆</span><br><span class="line">人机交互</span><br><span class="line">计算机教育</span><br></pre></td></tr></table></figure>
<p><a href="https://www.mit.edu/education/schools-and-departments/" target="_blank" rel="noopener">MIT 院系</a><br><a href="https://www.eecs.mit.edu/" target="_blank" rel="noopener">MIT EECS</a><br><a href="https://cs.stanford.edu/" target="_blank" rel="noopener">Stanford CS</a></p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
  </entry>
  <entry>
    <title>全文索引原理</title>
    <url>/2020/05/%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">Elasticsearch: 权威指南</a></p>
<h3 id="概念-Concepts"><a href="#概念-Concepts" class="headerlink" title="概念 Concepts"></a>概念 Concepts</h3><ul>
<li>全文搜索<ul>
<li>倒排索引<ul>
<li>分词</li>
<li>建立索引</li>
</ul>
</li>
<li>相关性评分<ul>
<li>布尔模型</li>
<li>评分函数<ul>
<li>单词评分<ul>
<li>词频</li>
<li>逆向词频</li>
<li>字段长度归一值</li>
</ul>
</li>
<li>多词评分<ul>
<li>向量空间模型<ul>
<li>维数</li>
<li>TF/IDF算法</li>
<li>余弦近似度</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><blockquote>
<p>一个倒排索引由文档中所有不重复词的列表构成。</p>
<p>中文的词是词语（我们）中文词语间没有空格需要先分词。<br>英文的词是单词(example)</p>
</blockquote>
<p>在倒排索引中，词叫做 tokens。每个文档都被拆分成由不同词组成。</p>
<h3 id="相关性评分"><a href="#相关性评分" class="headerlink" title="相关性评分"></a>相关性评分</h3><p>布尔模型用来找出匹配的文档。</p>
<p>评分函数用来对文档相关性排序。</p>
<ul>
<li>词频 tf</li>
</ul>
<p>词在文档中出现的频度是多少？频度越高，权重 越高 。</p>
<blockquote>
<p>tf(t in d) = √frequency</p>
<p>词 t 在文档 d 的词频（ tf ）是该词在文档中出现次数的平方根。</p>
</blockquote>
<ul>
<li>逆向文档频率</li>
</ul>
<p>词在集合所有文档里出现的频率是多少？频次越高，权重 越低 。</p>
<blockquote>
<p>idf(t) = 1 + log ( numDocs / (docFreq + 1))</p>
<p>词 t 的逆向文档频率（ idf ）是：索引中文档数量除以所有包含该词的文档数，然后求其对数。</p>
</blockquote>
<ul>
<li>字段的长度归一值</li>
</ul>
<p>字段的长度是多少？字段越短，字段的权重 越高 。</p>
<blockquote>
<p>norm(d) = 1 / √numTerms</p>
<p>字段长度归一值（ norm ）是字段中词数平方根的倒数。</p>
<p>以下三个因素是在索引时计算并存储的。</p>
</blockquote>
<ul>
<li>向量空间模型</li>
</ul>
<p>进行多查询时，根据每个词的权重组成一个向量。然后和文档的向量比较。角度越相似，评分越高。</p>
<p><a href="https://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html" target="_blank" rel="noopener">余弦近似度</a></p>
<h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><p><a href="https://blog.csdn.net/Kevin_cc98/article/details/73742037" target="_blank" rel="noopener">欧式距离、标准化欧式距离、马氏距离、余弦距离</a></p>
]]></content>
      <categories>
        <category>BIGDATA</category>
      </categories>
      <tags>
        <tag>lucene</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible使用</title>
    <url>/2020/05/Ansible%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p><a href="https://docs.ansible.com/" target="_blank" rel="noopener"> Ansible </a></p>
<p><a href="http://www.ansible.com.cn/" target="_blank" rel="noopener"> Ansible 中文  </a></p>
<p><a href="https://github.com/ansible/ansible.git" target="_blank" rel="noopener"> Ansible 源码</a></p>
</blockquote>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install ansible</span><br><span class="line"></span><br><span class="line"><span class="comment"># git 源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ansible/ansible.git</span><br><span class="line"><span class="built_in">cd</span> ./ansible</span><br><span class="line">make rpm</span><br><span class="line">sudo rpm -Uvh ./rpm-build/ansible-*.noarch.rpm</span><br></pre></td></tr></table></figure>
<h2 id="主配置文件-INI-格式"><a href="#主配置文件-INI-格式" class="headerlink" title="主配置文件 INI 格式"></a>主配置文件 INI 格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 、; 为注释</span></span><br><span class="line">key = value 格式</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面指定的这几种方式顺序访问，配置遵循先到先得，后面的全部忽略。</span></span><br><span class="line">ANSIBLE_CONFIG (environment variable <span class="keyword">if</span> <span class="built_in">set</span>)</span><br><span class="line">ansible.cfg (<span class="keyword">in</span> the current directory)</span><br><span class="line">~/.ansible.cfg (<span class="keyword">in</span> the home directory)</span><br><span class="line">/etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.ansible.com/ansible/latest/reference_appendices/config.html#ansible-configuration-settings" target="_blank" rel="noopener"> ansible 配置变量查询</a></p>
<h2 id="相关概念-Concepts"><a href="#相关概念-Concepts" class="headerlink" title="相关概念 Concepts"></a>相关概念 Concepts</h2><ul>
<li>控制节点 control node</li>
<li>被管节点 managed nodes</li>
<li>主机列表 Inventory</li>
<li>模块 modules</li>
<li>任务 tasks</li>
<li><p>剧本 Playbooks</p>
</li>
<li><p>工作流程 workflow</p>
<ul>
<li>选择主机 selecting hosts</li>
<li>连接远程节点 connecting to remote nodes</li>
<li>执行模块 executing modules</li>
<li>下一步 next steps</li>
</ul>
</li>
</ul>
<h2 id="常见-ad-command-使用方法"><a href="#常见-ad-command-使用方法" class="headerlink" title="常见 ad-command 使用方法"></a>常见 ad-command 使用方法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/ansible/hosts  <span class="comment"># 默认的 inventory (-i 指定 inventory)</span></span><br><span class="line">ansible all -m ping <span class="comment"># 尝试连通</span></span><br><span class="line">ansible all -a <span class="string">"/bin/echo hello"</span> <span class="comment"># 执行 command </span></span><br><span class="line">ansible all -m ping -u bruce <span class="comment"># 使用 bruce 用户 </span></span><br><span class="line">ansible all -m ping -u bruce --become <span class="comment"># sudo</span></span><br></pre></td></tr></table></figure>
<h2 id="主机列表-Inventory"><a href="#主机列表-Inventory" class="headerlink" title="主机列表 Inventory"></a>主机列表 Inventory</h2><ul>
<li>Inventory<ul>
<li>主机与组</li>
<li>主机变量</li>
<li>组的变量</li>
<li>子组</li>
</ul>
</li>
</ul>
<h3 id="INI-格式"><a href="#INI-格式" class="headerlink" title="INI 格式"></a>INI 格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.0.2</span><br><span class="line">www.example.com</span><br><span class="line">[group1]</span><br><span class="line">192.168.0.5</span><br><span class="line">192.168.0.6</span><br></pre></td></tr></table></figure>
<h3 id="YAML-格式"><a href="#YAML-格式" class="headerlink" title="YAML 格式"></a>YAML 格式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">all:</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">        <span class="attr">192.168.0.2:</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">        <span class="attr">group1:</span></span><br><span class="line">            <span class="attr">hosts:</span></span><br><span class="line">              <span class="attr">192.168.0.5:</span></span><br><span class="line">              <span class="attr">192.168.0.6:</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>默认的组是all</p>
</blockquote>
<h3 id="添加一堆主机（模式匹配）"><a href="#添加一堆主机（模式匹配）" class="headerlink" title="添加一堆主机（模式匹配）"></a>添加一堆主机（模式匹配）</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[group1]</span></span><br><span class="line"><span class="selector-tag">www</span><span class="selector-attr">[01:50]</span><span class="selector-class">.blyanqi</span><span class="selector-class">.com</span></span><br><span class="line"><span class="selector-attr">[databases]</span></span><br><span class="line"><span class="selector-tag">db-</span><span class="selector-attr">[a:f]</span><span class="selector-class">.example</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure>
<h3 id="在-Inventory-使用变量"><a href="#在-Inventory-使用变量" class="headerlink" title="在 Inventory 使用变量"></a>在 Inventory 使用变量</h3><ul>
<li>主机变量<ul>
<li>ansible_connection=ssh</li>
<li>ansible_user=ansible</li>
</ul>
</li>
<li>连接变量<ul>
<li>ansible_port</li>
<li>ansible_host</li>
</ul>
</li>
<li>别名</li>
</ul>
<h4 id="主机变量"><a href="#主机变量" class="headerlink" title="主机变量"></a>主机变量</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[group1]</span><br><span class="line">host1 <span class="attribute">http_port</span>=80 <span class="attribute">maxRequestPerChild</span>=808</span><br><span class="line">host1 <span class="attribute">http_port</span>=303 <span class="attribute">maxRequestPerChild</span>=909</span><br></pre></td></tr></table></figure>
<h4 id="连接变量"><a href="#连接变量" class="headerlink" title="连接变量"></a>连接变量</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[group2]</span></span><br><span class="line">other1.example.com ansible_connection=ssh ansible_user=myuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 别名</span></span><br><span class="line">jumper ansible_port=5555 ansible_host=192.168.0.50</span><br></pre></td></tr></table></figure>
<h4 id="共享变量-vars"><a href="#共享变量-vars" class="headerlink" title="共享变量 vars"></a>共享变量 vars</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[webserver]</span></span><br><span class="line">host1</span><br><span class="line">host2</span><br><span class="line"><span class="section">[webserver:vars]</span> <span class="comment"># 此处是共享的变量 </span></span><br><span class="line"><span class="attr">ntp_server</span>=ntp.blyanqi.com</span><br></pre></td></tr></table></figure>
<h3 id="分多组"><a href="#分多组" class="headerlink" title="分多组"></a>分多组</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[web1]</span></span><br><span class="line">host1</span><br><span class="line">host2</span><br><span class="line"><span class="section">[web2]</span></span><br><span class="line">host3</span><br><span class="line">host4</span><br><span class="line"></span><br><span class="line"><span class="section">[web:children]</span> <span class="comment"># 包含多个组</span></span><br><span class="line">web1</span><br><span class="line">web2</span><br><span class="line"></span><br><span class="line"><span class="section">[web:vars]</span> <span class="comment"># 组共享变量</span></span><br><span class="line"><span class="attr">halon_system_timeout</span>=<span class="number">30</span></span><br></pre></td></tr></table></figure>
<h4 id="合并多个变量"><a href="#合并多个变量" class="headerlink" title="合并多个变量"></a>合并多个变量</h4><blockquote>
<p>all group -&gt; parent group -&gt;child group -&gt;host<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认合并按照字母表顺序，</span></span><br><span class="line"><span class="comment"># 或者 最近节点优先原则覆盖之前的</span></span><br><span class="line"><span class="string">for</span> <span class="string">example：</span> <span class="comment"># b_group 覆盖 a_group</span></span><br><span class="line"><span class="attr">a_group:</span></span><br><span class="line">    <span class="attr">testvar:</span> <span class="string">a</span></span><br><span class="line">    <span class="attr">ansible_group_priority:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">b_group:</span></span><br><span class="line">    <span class="attr">testvar:</span> <span class="string">b</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="指定多个-Inventory-源"><a href="#指定多个-Inventory-源" class="headerlink" title="指定多个 Inventory 源"></a>指定多个 Inventory 源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 -i 选项</span></span><br><span class="line">ansible-playbook get_logs.yml -i staging -i production</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定目录 动态的 Inventory</span></span><br><span class="line">inventory/</span><br><span class="line">  openstack.yml          <span class="comment"># configure inventory plugin to get hosts from Openstack cloud</span></span><br><span class="line">  dynamic-inventory.py   <span class="comment"># add additional hosts with dynamic inventory script</span></span><br><span class="line">  static-inventory       <span class="comment"># add static hosts and groups</span></span><br><span class="line">  group_vars/</span><br><span class="line">    all.yml              <span class="comment"># assign variables to all hosts</span></span><br><span class="line"></span><br><span class="line">ansible-playbook example.yml -i inventory</span><br></pre></td></tr></table></figure>
<h4 id="ansible-Inventory-变量"><a href="#ansible-Inventory-变量" class="headerlink" title="ansible Inventory 变量"></a><a href="https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters" target="_blank" rel="noopener">ansible Inventory 变量</a></h4><ul>
<li>connection 变量</li>
<li>ssh connection 变量</li>
<li>远程主机环境参数</li>
<li>非 ssh 连接类型</li>
</ul>
<h2 id="ansible-Inventory-插件"><a href="#ansible-Inventory-插件" class="headerlink" title="ansible Inventory 插件"></a><a href="https://docs.ansible.com/ansible/latest/plugins/inventory.html#inventory-plugins" target="_blank" rel="noopener">ansible Inventory 插件</a></h2><h2 id="动态的-Inventory"><a href="#动态的-Inventory" class="headerlink" title=" 动态的 Inventory "></a><a href="https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html#intro-dynamic-inventory" target="_blank" rel="noopener"> 动态的 Inventory </a></h2><h2 id="ad-hoc-Command"><a href="#ad-hoc-Command" class="headerlink" title="ad-hoc Command"></a>ad-hoc Command</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pattern 匹配主机</span></span><br><span class="line">$ ansible [pattern] -m [module] -a <span class="string">"[module options]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 atlanta 主机组 进行reboot</span></span><br><span class="line"><span class="comment"># -f 10 并发10个 process</span></span><br><span class="line"><span class="comment"># -u 使用的用户</span></span><br><span class="line"><span class="comment"># --become sudo 方式执行</span></span><br><span class="line"><span class="comment"># --ask-become-pass 提示方式执行</span></span><br><span class="line">ansible atlanta -a <span class="string">"/sbin/reboot"</span> -f 10 -u username --become [--ask-become-pass]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 shell 模块</span></span><br><span class="line">ansible raleigh -m shell -a <span class="string">'echo $TERM'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 copy 模块</span></span><br><span class="line"><span class="comment"># src 是源文件</span></span><br><span class="line"><span class="comment"># dest 目的文件</span></span><br><span class="line">ansible atlanta -m copy -a <span class="string">"src=/etc/hosts dest=/tmp/hosts"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file 模块 设置权限，所有者，属组</span></span><br><span class="line">ansible webservers -m file -a <span class="string">"dest=/srv/foo/b.txt mode=600 owner=mdehaan group=mdehaan"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">ansible webservers -m file -a <span class="string">"dest=/path/to/c mode=755 owner=mdehaan group=mdehaan state=directory"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除目录或文件</span></span><br><span class="line">ansible webservers -m file -a <span class="string">"dest=/path/to/c state=absent"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包管理 使用 yum 模块</span></span><br><span class="line"><span class="comment"># name 是包名</span></span><br><span class="line"><span class="comment"># state 是状态：present，latest，absent</span></span><br><span class="line">ansible webservers -m yum -a <span class="string">"name=acme state=present"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理用户和组 user 模块</span></span><br><span class="line">ansible all -m user -a <span class="string">"name=foo password=&lt;crypted password here&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理服务 service 模块</span></span><br><span class="line"><span class="comment"># state：started，restarted，stopped 启动，重启，停止</span></span><br><span class="line">ansible webservers -m service -a <span class="string">"name=httpd state=started"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统信息</span></span><br><span class="line">ansible all -m setup</span><br></pre></td></tr></table></figure>
<h2 id="Playbook"><a href="#Playbook" class="headerlink" title="Playbook"></a>Playbook</h2><h3 id="playbook-目录结构"><a href="#playbook-目录结构" class="headerlink" title="playbook 目录结构"></a>playbook 目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── deploy.yml <span class="comment"># 入口文件</span></span><br><span class="line">├── product <span class="comment"># 发布环境</span></span><br><span class="line">│   └── tasks</span><br><span class="line">│       └── main.yml</span><br><span class="line">└── testbox <span class="comment"># 测试环境</span></span><br><span class="line">    └── tasks</span><br><span class="line">        └── main.yml</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Playbook</p>
<ul>
<li>主机 hosts:<ul>
<li>变量 vars:</li>
<li>排序 order: inventory | reverse_inventory |sorted |reverse_sorted |shuffle</li>
<li>用户 remote_user:</li>
<li>任务组 tasks:<ul>
<li>名称 name:</li>
<li>模块 module:<ul>
<li>name:</li>
<li>state:</li>
</ul>
</li>
<li>when:</li>
<li>become: yes</li>
<li>become_method: sudo</li>
</ul>
</li>
<li>操作 handlers:</li>
</ul>
</li>
</ul>
</li>
<li><p>变量</p>
</li>
<li>模板</li>
<li>条件</li>
<li>循环</li>
<li>块</li>
<li>高级用法</li>
<li>plays</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">sorted</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">enable</span> <span class="string">selinux</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">/sbin/setenforce</span> <span class="number">1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span> <span class="string">this</span> <span class="string">command</span> <span class="string">and</span> <span class="string">ignore</span> <span class="string">the</span> <span class="string">result</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">/usr/bin/somecommand</span> <span class="string">||</span> <span class="string">/bin/true</span></span><br><span class="line">        <span class="attr">ignore_errors:</span> <span class="literal">True</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">a</span> <span class="string">virtual</span> <span class="string">host</span> <span class="string">file</span> <span class="string">for</span> <span class="string">&#123;&#123;</span> <span class="string">vhost</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">template:</span></span><br><span class="line">          <span class="attr">src:</span> <span class="string">somefile.j2</span></span><br><span class="line">          <span class="attr">dest:</span> <span class="string">/etc/httpd/conf.d/&#123;&#123;</span> <span class="string">vhost</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">template</span> <span class="string">configuration</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">template.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/foo.conf</span></span><br><span class="line">      <span class="attr">notify:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">restart</span> <span class="string">memcached</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">memcached</span></span><br><span class="line">        <span class="attr">service:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">memcached</span></span><br><span class="line">          <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line">        <span class="attr">service:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">apache</span></span><br><span class="line">          <span class="attr">state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure>
<h3 id="检查-Playbooks"><a href="#检查-Playbooks" class="headerlink" title="检查 Playbooks"></a>检查 Playbooks</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-lint verify-apache.yml</span><br><span class="line">ansible-playbook playbook.yml --list-hosts</span><br></pre></td></tr></table></figure>
<h3 id="执行-Playbooks"><a href="#执行-Playbooks" class="headerlink" title="执行 Playbooks"></a>执行 Playbooks</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook playbook.yml -f 10</span><br></pre></td></tr></table></figure>
<ul>
<li>Conventional Module<ul>
<li>Commands<ul>
<li>shell</li>
<li>command</li>
<li>script</li>
</ul>
</li>
<li>Files<ul>
<li>copy</li>
<li>file</li>
<li>find</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>inventory</tag>
        <tag>ad-hoc</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchitectureDesign</title>
    <url>/2020/05/ArchitectureDesign/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="web-业务架构演变"><a href="#web-业务架构演变" class="headerlink" title="web 业务架构演变"></a>web 业务架构演变</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">brower</span> <span class="string">-&gt;</span> <span class="string">webserver</span> <span class="string">-&gt;</span> <span class="string">db</span></span><br><span class="line"></span><br><span class="line"><span class="string">brower</span> <span class="string">-&gt;</span> <span class="string">LB</span> <span class="string">-&gt;</span> <span class="string">webserver</span> <span class="string">-&gt;</span> <span class="string">redis</span> <span class="string">-&gt;</span> <span class="string">db</span></span><br><span class="line"></span><br><span class="line"><span class="string">brower</span> <span class="string">-&gt;</span> <span class="string">LB</span> <span class="string">-&gt;</span> <span class="string">webserver</span> <span class="string">-&gt;</span> <span class="string">app(type1)</span> <span class="string">-&gt;</span> <span class="string">redis</span> <span class="string">-&gt;</span> <span class="string">db</span></span><br><span class="line">                          <span class="string">-&gt;</span> <span class="string">app(type2)</span> </span><br><span class="line"></span><br><span class="line"><span class="string">brower</span> <span class="string">-&gt;</span> <span class="string">LB(pool)</span> <span class="string">-&gt;</span> <span class="string">webserver(pool)</span> <span class="string">-&gt;</span> <span class="string">app(pool)</span> <span class="string">-&gt;</span> <span class="string">redis(pool)</span> <span class="string">-&gt;</span> <span class="string">db(read,write)</span></span><br><span class="line"></span><br><span class="line"><span class="string">brower</span> <span class="string">-&gt;</span> <span class="string">LB(pool)</span> <span class="string">-&gt;</span> <span class="string">webserver(pool)</span> <span class="string">-&gt;</span> <span class="string">app(pool)</span> <span class="string">-&gt;</span> <span class="string">redis(pool)</span> <span class="string">-&gt;</span> <span class="string">db(read,write)</span></span><br><span class="line">                                                                  <span class="string">-&gt;</span> <span class="string">mongodb</span> <span class="string">(read,write)</span></span><br></pre></td></tr></table></figure>
<h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">brower</span> <span class="string">-&gt;</span> <span class="string">LB(pool)</span> <span class="string">-&gt;</span> <span class="string">API</span> <span class="string">网关</span> <span class="string">-&gt;</span> <span class="string">服务注册/发现</span></span><br><span class="line">                              <span class="string">-&gt;</span> <span class="string">配置中心</span></span><br><span class="line">                              <span class="string">-&gt;</span> <span class="string">业务服务</span></span><br></pre></td></tr></table></figure>
<h2 id="容器化-web-业务架构"><a href="#容器化-web-业务架构" class="headerlink" title="容器化 web 业务架构"></a>容器化 web 业务架构</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">brower</span> <span class="string">-&gt;</span> <span class="string">LB(pool)</span> <span class="string">-&gt;</span> <span class="string">Ingress</span> <span class="string">pod</span> <span class="string">-&gt;</span> <span class="string">service</span> <span class="string">-&gt;</span> <span class="string">app</span> <span class="string">pod(label)</span> <span class="string">-&gt;</span> <span class="string">db</span> <span class="string">pod</span></span><br><span class="line">                                             <span class="string">-&gt;</span> <span class="string">sidecar</span> <span class="string">pod(proxy)</span></span><br><span class="line"><span class="string">--------------------------------</span> <span class="string">storage</span> <span class="string">-------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">App pod:</span></span><br><span class="line">    <span class="string">nginx</span> <span class="string">container</span></span><br><span class="line">    <span class="string">tomcat</span> <span class="string">container</span></span><br><span class="line">        <span class="string">springboot</span></span><br><span class="line">    <span class="string">sidecar</span> <span class="string">container</span></span><br><span class="line">    <span class="string">redis</span> <span class="string">container</span></span><br><span class="line">    <span class="string">db</span> <span class="string">container</span></span><br></pre></td></tr></table></figure>
<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">githup</span> <span class="string">-&gt;</span> <span class="string">hook</span> <span class="string">-&gt;</span> <span class="string">jenkins</span> <span class="string">-&gt;</span> <span class="string">开发环境</span></span><br><span class="line"><span class="string">gitlab</span>                    <span class="string">-&gt;</span> <span class="string">测试环境</span></span><br><span class="line"><span class="string">svn</span>                       <span class="string">-&gt;</span> <span class="string">生产环境</span> <span class="string">-&gt;</span> <span class="string">ansible</span></span><br><span class="line">                                     <span class="string">-&gt;</span> <span class="string">saltstack</span></span><br></pre></td></tr></table></figure>
<h2 id="EX-F-L-K日志分析"><a href="#EX-F-L-K日志分析" class="headerlink" title="EX(F,L)K日志分析"></a>EX(F,L)K日志分析</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">metric</span> <span class="string">-&gt;</span> <span class="string">kafka</span> <span class="string">-&gt;</span> <span class="string">Elasticsearch</span> <span class="string">-&gt;</span> <span class="string">kibana</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>architect</tag>
        <tag>web架构</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter跨终端开发</title>
    <url>/2020/05/flutter%E8%B7%A8%E7%BB%88%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://flutter.dev/docs/get-started/install/macos" target="_blank" rel="noopener">Flutter Install</a></p>
<p><a href="https://flutter.dev/docs" target="_blank" rel="noopener">Flutter doc</a></p>
<p><a href="https://github.com/nisrulz/flutter-examples" target="_blank" rel="noopener">Flutter conps samples</a></p>
<p><a href="https://flutter.github.io/samples/#" target="_blank" rel="noopener">Flutter All Samples</a></p>
<p><a href="https://material.io/design" target="_blank" rel="noopener">Material Design </a></p>
<p><a href="https://book.flutterchina.club/" target="_blank" rel="noopener">Flutter 中文</a></p>
<h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><ul>
<li><p>开发环境配置</p>
<ul>
<li>配置 JDK</li>
<li>Android studio</li>
<li>Flutter SDK</li>
<li>配置国内镜像</li>
<li>flutter doctor</li>
<li>安装 flutter 插件</li>
<li>创建 flutter 项目</li>
<li>开启手机调试模式<ul>
<li>连接数据线</li>
<li>手机开启调试模式</li>
<li>安装手机对应的 sdk 版本<ul>
<li>安装常用的 sdk 版本</li>
</ul>
</li>
<li>使用模拟器<ul>
<li>夜神模拟器</li>
<li>run app</li>
</ul>
</li>
<li>使用 vscode 开发<ul>
<li>install flutter 插件</li>
<li>install dart</li>
<li>选择项目</li>
<li>flutter run</li>
<li>连接夜神模拟器 nox<em>adb.exe connect 127.0.0.1:9-9-</em><ul>
<li>热加载</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>mac 使用<ul>
<li>mac 最新的系统</li>
<li>xcode</li>
<li>brew</li>
<li>配置 Flutter SDK<ul>
<li>配置环境变量</li>
<li>配置国内源</li>
</ul>
</li>
<li>验证 flutter -h</li>
<li>flutter doctor</li>
<li>创建 sudo flutter create flutterdemo</li>
<li>运行 flutter run</li>
<li>chmod -R 777 flutterdemo</li>
<li>使用 xcode 编译</li>
<li>使用 vscode 连接模拟器<blockquote>
<p>使用 Gradle 包管理</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Flutter 目录结构</p>
<ul>
<li>android</li>
<li>ios</li>
<li>build</li>
<li>lib</li>
<li>pubspec.yaml #配置文件</li>
<li>入口文件 main.dart<ul>
<li>runApp(app);</li>
</ul>
</li>
<li>组件(类)</li>
<li>Flutter 可以省略 new 关键字</li>
<li>自定义组件 class MyApp extends StatelessWidget{}<blockquote>
<p>Material 即可视化设计语言，标准化设计</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="First-app"><a href="#First-app" class="headerlink" title="First app"></a>First app</h3><ul>
<li>入口编写</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"><span class="comment">// 入口,实例化省略了new</span></span><br><span class="line">void main() =&gt; runApp(<span class="type">MyApp</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用定义，继承自无状态 Widget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="comment">// 返回一个 Material APP</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">MaterialApp</span>(</span><br><span class="line">        <span class="comment">// app title</span></span><br><span class="line">      title: <span class="symbol">'Welcome</span> to <span class="type">Flutter</span>',</span><br><span class="line">        <span class="comment">// 主页，Scaffold 主题</span></span><br><span class="line">      home: <span class="type">Scaffold</span>(</span><br><span class="line">        <span class="comment">// 头部</span></span><br><span class="line">        appBar: <span class="type">AppBar</span>(</span><br><span class="line">          title: <span class="type">Text</span>(<span class="symbol">'Welcome</span> to <span class="type">Flutter</span>'),</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// 主体</span></span><br><span class="line">        body: <span class="type">Center</span>(</span><br><span class="line">            <span class="comment">// 内部组件</span></span><br><span class="line">          child: <span class="type">Text</span>(<span class="symbol">'Hello</span> <span class="type">World</span>'),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用第三方插件</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、配置 pubspec.yaml</span><br><span class="line">    english_words: ^<span class="number">3.1</span><span class="number">.0</span></span><br><span class="line"><span class="number">2</span>、pub <span class="keyword">get</span> 获取 （自动获取）</span><br><span class="line">    $  flutter pub <span class="keyword">get</span></span><br><span class="line"><span class="number">3</span>、引入</span><br><span class="line">    <span class="keyword">import</span> <span class="string">'package:english_words/english_words.dart'</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加一个有状态的 Widget<ul>
<li>添加一个 state class</li>
<li>添加一个有状态 Widget</li>
<li>在 build 方法中加入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>添加一个无限的滚动条<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>APP -&gt; Theme -&gt; Container -&gt; Text</p>
</blockquote>
<ul>
<li><p>Widget</p>
<ul>
<li>StatelessWidget</li>
<li>StatefulWidget setState</li>
</ul>
</li>
<li><p>资源</p>
<ul>
<li>APP</li>
<li>容器 Container</li>
<li>文本 Text</li>
<li>图标 Icon</li>
<li>颜色 Colors</li>
<li>图片 Image,DecorationImage<ul>
<li>本地图片 Image.asset<ul>
<li>配置文件定义 asset</li>
<li>images<ul>
<li>2.0x</li>
<li>3.0x</li>
<li>4.0x</li>
</ul>
</li>
</ul>
</li>
<li>远程图片 Image.network</li>
</ul>
</li>
<li>表单 TextField</li>
<li>视频</li>
<li>音频</li>
</ul>
</li>
<li><p>组合资源</p>
<ul>
<li>列表 ListView，ListTile<ul>
<li>垂直列表</li>
<li>水平列表</li>
<li>动态列表 builder</li>
<li>网格列表 GridView</li>
</ul>
</li>
<li>Card</li>
<li>Tabs</li>
<li>侧边栏</li>
</ul>
</li>
<li><p>用户资源</p>
<ul>
<li>图文列表(新闻)</li>
<li>商品列表(商品)</li>
<li></li>
</ul>
</li>
</ul>
<ul>
<li><p>样式</p>
<ul>
<li>文本样式</li>
<li><p>图片样式</p>
<ul>
<li>大小</li>
<li>圆角，圆形 borderRadius ClipOval</li>
<li>颜色<ul>
<li>颜色模式</li>
</ul>
</li>
<li>适应 fit</li>
<li>平铺 repeat</li>
</ul>
</li>
<li><p>视频样式</p>
</li>
<li>音频样式</li>
</ul>
</li>
<li><p>布局</p>
<ul>
<li>Container</li>
<li>SizeBox</li>
<li>Column，Row</li>
<li>Expand</li>
<li>margin</li>
<li>padding</li>
<li>border</li>
<li>Stack<ul>
<li>position positioned</li>
<li>alignment Align</li>
</ul>
</li>
<li>AspectRatio 宽高比</li>
<li>Wrap 流布局</li>
</ul>
</li>
<li><p>数据</p>
</li>
</ul>
<h3 id="Flutter-组件"><a href="#Flutter-组件" class="headerlink" title="Flutter 组件"></a>Flutter 组件</h3><pre><code>* Theme
    Home:
* Container 组件
* Widget
    * 有状态 Widget
    * 无状态 Widgets
* 文本编辑
* 本地图片
* 本地json
* HTTP GET
* 告警对话框
* Stepper
* Tabs
* Bottom
* Navigation Bar
* Fonts
* Gradient
* Splash Screen
* Listview
* SnackBar
* Layout
* DropDown botton
* 网络图片
* 无限列表
* Google 登录
* 
</code></pre><h3 id="Flutter-布局"><a href="#Flutter-布局" class="headerlink" title="Flutter 布局"></a>Flutter 布局</h3><h3 id="Flutter-路由"><a href="#Flutter-路由" class="headerlink" title="Flutter 路由"></a>Flutter 路由</h3><h3 id="Flutter-对话框"><a href="#Flutter-对话框" class="headerlink" title="Flutter 对话框"></a>Flutter 对话框</h3><ul>
<li>数据请求</li>
<li>数据渲染</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>Dart</tag>
        <tag>android</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart语言开发</title>
    <url>/2020/05/Dart%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>Dart是谷歌开发的计算机编程语言，后来被Ecma (ECMA-408)认定为标准  。它被用于web、服务器、移动应用和物联网等领域的开发。它是宽松开源许可证（修改的BSD证书）下的开源软件。</p>
<p>Dart是面向对象的、类定义的、单继承的语言。它的语法类似C语言，可以转译为JavaScript，支持接口(interfaces)、混入(mixins)、抽象类(abstract classes)、具体化泛型(reified generics)、可选类型(optional typing)和sound type system 。</p>
</blockquote>
<p><a href="https://dart.dev/guides" target="_blank" rel="noopener">Dart docs</a></p>
<h2 id="Install-Dart-for-mac"><a href="#Install-Dart-for-mac" class="headerlink" title="Install Dart for mac"></a>Install Dart for mac</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brew</span> <span class="string">tap dart-lang/dart</span></span><br><span class="line"><span class="attr">brew</span> <span class="string">install dart</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dart</span> <span class="string">--version</span></span><br><span class="line"><span class="comment"># google 源，需要翻墙</span></span><br></pre></td></tr></table></figure>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"># Hello World</span><br><span class="line"># 入口函数</span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">const</span> (常量定义)</span><br><span class="line"><span class="keyword">const</span> 编译时常量</span><br><span class="line"><span class="keyword">final</span> 运行时常量</span><br><span class="line"></span><br><span class="line"># Variables( 强类型，类型推断 <span class="keyword">var</span> )</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Voyager I'</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1977</span>;</span><br><span class="line"><span class="keyword">var</span> antennaDiameter = <span class="number">3.7</span>;</span><br><span class="line"><span class="keyword">var</span> flybyObjects = [<span class="string">'Jupiter'</span>, <span class="string">'Saturn'</span>, <span class="string">'Uranus'</span>, <span class="string">'Neptune'</span>];</span><br><span class="line"><span class="keyword">var</span> image = &#123;</span><br><span class="line">  <span class="string">'tags'</span>: [<span class="string">'saturn'</span>],</span><br><span class="line">  <span class="string">'url'</span>: <span class="string">'//path/to/saturn.jpg'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"># 字符串</span><br><span class="line"><span class="string">',",'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"># 字符串拼接</span><br><span class="line">+,<span class="string">""</span></span><br><span class="line"></span><br><span class="line"># 类型 </span><br><span class="line"><span class="built_in">int</span></span><br><span class="line"><span class="built_in">double</span></span><br><span class="line">string</span><br><span class="line"><span class="built_in">bool</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">is</span> 类型判断</span><br><span class="line">variable <span class="keyword">is</span> <span class="built_in">String</span> # 判断类型</span><br><span class="line"></span><br><span class="line"># 类型定义 <span class="keyword">typedef</span></span><br><span class="line"></span><br><span class="line"># container</span><br><span class="line">list [] # 列表</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">List</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">List</span>&lt;Sting&gt;() #类型限定</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> &#123;&#125; # 集合</span><br><span class="line">map &#123;&#125; # 映射</span><br><span class="line"></span><br><span class="line"># 方法遍历</span><br><span class="line">s1.forEach((v) &#123;</span><br><span class="line">    <span class="built_in">print</span>(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"># 运算符</span><br><span class="line">~/ 取整</span><br><span class="line">?? 为空赋值</span><br><span class="line">toString() </span><br><span class="line">parse() 类型转换</span><br><span class="line"></span><br><span class="line"># Control flow statements</span><br><span class="line"><span class="keyword">if</span></span><br><span class="line"><span class="keyword">for</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">in</span></span><br><span class="line"><span class="keyword">while</span></span><br><span class="line"></span><br><span class="line"># Functions</span><br><span class="line"># 支持匿名函数 fn=()&#123;&#125;</span><br><span class="line"></span><br><span class="line"># 箭头函数（函数体一行）</span><br><span class="line">flybyObjects.where((name) =&gt; name.contains(<span class="string">'turn'</span>)).forEach(<span class="built_in">print</span>);</span><br><span class="line"></span><br><span class="line"># 自运行函数</span><br><span class="line">(()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"># 支持闭包</span><br><span class="line">a 会变成全局变量</span><br><span class="line">func1() &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">int</span> innerfunc() &#123;</span><br><span class="line">    <span class="keyword">return</span> a++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> innerfunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 可选参数 [<span class="built_in">int</span> age] &#123;&#125;</span><br><span class="line"># 默认参数 [<span class="built_in">int</span> age=<span class="number">30</span>]</span><br><span class="line"># 命名参数 age:<span class="number">30</span></span><br><span class="line"># 参数</span><br><span class="line"></span><br><span class="line"># Comments</span><br><span class="line"><span class="comment">//,/**/</span></span><br><span class="line"></span><br><span class="line"># Imports</span><br><span class="line"><span class="comment">// Importing core libraries</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Importing libraries from external packages</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:test/test.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Importing files</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'path/to/my_other_file.dart'</span>;</span><br><span class="line"></span><br><span class="line"># Classes</span><br><span class="line"># <span class="built_in">Object</span> 根类</span><br><span class="line"># 类中获取属性 $name $&#123;<span class="keyword">this</span>.age&#125;</span><br><span class="line"># 命名构造函数 类名.name()&#123;&#125;</span><br><span class="line"># 保护属性 _name</span><br><span class="line"># 动态属性 <span class="keyword">set</span> <span class="keyword">get</span></span><br><span class="line"># 静态属性，静态方法 <span class="keyword">static</span>，对象方法中可以调用静态属性</span><br><span class="line">?   条件运算符 p?.<span class="keyword">new</span>()</span><br><span class="line"><span class="keyword">as</span>  类型转换 (p1 <span class="keyword">as</span> Person)</span><br><span class="line"><span class="keyword">is</span>  类型判断</span><br><span class="line">..  级联操作</span><br><span class="line">p1..name=<span class="string">"value"</span></span><br><span class="line">  ..age=<span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义类</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spacecraft</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">DateTime</span> launchDate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  Spacecraft(<span class="keyword">this</span>.name, <span class="keyword">this</span>.launchDate) &#123;</span><br><span class="line">    <span class="comment">// Initialization code goes here.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 析构</span></span><br><span class="line">  Spacecraft.unlaunched(<span class="built_in">String</span> name) : <span class="keyword">this</span>(name, <span class="keyword">null</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 动态属性</span></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> launchYear =&gt;</span><br><span class="line">      launchDate?.year; <span class="comment">// read-only non-final property</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="keyword">void</span> describe() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Spacecraft: <span class="subst">$name</span>'</span>);</span><br><span class="line">    <span class="keyword">if</span> (launchDate != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="built_in">int</span> years =</span><br><span class="line">          <span class="built_in">DateTime</span>.now().difference(launchDate).inDays ~/</span><br><span class="line">              <span class="number">365</span>;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'Launched: <span class="subst">$launchYear</span> (<span class="subst">$years</span> years ago)'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'Unlaunched'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># use Class</span><br><span class="line"><span class="keyword">var</span> voyager = Spacecraft(<span class="string">'Voyager I'</span>, <span class="built_in">DateTime</span>(<span class="number">1977</span>, <span class="number">9</span>, <span class="number">5</span>));</span><br><span class="line">voyager.describe();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> voyager3 = Spacecraft.unlaunched(<span class="string">'Voyager III'</span>);</span><br><span class="line">voyager3.describe();</span><br><span class="line"></span><br><span class="line"># Inheritance(单继承)</span><br><span class="line"># 抽象类不能直接被实例化</span><br><span class="line"># 继承 <span class="keyword">extends</span> (单继承) <span class="keyword">super</span>() 调用父类，<span class="meta">@override</span> 覆写</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orbiter</span> <span class="keyword">extends</span> <span class="title">Spacecraft</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> altitude;</span><br><span class="line">  Orbiter(<span class="built_in">String</span> name, <span class="built_in">DateTime</span> launchDate, <span class="keyword">this</span>.altitude)</span><br><span class="line">      : <span class="keyword">super</span>(name, launchDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Mixins （代码复用）</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piloted</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> astronauts = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">void</span> describeCrew() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Number of astronauts: <span class="subst">$astronauts</span>'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PilotedCraft</span> <span class="keyword">extends</span> <span class="title">Spacecraft</span> <span class="title">with</span> <span class="title">Piloted</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Interfaces and <span class="keyword">abstract</span> classes(没有接口关键字，实现抽象类)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockSpaceship</span> <span class="keyword">implements</span> <span class="title">Spacecraft</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Describable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> describe();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> describeWithEmphasis() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'========='</span>);</span><br><span class="line">    describe();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'========='</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 泛型 T 传入类型 getData&lt;<span class="built_in">String</span>&gt;(<span class="string">"abc"</span>)</span><br><span class="line"></span><br><span class="line"># Async（异步支持，显示声明）</span><br><span class="line"><span class="keyword">async</span> 定义为异步方法</span><br><span class="line"><span class="keyword">await</span> 等待异步完成</span><br><span class="line"></span><br><span class="line"># Exceptions</span><br><span class="line"><span class="keyword">throw</span></span><br><span class="line"><span class="keyword">try</span>&#123;&#125;<span class="keyword">on</span>&#123;&#125;<span class="keyword">finally</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"># 系统库，第三方库（pub），自定义库</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib/Http.dart'</span>；</span><br><span class="line"></span><br><span class="line">https:<span class="comment">//pub.dev/packages</span></span><br><span class="line">pubspec.yaml</span><br><span class="line">pub <span class="keyword">get</span></span><br><span class="line"></span><br><span class="line"># 包重命名</span><br><span class="line"><span class="keyword">import</span> <span class="string">"lib/http.dart"</span> <span class="keyword">as</span> httpv1</span><br><span class="line"></span><br><span class="line"># 包的过滤</span><br><span class="line"><span class="keyword">import</span> <span class="string">"lib/http.dart"</span> <span class="keyword">show</span> httpv1;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"lib/http.dart"</span> <span class="keyword">hide</span> httpv1;</span><br><span class="line"></span><br><span class="line"># 库分片 <span class="keyword">part</span></span><br><span class="line"># 库到处 <span class="keyword">export</span></span><br><span class="line"># 库延迟加载 deffered</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>golang-mod使用</title>
    <url>/2020/05/golang-mod%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Goloang"><a href="#Goloang" class="headerlink" title="Goloang"></a>Goloang</h2><blockquote>
<p><a href="https://golang.org/" target="_blank" rel="noopener"> Golang </a></p>
<p><a href="https://www.runoob.com/go/go-tutorial.html" target="_blank" rel="noopener"> 菜鸟教程 golang  </a></p>
</blockquote>
<h2 id="go-mod-使用"><a href="#go-mod-使用" class="headerlink" title="go mod 使用"></a>go mod 使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go.mod 提供了module, require、replace和exclude 四个命令</span><br><span class="line">module 语句指定包的名字（路径）</span><br><span class="line">require 语句指定的依赖项模块</span><br><span class="line">replace 语句可以替换依赖项模块</span><br><span class="line">exclude 语句可以忽略依赖项模块</span><br><span class="line"></span><br><span class="line">go list -m -u all 来检查可以升级的package</span><br><span class="line">go get -u need-upgrade-package 升级后会将新的依赖版本更新到</span><br><span class="line">go get package@version 将会升级到指定的版本号version</span><br><span class="line">go get -u 升级所有依赖</span><br></pre></td></tr></table></figure>
<h3 id="创建一个-go-mod-项目"><a href="#创建一个-go-mod-项目" class="headerlink" title="创建一个 go mod 项目"></a>创建一个 go mod 项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">mkdir project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"/Users/alert/go"</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=<span class="string">"/usr/local/go"</span></span><br><span class="line"><span class="built_in">export</span> GO111MODULE=on</span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">go env GOPATH</span><br><span class="line">go mod init</span><br><span class="line">touch main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译运行，不生成可执行文件</span></span><br><span class="line">go run main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目编译</span></span><br><span class="line">go build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译后安装到 bin 目录</span></span><br><span class="line">go install</span><br></pre></td></tr></table></figure>
<h3 id="现有项目创建依赖"><a href="#现有项目创建依赖" class="headerlink" title="现有项目创建依赖"></a>现有项目创建依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> goapi</span><br><span class="line">go mod init <span class="comment"># 初始化 go mod</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"/Users/alert/go"</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=<span class="string">"/usr/local/go"</span></span><br><span class="line"><span class="built_in">export</span> GO111MODULE=on</span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.io</span><br><span class="line"></span><br><span class="line">go mod why</span><br><span class="line">go mod tidy  <span class="comment"># 寻找当前项目依赖包</span></span><br><span class="line">go mod download <span class="comment"># 下载包</span></span><br><span class="line">go build    <span class="comment"># 编译</span></span><br><span class="line">./main</span><br><span class="line">or</span><br><span class="line">go run main.go <span class="comment"># 运行</span></span><br></pre></td></tr></table></figure>
<h3 id="go-mod-指令"><a href="#go-mod-指令" class="headerlink" title="go mod 指令"></a>go mod 指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">download    下载模块到本地缓存</span><br><span class="line">edit        编辑 go.mod</span><br><span class="line">graph       输出依赖图</span><br><span class="line">init        初始化当前项目，生成 go.mod 依赖管理文件</span><br><span class="line">tidy        添加缺少内容，并删除未使用的模块</span><br><span class="line">vendor      把相关依赖 保存vendor目录</span><br><span class="line">verify      verify dependencies have expected content</span><br><span class="line">why         添加需要的模块</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes安装</title>
    <url>/2020/05/Kubernetes%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://kubernetes.io/zh/docs/home/" target="_blank" rel="noopener"> Kubernetes 官网 </a></li>
<li><a href="/2020/05/Kubernetes/" title="kubernetes入门">kubernetes入门</a></li>
<li><a href="/2020/05/Kubernetes%E5%AE%89%E8%A3%85/" title="kubernetes安装">kubernetes安装</a></li>
<li><a href="/2020/05/Kubernetes%E7%AE%A1%E7%90%86/" title="Kubernetes管理">Kubernetes管理</a></li>
<li><a href="https://docs.traefik.io/" target="_blank" rel="noopener">traefix</a></li>
</ul>
<h2 id="安装注意事项"><a href="#安装注意事项" class="headerlink" title="安装注意事项"></a>安装注意事项</h2><p>把 iptables 工具切换到“旧版”模式来避免<br>update-alternatives —set iptables /usr/sbin/iptables-legacy</p>
<p>安装 runtime<br>运行时    域套接字<br>Docker    /var/run/docker.sock<br>containerd    /run/containerd/containerd.sock<br>CRI-O    /var/run/crio/crio.sock</p>
<p>安装 kubeadm、kubelet 和 kubectl<br>kubeadm：用来初始化集群的指令。<br>kubelet：在集群中的每个节点上用来启动 pod 和容器等。<br>kubectl：用来与集群通信的命令行工具。</p>
<h2 id="Kubernetes-Architecture"><a href="#Kubernetes-Architecture" class="headerlink" title="Kubernetes Architecture"></a>Kubernetes Architecture</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">api-server</span></span><br><span class="line"><span class="string">scheduler</span></span><br><span class="line"><span class="string">kebelet</span>       <span class="string">kubelet</span>   <span class="string">kube-proxy</span></span><br><span class="line"><span class="string">---Master---</span> <span class="string">--------Work</span> <span class="string">node-------</span></span><br><span class="line"><span class="string">---etcd---</span></span><br><span class="line"><span class="string">***********</span> <span class="string">DOCKER</span> <span class="string">Engine</span> <span class="string">***********</span></span><br><span class="line"><span class="string">Host</span> <span class="string">OS</span></span><br><span class="line"><span class="string">Infrastructure</span></span><br></pre></td></tr></table></figure>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>提供5台 linux 系统(Centos 7) 主机</p>
<p>主机IP如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">master1:192.168.0.55</span></span><br><span class="line"><span class="string">master2:192.168.0.56</span></span><br><span class="line"><span class="string">master3:192.168.0.57</span></span><br><span class="line"></span><br><span class="line"><span class="string">work1:192.168.0.59</span></span><br><span class="line"><span class="string">work2:192.168.0.60</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果同时检测到 docker 和 containerd，则优先选择 docker。</p>
<p>在集群中,所有计算机之间的完全网络连接。</p>
<p>每台设备对系统中所有节点的 SSH 访问。</p>
<p>在所有机器上安装 kubeadm 和 kubelet。</p>
</blockquote>
<h2 id="安装前基本配置"><a href="#安装前基本配置" class="headerlink" title="安装前基本配置"></a>安装前基本配置</h2><h3 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">ssh</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.55</span> <span class="string">" hostnamectl set-hostname k8s-1"</span></span><br><span class="line"><span class="string">ssh</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.56</span> <span class="string">" hostnamectl set-hostname k8s-2"</span></span><br><span class="line"><span class="string">ssh</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.57</span> <span class="string">" hostnamectl set-hostname k8s-3"</span></span><br></pre></td></tr></table></figure>
<h3 id="设置主机名解析"><a href="#设置主机名解析" class="headerlink" title="设置主机名解析"></a>设置主机名解析</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"192.168.0.55 k8s-1</span></span><br><span class="line"><span class="string">192.168.0.56 k8s-2</span></span><br><span class="line"><span class="string">192.168.0.57 k8s-3"</span>&gt;&gt;/etc/hosts</span><br></pre></td></tr></table></figure>
<h3 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">ssh-keygen</span></span><br><span class="line"><span class="string">ssh-copy-id</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.55</span></span><br><span class="line"><span class="string">ssh-copy-id</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.56</span></span><br><span class="line"><span class="string">ssh-copy-id</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.57</span></span><br><span class="line"></span><br><span class="line"><span class="string">SSHVerify</span></span><br><span class="line"><span class="string">for</span> <span class="string">x</span> <span class="string">in</span> <span class="string">`grep</span> <span class="string">-o</span> <span class="string">k8s-.*</span> <span class="string">/etc/hosts`;do</span> <span class="string">echo</span> <span class="string">$x;</span> <span class="string">ssh</span> <span class="string">$x</span> <span class="string">"free"</span><span class="string">;done</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>for x in <code>grep -o k8s-.* /etc/hosts</code>;do echo $x; ssh-copy-id $x ;done</p>
</blockquote>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure>
<h3 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">"s/^SELINUX=enforcing/SELINUX=disabled/g"</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>
<h3 id="关闭-swap"><a href="#关闭-swap" class="headerlink" title="关闭 swap"></a>关闭 swap</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapoff -a;swapoff -a sed -i <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span><br></pre></td></tr></table></figure>
<h2 id="NTP-配置"><a href="#NTP-配置" class="headerlink" title="NTP 配置"></a>NTP 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install chrony -y</span><br><span class="line"><span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line">sed -i <span class="string">"/^server/d"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp1.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp2.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf </span><br><span class="line">sed -i <span class="string">"/#allow/s/#//"</span> /etc/chrony.conf</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd.service;systemctl start chronyd.service</span><br></pre></td></tr></table></figure>
<h3 id="配置国内yum-源"><a href="#配置国内yum-源" class="headerlink" title="配置国内yum 源"></a>配置国内yum 源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget;</span><br><span class="line">rm  /etc/yum.repos.d/* -rf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Aliyun 源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置国内Kubernetes源</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置 docker 源</span></span><br><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更新缓存</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure>
<h2 id="Docker-install"><a href="#Docker-install" class="headerlink" title="Docker install"></a>Docker install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Docker CE</span></span><br><span class="line"><span class="comment"># 安装所需包</span></span><br><span class="line">yum install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增 Docker 仓库。</span></span><br><span class="line"><span class="comment">#yum-config-manager --add-repo \</span></span><br><span class="line"><span class="comment"># https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Docker CE.</span></span><br><span class="line">yum update &amp;&amp; yum install docker-ce-18.06.2.ce</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建 /etc/docker 目录。</span></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 daemon。</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="配置-docker-镜像加速器"><a href="#配置-docker-镜像加速器" class="headerlink" title="配置 docker 镜像加速器"></a>配置 docker 镜像加速器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://pe80e41t.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="安装-kubeadm、kubelet-和-kubectl"><a href="#安装-kubeadm、kubelet-和-kubectl" class="headerlink" title="安装 kubeadm、kubelet 和 kubectl"></a>安装 kubeadm、kubelet 和 kubectl</h2><blockquote>
<p>kubeadm：用来初始化集群的指令。</p>
<p>kubelet：在集群中的每个节点上用来启动 pod 和容器等。</p>
<p>kubectl：用来与集群通信的命令行工具。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line"><span class="comment"># yum install -y kubelet-&lt;version&gt; kubectl-&lt;version&gt; kubeadm-&lt;version&gt;</span></span><br><span class="line"><span class="comment"># example：yum install -y kubelet-1.17.2 kubeadm-1.17.2 kubectl-1.17.2 --disableexcludes=kubernetes</span></span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure>
<h2 id="创建单主集群"><a href="#创建单主集群" class="headerlink" title="创建单主集群"></a>创建单主集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">服务重启</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet docker</span><br><span class="line">systemctl restart  kubelet docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装出错，重置了再装</span></span><br><span class="line"><span class="comment"># kubeadm reset</span></span><br><span class="line"></span><br><span class="line">KUBECONFIG=<span class="string">''</span></span><br><span class="line"></span><br><span class="line">kubeadm version</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubernetest 提供分阶段初始化： https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/</span></span><br><span class="line">kubeadm init \</span><br><span class="line">--kubernetes-version=$(kubectl version |grep -P -o <span class="string">'GitVersion:"(.*?)"'</span>|grep -oP <span class="string">"[\d|\.]&#123;1,6&#125;"</span>)  \</span><br><span class="line">--apiserver-advertise-address=xxx.xxx.xxx.xxx \</span><br><span class="line">--control-plane-endpoint <span class="string">"xxx.xxx.xxx.xxx:6443"</span> \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--service-cidr=10.10.0.0/16 --pod-network-cidr=10.20.0.0/16 \</span><br><span class="line">--upload-certs</span><br><span class="line"></span><br><span class="line"><span class="comment"># --upload-certs 上传证书</span></span><br><span class="line"><span class="comment"># --control-plane-endpoint "192.168.0.55:6443"</span></span><br><span class="line"><span class="comment"># --image-repository registry.aliyuncs.com/google_containers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要等几分钟才能创建好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录 token </span></span><br><span class="line"><span class="comment"># controller 节点加入</span></span><br><span class="line">kubeadm join 192.168.0.55:6443 --token 72jo7w.5yicrzyn8edcvpu0 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1e67abc92cf649e18941e24c2c18835f7b09d127fde632f3982d41e582346e65 \</span><br><span class="line">    --control-plane --certificate-key 712fcf5a2ffd9a0cd8bee3518475dca3ca3168fb49ee0c937686537141dff2ff</span><br><span class="line"></span><br><span class="line"><span class="comment"># worker 节点加入</span></span><br><span class="line">kubeadm join 192.168.0.55:6443 --token 72jo7w.5yicrzyn8edcvpu0 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1e67abc92cf649e18941e24c2c18835f7b09d127fde632f3982d41e582346e65</span><br></pre></td></tr></table></figure>
<h3 id="安装-Pod-网络插件"><a href="#安装-Pod-网络插件" class="headerlink" title="安装 Pod 网络插件"></a>安装 Pod 网络插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">由于地址总变，把地址写死</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"206.189.89.118 docs.projectcalico.org"</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.11/manifests/calico.yaml</span><br></pre></td></tr></table></figure>
<h3 id="操作集群"><a href="#操作集群" class="headerlink" title="操作集群"></a>操作集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubernetes 集群重置</span></span><br><span class="line"><span class="comment"># kubeadm reset</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"><span class="comment"># 获取node</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="comment"># 获取命名空间</span></span><br><span class="line">kubectl get namespace</span><br><span class="line"><span class="comment"># 获取pod</span></span><br><span class="line">kubectl get pod --all-namespaces</span><br><span class="line">kubectl get pod -A -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 container</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 获取本地镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>
<h2 id="配置多主集群"><a href="#配置多主集群" class="headerlink" title="配置多主集群"></a>配置多主集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新生成token</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command|sed <span class="string">'s/$&#123;LOCAL_IP&#125;/$&#123;VIP&#125;/g'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 证书有效期延长为一年,所有的节点都执行一次</span></span><br><span class="line">kubeadm alpha certs renew all </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用master token 加入master集群</span></span><br><span class="line">kubeadm join -h <span class="comment">#使用命令帮助</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在其他主节点执行</span></span><br><span class="line">kubeadm join 192.168.0.55:6443 --token 72jo7w.5yicrzyn8edcvpu0 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1e67abc92cf649e18941e24c2c18835f7b09d127fde632f3982d41e582346e65 \</span><br><span class="line">    --control-plane --certificate-key 712fcf5a2ffd9a0cd8bee3518475dca3ca3168fb49ee0c937686537141dff2ff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使master 同时做 work 节点</span></span><br><span class="line"><span class="comment"># kubectl taint nodes --all node-role.kubernetes.io/master-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line">kubectl get pods -o wide -A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出集群</span></span><br><span class="line"><span class="comment"># 在 (master1）执行删除</span></span><br><span class="line">kubectl drain k8s-2 （必须先放空，再删除）</span><br><span class="line">kubectl delete node k8s-2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 master2 重置 kubernetes</span></span><br><span class="line">kubeadm reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 master 上申请join token</span></span><br><span class="line">kubeadm token list</span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br></pre></td></tr></table></figure>
<h3 id="安装-Dashboard"><a href="#安装-Dashboard" class="headerlink" title="安装 Dashboard"></a>安装 Dashboard</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/kubernetes/dashboard</span></span><br><span class="line"></span><br><span class="line">kubectl apply -f \</span><br><span class="line">https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 service 配置 把 type: ClusterIP 改为 type: NodePort</span></span><br><span class="line">kubectl --namespace=kubernetes-dashboard edit service kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 service</span></span><br><span class="line">kubectl -n kubernetes-dashboard get service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">cat &lt;&lt;EOF &gt;dashboard-adminuser.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">kubectl apply -f dashboard-adminuser.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create ClusterRole</span></span><br><span class="line">cat &lt;&lt;EOF &gt;dashboard-adminrole.yaml</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">kubectl apply -f dashboard-adminrole.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户</span></span><br><span class="line">kubectl -n kubernetes-dashboard get secret | grep admin-user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 user 的token</span></span><br><span class="line">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 token 登录了</span></span><br></pre></td></tr></table></figure>
<h2 id="在work-node-上执行脚本安装"><a href="#在work-node-上执行脚本安装" class="headerlink" title="在work node 上执行脚本安装"></a>在work node 上执行脚本安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除没用的镜像</span></span><br><span class="line">docker image ls|awk <span class="string">'&#123;print $3&#125;'</span>|xargs docker rmi -f</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">'GEOF'</span> &gt;install.sh</span><br><span class="line">kubeadm reset  -f</span><br><span class="line">docker image ls|awk <span class="string">'&#123;print $3&#125;'</span>|xargs docker rmi -f</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">iptables -L -n</span><br><span class="line"></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span><br><span class="line"></span><br><span class="line">yum install chrony -y</span><br><span class="line"> </span><br><span class="line"><span class="comment">#vim /etc/chrony.conf</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">"/^server/d"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp1.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf</span><br><span class="line">sed -i <span class="string">"2a server ntp2.cloud.aliyuncs.com iburst"</span> /etc/chrony.conf </span><br><span class="line">sed -i <span class="string">"/#allow/s/#//"</span> /etc/chrony.conf</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd.service;</span><br><span class="line">systemctl start chronyd.service</span><br><span class="line"></span><br><span class="line">yum install -y wget curl;</span><br><span class="line">rm  /etc/yum.repos.d/* -rf</span><br><span class="line">centos=$(cat /etc/redhat-release |grep -oP <span class="string">"\d"</span>|sed -n <span class="string">"1p"</span>)</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-<span class="variable">$&#123;centos&#125;</span>.repo</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el<span class="variable">$&#123;centos&#125;</span>-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">yum -y update &amp;&amp; yum install -y \</span><br><span class="line">  containerd.io-1.2.10 \</span><br><span class="line">  docker-ce-19.03.4 \</span><br><span class="line">  docker-ce-cli-19.03.4</span><br><span class="line"></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://pe80e41t.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># "exec-opts": ["native.cgroupdriver=systemd"]</span></span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># Restart Docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">'s/^SELINUX=enforcing$/SELINUX=permissive/'</span> /etc/selinux/config</span><br><span class="line">yum remove -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line">yum install -y kubelet-1.17.2 kubeadm-1.17.2 kubectl-1.17.2 --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet docker</span><br><span class="line">GEOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">sh -x install.sh</span><br></pre></td></tr></table></figure>
<h3 id="Work-ndoe-加入集群"><a href="#Work-ndoe-加入集群" class="headerlink" title="Work ndoe 加入集群"></a>Work ndoe 加入集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.0.55:6443 --token iq64nb.dq81b1vxczkkrx8i \</span><br><span class="line">--discovery-token-ca-cert-hash \</span><br><span class="line">sha256:1e67abc92cf649e18941e24c2c18835f7b09d127fde632f3982d41e582346e65</span><br></pre></td></tr></table></figure>
<h2 id="创建-pod-验证"><a href="#创建-pod-验证" class="headerlink" title="创建 pod 验证"></a>创建 pod 验证</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 namespace （相当于一个项目）</span></span><br><span class="line">kubectl create ns <span class="built_in">test</span></span><br><span class="line">kubectl delete namespace <span class="built_in">test</span> <span class="comment"># 会把正在运行的 pod 删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 busybox pod</span></span><br><span class="line">kubectl apply  -f busybox.yaml</span><br><span class="line">kubectl delete -f busybox.yaml</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;busybox.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-busybox</span><br><span class="line">  namespace: <span class="built_in">test</span> <span class="comment"># 不指定namespace 会创建到 default 命名空间</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: busybox</span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">"/bin/sh"</span>]</span><br><span class="line">    args: [<span class="string">"-c"</span>, <span class="string">"while true; do echo hello; sleep 10;done"</span>]</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 pod 使用模板文件</span></span><br><span class="line">kubectl apply  -f nginx.yaml</span><br><span class="line">kubectl delete -f nginx.yaml</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt;nginx.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: static-web</span><br><span class="line">  labels:</span><br><span class="line">    role: myweb</span><br><span class="line">  namespace: <span class="built_in">test</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: web</span><br><span class="line">      image: nginx</span><br><span class="line">      ports:</span><br><span class="line">        - name: web</span><br><span class="line">          containerPort: 80</span><br><span class="line">          protocol: TCP</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 deployment 模板</span></span><br><span class="line">kubectl apply -f nginx-deployment.yaml</span><br><span class="line">kubectl delete -f nginx-deployment.yaml</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get deployments -A</span><br><span class="line">kubectl describe deployment nginx-deployment -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span> &gt; nginx-deployment.yaml</span><br><span class="line">apiVersion: apps/v1 <span class="comment"># for versions before 1.9.0 use apps/v1beta2</span></span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  namespace: <span class="built_in">test</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  replicas: 2 <span class="comment"># 运行两个pod 实例</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: <span class="comment"># 标签</span></span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.14.2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 service</span></span><br><span class="line">kubectl expose deployment/nginx-deployment -n <span class="built_in">test</span></span><br><span class="line">kubectl expose service nginx --port=9090 --target-port=9090 --name=nginx</span><br><span class="line">kubectl expose deployment/auth-deployment --target-port=9090 --port=9090 --<span class="built_in">type</span>=NodePort -n youlv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get svc -A</span><br><span class="line">curl 10.10.85.241</span><br><span class="line">kubectl describe svc nginx-deployment -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 svc 模式</span></span><br><span class="line">kubectl get svc nginx-deployment -n <span class="built_in">test</span> -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># ClusterIP 改 NodePort or LoadBalancer(有外网ip的话)</span></span><br><span class="line">kubectl get svc nginx-deployment -A </span><br><span class="line"><span class="comment"># curl 10.10.85.241:30389</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内网环境</span></span><br><span class="line">client -&gt; 路由器端口映射 -&gt; 内网集群 -&gt; service -&gt; pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">kubectl apply -f nginx-svc.yaml</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">'EOF'</span>&gt;nginx-svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: my-nginx</span><br><span class="line">  labels:</span><br><span class="line">    run: my-nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有pod</span></span><br><span class="line">kubectl get pods -A -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 test 项目</span></span><br><span class="line">kubectl get pods -n <span class="built_in">test</span> -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 pod</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti <span class="variable">$POD_NAME</span> bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 test 所有pods</span></span><br><span class="line">kubectl describe pods -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过标签产看</span></span><br><span class="line">kubectl get pods -l app=nginx -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 pod 详情</span></span><br><span class="line">kubectl describe pod nginx-deployment-6b474476c4-q4p68 -n <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩缩容</span></span><br><span class="line">kubectl scale --replicas=3 -f deployment-nginx.yaml</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">kubectl scale deployment nginx-deployment --replicas=1 -n <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p><a href="https://kubernetes.io/zh/docs/tasks/debug-application-cluster/troubleshooting/" target="_blank" rel="noopener"> kubernetes 排错</a></p>
<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本来 master 是高可用3台，我把其中的两台删除打算使用单点。</span></span><br><span class="line">kubectl delete node k8s-2</span><br><span class="line">kubectl delete node k8s-3</span><br><span class="line"><span class="comment"># 把其他两台删掉，然后直接把那两台机器停掉后。api-server 挂了，起不来了</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="comment"># 出现</span></span><br><span class="line">The connection to the server x.x.x.x:6443 was refused – did you specify the right host or port?</span><br><span class="line"><span class="comment"># 好尴尬，好像是etcd数据没同步过来，被直接删了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排错</span></span><br><span class="line"><span class="comment"># 看是否环境变量的问题</span></span><br><span class="line">env | grep -i kube</span><br><span class="line">KUBECONFIG=/root/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看 docker 状态是否正常</span></span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 kubelet 是否正常</span></span><br><span class="line">systemctl status kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 api-server 是否启动</span></span><br><span class="line">netstat -pnlt | grep 6443</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志的报错</span></span><br><span class="line">journalctl -xeu kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新安装(备份，恢复一定要加上)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Container Tech</category>
      </categories>
      <tags>
        <tag>container</tag>
        <tag>集群</tag>
      </tags>
  </entry>
</search>
